
servo_joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000296  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a3  00000000  00000000  00000368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000779  00000000  00000000  00000c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004b3  00000000  00000000  00001384  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00001838  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000042a  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  00001cf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 bd 00 	call	0x17a	; 0x17a <main>
  88:	0c 94 1f 01 	jmp	0x23e	; 0x23e <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialize_adc>:
#include "USART.h"
#define BAUD_RATE 9600
#define BAUD_PRESCALER (((F_CPU / (BAUD_RATE * 16UL))) - 1)
char str_print[20];
void initialize_adc(){
	cli();
  90:	f8 94       	cli
	//Power Reduction ADC on PRR bit 0
	PRR &= ~(1<<PRADC);
  92:	e4 e6       	ldi	r30, 0x64	; 100
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	80 83       	st	Z, r24
	//Reference Voltage to AVcc with external capacitor at AREF pin at AMUX (01)
	ADMUX |=(1<<REFS0);
  9c:	ac e7       	ldi	r26, 0x7C	; 124
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	8c 91       	ld	r24, X
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1);
  a6:	8c 91       	ld	r24, X
  a8:	8f 77       	andi	r24, 0x7F	; 127
  aa:	8c 93       	st	X, r24
	//ADC frequency pre-scaler, target between 50-200 KHz, pre-scaler of 128
	ADCSRA |=(1<<ADPS2);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADPS1);
  b6:	80 81       	ld	r24, Z
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADPS0);
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	//set up Channel to read, use channel 0, ADMUX reg
	ADMUX &= ~(1<<MUX0);
  c2:	8c 91       	ld	r24, X
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX1);
  c8:	8c 91       	ld	r24, X
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX2);
  ce:	8c 91       	ld	r24, X
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX3);
  d4:	8c 91       	ld	r24, X
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	8c 93       	st	X, r24
	//set up trigger mode, auto trigger bit5 ADATE at ADCSRA
	ADCSRA|= (1<<ADATE);
  da:	80 81       	ld	r24, Z
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	80 83       	st	Z, r24
	//set up free running 000 at ADCSRB
	ADCSRB &= ~(1<<ADTS0);
  e0:	ab e7       	ldi	r26, 0x7B	; 123
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	8c 91       	ld	r24, X
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<ADTS0);
  ea:	8c 91       	ld	r24, X
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<ADTS0);
  f0:	8c 91       	ld	r24, X
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	8c 93       	st	X, r24
	//disable input buffer, ADC0D at DIDR0
	DIDR0 |= (1<<ADC0D);
  f6:	ae e7       	ldi	r26, 0x7E	; 126
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
	//Enable ADC, bit 7 ADEN:ADC Enable at ADCSRA
	ADCSRA |= (1<<ADEN);
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
	//Start Conversion, Bit 6 ADSC:ADC Start Conversion at ADCSRA
	ADCSRA |= (1<<ADSC);
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	sei();
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <initialize_pwm>:
}
void initialize_pwm (){
	cli();//disable all interrupts
 110:	f8 94       	cli
	DDRB |= (1<<DDB1)|(1<<DDB2);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
 112:	84 b1       	in	r24, 0x04	; 4
 114:	86 60       	ori	r24, 0x06	; 6
 116:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0;		/* Set timer1 count zero */
 118:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 11c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	ICR1 = 4999;		/* Set TOP count for timer1 in ICR1 register */
 120:	87 e8       	ldi	r24, 0x87	; 135
 122:	93 e1       	ldi	r25, 0x13	; 19
 124:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
 128:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	//TCCR1A = (1<<WGM11)|(1<<COM1A1);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	//clear OC1A/OC1B on compare match
	TCCR1A |= (1<<COM1A1);
 12c:	e0 e8       	ldi	r30, 0x80	; 128
 12e:	f0 e0       	ldi	r31, 0x00	; 0
 130:	80 81       	ld	r24, Z
 132:	80 68       	ori	r24, 0x80	; 128
 134:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);
 136:	80 81       	ld	r24, Z
 138:	8f 7b       	andi	r24, 0xBF	; 191
 13a:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1B1);
 13c:	80 81       	ld	r24, Z
 13e:	80 62       	ori	r24, 0x20	; 32
 140:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
 142:	80 81       	ld	r24, Z
 144:	8f 7e       	andi	r24, 0xEF	; 239
 146:	80 83       	st	Z, r24
	//Fast PWM Mode
	TCCR1A &= ~(1<<WGM10);
 148:	80 81       	ld	r24, Z
 14a:	8e 7f       	andi	r24, 0xFE	; 254
 14c:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11);
 14e:	80 81       	ld	r24, Z
 150:	82 60       	ori	r24, 0x02	; 2
 152:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
 154:	e1 e8       	ldi	r30, 0x81	; 129
 156:	f0 e0       	ldi	r31, 0x00	; 0
 158:	80 81       	ld	r24, Z
 15a:	88 60       	ori	r24, 0x08	; 8
 15c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13);
 15e:	80 81       	ld	r24, Z
 160:	80 61       	ori	r24, 0x10	; 16
 162:	80 83       	st	Z, r24
	//Configure timer pre-scaler (011) /64
	TCCR1B |= (1<<CS10);
 164:	80 81       	ld	r24, Z
 166:	81 60       	ori	r24, 0x01	; 1
 168:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
 16a:	80 81       	ld	r24, Z
 16c:	82 60       	ori	r24, 0x02	; 2
 16e:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
 170:	80 81       	ld	r24, Z
 172:	8b 7f       	andi	r24, 0xFB	; 251
 174:	80 83       	st	Z, r24
//	OCR1A=250;
	sei(); //Enable global interrupts
 176:	78 94       	sei
 178:	08 95       	ret

0000017a <main>:
	
}
int main(void)
{
	USART_int(BAUD_PRESCALER);
 17a:	87 e6       	ldi	r24, 0x67	; 103
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	0e 94 14 01 	call	0x228	; 0x228 <USART_int>
	initialize_pwm();
 182:	0e 94 88 00 	call	0x110	; 0x110 <initialize_pwm>
	initialize_adc();
 186:	0e 94 48 00 	call	0x90	; 0x90 <initialize_adc>
	while (1)
	{
		if(OCR1A>125&&OCR1A<625){
 18a:	e8 e8       	ldi	r30, 0x88	; 136
 18c:	f0 e0       	ldi	r31, 0x00	; 0
		}
		else if (OCR1A<=125){
			OCR1A=126;
		}
		else if (OCR1A>=625){
			OCR1A=624;
 18e:	40 e7       	ldi	r20, 0x70	; 112
 190:	52 e0       	ldi	r21, 0x02	; 2
				OCR1A++;

			}
		}
		else if (OCR1A<=125){
			OCR1A=126;
 192:	2e e7       	ldi	r18, 0x7E	; 126
 194:	30 e0       	ldi	r19, 0x00	; 0
	initialize_pwm();
	initialize_adc();
	while (1)
	{
		if(OCR1A>125&&OCR1A<625){
			if ((ADC*5/1024)==0){
 196:	a8 e7       	ldi	r26, 0x78	; 120
 198:	b0 e0       	ldi	r27, 0x00	; 0
	USART_int(BAUD_PRESCALER);
	initialize_pwm();
	initialize_adc();
	while (1)
	{
		if(OCR1A>125&&OCR1A<625){
 19a:	80 81       	ld	r24, Z
 19c:	91 81       	ldd	r25, Z+1	; 0x01
 19e:	8e 37       	cpi	r24, 0x7E	; 126
 1a0:	91 05       	cpc	r25, r1
 1a2:	60 f1       	brcs	.+88     	; 0x1fc <main+0x82>
 1a4:	80 81       	ld	r24, Z
 1a6:	91 81       	ldd	r25, Z+1	; 0x01
 1a8:	81 37       	cpi	r24, 0x71	; 113
 1aa:	92 40       	sbci	r25, 0x02	; 2
 1ac:	38 f5       	brcc	.+78     	; 0x1fc <main+0x82>
			if ((ADC*5/1024)==0){
 1ae:	8d 91       	ld	r24, X+
 1b0:	9c 91       	ld	r25, X
 1b2:	11 97       	sbiw	r26, 0x01	; 1
 1b4:	bc 01       	movw	r22, r24
 1b6:	66 0f       	add	r22, r22
 1b8:	77 1f       	adc	r23, r23
 1ba:	66 0f       	add	r22, r22
 1bc:	77 1f       	adc	r23, r23
 1be:	86 0f       	add	r24, r22
 1c0:	97 1f       	adc	r25, r23
 1c2:	81 15       	cp	r24, r1
 1c4:	94 40       	sbci	r25, 0x04	; 4
 1c6:	30 f4       	brcc	.+12     	; 0x1d4 <main+0x5a>
				OCR1A--;
 1c8:	80 81       	ld	r24, Z
 1ca:	91 81       	ldd	r25, Z+1	; 0x01
 1cc:	01 97       	sbiw	r24, 0x01	; 1
 1ce:	91 83       	std	Z+1, r25	; 0x01
 1d0:	80 83       	st	Z, r24
 1d2:	23 c0       	rjmp	.+70     	; 0x21a <main+0xa0>

			}
			else if ((ADC*5/1024)==4){
 1d4:	8d 91       	ld	r24, X+
 1d6:	9c 91       	ld	r25, X
 1d8:	11 97       	sbiw	r26, 0x01	; 1
 1da:	bc 01       	movw	r22, r24
 1dc:	66 0f       	add	r22, r22
 1de:	77 1f       	adc	r23, r23
 1e0:	66 0f       	add	r22, r22
 1e2:	77 1f       	adc	r23, r23
 1e4:	86 0f       	add	r24, r22
 1e6:	97 1f       	adc	r25, r23
 1e8:	90 51       	subi	r25, 0x10	; 16
 1ea:	81 15       	cp	r24, r1
 1ec:	94 40       	sbci	r25, 0x04	; 4
 1ee:	a8 f4       	brcc	.+42     	; 0x21a <main+0xa0>
				OCR1A++;
 1f0:	80 81       	ld	r24, Z
 1f2:	91 81       	ldd	r25, Z+1	; 0x01
 1f4:	01 96       	adiw	r24, 0x01	; 1
 1f6:	91 83       	std	Z+1, r25	; 0x01
 1f8:	80 83       	st	Z, r24
 1fa:	0f c0       	rjmp	.+30     	; 0x21a <main+0xa0>

			}
		}
		else if (OCR1A<=125){
 1fc:	80 81       	ld	r24, Z
 1fe:	91 81       	ldd	r25, Z+1	; 0x01
 200:	8e 37       	cpi	r24, 0x7E	; 126
 202:	91 05       	cpc	r25, r1
 204:	18 f4       	brcc	.+6      	; 0x20c <main+0x92>
			OCR1A=126;
 206:	31 83       	std	Z+1, r19	; 0x01
 208:	20 83       	st	Z, r18
 20a:	07 c0       	rjmp	.+14     	; 0x21a <main+0xa0>
		}
		else if (OCR1A>=625){
 20c:	80 81       	ld	r24, Z
 20e:	91 81       	ldd	r25, Z+1	; 0x01
 210:	81 37       	cpi	r24, 0x71	; 113
 212:	92 40       	sbci	r25, 0x02	; 2
 214:	10 f0       	brcs	.+4      	; 0x21a <main+0xa0>
			OCR1A=624;
 216:	51 83       	std	Z+1, r21	; 0x01
 218:	40 83       	st	Z, r20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f e1       	ldi	r24, 0x1F	; 31
 21c:	9e e4       	ldi	r25, 0x4E	; 78
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <main+0xa4>
 222:	00 c0       	rjmp	.+0      	; 0x224 <main+0xaa>
 224:	00 00       	nop
 226:	b9 cf       	rjmp	.-142    	; 0x19a <main+0x20>

00000228 <USART_int>:
 */ 
#include "USART.h"
#include <avr/io.h>
void USART_int(int BAUD_PRESCALER){
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
 228:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)BAUD_PRESCALER;
 22c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 230:	88 e1       	ldi	r24, 0x18	; 24
 232:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 236:	8e e0       	ldi	r24, 0x0E	; 14
 238:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
