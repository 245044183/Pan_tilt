
servo_joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000246  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000246  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000278  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a3  00000000  00000000  00000318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000779  00000000  00000000  00000bbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000495  00000000  00000000  00001334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  000017cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000433  00000000  00000000  00001860  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000a7  00000000  00000000  00001c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001d3a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
  88:	0c 94 f7 00 	jmp	0x1ee	; 0x1ee <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialize_adc>:
#include "USART.h"
#define BAUD_RATE 9600
#define BAUD_PRESCALER (((F_CPU / (BAUD_RATE * 16UL))) - 1)
char str_print[20];
void initialize_adc(){
	cli();
  90:	f8 94       	cli
	//Power Reduction ADC on PRR bit 0
	PRR &= ~(1<<PRADC);
  92:	e4 e6       	ldi	r30, 0x64	; 100
  94:	f0 e0       	ldi	r31, 0x00	; 0
  96:	80 81       	ld	r24, Z
  98:	8e 7f       	andi	r24, 0xFE	; 254
  9a:	80 83       	st	Z, r24
	//Reference Voltage to AVcc with external capacitor at AREF pin at AMUX (01)
	ADMUX |=(1<<REFS0);
  9c:	ac e7       	ldi	r26, 0x7C	; 124
  9e:	b0 e0       	ldi	r27, 0x00	; 0
  a0:	8c 91       	ld	r24, X
  a2:	80 64       	ori	r24, 0x40	; 64
  a4:	8c 93       	st	X, r24
	ADMUX &= ~(1<<REFS1);
  a6:	8c 91       	ld	r24, X
  a8:	8f 77       	andi	r24, 0x7F	; 127
  aa:	8c 93       	st	X, r24
	//ADC frequency pre-scaler, target between 50-200 KHz, pre-scaler of 128
	ADCSRA |=(1<<ADPS2);
  ac:	ea e7       	ldi	r30, 0x7A	; 122
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	84 60       	ori	r24, 0x04	; 4
  b4:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADPS1);
  b6:	80 81       	ld	r24, Z
  b8:	82 60       	ori	r24, 0x02	; 2
  ba:	80 83       	st	Z, r24
	ADCSRA |=(1<<ADPS0);
  bc:	80 81       	ld	r24, Z
  be:	81 60       	ori	r24, 0x01	; 1
  c0:	80 83       	st	Z, r24
	//set up Channel to read, use channel 0, ADMUX reg
	ADMUX &= ~(1<<MUX0);
  c2:	8c 91       	ld	r24, X
  c4:	8e 7f       	andi	r24, 0xFE	; 254
  c6:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX1);
  c8:	8c 91       	ld	r24, X
  ca:	8d 7f       	andi	r24, 0xFD	; 253
  cc:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX2);
  ce:	8c 91       	ld	r24, X
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	8c 93       	st	X, r24
	ADMUX &= ~(1<<MUX3);
  d4:	8c 91       	ld	r24, X
  d6:	87 7f       	andi	r24, 0xF7	; 247
  d8:	8c 93       	st	X, r24
	//set up trigger mode, auto trigger bit5 ADATE at ADCSRA
	ADCSRA|= (1<<ADATE);
  da:	80 81       	ld	r24, Z
  dc:	80 62       	ori	r24, 0x20	; 32
  de:	80 83       	st	Z, r24
	//set up free running 000 at ADCSRB
	ADCSRB &= ~(1<<ADTS0);
  e0:	ab e7       	ldi	r26, 0x7B	; 123
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	8c 91       	ld	r24, X
  e6:	8e 7f       	andi	r24, 0xFE	; 254
  e8:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<ADTS0);
  ea:	8c 91       	ld	r24, X
  ec:	8e 7f       	andi	r24, 0xFE	; 254
  ee:	8c 93       	st	X, r24
	ADCSRB &= ~(1<<ADTS0);
  f0:	8c 91       	ld	r24, X
  f2:	8e 7f       	andi	r24, 0xFE	; 254
  f4:	8c 93       	st	X, r24
	//disable input buffer, ADC0D at DIDR0
	DIDR0 |= (1<<ADC0D);
  f6:	ae e7       	ldi	r26, 0x7E	; 126
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	8c 91       	ld	r24, X
  fc:	81 60       	ori	r24, 0x01	; 1
  fe:	8c 93       	st	X, r24
	//Enable ADC, bit 7 ADEN:ADC Enable at ADCSRA
	ADCSRA |= (1<<ADEN);
 100:	80 81       	ld	r24, Z
 102:	80 68       	ori	r24, 0x80	; 128
 104:	80 83       	st	Z, r24
	//Start Conversion, Bit 6 ADSC:ADC Start Conversion at ADCSRA
	ADCSRA |= (1<<ADSC);
 106:	80 81       	ld	r24, Z
 108:	80 64       	ori	r24, 0x40	; 64
 10a:	80 83       	st	Z, r24
	sei();
 10c:	78 94       	sei
 10e:	08 95       	ret

00000110 <initialize_pwm_joyservo>:
}
void initialize_pwm_joyservo (){
	cli();//disable all interrupts
 110:	f8 94       	cli
	DDRD |= (1<<DDD5);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
 112:	55 9a       	sbi	0x0a, 5	; 10
	//Use Timer 0 for joystick to servo
	//prescale of 1024 (101)
	TCCR0B |= (1<<CS02);
 114:	85 b5       	in	r24, 0x25	; 37
 116:	84 60       	ori	r24, 0x04	; 4
 118:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
 11a:	85 b5       	in	r24, 0x25	; 37
 11c:	8d 7f       	andi	r24, 0xFD	; 253
 11e:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
 120:	85 b5       	in	r24, 0x25	; 37
 122:	81 60       	ori	r24, 0x01	; 1
 124:	85 bd       	out	0x25, r24	; 37
	
	//Fast PWM mode
	TCCR0A |= (1<<WGM00);
 126:	84 b5       	in	r24, 0x24	; 36
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
 12c:	84 b5       	in	r24, 0x24	; 36
 12e:	82 60       	ori	r24, 0x02	; 2
 130:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
 132:	85 b5       	in	r24, 0x25	; 37
 134:	88 60       	ori	r24, 0x08	; 8
 136:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A sets frequency
	//OCR0B sets duty cycle
	OCR0A=255;
 138:	8f ef       	ldi	r24, 0xFF	; 255
 13a:	87 bd       	out	0x27, r24	; 39
	OCR0B=OCR0A/2;
 13c:	87 b5       	in	r24, 0x27	; 39
 13e:	86 95       	lsr	r24
 140:	88 bd       	out	0x28, r24	; 40
	
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM1B1);
 142:	84 b5       	in	r24, 0x24	; 36
 144:	80 62       	ori	r24, 0x20	; 32
 146:	84 bd       	out	0x24, r24	; 36
	sei(); //Enable global interrupts
 148:	78 94       	sei
 14a:	08 95       	ret

0000014c <main>:
	
}
int main(void)
{
	USART_int(BAUD_PRESCALER);
 14c:	87 e6       	ldi	r24, 0x67	; 103
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <USART_int>
	initialize_pwm_joyservo();
 154:	0e 94 88 00 	call	0x110	; 0x110 <initialize_pwm_joyservo>
	initialize_adc();
 158:	0e 94 48 00 	call	0x90	; 0x90 <initialize_adc>
		}
		else if (OCR0B<=10){
			OCR0B=11;
		}
		else if (OCR0B>=40){
			OCR0B=39;
 15c:	57 e2       	ldi	r21, 0x27	; 39
				OCR0B++;

			}
		}
		else if (OCR0B<=10){
			OCR0B=11;
 15e:	4b e0       	ldi	r20, 0x0B	; 11
	initialize_pwm_joyservo();
	initialize_adc();
	while (1)
	{
		if(OCR0B>10&&OCR0B<40){
			if ((ADC*5/1024)==0){
 160:	e8 e7       	ldi	r30, 0x78	; 120
 162:	f0 e0       	ldi	r31, 0x00	; 0
	USART_int(BAUD_PRESCALER);
	initialize_pwm_joyservo();
	initialize_adc();
	while (1)
	{
		if(OCR0B>10&&OCR0B<40){
 164:	88 b5       	in	r24, 0x28	; 40
 166:	8b 30       	cpi	r24, 0x0B	; 11
 168:	20 f1       	brcs	.+72     	; 0x1b2 <main+0x66>
 16a:	88 b5       	in	r24, 0x28	; 40
 16c:	88 32       	cpi	r24, 0x28	; 40
 16e:	08 f5       	brcc	.+66     	; 0x1b2 <main+0x66>
			if ((ADC*5/1024)==0){
 170:	80 81       	ld	r24, Z
 172:	91 81       	ldd	r25, Z+1	; 0x01
 174:	9c 01       	movw	r18, r24
 176:	22 0f       	add	r18, r18
 178:	33 1f       	adc	r19, r19
 17a:	22 0f       	add	r18, r18
 17c:	33 1f       	adc	r19, r19
 17e:	82 0f       	add	r24, r18
 180:	93 1f       	adc	r25, r19
 182:	81 15       	cp	r24, r1
 184:	94 40       	sbci	r25, 0x04	; 4
 186:	20 f4       	brcc	.+8      	; 0x190 <main+0x44>
				OCR0B--;
 188:	88 b5       	in	r24, 0x28	; 40
 18a:	81 50       	subi	r24, 0x01	; 1
 18c:	88 bd       	out	0x28, r24	; 40
 18e:	1a c0       	rjmp	.+52     	; 0x1c4 <main+0x78>
			}
			else if ((ADC*5/1024)==4){
 190:	80 81       	ld	r24, Z
 192:	91 81       	ldd	r25, Z+1	; 0x01
 194:	9c 01       	movw	r18, r24
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	22 0f       	add	r18, r18
 19c:	33 1f       	adc	r19, r19
 19e:	82 0f       	add	r24, r18
 1a0:	93 1f       	adc	r25, r19
 1a2:	90 51       	subi	r25, 0x10	; 16
 1a4:	81 15       	cp	r24, r1
 1a6:	94 40       	sbci	r25, 0x04	; 4
 1a8:	68 f4       	brcc	.+26     	; 0x1c4 <main+0x78>
				OCR0B++;
 1aa:	88 b5       	in	r24, 0x28	; 40
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	88 bd       	out	0x28, r24	; 40
 1b0:	09 c0       	rjmp	.+18     	; 0x1c4 <main+0x78>

			}
		}
		else if (OCR0B<=10){
 1b2:	88 b5       	in	r24, 0x28	; 40
 1b4:	8b 30       	cpi	r24, 0x0B	; 11
 1b6:	10 f4       	brcc	.+4      	; 0x1bc <main+0x70>
			OCR0B=11;
 1b8:	48 bd       	out	0x28, r20	; 40
 1ba:	04 c0       	rjmp	.+8      	; 0x1c4 <main+0x78>
		}
		else if (OCR0B>=40){
 1bc:	88 b5       	in	r24, 0x28	; 40
 1be:	88 32       	cpi	r24, 0x28	; 40
 1c0:	08 f0       	brcs	.+2      	; 0x1c4 <main+0x78>
			OCR0B=39;
 1c2:	58 bd       	out	0x28, r21	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c4:	8f e7       	ldi	r24, 0x7F	; 127
 1c6:	98 e3       	ldi	r25, 0x38	; 56
 1c8:	21 e0       	ldi	r18, 0x01	; 1
 1ca:	81 50       	subi	r24, 0x01	; 1
 1cc:	90 40       	sbci	r25, 0x00	; 0
 1ce:	20 40       	sbci	r18, 0x00	; 0
 1d0:	e1 f7       	brne	.-8      	; 0x1ca <main+0x7e>
 1d2:	00 c0       	rjmp	.+0      	; 0x1d4 <main+0x88>
 1d4:	00 00       	nop
 1d6:	c6 cf       	rjmp	.-116    	; 0x164 <main+0x18>

000001d8 <USART_int>:
 */ 
#include "USART.h"
#include <avr/io.h>
void USART_int(int BAUD_PRESCALER){
	/*Set baud rate */
	UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
 1d8:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
	UBRR0L = (unsigned char)BAUD_PRESCALER;
 1dc:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	/*Enable receiver and transmitter */
	UCSR0B = (1<<RXEN0)|(1<<TXEN0);
 1e0:	88 e1       	ldi	r24, 0x18	; 24
 1e2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	/* Set frame format: 8data, 2stop bit */
	UCSR0C = (1<<USBS0)|(3<<UCSZ00);
 1e6:	8e e0       	ldi	r24, 0x0E	; 14
 1e8:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 1ec:	08 95       	ret

000001ee <_exit>:
 1ee:	f8 94       	cli

000001f0 <__stop_program>:
 1f0:	ff cf       	rjmp	.-2      	; 0x1f0 <__stop_program>
