
duty_cycle_servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000016c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001c0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008f4  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000704  00000000  00000000  00000b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000353  00000000  00000000  00001260  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  000015b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003e7  00000000  00000000  00001608  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000158  00000000  00000000  000019ef  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000070  00000000  00000000  00001b47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a0 30       	cpi	r26, 0x00	; 0
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  88:	0c 94 b4 00 	jmp	0x168	; 0x168 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <initialize_pwm_2servos>:
}
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
}
void initialize_pwm_2servos (){
	cli();
  90:	f8 94       	cli
	DDRB |= (1<<DDB1)|(1<<DDB2);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
  92:	84 b1       	in	r24, 0x04	; 4
  94:	86 60       	ori	r24, 0x06	; 6
  96:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0;		/* Set timer1 count zero */
  98:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
  9c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	ICR1 = 4999;		/* Set TOP count for timer1 in ICR1 register */
  a0:	87 e8       	ldi	r24, 0x87	; 135
  a2:	93 e1       	ldi	r25, 0x13	; 19
  a4:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  a8:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	//TCCR1A = (1<<WGM11)|(1<<COM1A1);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	//clear OC1A/OC1B on compare match
	//for servo1
	TCCR1A |= (1<<COM1A1);
  ac:	e0 e8       	ldi	r30, 0x80	; 128
  ae:	f0 e0       	ldi	r31, 0x00	; 0
  b0:	80 81       	ld	r24, Z
  b2:	80 68       	ori	r24, 0x80	; 128
  b4:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);
  b6:	80 81       	ld	r24, Z
  b8:	8f 7b       	andi	r24, 0xBF	; 191
  ba:	80 83       	st	Z, r24
	//for servo2
	TCCR1A |= (1<<COM1B1);
  bc:	80 81       	ld	r24, Z
  be:	80 62       	ori	r24, 0x20	; 32
  c0:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
  c2:	80 81       	ld	r24, Z
  c4:	8f 7e       	andi	r24, 0xEF	; 239
  c6:	80 83       	st	Z, r24
	//Fast PWM Mode
	TCCR1A &= ~(1<<WGM10);
  c8:	80 81       	ld	r24, Z
  ca:	8e 7f       	andi	r24, 0xFE	; 254
  cc:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11);
  ce:	80 81       	ld	r24, Z
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
  d4:	e1 e8       	ldi	r30, 0x81	; 129
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13);
  de:	80 81       	ld	r24, Z
  e0:	80 61       	ori	r24, 0x10	; 16
  e2:	80 83       	st	Z, r24
	//Configure timer pre-scaler (011) /64
	TCCR1B |= (1<<CS10);
  e4:	80 81       	ld	r24, Z
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
  ea:	80 81       	ld	r24, Z
  ec:	82 60       	ori	r24, 0x02	; 2
  ee:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
  f0:	80 81       	ld	r24, Z
  f2:	8b 7f       	andi	r24, 0xFB	; 251
  f4:	80 83       	st	Z, r24
	sei();
  f6:	78 94       	sei
  f8:	08 95       	ret

000000fa <main>:
}
int main(void)
{
initialize_pwm_2servos();
  fa:	0e 94 48 00 	call	0x90	; 0x90 <initialize_pwm_2servos>
#define BAUD_RATE 9600
#define BAUD_PRESCALER (((F_CPU / (BAUD_RATE * 16UL))) - 1)
char str_print[20];

void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
  fe:	a8 e8       	ldi	r26, 0x88	; 136
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	4d e7       	ldi	r20, 0x7D	; 125
 104:	50 e0       	ldi	r21, 0x00	; 0
}
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
 106:	ea e8       	ldi	r30, 0x8A	; 138
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	21 e7       	ldi	r18, 0x71	; 113
 10c:	32 e0       	ldi	r19, 0x02	; 2
#define BAUD_RATE 9600
#define BAUD_PRESCALER (((F_CPU / (BAUD_RATE * 16UL))) - 1)
char str_print[20];

void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
 10e:	8a ef       	ldi	r24, 0xFA	; 250
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	11 96       	adiw	r26, 0x01	; 1
 114:	5c 93       	st	X, r21
 116:	4e 93       	st	-X, r20
}
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
 118:	31 83       	std	Z+1, r19	; 0x01
 11a:	20 83       	st	Z, r18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11c:	6f ef       	ldi	r22, 0xFF	; 255
 11e:	7d e3       	ldi	r23, 0x3D	; 61
 120:	c9 e4       	ldi	r28, 0x49	; 73
 122:	61 50       	subi	r22, 0x01	; 1
 124:	70 40       	sbci	r23, 0x00	; 0
 126:	c0 40       	sbci	r28, 0x00	; 0
 128:	e1 f7       	brne	.-8      	; 0x122 <main+0x28>
 12a:	00 c0       	rjmp	.+0      	; 0x12c <main+0x32>
 12c:	00 00       	nop
#define BAUD_RATE 9600
#define BAUD_PRESCALER (((F_CPU / (BAUD_RATE * 16UL))) - 1)
char str_print[20];

void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
 12e:	11 96       	adiw	r26, 0x01	; 1
 130:	9c 93       	st	X, r25
 132:	8e 93       	st	-X, r24
}
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
 134:	51 83       	std	Z+1, r21	; 0x01
 136:	40 83       	st	Z, r20
 138:	6f ef       	ldi	r22, 0xFF	; 255
 13a:	7d e3       	ldi	r23, 0x3D	; 61
 13c:	c9 e4       	ldi	r28, 0x49	; 73
 13e:	61 50       	subi	r22, 0x01	; 1
 140:	70 40       	sbci	r23, 0x00	; 0
 142:	c0 40       	sbci	r28, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x44>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x4e>
 148:	00 00       	nop
#define BAUD_RATE 9600
#define BAUD_PRESCALER (((F_CPU / (BAUD_RATE * 16UL))) - 1)
char str_print[20];

void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
 14a:	11 96       	adiw	r26, 0x01	; 1
 14c:	3c 93       	st	X, r19
 14e:	2e 93       	st	-X, r18
}
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
 150:	91 83       	std	Z+1, r25	; 0x01
 152:	80 83       	st	Z, r24
 154:	6f ef       	ldi	r22, 0xFF	; 255
 156:	7d e3       	ldi	r23, 0x3D	; 61
 158:	c9 e4       	ldi	r28, 0x49	; 73
 15a:	61 50       	subi	r22, 0x01	; 1
 15c:	70 40       	sbci	r23, 0x00	; 0
 15e:	c0 40       	sbci	r28, 0x00	; 0
 160:	e1 f7       	brne	.-8      	; 0x15a <main+0x60>
 162:	00 c0       	rjmp	.+0      	; 0x164 <main+0x6a>
 164:	00 00       	nop
 166:	d5 cf       	rjmp	.-86     	; 0x112 <main+0x18>

00000168 <_exit>:
 168:	f8 94       	cli

0000016a <__stop_program>:
 16a:	ff cf       	rjmp	.-2      	; 0x16a <__stop_program>
