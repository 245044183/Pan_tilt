
Pantilt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000044ea  0000457e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000044ea  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000111  00800150  00800150  000045ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000045ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000462c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b0  00000000  00000000  0000466c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006dd9  00000000  00000000  00004c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001a3c  00000000  00000000  0000b9f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003be1  00000000  00000000  0000d431  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000119c  00000000  00000000  00011014  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fca  00000000  00000000  000121b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000063ac  00000000  00000000  0001417a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000628  00000000  00000000  0001a526  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      18:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__vector_6>
      1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      68:	3a 17       	cp	r19, r26
      6a:	3a 17       	cp	r19, r26
      6c:	3a 17       	cp	r19, r26
      6e:	6a 17       	cp	r22, r26
      70:	72 17       	cp	r23, r18
      72:	82 17       	cp	r24, r18
      74:	3a 17       	cp	r19, r26
      76:	3a 17       	cp	r19, r26
      78:	6a 17       	cp	r22, r26
      7a:	72 17       	cp	r23, r18
      7c:	03 6e       	ori	r16, 0xE3	; 227
      7e:	db 36       	cpi	r29, 0x6B	; 107
      80:	3d 9a       	sbi	0x07, 5	; 7
      82:	99 99       	sbic	0x13, 1	; 19
      84:	99 3d       	cpi	r25, 0xD9	; 217
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	3e 00       	.word	0x003e	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 4a       	sbci	r16, 0xA8	; 168
      92:	d7 3b       	cpi	r29, 0xB7	; 183
      94:	3b ce       	rjmp	.-906    	; 0xfffffd0c <__eeprom_end+0xff7efd0c>
      96:	01 6e       	ori	r16, 0xE1	; 225
      98:	84 bc       	out	0x24, r8	; 36
      9a:	bf fd       	.word	0xfdbf	; ????
      9c:	c1 2f       	mov	r28, r17
      9e:	3d 6c       	ori	r19, 0xCD	; 205
      a0:	74 31       	cpi	r23, 0x14	; 20
      a2:	9a bd       	out	0x2a, r25	; 42
      a4:	56 83       	std	Z+6, r21	; 0x06
      a6:	3d da       	rcall	.-2950   	; 0xfffff522 <__eeprom_end+0xff7ef522>
      a8:	3d 00       	.word	0x003d	; ????
      aa:	c7 7f       	andi	r28, 0xF7	; 247
      ac:	11 be       	out	0x31, r1	; 49
      ae:	d9 e4       	ldi	r29, 0x49	; 73
      b0:	bb 4c       	sbci	r27, 0xCB	; 203
      b2:	3e 91       	ld	r19, -X
      b4:	6b aa       	std	Y+51, r6	; 0x33
      b6:	aa be       	out	0x3a, r10	; 58
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <MahonyAHRSupdateIMU+0x1ba>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 00       	.word	0x003f	; ????

000000e6 <__trampolines_end>:
      e6:	6e 61       	ori	r22, 0x1E	; 30
      e8:	6e 00       	.word	0x006e	; ????

000000ea <__c.2332>:
      ea:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      fa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1aa:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1ba:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ca:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1da:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d8 e0       	ldi	r29, 0x08	; 8
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	11 e0       	ldi	r17, 0x01	; 1
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	ea ee       	ldi	r30, 0xEA	; 234
     1fc:	f4 e4       	ldi	r31, 0x44	; 68
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x10>
     200:	05 90       	lpm	r0, Z+
     202:	0d 92       	st	X+, r0
     204:	a0 35       	cpi	r26, 0x50	; 80
     206:	b1 07       	cpc	r27, r17
     208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0xc>

0000020a <__do_clear_bss>:
     20a:	22 e0       	ldi	r18, 0x02	; 2
     20c:	a0 e5       	ldi	r26, 0x50	; 80
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
     212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
     214:	a1 36       	cpi	r26, 0x61	; 97
     216:	b2 07       	cpc	r27, r18
     218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
     21a:	0e 94 13 01 	call	0x226	; 0x226 <main>
     21e:	0c 94 73 22 	jmp	0x44e6	; 0x44e6 <_exit>

00000222 <__bad_interrupt>:
     222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <main>:
char MyString[10];
/*-----------------------------------------------------*/
int main(void)
{
	/* Replace with your application code */
	UART_init(BAUD_PRESCALER);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 4d 18 	call	0x309a	; 0x309a <UART_init>
	I2C_Init();
     22e:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <I2C_Init>
	MPU_Init();
     232:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <MPU_Init>
	ADC_Init();
     236:	0e 94 33 01 	call	0x266	; 0x266 <ADC_Init>
	initialize_pwm_2servos();
     23a:	0e 94 a5 01 	call	0x34a	; 0x34a <initialize_pwm_2servos>
	initialize_pwm_joyservo();
     23e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <initialize_pwm_joyservo>
	sprintf(MyString,"Init OK");
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	a7 e2       	ldi	r26, 0x27	; 39
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <main+0x26>
	UART_putstring(MyString);
     254:	87 e2       	ldi	r24, 0x27	; 39
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 64 18 	call	0x30c8	; 0x30c8 <UART_putstring>
	
	MytaskCreate();
     25c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <MytaskCreate>
	vTaskStartScheduler();
     260:	0e 94 2f 12 	call	0x245e	; 0x245e <vTaskStartScheduler>
     264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x3e>

00000266 <ADC_Init>:
	OCR0A=80;
	OCR0B=OCR0A/2;
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM0B1);
	sei(); //Enable global interrupts
     266:	f8 94       	cli
     268:	e4 e6       	ldi	r30, 0x64	; 100
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8e 7f       	andi	r24, 0xFE	; 254
     270:	80 83       	st	Z, r24
     272:	ac e7       	ldi	r26, 0x7C	; 124
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	8c 91       	ld	r24, X
     278:	80 64       	ori	r24, 0x40	; 64
     27a:	8c 93       	st	X, r24
     27c:	8c 91       	ld	r24, X
     27e:	8f 77       	andi	r24, 0x7F	; 127
     280:	8c 93       	st	X, r24
     282:	ea e7       	ldi	r30, 0x7A	; 122
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	84 60       	ori	r24, 0x04	; 4
     28a:	80 83       	st	Z, r24
     28c:	80 81       	ld	r24, Z
     28e:	82 60       	ori	r24, 0x02	; 2
     290:	80 83       	st	Z, r24
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	8c 91       	ld	r24, X
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	8c 93       	st	X, r24
     29e:	8c 91       	ld	r24, X
     2a0:	8d 7f       	andi	r24, 0xFD	; 253
     2a2:	8c 93       	st	X, r24
     2a4:	8c 91       	ld	r24, X
     2a6:	8b 7f       	andi	r24, 0xFB	; 251
     2a8:	8c 93       	st	X, r24
     2aa:	8c 91       	ld	r24, X
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	8c 93       	st	X, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	80 62       	ori	r24, 0x20	; 32
     2b4:	80 83       	st	Z, r24
     2b6:	ab e7       	ldi	r26, 0x7B	; 123
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	8e 7f       	andi	r24, 0xFE	; 254
     2be:	8c 93       	st	X, r24
     2c0:	8c 91       	ld	r24, X
     2c2:	8e 7f       	andi	r24, 0xFE	; 254
     2c4:	8c 93       	st	X, r24
     2c6:	8c 91       	ld	r24, X
     2c8:	8e 7f       	andi	r24, 0xFE	; 254
     2ca:	8c 93       	st	X, r24
     2cc:	ae e7       	ldi	r26, 0x7E	; 126
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	8c 91       	ld	r24, X
     2d2:	81 60       	ori	r24, 0x01	; 1
     2d4:	8c 93       	st	X, r24
     2d6:	80 81       	ld	r24, Z
     2d8:	80 68       	ori	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
     2dc:	80 81       	ld	r24, Z
     2de:	80 64       	ori	r24, 0x40	; 64
     2e0:	80 83       	st	Z, r24
     2e2:	78 94       	sei
     2e4:	08 95       	ret

000002e6 <deg_to_servo1>:
}


//servo1 is on PB1
void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
     2e6:	bc 01       	movw	r22, r24
     2e8:	99 0f       	add	r25, r25
     2ea:	88 0b       	sbc	r24, r24
     2ec:	99 0b       	sbc	r25, r25
     2ee:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
     2f2:	2a e7       	ldi	r18, 0x7A	; 122
     2f4:	37 ec       	ldi	r19, 0xC7	; 199
     2f6:	41 e3       	ldi	r20, 0x31	; 49
     2f8:	50 e4       	ldi	r21, 0x40	; 64
     2fa:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	4a ef       	ldi	r20, 0xFA	; 250
     304:	52 e4       	ldi	r21, 0x42	; 66
     306:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     30a:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__fixunssfsi>
     30e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     312:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     316:	08 95       	ret

00000318 <deg_to_servo2>:
}
//servo2 is on PB2
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
     318:	bc 01       	movw	r22, r24
     31a:	99 0f       	add	r25, r25
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
     324:	2a e7       	ldi	r18, 0x7A	; 122
     326:	37 ec       	ldi	r19, 0xC7	; 199
     328:	41 e3       	ldi	r20, 0x31	; 49
     32a:	50 e4       	ldi	r21, 0x40	; 64
     32c:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a ef       	ldi	r20, 0xFA	; 250
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     33c:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__fixunssfsi>
     340:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     344:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     348:	08 95       	ret

0000034a <initialize_pwm_2servos>:
}
void initialize_pwm_2servos (){
	cli();
     34a:	f8 94       	cli
	DDRB |= (1<<DDB1)|(1<<DDB2);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     34c:	84 b1       	in	r24, 0x04	; 4
     34e:	86 60       	ori	r24, 0x06	; 6
     350:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0;		/* Set timer1 count zero */
     352:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     356:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	ICR1 = 4999;		/* Set TOP count for timer1 in ICR1 register */
     35a:	87 e8       	ldi	r24, 0x87	; 135
     35c:	93 e1       	ldi	r25, 0x13	; 19
     35e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     362:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	//TCCR1A = (1<<WGM11)|(1<<COM1A1);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	//clear OC1A/OC1B on compare match
	//for servo1
	TCCR1A |= (1<<COM1A1);
     366:	e0 e8       	ldi	r30, 0x80	; 128
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);
     370:	80 81       	ld	r24, Z
     372:	8f 7b       	andi	r24, 0xBF	; 191
     374:	80 83       	st	Z, r24
	//for servo2
	TCCR1A |= (1<<COM1B1);
     376:	80 81       	ld	r24, Z
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     37c:	80 81       	ld	r24, Z
     37e:	8f 7e       	andi	r24, 0xEF	; 239
     380:	80 83       	st	Z, r24
	//Fast PWM Mode
	TCCR1A &= ~(1<<WGM10);
     382:	80 81       	ld	r24, Z
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11);
     388:	80 81       	ld	r24, Z
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
     38e:	e1 e8       	ldi	r30, 0x81	; 129
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	88 60       	ori	r24, 0x08	; 8
     396:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13);
     398:	80 81       	ld	r24, Z
     39a:	80 61       	ori	r24, 0x10	; 16
     39c:	80 83       	st	Z, r24
	//Configure timer pre-scaler (011) /64
	TCCR1B |= (1<<CS10);
     39e:	80 81       	ld	r24, Z
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
     3a4:	80 81       	ld	r24, Z
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
     3aa:	80 81       	ld	r24, Z
     3ac:	8b 7f       	andi	r24, 0xFB	; 251
     3ae:	80 83       	st	Z, r24
	sei();
     3b0:	78 94       	sei
     3b2:	08 95       	ret

000003b4 <initialize_pwm_joyservo>:
}
void initialize_pwm_joyservo (){
	cli();//disable all interrupts
     3b4:	f8 94       	cli
	DDRD |= (1<<DDD5);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     3b6:	55 9a       	sbi	0x0a, 5	; 10
	//Use Timer 0 for joystick to servo
	//prescale of 1024 (101)
	TCCR0B |= (1<<CS02);
     3b8:	85 b5       	in	r24, 0x25	; 37
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     3be:	85 b5       	in	r24, 0x25	; 37
     3c0:	8d 7f       	andi	r24, 0xFD	; 253
     3c2:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
     3c4:	85 b5       	in	r24, 0x25	; 37
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	85 bd       	out	0x25, r24	; 37
	
	//Fast PWM mode
	TCCR0A |= (1<<WGM00);
     3ca:	84 b5       	in	r24, 0x24	; 36
     3cc:	81 60       	ori	r24, 0x01	; 1
     3ce:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
     3d0:	84 b5       	in	r24, 0x24	; 36
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
     3d6:	85 b5       	in	r24, 0x25	; 37
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A sets frequency
	//OCR0B sets duty cycle
	OCR0A=255;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	87 bd       	out	0x27, r24	; 39
	OCR0B=OCR0A/2;
     3e0:	87 b5       	in	r24, 0x27	; 39
     3e2:	86 95       	lsr	r24
     3e4:	88 bd       	out	0x28, r24	; 40
	
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM1B1);
     3e6:	84 b5       	in	r24, 0x24	; 36
     3e8:	80 62       	ori	r24, 0x20	; 32
     3ea:	84 bd       	out	0x24, r24	; 36
	sei(); //Enable global interrupts
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <vADCTaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vADCTaskFunction( void *pvParameters )
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <vADCTaskFunction+0x6>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeADC;
		const TickType_t xPeriodFrequencyADC = 1;// 15ms per tick  15ms*93 = 1395
		
		xLastWakeTimeADC = xTaskGetTickCount();
     3fa:	0e 94 63 12 	call	0x24c6	; 0x24c6 <xTaskGetTickCount>
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
			//ADC
			ADC_Value = ADC;
     402:	08 e7       	ldi	r16, 0x78	; 120
     404:	10 e0       	ldi	r17, 0x00	; 0
			if (ADC_Value>800)
			{
				OCR0B--;
				if (OCR0B<=10)
				{
					OCR0B=11;
     406:	0f 2e       	mov	r0, r31
     408:	fb e0       	ldi	r31, 0x0B	; 11
     40a:	ff 2e       	mov	r15, r31
     40c:	f0 2d       	mov	r31, r0
			if (ADC_Value<300)
			{
				OCR0B++;
				if (OCR0B>=40)
				{
					OCR0B=39;
     40e:	0f 2e       	mov	r0, r31
     410:	f7 e2       	ldi	r31, 0x27	; 39
     412:	ef 2e       	mov	r14, r31
     414:	f0 2d       	mov	r31, r0
		
		xLastWakeTimeADC = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	0e 94 af 13 	call	0x275e	; 0x275e <vTaskDelayUntil>
			//ADC
			ADC_Value = ADC;
     422:	f8 01       	movw	r30, r16
     424:	60 81       	ld	r22, Z
     426:	71 81       	ldd	r23, Z+1	; 0x01
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 1a 1a 	call	0x3434	; 0x3434 <__floatunsisf>
     430:	60 93 31 02 	sts	0x0231, r22	; 0x800231 <ADC_Value>
     434:	70 93 32 02 	sts	0x0232, r23	; 0x800232 <ADC_Value+0x1>
     438:	80 93 33 02 	sts	0x0233, r24	; 0x800233 <ADC_Value+0x2>
     43c:	90 93 34 02 	sts	0x0234, r25	; 0x800234 <ADC_Value+0x3>
			if (ADC_Value>800)
     440:	20 e0       	ldi	r18, 0x00	; 0
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	48 e4       	ldi	r20, 0x48	; 72
     446:	54 e4       	ldi	r21, 0x44	; 68
     448:	0e 94 27 1b 	call	0x364e	; 0x364e <__gesf2>
     44c:	18 16       	cp	r1, r24
     44e:	3c f4       	brge	.+14     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
			{
				OCR0B--;
     450:	88 b5       	in	r24, 0x28	; 40
     452:	81 50       	subi	r24, 0x01	; 1
     454:	88 bd       	out	0x28, r24	; 40
				if (OCR0B<=10)
     456:	88 b5       	in	r24, 0x28	; 40
     458:	8b 30       	cpi	r24, 0x0B	; 11
     45a:	08 f4       	brcc	.+2      	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
				{
					OCR0B=11;
     45c:	f8 bc       	out	0x28, r15	; 40
				}
			}
			if (ADC_Value<300)
     45e:	20 e0       	ldi	r18, 0x00	; 0
     460:	30 e0       	ldi	r19, 0x00	; 0
     462:	46 e9       	ldi	r20, 0x96	; 150
     464:	53 e4       	ldi	r21, 0x43	; 67
     466:	60 91 31 02 	lds	r22, 0x0231	; 0x800231 <ADC_Value>
     46a:	70 91 32 02 	lds	r23, 0x0232	; 0x800232 <ADC_Value+0x1>
     46e:	80 91 33 02 	lds	r24, 0x0233	; 0x800233 <ADC_Value+0x2>
     472:	90 91 34 02 	lds	r25, 0x0234	; 0x800234 <ADC_Value+0x3>
     476:	0e 94 6d 19 	call	0x32da	; 0x32da <__cmpsf2>
     47a:	88 23       	and	r24, r24
     47c:	64 f6       	brge	.-104    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			{
				OCR0B++;
     47e:	88 b5       	in	r24, 0x28	; 40
     480:	8f 5f       	subi	r24, 0xFF	; 255
     482:	88 bd       	out	0x28, r24	; 40
				if (OCR0B>=40)
     484:	88 b5       	in	r24, 0x28	; 40
     486:	88 32       	cpi	r24, 0x28	; 40
     488:	30 f2       	brcs	.-116    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				{
					OCR0B=39;
     48a:	e8 bc       	out	0x28, r14	; 40
     48c:	c4 cf       	rjmp	.-120    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

0000048e <vMahonyTaskFunction>:
float ADC_Value;
// static TickType_t time1;
// static TickType_t time2;
// static int period;
void vMahonyTaskFunction( void *pvParameters )
{
     48e:	cf 93       	push	r28
     490:	df 93       	push	r29
     492:	00 d0       	rcall	.+0      	; 0x494 <vMahonyTaskFunction+0x6>
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMahony;
		const TickType_t xPeriodFrequencyMahony = 1;// 15ms per tick

		xLastWakeTimeMahony = xTaskGetTickCount();
     498:	0e 94 63 12 	call	0x24c6	; 0x24c6 <xTaskGetTickCount>
     49c:	9a 83       	std	Y+2, r25	; 0x02
     49e:	89 83       	std	Y+1, r24	; 0x01
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     4a0:	0f 2e       	mov	r0, r31
     4a2:	f6 e1       	ldi	r31, 0x16	; 22
     4a4:	8f 2e       	mov	r8, r31
     4a6:	f1 e0       	ldi	r31, 0x01	; 1
     4a8:	9f 2e       	mov	r9, r31
     4aa:	f0 2d       	mov	r31, r0
     4ac:	0f 2e       	mov	r0, r31
     4ae:	fa e0       	ldi	r31, 0x0A	; 10
     4b0:	6f 2e       	mov	r6, r31
     4b2:	f1 e0       	ldi	r31, 0x01	; 1
     4b4:	7f 2e       	mov	r7, r31
     4b6:	f0 2d       	mov	r31, r0

		xLastWakeTimeMahony = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
     4b8:	61 e0       	ldi	r22, 0x01	; 1
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	ce 01       	movw	r24, r28
     4be:	01 96       	adiw	r24, 0x01	; 1
     4c0:	0e 94 af 13 	call	0x275e	; 0x275e <vTaskDelayUntil>
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     4c4:	d4 01       	movw	r26, r8
     4c6:	ad 90       	ld	r10, X+
     4c8:	bd 90       	ld	r11, X+
     4ca:	cd 90       	ld	r12, X+
     4cc:	dc 90       	ld	r13, X
     4ce:	13 97       	sbiw	r26, 0x03	; 3
     4d0:	f3 01       	movw	r30, r6
     4d2:	e0 84       	ldd	r14, Z+8	; 0x08
     4d4:	f1 84       	ldd	r15, Z+9	; 0x09
     4d6:	02 85       	ldd	r16, Z+10	; 0x0a
     4d8:	13 85       	ldd	r17, Z+11	; 0x0b
     4da:	24 81       	ldd	r18, Z+4	; 0x04
     4dc:	35 81       	ldd	r19, Z+5	; 0x05
     4de:	46 81       	ldd	r20, Z+6	; 0x06
     4e0:	57 81       	ldd	r21, Z+7	; 0x07
     4e2:	60 81       	ld	r22, Z
     4e4:	71 81       	ldd	r23, Z+1	; 0x01
     4e6:	82 81       	ldd	r24, Z+2	; 0x02
     4e8:	93 81       	ldd	r25, Z+3	; 0x03
     4ea:	1b 96       	adiw	r26, 0x0b	; 11
     4ec:	ec 91       	ld	r30, X
     4ee:	1b 97       	sbiw	r26, 0x0b	; 11
     4f0:	ef 93       	push	r30
     4f2:	1a 96       	adiw	r26, 0x0a	; 10
     4f4:	ec 91       	ld	r30, X
     4f6:	1a 97       	sbiw	r26, 0x0a	; 10
     4f8:	ef 93       	push	r30
     4fa:	19 96       	adiw	r26, 0x09	; 9
     4fc:	ec 91       	ld	r30, X
     4fe:	19 97       	sbiw	r26, 0x09	; 9
     500:	ef 93       	push	r30
     502:	18 96       	adiw	r26, 0x08	; 8
     504:	ec 91       	ld	r30, X
     506:	18 97       	sbiw	r26, 0x08	; 8
     508:	ef 93       	push	r30
     50a:	17 96       	adiw	r26, 0x07	; 7
     50c:	ec 91       	ld	r30, X
     50e:	17 97       	sbiw	r26, 0x07	; 7
     510:	ef 93       	push	r30
     512:	16 96       	adiw	r26, 0x06	; 6
     514:	ec 91       	ld	r30, X
     516:	16 97       	sbiw	r26, 0x06	; 6
     518:	ef 93       	push	r30
     51a:	15 96       	adiw	r26, 0x05	; 5
     51c:	ec 91       	ld	r30, X
     51e:	15 97       	sbiw	r26, 0x05	; 5
     520:	ef 93       	push	r30
     522:	14 96       	adiw	r26, 0x04	; 4
     524:	ec 91       	ld	r30, X
     526:	ef 93       	push	r30
     528:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <MahonyAHRSupdateIMU>
			q2Angle(Angle);
     52c:	85 e3       	ldi	r24, 0x35	; 53
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 35 08 	call	0x106a	; 0x106a <q2Angle>
     534:	0f b6       	in	r0, 0x3f	; 63
     536:	f8 94       	cli
     538:	de bf       	out	0x3e, r29	; 62
     53a:	0f be       	out	0x3f, r0	; 63
     53c:	cd bf       	out	0x3d, r28	; 61
     53e:	bc cf       	rjmp	.-136    	; 0x4b8 <vMahonyTaskFunction+0x2a>

00000540 <vMPU6050TaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vMPU6050TaskFunction( void *pvParameters )
{
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	00 d0       	rcall	.+0      	; 0x546 <vMPU6050TaskFunction+0x6>
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMPU;
		const TickType_t xPeriodFrequencyMPU = 1;// 15ms per tick
		
		xLastWakeTimeMPU = xTaskGetTickCount();
     54a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <xTaskGetTickCount>
     54e:	9a 83       	std	Y+2, r25	; 0x02
     550:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMPU, xPeriodFrequencyMPU );
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	0e 94 af 13 	call	0x275e	; 0x275e <vTaskDelayUntil>
//			TickType_t time1 = xTaskGetTickCount();
			MPU_read(AccData,GyroData);
     55e:	6a e0       	ldi	r22, 0x0A	; 10
     560:	71 e0       	ldi	r23, 0x01	; 1
     562:	86 e1       	ldi	r24, 0x16	; 22
     564:	91 e0       	ldi	r25, 0x01	; 1
     566:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <MPU_read>
     56a:	f3 cf       	rjmp	.-26     	; 0x552 <vMPU6050TaskFunction+0x12>

0000056c <vControlTaskFunction>:
	vTaskDelete( NULL );
}

// Task C for control
void vControlTaskFunction( void *pvParameters )
{
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	00 d0       	rcall	.+0      	; 0x572 <vControlTaskFunction+0x6>
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
		static float DEG2;
		static float last_error_x;
		static float inc_error_x;
		static float last_error_y;
		static float inc_error_y;		
		xLastWakeTimeControl = xTaskGetTickCount();
     576:	0e 94 63 12 	call	0x24c6	; 0x24c6 <xTaskGetTickCount>
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeControl, xPeriodFrequencyControl );
			x_error = - Angle[0];
     57e:	0f 2e       	mov	r0, r31
     580:	f5 e3       	ldi	r31, 0x35	; 53
     582:	cf 2e       	mov	r12, r31
     584:	f2 e0       	ldi	r31, 0x02	; 2
     586:	df 2e       	mov	r13, r31
     588:	f0 2d       	mov	r31, r0
		static float inc_error_y;		
		xLastWakeTimeControl = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeControl, xPeriodFrequencyControl );
     58a:	61 e0       	ldi	r22, 0x01	; 1
     58c:	70 e0       	ldi	r23, 0x00	; 0
     58e:	ce 01       	movw	r24, r28
     590:	01 96       	adiw	r24, 0x01	; 1
     592:	0e 94 af 13 	call	0x275e	; 0x275e <vTaskDelayUntil>
			x_error = - Angle[0];
     596:	f6 01       	movw	r30, r12
     598:	80 81       	ld	r24, Z
     59a:	91 81       	ldd	r25, Z+1	; 0x01
     59c:	a2 81       	ldd	r26, Z+2	; 0x02
     59e:	b3 81       	ldd	r27, Z+3	; 0x03
     5a0:	bc 01       	movw	r22, r24
     5a2:	cd 01       	movw	r24, r26
     5a4:	90 58       	subi	r25, 0x80	; 128
     5a6:	60 93 6c 01 	sts	0x016C, r22	; 0x80016c <x_error.2894>
     5aa:	70 93 6d 01 	sts	0x016D, r23	; 0x80016d <x_error.2894+0x1>
     5ae:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <x_error.2894+0x2>
     5b2:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <x_error.2894+0x3>
			y_error = - Angle[1];
     5b6:	04 81       	ldd	r16, Z+4	; 0x04
     5b8:	15 81       	ldd	r17, Z+5	; 0x05
     5ba:	26 81       	ldd	r18, Z+6	; 0x06
     5bc:	37 81       	ldd	r19, Z+7	; 0x07
     5be:	30 58       	subi	r19, 0x80	; 128
     5c0:	00 93 68 01 	sts	0x0168, r16	; 0x800168 <y_error.2895>
     5c4:	10 93 69 01 	sts	0x0169, r17	; 0x800169 <y_error.2895+0x1>
     5c8:	20 93 6a 01 	sts	0x016A, r18	; 0x80016a <y_error.2895+0x2>
     5cc:	30 93 6b 01 	sts	0x016B, r19	; 0x80016b <y_error.2895+0x3>
			DEG1 = PID(x_error,last_error_x,inc_error_x);
     5d0:	e0 90 64 01 	lds	r14, 0x0164	; 0x800164 <inc_error_x.2899>
     5d4:	f0 90 65 01 	lds	r15, 0x0165	; 0x800165 <inc_error_x.2899+0x1>
     5d8:	00 91 66 01 	lds	r16, 0x0166	; 0x800166 <inc_error_x.2899+0x2>
     5dc:	10 91 67 01 	lds	r17, 0x0167	; 0x800167 <inc_error_x.2899+0x3>
     5e0:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <last_error_x.2898>
     5e4:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <last_error_x.2898+0x1>
     5e8:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <last_error_x.2898+0x2>
     5ec:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <last_error_x.2898+0x3>
     5f0:	0e 94 09 04 	call	0x812	; 0x812 <PID>
     5f4:	60 93 5c 01 	sts	0x015C, r22	; 0x80015c <DEG1.2896>
     5f8:	70 93 5d 01 	sts	0x015D, r23	; 0x80015d <DEG1.2896+0x1>
     5fc:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <DEG1.2896+0x2>
     600:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <DEG1.2896+0x3>
			DEG2 = PID(y_error,last_error_y,inc_error_y);
     604:	e0 90 58 01 	lds	r14, 0x0158	; 0x800158 <inc_error_y.2901>
     608:	f0 90 59 01 	lds	r15, 0x0159	; 0x800159 <inc_error_y.2901+0x1>
     60c:	00 91 5a 01 	lds	r16, 0x015A	; 0x80015a <inc_error_y.2901+0x2>
     610:	10 91 5b 01 	lds	r17, 0x015B	; 0x80015b <inc_error_y.2901+0x3>
     614:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <last_error_y.2900>
     618:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <last_error_y.2900+0x1>
     61c:	40 91 56 01 	lds	r20, 0x0156	; 0x800156 <last_error_y.2900+0x2>
     620:	50 91 57 01 	lds	r21, 0x0157	; 0x800157 <last_error_y.2900+0x3>
     624:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <y_error.2895>
     628:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <y_error.2895+0x1>
     62c:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <y_error.2895+0x2>
     630:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <y_error.2895+0x3>
     634:	0e 94 09 04 	call	0x812	; 0x812 <PID>
     638:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <__data_end>
     63c:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <__data_end+0x1>
     640:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <__data_end+0x2>
     644:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <__data_end+0x3>
			if (abs(inc_error_x)<Increament_Max)
     648:	80 90 64 01 	lds	r8, 0x0164	; 0x800164 <inc_error_x.2899>
     64c:	90 90 65 01 	lds	r9, 0x0165	; 0x800165 <inc_error_x.2899+0x1>
     650:	a0 90 66 01 	lds	r10, 0x0166	; 0x800166 <inc_error_x.2899+0x2>
     654:	b0 90 67 01 	lds	r11, 0x0167	; 0x800167 <inc_error_x.2899+0x3>
     658:	c5 01       	movw	r24, r10
     65a:	b4 01       	movw	r22, r8
     65c:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__fixsfsi>
     660:	9b 01       	movw	r18, r22
     662:	77 23       	and	r23, r23
     664:	24 f4       	brge	.+8      	; 0x66e <vControlTaskFunction+0x102>
     666:	22 27       	eor	r18, r18
     668:	33 27       	eor	r19, r19
     66a:	26 1b       	sub	r18, r22
     66c:	37 0b       	sbc	r19, r23
     66e:	b9 01       	movw	r22, r18
     670:	33 0f       	add	r19, r19
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
     67a:	2b ed       	ldi	r18, 0xDB	; 219
     67c:	36 eb       	ldi	r19, 0xB6	; 182
     67e:	4d ec       	ldi	r20, 0xCD	; 205
     680:	51 e4       	ldi	r21, 0x41	; 65
     682:	0e 94 6d 19 	call	0x32da	; 0x32da <__cmpsf2>
     686:	88 23       	and	r24, r24
     688:	d4 f4       	brge	.+52     	; 0x6be <vControlTaskFunction+0x152>
			{
				inc_error_x += x_error/PID_Freq;
     68a:	26 e6       	ldi	r18, 0x66	; 102
     68c:	36 e6       	ldi	r19, 0x66	; 102
     68e:	45 e8       	ldi	r20, 0x85	; 133
     690:	52 e4       	ldi	r21, 0x42	; 66
     692:	60 91 6c 01 	lds	r22, 0x016C	; 0x80016c <x_error.2894>
     696:	70 91 6d 01 	lds	r23, 0x016D	; 0x80016d <x_error.2894+0x1>
     69a:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <x_error.2894+0x2>
     69e:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <x_error.2894+0x3>
     6a2:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__divsf3>
     6a6:	a5 01       	movw	r20, r10
     6a8:	94 01       	movw	r18, r8
     6aa:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     6ae:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <inc_error_x.2899>
     6b2:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <inc_error_x.2899+0x1>
     6b6:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <inc_error_x.2899+0x2>
     6ba:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <inc_error_x.2899+0x3>
			}
			last_error_x = x_error;
     6be:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <x_error.2894>
     6c2:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <x_error.2894+0x1>
     6c6:	a0 91 6e 01 	lds	r26, 0x016E	; 0x80016e <x_error.2894+0x2>
     6ca:	b0 91 6f 01 	lds	r27, 0x016F	; 0x80016f <x_error.2894+0x3>
     6ce:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <last_error_x.2898>
     6d2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <last_error_x.2898+0x1>
     6d6:	a0 93 62 01 	sts	0x0162, r26	; 0x800162 <last_error_x.2898+0x2>
     6da:	b0 93 63 01 	sts	0x0163, r27	; 0x800163 <last_error_x.2898+0x3>
			if (abs(inc_error_y)<Increament_Max)
     6de:	80 90 58 01 	lds	r8, 0x0158	; 0x800158 <inc_error_y.2901>
     6e2:	90 90 59 01 	lds	r9, 0x0159	; 0x800159 <inc_error_y.2901+0x1>
     6e6:	a0 90 5a 01 	lds	r10, 0x015A	; 0x80015a <inc_error_y.2901+0x2>
     6ea:	b0 90 5b 01 	lds	r11, 0x015B	; 0x80015b <inc_error_y.2901+0x3>
     6ee:	c5 01       	movw	r24, r10
     6f0:	b4 01       	movw	r22, r8
     6f2:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__fixsfsi>
     6f6:	9b 01       	movw	r18, r22
     6f8:	77 23       	and	r23, r23
     6fa:	24 f4       	brge	.+8      	; 0x704 <vControlTaskFunction+0x198>
     6fc:	22 27       	eor	r18, r18
     6fe:	33 27       	eor	r19, r19
     700:	26 1b       	sub	r18, r22
     702:	37 0b       	sbc	r19, r23
     704:	b9 01       	movw	r22, r18
     706:	33 0f       	add	r19, r19
     708:	88 0b       	sbc	r24, r24
     70a:	99 0b       	sbc	r25, r25
     70c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
     710:	2b ed       	ldi	r18, 0xDB	; 219
     712:	36 eb       	ldi	r19, 0xB6	; 182
     714:	4d ec       	ldi	r20, 0xCD	; 205
     716:	51 e4       	ldi	r21, 0x41	; 65
     718:	0e 94 6d 19 	call	0x32da	; 0x32da <__cmpsf2>
     71c:	88 23       	and	r24, r24
     71e:	d4 f4       	brge	.+52     	; 0x754 <vControlTaskFunction+0x1e8>
			{
				inc_error_y += y_error/PID_Freq;
     720:	26 e6       	ldi	r18, 0x66	; 102
     722:	36 e6       	ldi	r19, 0x66	; 102
     724:	45 e8       	ldi	r20, 0x85	; 133
     726:	52 e4       	ldi	r21, 0x42	; 66
     728:	60 91 68 01 	lds	r22, 0x0168	; 0x800168 <y_error.2895>
     72c:	70 91 69 01 	lds	r23, 0x0169	; 0x800169 <y_error.2895+0x1>
     730:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <y_error.2895+0x2>
     734:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <y_error.2895+0x3>
     738:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__divsf3>
     73c:	a5 01       	movw	r20, r10
     73e:	94 01       	movw	r18, r8
     740:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     744:	60 93 58 01 	sts	0x0158, r22	; 0x800158 <inc_error_y.2901>
     748:	70 93 59 01 	sts	0x0159, r23	; 0x800159 <inc_error_y.2901+0x1>
     74c:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <inc_error_y.2901+0x2>
     750:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <inc_error_y.2901+0x3>
			}
			last_error_y = y_error;
     754:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <y_error.2895>
     758:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <y_error.2895+0x1>
     75c:	a0 91 6a 01 	lds	r26, 0x016A	; 0x80016a <y_error.2895+0x2>
     760:	b0 91 6b 01 	lds	r27, 0x016B	; 0x80016b <y_error.2895+0x3>
     764:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <last_error_y.2900>
     768:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <last_error_y.2900+0x1>
     76c:	a0 93 56 01 	sts	0x0156, r26	; 0x800156 <last_error_y.2900+0x2>
     770:	b0 93 57 01 	sts	0x0157, r27	; 0x800157 <last_error_y.2900+0x3>
// 			sprintf(MyString,"Y %f \n",Angle[1]);
// 			UART_putstring(MyString);

			deg_to_servo1(DEG1);
     774:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <DEG1.2896>
     778:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <DEG1.2896+0x1>
     77c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <DEG1.2896+0x2>
     780:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <DEG1.2896+0x3>
     784:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__fixsfsi>
     788:	cb 01       	movw	r24, r22
     78a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <deg_to_servo1>
			deg_to_servo2(DEG2);
     78e:	60 91 50 01 	lds	r22, 0x0150	; 0x800150 <__data_end>
     792:	70 91 51 01 	lds	r23, 0x0151	; 0x800151 <__data_end+0x1>
     796:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <__data_end+0x2>
     79a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <__data_end+0x3>
     79e:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__fixsfsi>
     7a2:	cb 01       	movw	r24, r22
     7a4:	0e 94 8c 01 	call	0x318	; 0x318 <deg_to_servo2>
/*			BalanceControl(Angle);*/
// 			sprintf(MyString,"Task Control\n");
// 			UART_putstring(MyString);
			
		}
     7a8:	f0 ce       	rjmp	.-544    	; 0x58a <vControlTaskFunction+0x1e>

000007aa <MytaskCreate>:
	}
	vTaskDelete( NULL );
}
//
void MytaskCreate(void)
{
     7aa:	ef 92       	push	r14
     7ac:	ff 92       	push	r15
     7ae:	0f 93       	push	r16
	/* Create tasks and make some magic*/

	xTaskCreate( vMahonyTaskFunction,"TASKA",256,NULL,3,NULL);
     7b0:	e1 2c       	mov	r14, r1
     7b2:	f1 2c       	mov	r15, r1
     7b4:	03 e0       	ldi	r16, 0x03	; 3
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	51 e0       	ldi	r21, 0x01	; 1
     7be:	6a e2       	ldi	r22, 0x2A	; 42
     7c0:	71 e0       	ldi	r23, 0x01	; 1
     7c2:	87 e4       	ldi	r24, 0x47	; 71
     7c4:	92 e0       	ldi	r25, 0x02	; 2
     7c6:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
	xTaskCreate( vMPU6050TaskFunction,"TASKB",256,NULL, 2,NULL);
     7ca:	02 e0       	ldi	r16, 0x02	; 2
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	40 e0       	ldi	r20, 0x00	; 0
     7d2:	51 e0       	ldi	r21, 0x01	; 1
     7d4:	60 e3       	ldi	r22, 0x30	; 48
     7d6:	71 e0       	ldi	r23, 0x01	; 1
     7d8:	80 ea       	ldi	r24, 0xA0	; 160
     7da:	92 e0       	ldi	r25, 0x02	; 2
     7dc:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
	xTaskCreate( vControlTaskFunction,"TASKC",256,NULL,4,NULL);
     7e0:	04 e0       	ldi	r16, 0x04	; 4
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	51 e0       	ldi	r21, 0x01	; 1
     7ea:	66 e3       	ldi	r22, 0x36	; 54
     7ec:	71 e0       	ldi	r23, 0x01	; 1
     7ee:	86 eb       	ldi	r24, 0xB6	; 182
     7f0:	92 e0       	ldi	r25, 0x02	; 2
     7f2:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
	xTaskCreate( vADCTaskFunction,"TASKD",128,NULL,4,NULL);
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e8       	ldi	r20, 0x80	; 128
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	6c e3       	ldi	r22, 0x3C	; 60
     800:	71 e0       	ldi	r23, 0x01	; 1
     802:	88 ef       	ldi	r24, 0xF8	; 248
     804:	91 e0       	ldi	r25, 0x01	; 1
     806:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
	
}
     80a:	0f 91       	pop	r16
     80c:	ff 90       	pop	r15
     80e:	ef 90       	pop	r14
     810:	08 95       	ret

00000812 <PID>:
// float y_error;
// float DEG1;
// float DEG2;

float PID(float error, float last_error, float increment_error)
{
     812:	4f 92       	push	r4
     814:	5f 92       	push	r5
     816:	6f 92       	push	r6
     818:	7f 92       	push	r7
     81a:	8f 92       	push	r8
     81c:	9f 92       	push	r9
     81e:	af 92       	push	r10
     820:	bf 92       	push	r11
     822:	cf 92       	push	r12
     824:	df 92       	push	r13
     826:	ef 92       	push	r14
     828:	ff 92       	push	r15
     82a:	0f 93       	push	r16
     82c:	1f 93       	push	r17
     82e:	cf 93       	push	r28
     830:	df 93       	push	r29
     832:	00 d0       	rcall	.+0      	; 0x834 <PID+0x22>
     834:	00 d0       	rcall	.+0      	; 0x836 <PID+0x24>
     836:	cd b7       	in	r28, 0x3d	; 61
     838:	de b7       	in	r29, 0x3e	; 62
     83a:	4b 01       	movw	r8, r22
     83c:	5c 01       	movw	r10, r24
     83e:	29 01       	movw	r4, r18
     840:	3a 01       	movw	r6, r20
     842:	e9 82       	std	Y+1, r14	; 0x01
     844:	fa 82       	std	Y+2, r15	; 0x02
     846:	0b 83       	std	Y+3, r16	; 0x03
     848:	1c 83       	std	Y+4, r17	; 0x04
	static float output;
	output = (float)error*Kp+increment_error*Ki+(error-last_error)*Kd;
     84a:	2d ec       	ldi	r18, 0xCD	; 205
     84c:	3c ec       	ldi	r19, 0xCC	; 204
     84e:	4c e4       	ldi	r20, 0x4C	; 76
     850:	5f e3       	ldi	r21, 0x3F	; 63
     852:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e6       	ldi	r20, 0x60	; 96
     860:	50 e4       	ldi	r21, 0x40	; 64
     862:	69 81       	ldd	r22, Y+1	; 0x01
     864:	7a 81       	ldd	r23, Y+2	; 0x02
     866:	8b 81       	ldd	r24, Y+3	; 0x03
     868:	9c 81       	ldd	r25, Y+4	; 0x04
     86a:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     86e:	9b 01       	movw	r18, r22
     870:	ac 01       	movw	r20, r24
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     87a:	6b 01       	movw	r12, r22
     87c:	7c 01       	movw	r14, r24
     87e:	a3 01       	movw	r20, r6
     880:	92 01       	movw	r18, r4
     882:	c5 01       	movw	r24, r10
     884:	b4 01       	movw	r22, r8
     886:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     88a:	20 e0       	ldi	r18, 0x00	; 0
     88c:	30 e0       	ldi	r19, 0x00	; 0
     88e:	a9 01       	movw	r20, r18
     890:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     894:	26 e6       	ldi	r18, 0x66	; 102
     896:	36 e6       	ldi	r19, 0x66	; 102
     898:	45 e8       	ldi	r20, 0x85	; 133
     89a:	52 e4       	ldi	r21, 0x42	; 66
     89c:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     8a0:	9b 01       	movw	r18, r22
     8a2:	ac 01       	movw	r20, r24
     8a4:	c7 01       	movw	r24, r14
     8a6:	b6 01       	movw	r22, r12
     8a8:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     8ac:	6b 01       	movw	r12, r22
     8ae:	7c 01       	movw	r14, r24
     8b0:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <output.1827>
     8b4:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <output.1827+0x1>
     8b8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <output.1827+0x2>
     8bc:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <output.1827+0x3>
// 	if(increment_error < - Increament_Max/Ki)
// 	{
// 		increment_error = - Increament_Max/Ki;
// 	}

	if (output>85)
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	4a ea       	ldi	r20, 0xAA	; 170
     8c6:	52 e4       	ldi	r21, 0x42	; 66
     8c8:	0e 94 27 1b 	call	0x364e	; 0x364e <__gesf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	6c f4       	brge	.+26     	; 0x8ea <PID+0xd8>
	{
		output = 85;
     8d0:	80 e0       	ldi	r24, 0x00	; 0
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	aa ea       	ldi	r26, 0xAA	; 170
     8d6:	b2 e4       	ldi	r27, 0x42	; 66
     8d8:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <output.1827>
     8dc:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <output.1827+0x1>
     8e0:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <output.1827+0x2>
     8e4:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <output.1827+0x3>
     8e8:	16 c0       	rjmp	.+44     	; 0x916 <__stack+0x17>
	}
	if (output<-85)
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	4a ea       	ldi	r20, 0xAA	; 170
     8f0:	52 ec       	ldi	r21, 0xC2	; 194
     8f2:	c7 01       	movw	r24, r14
     8f4:	b6 01       	movw	r22, r12
     8f6:	0e 94 6d 19 	call	0x32da	; 0x32da <__cmpsf2>
     8fa:	88 23       	and	r24, r24
     8fc:	64 f4       	brge	.+24     	; 0x916 <__stack+0x17>
	{
		output = -85;
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	90 e0       	ldi	r25, 0x00	; 0
     902:	aa ea       	ldi	r26, 0xAA	; 170
     904:	b2 ec       	ldi	r27, 0xC2	; 194
     906:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <output.1827>
     90a:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <output.1827+0x1>
     90e:	a0 93 72 01 	sts	0x0172, r26	; 0x800172 <output.1827+0x2>
     912:	b0 93 73 01 	sts	0x0173, r27	; 0x800173 <output.1827+0x3>
	}
	output += 90;
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	44 eb       	ldi	r20, 0xB4	; 180
     91c:	52 e4       	ldi	r21, 0x42	; 66
     91e:	60 91 70 01 	lds	r22, 0x0170	; 0x800170 <output.1827>
     922:	70 91 71 01 	lds	r23, 0x0171	; 0x800171 <output.1827+0x1>
     926:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <output.1827+0x2>
     92a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <output.1827+0x3>
     92e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     932:	60 93 70 01 	sts	0x0170, r22	; 0x800170 <output.1827>
     936:	70 93 71 01 	sts	0x0171, r23	; 0x800171 <output.1827+0x1>
     93a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <output.1827+0x2>
     93e:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <output.1827+0x3>
	return output;

}
     942:	0f 90       	pop	r0
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	ff 90       	pop	r15
     954:	ef 90       	pop	r14
     956:	df 90       	pop	r13
     958:	cf 90       	pop	r12
     95a:	bf 90       	pop	r11
     95c:	af 90       	pop	r10
     95e:	9f 90       	pop	r9
     960:	8f 90       	pop	r8
     962:	7f 90       	pop	r7
     964:	6f 90       	pop	r6
     966:	5f 90       	pop	r5
     968:	4f 90       	pop	r4
     96a:	08 95       	ret

0000096c <invSqrt>:
float integralFBx = 0;
float integralFBy = 0;
float integralFBz = 0;

float invSqrt( float number )
{
     96c:	cf 92       	push	r12
     96e:	df 92       	push	r13
     970:	ef 92       	push	r14
     972:	ff 92       	push	r15
     974:	0f 93       	push	r16
     976:	1f 93       	push	r17

	x2 = number * 0.5F;
	y  = number;
	i  = * ( long * ) &y;                       
	i  = 0x5f3759df - ( i >> 1 );               
	y  = * ( float * ) &i;
     978:	8b 01       	movw	r16, r22
     97a:	9c 01       	movw	r18, r24
     97c:	35 95       	asr	r19
     97e:	27 95       	ror	r18
     980:	17 95       	ror	r17
     982:	07 95       	ror	r16
     984:	0f 2e       	mov	r0, r31
     986:	ff ed       	ldi	r31, 0xDF	; 223
     988:	cf 2e       	mov	r12, r31
     98a:	f9 e5       	ldi	r31, 0x59	; 89
     98c:	df 2e       	mov	r13, r31
     98e:	f7 e3       	ldi	r31, 0x37	; 55
     990:	ef 2e       	mov	r14, r31
     992:	ff e5       	ldi	r31, 0x5F	; 95
     994:	ff 2e       	mov	r15, r31
     996:	f0 2d       	mov	r31, r0
     998:	c0 1a       	sub	r12, r16
     99a:	d1 0a       	sbc	r13, r17
     99c:	e2 0a       	sbc	r14, r18
     99e:	f3 0a       	sbc	r15, r19
	y  = y * ( threehalfs - ( x2 * y * y ) );   

	return y;
     9a0:	20 e0       	ldi	r18, 0x00	; 0
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	5f e3       	ldi	r21, 0x3F	; 63
     9a8:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     9ac:	a7 01       	movw	r20, r14
     9ae:	96 01       	movw	r18, r12
     9b0:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     9b4:	a7 01       	movw	r20, r14
     9b6:	96 01       	movw	r18, r12
     9b8:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	60 e0       	ldi	r22, 0x00	; 0
     9c2:	70 e0       	ldi	r23, 0x00	; 0
     9c4:	80 ec       	ldi	r24, 0xC0	; 192
     9c6:	9f e3       	ldi	r25, 0x3F	; 63
     9c8:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     9cc:	a7 01       	movw	r20, r14
     9ce:	96 01       	movw	r18, r12
     9d0:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
}
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	df 90       	pop	r13
     9de:	cf 90       	pop	r12
     9e0:	08 95       	ret

000009e2 <MahonyAHRSupdateIMU>:

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) 
{
     9e2:	4f 92       	push	r4
     9e4:	5f 92       	push	r5
     9e6:	6f 92       	push	r6
     9e8:	7f 92       	push	r7
     9ea:	8f 92       	push	r8
     9ec:	9f 92       	push	r9
     9ee:	af 92       	push	r10
     9f0:	bf 92       	push	r11
     9f2:	cf 92       	push	r12
     9f4:	df 92       	push	r13
     9f6:	ef 92       	push	r14
     9f8:	ff 92       	push	r15
     9fa:	0f 93       	push	r16
     9fc:	1f 93       	push	r17
     9fe:	cf 93       	push	r28
     a00:	df 93       	push	r29
     a02:	cd b7       	in	r28, 0x3d	; 61
     a04:	de b7       	in	r29, 0x3e	; 62
     a06:	a0 97       	sbiw	r28, 0x20	; 32
     a08:	0f b6       	in	r0, 0x3f	; 63
     a0a:	f8 94       	cli
     a0c:	de bf       	out	0x3e, r29	; 62
     a0e:	0f be       	out	0x3f, r0	; 63
     a10:	cd bf       	out	0x3d, r28	; 61
     a12:	69 87       	std	Y+9, r22	; 0x09
     a14:	7a 87       	std	Y+10, r23	; 0x0a
     a16:	8b 87       	std	Y+11, r24	; 0x0b
     a18:	9c 87       	std	Y+12, r25	; 0x0c
     a1a:	2d 87       	std	Y+13, r18	; 0x0d
     a1c:	3e 87       	std	Y+14, r19	; 0x0e
     a1e:	4f 87       	std	Y+15, r20	; 0x0f
     a20:	58 8b       	std	Y+16, r21	; 0x10
     a22:	e9 8a       	std	Y+17, r14	; 0x11
     a24:	fa 8a       	std	Y+18, r15	; 0x12
     a26:	0b 8b       	std	Y+19, r16	; 0x13
     a28:	1c 8b       	std	Y+20, r17	; 0x14

	float qa, qb, qc;
	
	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)

	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	a9 01       	movw	r20, r18
     a30:	c6 01       	movw	r24, r12
     a32:	b5 01       	movw	r22, r10
     a34:	0e 94 6d 19 	call	0x32da	; 0x32da <__cmpsf2>
     a38:	81 11       	cpse	r24, r1
     a3a:	17 c0       	rjmp	.+46     	; 0xa6a <MahonyAHRSupdateIMU+0x88>
     a3c:	20 e0       	ldi	r18, 0x00	; 0
     a3e:	30 e0       	ldi	r19, 0x00	; 0
     a40:	a9 01       	movw	r20, r18
     a42:	6b a9       	ldd	r22, Y+51	; 0x33
     a44:	7c a9       	ldd	r23, Y+52	; 0x34
     a46:	8d a9       	ldd	r24, Y+53	; 0x35
     a48:	9e a9       	ldd	r25, Y+54	; 0x36
     a4a:	0e 94 6d 19 	call	0x32da	; 0x32da <__cmpsf2>
     a4e:	81 11       	cpse	r24, r1
     a50:	0c c0       	rjmp	.+24     	; 0xa6a <MahonyAHRSupdateIMU+0x88>
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	a9 01       	movw	r20, r18
     a58:	6f a9       	ldd	r22, Y+55	; 0x37
     a5a:	78 ad       	ldd	r23, Y+56	; 0x38
     a5c:	89 ad       	ldd	r24, Y+57	; 0x39
     a5e:	9a ad       	ldd	r25, Y+58	; 0x3a
     a60:	0e 94 6d 19 	call	0x32da	; 0x32da <__cmpsf2>
     a64:	88 23       	and	r24, r24
     a66:	09 f4       	brne	.+2      	; 0xa6a <MahonyAHRSupdateIMU+0x88>
     a68:	50 c1       	rjmp	.+672    	; 0xd0a <MahonyAHRSupdateIMU+0x328>

		// Normalise accelerometer measurement

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     a6a:	a6 01       	movw	r20, r12
     a6c:	95 01       	movw	r18, r10
     a6e:	c6 01       	movw	r24, r12
     a70:	b5 01       	movw	r22, r10
     a72:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     a76:	2b 01       	movw	r4, r22
     a78:	3c 01       	movw	r6, r24
     a7a:	2b a9       	ldd	r18, Y+51	; 0x33
     a7c:	3c a9       	ldd	r19, Y+52	; 0x34
     a7e:	4d a9       	ldd	r20, Y+53	; 0x35
     a80:	5e a9       	ldd	r21, Y+54	; 0x36
     a82:	ca 01       	movw	r24, r20
     a84:	b9 01       	movw	r22, r18
     a86:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     a8a:	9b 01       	movw	r18, r22
     a8c:	ac 01       	movw	r20, r24
     a8e:	c3 01       	movw	r24, r6
     a90:	b2 01       	movw	r22, r4
     a92:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     a96:	2b 01       	movw	r4, r22
     a98:	3c 01       	movw	r6, r24
     a9a:	2f a9       	ldd	r18, Y+55	; 0x37
     a9c:	38 ad       	ldd	r19, Y+56	; 0x38
     a9e:	49 ad       	ldd	r20, Y+57	; 0x39
     aa0:	5a ad       	ldd	r21, Y+58	; 0x3a
     aa2:	ca 01       	movw	r24, r20
     aa4:	b9 01       	movw	r22, r18
     aa6:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	c3 01       	movw	r24, r6
     ab0:	b2 01       	movw	r22, r4
     ab2:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     ab6:	0e 94 b6 04 	call	0x96c	; 0x96c <invSqrt>
     aba:	2b 01       	movw	r4, r22
     abc:	3c 01       	movw	r6, r24

		ax *= recipNorm;
     abe:	9b 01       	movw	r18, r22
     ac0:	ac 01       	movw	r20, r24
     ac2:	c6 01       	movw	r24, r12
     ac4:	b5 01       	movw	r22, r10
     ac6:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     aca:	69 8f       	std	Y+25, r22	; 0x19
     acc:	7a 8f       	std	Y+26, r23	; 0x1a
     ace:	8b 8f       	std	Y+27, r24	; 0x1b
     ad0:	9c 8f       	std	Y+28, r25	; 0x1c

		ay *= recipNorm;
     ad2:	a3 01       	movw	r20, r6
     ad4:	92 01       	movw	r18, r4
     ad6:	6b a9       	ldd	r22, Y+51	; 0x33
     ad8:	7c a9       	ldd	r23, Y+52	; 0x34
     ada:	8d a9       	ldd	r24, Y+53	; 0x35
     adc:	9e a9       	ldd	r25, Y+54	; 0x36
     ade:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     ae2:	6d 8f       	std	Y+29, r22	; 0x1d
     ae4:	7e 8f       	std	Y+30, r23	; 0x1e
     ae6:	8f 8f       	std	Y+31, r24	; 0x1f
     ae8:	98 a3       	std	Y+32, r25	; 0x20

		az *= recipNorm;
     aea:	a3 01       	movw	r20, r6
     aec:	92 01       	movw	r18, r4
     aee:	6f a9       	ldd	r22, Y+55	; 0x37
     af0:	78 ad       	ldd	r23, Y+56	; 0x38
     af2:	89 ad       	ldd	r24, Y+57	; 0x39
     af4:	9a ad       	ldd	r25, Y+58	; 0x3a
     af6:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     afa:	6d 83       	std	Y+5, r22	; 0x05
     afc:	7e 83       	std	Y+6, r23	; 0x06
     afe:	8f 83       	std	Y+7, r24	; 0x07
     b00:	98 87       	std	Y+8, r25	; 0x08

		// Estimated direction of gravity and vector perpendicular to magnetic flux

		halfvx = q1 * q3 - q0 * q2;
     b02:	80 90 88 01 	lds	r8, 0x0188	; 0x800188 <q1>
     b06:	90 90 89 01 	lds	r9, 0x0189	; 0x800189 <q1+0x1>
     b0a:	a0 90 8a 01 	lds	r10, 0x018A	; 0x80018a <q1+0x2>
     b0e:	b0 90 8b 01 	lds	r11, 0x018B	; 0x80018b <q1+0x3>
     b12:	40 90 80 01 	lds	r4, 0x0180	; 0x800180 <q3>
     b16:	50 90 81 01 	lds	r5, 0x0181	; 0x800181 <q3+0x1>
     b1a:	60 90 82 01 	lds	r6, 0x0182	; 0x800182 <q3+0x2>
     b1e:	70 90 83 01 	lds	r7, 0x0183	; 0x800183 <q3+0x3>
     b22:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <q0>
     b26:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <q0+0x1>
     b2a:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <q0+0x2>
     b2e:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <q0+0x3>
     b32:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <q2>
     b36:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <q2+0x1>
     b3a:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <q2+0x2>
     b3e:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <q2+0x3>
     b42:	89 83       	std	Y+1, r24	; 0x01
     b44:	9a 83       	std	Y+2, r25	; 0x02
     b46:	ab 83       	std	Y+3, r26	; 0x03
     b48:	bc 83       	std	Y+4, r27	; 0x04
     b4a:	a3 01       	movw	r20, r6
     b4c:	92 01       	movw	r18, r4
     b4e:	c5 01       	movw	r24, r10
     b50:	b4 01       	movw	r22, r8
     b52:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     b56:	6d 8b       	std	Y+21, r22	; 0x15
     b58:	7e 8b       	std	Y+22, r23	; 0x16
     b5a:	8f 8b       	std	Y+23, r24	; 0x17
     b5c:	98 8f       	std	Y+24, r25	; 0x18
     b5e:	29 81       	ldd	r18, Y+1	; 0x01
     b60:	3a 81       	ldd	r19, Y+2	; 0x02
     b62:	4b 81       	ldd	r20, Y+3	; 0x03
     b64:	5c 81       	ldd	r21, Y+4	; 0x04
     b66:	c7 01       	movw	r24, r14
     b68:	b6 01       	movw	r22, r12
     b6a:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     b6e:	9b 01       	movw	r18, r22
     b70:	ac 01       	movw	r20, r24
     b72:	6d 89       	ldd	r22, Y+21	; 0x15
     b74:	7e 89       	ldd	r23, Y+22	; 0x16
     b76:	8f 89       	ldd	r24, Y+23	; 0x17
     b78:	98 8d       	ldd	r25, Y+24	; 0x18
     b7a:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     b7e:	6d 8b       	std	Y+21, r22	; 0x15
     b80:	7e 8b       	std	Y+22, r23	; 0x16
     b82:	8f 8b       	std	Y+23, r24	; 0x17
     b84:	98 8f       	std	Y+24, r25	; 0x18

		halfvy = q0 * q1 + q2 * q3;
     b86:	a7 01       	movw	r20, r14
     b88:	96 01       	movw	r18, r12
     b8a:	c5 01       	movw	r24, r10
     b8c:	b4 01       	movw	r22, r8
     b8e:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     b92:	4b 01       	movw	r8, r22
     b94:	5c 01       	movw	r10, r24
     b96:	29 81       	ldd	r18, Y+1	; 0x01
     b98:	3a 81       	ldd	r19, Y+2	; 0x02
     b9a:	4b 81       	ldd	r20, Y+3	; 0x03
     b9c:	5c 81       	ldd	r21, Y+4	; 0x04
     b9e:	c3 01       	movw	r24, r6
     ba0:	b2 01       	movw	r22, r4
     ba2:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     ba6:	9b 01       	movw	r18, r22
     ba8:	ac 01       	movw	r20, r24
     baa:	c5 01       	movw	r24, r10
     bac:	b4 01       	movw	r22, r8
     bae:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     bb2:	69 83       	std	Y+1, r22	; 0x01
     bb4:	7a 83       	std	Y+2, r23	; 0x02
     bb6:	8b 83       	std	Y+3, r24	; 0x03
     bb8:	9c 83       	std	Y+4, r25	; 0x04

		halfvz = q0 * q0 - 0.5f + q3 * q3;
     bba:	a7 01       	movw	r20, r14
     bbc:	96 01       	movw	r18, r12
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 01       	movw	r22, r12
     bc2:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	30 e0       	ldi	r19, 0x00	; 0
     bca:	40 e0       	ldi	r20, 0x00	; 0
     bcc:	5f e3       	ldi	r21, 0x3F	; 63
     bce:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     bd2:	6b 01       	movw	r12, r22
     bd4:	7c 01       	movw	r14, r24
     bd6:	a3 01       	movw	r20, r6
     bd8:	92 01       	movw	r18, r4
     bda:	c3 01       	movw	r24, r6
     bdc:	b2 01       	movw	r22, r4
     bde:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	c7 01       	movw	r24, r14
     be8:	b6 01       	movw	r22, r12
     bea:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     bee:	6b 01       	movw	r12, r22
     bf0:	7c 01       	movw	r14, r24

		}

		else {

			integralFBx = 0.0f; // prevent integral windup
     bf2:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <integralFBx>
     bf6:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <integralFBx+0x1>
     bfa:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <integralFBx+0x2>
     bfe:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <integralFBx+0x3>

			integralFBy = 0.0f;
     c02:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <integralFBy>
     c06:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <integralFBy+0x1>
     c0a:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <integralFBy+0x2>
     c0e:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <integralFBy+0x3>

			integralFBz = 0.0f;
     c12:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <integralFBz>
     c16:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <integralFBz+0x1>
     c1a:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <integralFBz+0x2>
     c1e:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <integralFBz+0x3>

		}

		// Apply proportional feedback

		gx += twoKp * halfex;
     c22:	9b 01       	movw	r18, r22
     c24:	ac 01       	movw	r20, r24
     c26:	6d 8d       	ldd	r22, Y+29	; 0x1d
     c28:	7e 8d       	ldd	r23, Y+30	; 0x1e
     c2a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c2c:	98 a1       	ldd	r25, Y+32	; 0x20
     c2e:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     c32:	4b 01       	movw	r8, r22
     c34:	5c 01       	movw	r10, r24
     c36:	29 81       	ldd	r18, Y+1	; 0x01
     c38:	3a 81       	ldd	r19, Y+2	; 0x02
     c3a:	4b 81       	ldd	r20, Y+3	; 0x03
     c3c:	5c 81       	ldd	r21, Y+4	; 0x04
     c3e:	6d 81       	ldd	r22, Y+5	; 0x05
     c40:	7e 81       	ldd	r23, Y+6	; 0x06
     c42:	8f 81       	ldd	r24, Y+7	; 0x07
     c44:	98 85       	ldd	r25, Y+8	; 0x08
     c46:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     c4a:	9b 01       	movw	r18, r22
     c4c:	ac 01       	movw	r20, r24
     c4e:	c5 01       	movw	r24, r10
     c50:	b4 01       	movw	r22, r8
     c52:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	69 85       	ldd	r22, Y+9	; 0x09
     c5c:	7a 85       	ldd	r23, Y+10	; 0x0a
     c5e:	8b 85       	ldd	r24, Y+11	; 0x0b
     c60:	9c 85       	ldd	r25, Y+12	; 0x0c
     c62:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     c66:	69 87       	std	Y+9, r22	; 0x09
     c68:	7a 87       	std	Y+10, r23	; 0x0a
     c6a:	8b 87       	std	Y+11, r24	; 0x0b
     c6c:	9c 87       	std	Y+12, r25	; 0x0c

		gy += twoKp * halfey;
     c6e:	2d 89       	ldd	r18, Y+21	; 0x15
     c70:	3e 89       	ldd	r19, Y+22	; 0x16
     c72:	4f 89       	ldd	r20, Y+23	; 0x17
     c74:	58 8d       	ldd	r21, Y+24	; 0x18
     c76:	6d 81       	ldd	r22, Y+5	; 0x05
     c78:	7e 81       	ldd	r23, Y+6	; 0x06
     c7a:	8f 81       	ldd	r24, Y+7	; 0x07
     c7c:	98 85       	ldd	r25, Y+8	; 0x08
     c7e:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     c82:	4b 01       	movw	r8, r22
     c84:	5c 01       	movw	r10, r24
     c86:	a7 01       	movw	r20, r14
     c88:	96 01       	movw	r18, r12
     c8a:	69 8d       	ldd	r22, Y+25	; 0x19
     c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c92:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     c96:	9b 01       	movw	r18, r22
     c98:	ac 01       	movw	r20, r24
     c9a:	c5 01       	movw	r24, r10
     c9c:	b4 01       	movw	r22, r8
     c9e:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     ca2:	9b 01       	movw	r18, r22
     ca4:	ac 01       	movw	r20, r24
     ca6:	6d 85       	ldd	r22, Y+13	; 0x0d
     ca8:	7e 85       	ldd	r23, Y+14	; 0x0e
     caa:	8f 85       	ldd	r24, Y+15	; 0x0f
     cac:	98 89       	ldd	r25, Y+16	; 0x10
     cae:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     cb2:	6d 87       	std	Y+13, r22	; 0x0d
     cb4:	7e 87       	std	Y+14, r23	; 0x0e
     cb6:	8f 87       	std	Y+15, r24	; 0x0f
     cb8:	98 8b       	std	Y+16, r25	; 0x10

		gz += twoKp * halfez;
     cba:	29 81       	ldd	r18, Y+1	; 0x01
     cbc:	3a 81       	ldd	r19, Y+2	; 0x02
     cbe:	4b 81       	ldd	r20, Y+3	; 0x03
     cc0:	5c 81       	ldd	r21, Y+4	; 0x04
     cc2:	69 8d       	ldd	r22, Y+25	; 0x19
     cc4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cca:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
     cd2:	2d 89       	ldd	r18, Y+21	; 0x15
     cd4:	3e 89       	ldd	r19, Y+22	; 0x16
     cd6:	4f 89       	ldd	r20, Y+23	; 0x17
     cd8:	58 8d       	ldd	r21, Y+24	; 0x18
     cda:	6d 8d       	ldd	r22, Y+29	; 0x1d
     cdc:	7e 8d       	ldd	r23, Y+30	; 0x1e
     cde:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ce0:	98 a1       	ldd	r25, Y+32	; 0x20
     ce2:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	c7 01       	movw	r24, r14
     cec:	b6 01       	movw	r22, r12
     cee:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     cf2:	9b 01       	movw	r18, r22
     cf4:	ac 01       	movw	r20, r24
     cf6:	69 89       	ldd	r22, Y+17	; 0x11
     cf8:	7a 89       	ldd	r23, Y+18	; 0x12
     cfa:	8b 89       	ldd	r24, Y+19	; 0x13
     cfc:	9c 89       	ldd	r25, Y+20	; 0x14
     cfe:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     d02:	69 8b       	std	Y+17, r22	; 0x11
     d04:	7a 8b       	std	Y+18, r23	; 0x12
     d06:	8b 8b       	std	Y+19, r24	; 0x13
     d08:	9c 8b       	std	Y+20, r25	; 0x14

	}

	// Integrate rate of change of quaternion

	gx *= (0.5f * (1.0f / sampleFreq)); // pre-multiply common factors
     d0a:	2f e1       	ldi	r18, 0x1F	; 31
     d0c:	33 ea       	ldi	r19, 0xA3	; 163
     d0e:	45 ef       	ldi	r20, 0xF5	; 245
     d10:	5b e3       	ldi	r21, 0x3B	; 59
     d12:	69 85       	ldd	r22, Y+9	; 0x09
     d14:	7a 85       	ldd	r23, Y+10	; 0x0a
     d16:	8b 85       	ldd	r24, Y+11	; 0x0b
     d18:	9c 85       	ldd	r25, Y+12	; 0x0c
     d1a:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     d1e:	69 87       	std	Y+9, r22	; 0x09
     d20:	7a 87       	std	Y+10, r23	; 0x0a
     d22:	8b 87       	std	Y+11, r24	; 0x0b
     d24:	9c 87       	std	Y+12, r25	; 0x0c

	gy *= (0.5f * (1.0f / sampleFreq));
     d26:	2f e1       	ldi	r18, 0x1F	; 31
     d28:	33 ea       	ldi	r19, 0xA3	; 163
     d2a:	45 ef       	ldi	r20, 0xF5	; 245
     d2c:	5b e3       	ldi	r21, 0x3B	; 59
     d2e:	6d 85       	ldd	r22, Y+13	; 0x0d
     d30:	7e 85       	ldd	r23, Y+14	; 0x0e
     d32:	8f 85       	ldd	r24, Y+15	; 0x0f
     d34:	98 89       	ldd	r25, Y+16	; 0x10
     d36:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     d3a:	6d 87       	std	Y+13, r22	; 0x0d
     d3c:	7e 87       	std	Y+14, r23	; 0x0e
     d3e:	8f 87       	std	Y+15, r24	; 0x0f
     d40:	98 8b       	std	Y+16, r25	; 0x10

	gz *= (0.5f * (1.0f / sampleFreq));
     d42:	2f e1       	ldi	r18, 0x1F	; 31
     d44:	33 ea       	ldi	r19, 0xA3	; 163
     d46:	45 ef       	ldi	r20, 0xF5	; 245
     d48:	5b e3       	ldi	r21, 0x3B	; 59
     d4a:	69 89       	ldd	r22, Y+17	; 0x11
     d4c:	7a 89       	ldd	r23, Y+18	; 0x12
     d4e:	8b 89       	ldd	r24, Y+19	; 0x13
     d50:	9c 89       	ldd	r25, Y+20	; 0x14
     d52:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     d56:	69 8b       	std	Y+17, r22	; 0x11
     d58:	7a 8b       	std	Y+18, r23	; 0x12
     d5a:	8b 8b       	std	Y+19, r24	; 0x13
     d5c:	9c 8b       	std	Y+20, r25	; 0x14

	qa = q0;
     d5e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <q0>
     d62:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <q0+0x1>
     d66:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <q0+0x2>
     d6a:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <q0+0x3>
     d6e:	89 83       	std	Y+1, r24	; 0x01
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	ab 83       	std	Y+3, r26	; 0x03
     d74:	bc 83       	std	Y+4, r27	; 0x04

	qb = q1;
     d76:	c0 90 88 01 	lds	r12, 0x0188	; 0x800188 <q1>
     d7a:	d0 90 89 01 	lds	r13, 0x0189	; 0x800189 <q1+0x1>
     d7e:	e0 90 8a 01 	lds	r14, 0x018A	; 0x80018a <q1+0x2>
     d82:	f0 90 8b 01 	lds	r15, 0x018B	; 0x80018b <q1+0x3>

	qc = q2;
     d86:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <q2>
     d8a:	90 91 85 01 	lds	r25, 0x0185	; 0x800185 <q2+0x1>
     d8e:	a0 91 86 01 	lds	r26, 0x0186	; 0x800186 <q2+0x2>
     d92:	b0 91 87 01 	lds	r27, 0x0187	; 0x800187 <q2+0x3>
     d96:	8d 83       	std	Y+5, r24	; 0x05
     d98:	9e 83       	std	Y+6, r25	; 0x06
     d9a:	af 83       	std	Y+7, r26	; 0x07
     d9c:	b8 87       	std	Y+8, r27	; 0x08

	//update

	q0 += (-qb * gx - qc * gy - q3 * gz);
     d9e:	40 90 80 01 	lds	r4, 0x0180	; 0x800180 <q3>
     da2:	50 90 81 01 	lds	r5, 0x0181	; 0x800181 <q3+0x1>
     da6:	60 90 82 01 	lds	r6, 0x0182	; 0x800182 <q3+0x2>
     daa:	70 90 83 01 	lds	r7, 0x0183	; 0x800183 <q3+0x3>
     dae:	c7 01       	movw	r24, r14
     db0:	b6 01       	movw	r22, r12
     db2:	90 58       	subi	r25, 0x80	; 128
     db4:	29 85       	ldd	r18, Y+9	; 0x09
     db6:	3a 85       	ldd	r19, Y+10	; 0x0a
     db8:	4b 85       	ldd	r20, Y+11	; 0x0b
     dba:	5c 85       	ldd	r21, Y+12	; 0x0c
     dbc:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     dc0:	4b 01       	movw	r8, r22
     dc2:	5c 01       	movw	r10, r24
     dc4:	2d 81       	ldd	r18, Y+5	; 0x05
     dc6:	3e 81       	ldd	r19, Y+6	; 0x06
     dc8:	4f 81       	ldd	r20, Y+7	; 0x07
     dca:	58 85       	ldd	r21, Y+8	; 0x08
     dcc:	6d 85       	ldd	r22, Y+13	; 0x0d
     dce:	7e 85       	ldd	r23, Y+14	; 0x0e
     dd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     dd2:	98 89       	ldd	r25, Y+16	; 0x10
     dd4:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     dd8:	9b 01       	movw	r18, r22
     dda:	ac 01       	movw	r20, r24
     ddc:	c5 01       	movw	r24, r10
     dde:	b4 01       	movw	r22, r8
     de0:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     de4:	4b 01       	movw	r8, r22
     de6:	5c 01       	movw	r10, r24
     de8:	a3 01       	movw	r20, r6
     dea:	92 01       	movw	r18, r4
     dec:	69 89       	ldd	r22, Y+17	; 0x11
     dee:	7a 89       	ldd	r23, Y+18	; 0x12
     df0:	8b 89       	ldd	r24, Y+19	; 0x13
     df2:	9c 89       	ldd	r25, Y+20	; 0x14
     df4:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     df8:	9b 01       	movw	r18, r22
     dfa:	ac 01       	movw	r20, r24
     dfc:	c5 01       	movw	r24, r10
     dfe:	b4 01       	movw	r22, r8
     e00:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     e04:	29 81       	ldd	r18, Y+1	; 0x01
     e06:	3a 81       	ldd	r19, Y+2	; 0x02
     e08:	4b 81       	ldd	r20, Y+3	; 0x03
     e0a:	5c 81       	ldd	r21, Y+4	; 0x04
     e0c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     e10:	69 8f       	std	Y+25, r22	; 0x19
     e12:	7a 8f       	std	Y+26, r23	; 0x1a
     e14:	8b 8f       	std	Y+27, r24	; 0x1b
     e16:	9c 8f       	std	Y+28, r25	; 0x1c

	q1 += (qa * gx + qc * gz - q3 * gy);
     e18:	29 81       	ldd	r18, Y+1	; 0x01
     e1a:	3a 81       	ldd	r19, Y+2	; 0x02
     e1c:	4b 81       	ldd	r20, Y+3	; 0x03
     e1e:	5c 81       	ldd	r21, Y+4	; 0x04
     e20:	69 85       	ldd	r22, Y+9	; 0x09
     e22:	7a 85       	ldd	r23, Y+10	; 0x0a
     e24:	8b 85       	ldd	r24, Y+11	; 0x0b
     e26:	9c 85       	ldd	r25, Y+12	; 0x0c
     e28:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     e2c:	4b 01       	movw	r8, r22
     e2e:	5c 01       	movw	r10, r24
     e30:	2d 81       	ldd	r18, Y+5	; 0x05
     e32:	3e 81       	ldd	r19, Y+6	; 0x06
     e34:	4f 81       	ldd	r20, Y+7	; 0x07
     e36:	58 85       	ldd	r21, Y+8	; 0x08
     e38:	69 89       	ldd	r22, Y+17	; 0x11
     e3a:	7a 89       	ldd	r23, Y+18	; 0x12
     e3c:	8b 89       	ldd	r24, Y+19	; 0x13
     e3e:	9c 89       	ldd	r25, Y+20	; 0x14
     e40:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     e44:	9b 01       	movw	r18, r22
     e46:	ac 01       	movw	r20, r24
     e48:	c5 01       	movw	r24, r10
     e4a:	b4 01       	movw	r22, r8
     e4c:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     e50:	4b 01       	movw	r8, r22
     e52:	5c 01       	movw	r10, r24
     e54:	a3 01       	movw	r20, r6
     e56:	92 01       	movw	r18, r4
     e58:	6d 85       	ldd	r22, Y+13	; 0x0d
     e5a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e5c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5e:	98 89       	ldd	r25, Y+16	; 0x10
     e60:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     e64:	9b 01       	movw	r18, r22
     e66:	ac 01       	movw	r20, r24
     e68:	c5 01       	movw	r24, r10
     e6a:	b4 01       	movw	r22, r8
     e6c:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     e70:	a7 01       	movw	r20, r14
     e72:	96 01       	movw	r18, r12
     e74:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     e78:	6d 8f       	std	Y+29, r22	; 0x1d
     e7a:	7e 8f       	std	Y+30, r23	; 0x1e
     e7c:	8f 8f       	std	Y+31, r24	; 0x1f
     e7e:	98 a3       	std	Y+32, r25	; 0x20

	q2 += (qa * gy - qb * gz + q3 * gx);
     e80:	29 81       	ldd	r18, Y+1	; 0x01
     e82:	3a 81       	ldd	r19, Y+2	; 0x02
     e84:	4b 81       	ldd	r20, Y+3	; 0x03
     e86:	5c 81       	ldd	r21, Y+4	; 0x04
     e88:	6d 85       	ldd	r22, Y+13	; 0x0d
     e8a:	7e 85       	ldd	r23, Y+14	; 0x0e
     e8c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8e:	98 89       	ldd	r25, Y+16	; 0x10
     e90:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     e94:	4b 01       	movw	r8, r22
     e96:	5c 01       	movw	r10, r24
     e98:	a7 01       	movw	r20, r14
     e9a:	96 01       	movw	r18, r12
     e9c:	69 89       	ldd	r22, Y+17	; 0x11
     e9e:	7a 89       	ldd	r23, Y+18	; 0x12
     ea0:	8b 89       	ldd	r24, Y+19	; 0x13
     ea2:	9c 89       	ldd	r25, Y+20	; 0x14
     ea4:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     ea8:	9b 01       	movw	r18, r22
     eaa:	ac 01       	movw	r20, r24
     eac:	c5 01       	movw	r24, r10
     eae:	b4 01       	movw	r22, r8
     eb0:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     eb4:	4b 01       	movw	r8, r22
     eb6:	5c 01       	movw	r10, r24
     eb8:	a3 01       	movw	r20, r6
     eba:	92 01       	movw	r18, r4
     ebc:	69 85       	ldd	r22, Y+9	; 0x09
     ebe:	7a 85       	ldd	r23, Y+10	; 0x0a
     ec0:	8b 85       	ldd	r24, Y+11	; 0x0b
     ec2:	9c 85       	ldd	r25, Y+12	; 0x0c
     ec4:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     ec8:	9b 01       	movw	r18, r22
     eca:	ac 01       	movw	r20, r24
     ecc:	c5 01       	movw	r24, r10
     ece:	b4 01       	movw	r22, r8
     ed0:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     ed4:	2d 81       	ldd	r18, Y+5	; 0x05
     ed6:	3e 81       	ldd	r19, Y+6	; 0x06
     ed8:	4f 81       	ldd	r20, Y+7	; 0x07
     eda:	58 85       	ldd	r21, Y+8	; 0x08
     edc:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     ee0:	6d 8b       	std	Y+21, r22	; 0x15
     ee2:	7e 8b       	std	Y+22, r23	; 0x16
     ee4:	8f 8b       	std	Y+23, r24	; 0x17
     ee6:	98 8f       	std	Y+24, r25	; 0x18

	q3 += (qa * gz + qb * gy - qc * gx);
     ee8:	29 81       	ldd	r18, Y+1	; 0x01
     eea:	3a 81       	ldd	r19, Y+2	; 0x02
     eec:	4b 81       	ldd	r20, Y+3	; 0x03
     eee:	5c 81       	ldd	r21, Y+4	; 0x04
     ef0:	69 89       	ldd	r22, Y+17	; 0x11
     ef2:	7a 89       	ldd	r23, Y+18	; 0x12
     ef4:	8b 89       	ldd	r24, Y+19	; 0x13
     ef6:	9c 89       	ldd	r25, Y+20	; 0x14
     ef8:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     efc:	4b 01       	movw	r8, r22
     efe:	5c 01       	movw	r10, r24
     f00:	a7 01       	movw	r20, r14
     f02:	96 01       	movw	r18, r12
     f04:	6d 85       	ldd	r22, Y+13	; 0x0d
     f06:	7e 85       	ldd	r23, Y+14	; 0x0e
     f08:	8f 85       	ldd	r24, Y+15	; 0x0f
     f0a:	98 89       	ldd	r25, Y+16	; 0x10
     f0c:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     f10:	9b 01       	movw	r18, r22
     f12:	ac 01       	movw	r20, r24
     f14:	c5 01       	movw	r24, r10
     f16:	b4 01       	movw	r22, r8
     f18:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     f1c:	6b 01       	movw	r12, r22
     f1e:	7c 01       	movw	r14, r24
     f20:	2d 81       	ldd	r18, Y+5	; 0x05
     f22:	3e 81       	ldd	r19, Y+6	; 0x06
     f24:	4f 81       	ldd	r20, Y+7	; 0x07
     f26:	58 85       	ldd	r21, Y+8	; 0x08
     f28:	69 85       	ldd	r22, Y+9	; 0x09
     f2a:	7a 85       	ldd	r23, Y+10	; 0x0a
     f2c:	8b 85       	ldd	r24, Y+11	; 0x0b
     f2e:	9c 85       	ldd	r25, Y+12	; 0x0c
     f30:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     f34:	9b 01       	movw	r18, r22
     f36:	ac 01       	movw	r20, r24
     f38:	c7 01       	movw	r24, r14
     f3a:	b6 01       	movw	r22, r12
     f3c:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
     f40:	a3 01       	movw	r20, r6
     f42:	92 01       	movw	r18, r4
     f44:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     f48:	4b 01       	movw	r8, r22
     f4a:	5c 01       	movw	r10, r24

	// Normalise quaternion

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     f4c:	29 8d       	ldd	r18, Y+25	; 0x19
     f4e:	3a 8d       	ldd	r19, Y+26	; 0x1a
     f50:	4b 8d       	ldd	r20, Y+27	; 0x1b
     f52:	5c 8d       	ldd	r21, Y+28	; 0x1c
     f54:	ca 01       	movw	r24, r20
     f56:	b9 01       	movw	r22, r18
     f58:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     f5c:	6b 01       	movw	r12, r22
     f5e:	7c 01       	movw	r14, r24
     f60:	2d 8d       	ldd	r18, Y+29	; 0x1d
     f62:	3e 8d       	ldd	r19, Y+30	; 0x1e
     f64:	4f 8d       	ldd	r20, Y+31	; 0x1f
     f66:	58 a1       	ldd	r21, Y+32	; 0x20
     f68:	ca 01       	movw	r24, r20
     f6a:	b9 01       	movw	r22, r18
     f6c:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     f70:	9b 01       	movw	r18, r22
     f72:	ac 01       	movw	r20, r24
     f74:	c7 01       	movw	r24, r14
     f76:	b6 01       	movw	r22, r12
     f78:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     f7c:	6b 01       	movw	r12, r22
     f7e:	7c 01       	movw	r14, r24
     f80:	2d 89       	ldd	r18, Y+21	; 0x15
     f82:	3e 89       	ldd	r19, Y+22	; 0x16
     f84:	4f 89       	ldd	r20, Y+23	; 0x17
     f86:	58 8d       	ldd	r21, Y+24	; 0x18
     f88:	ca 01       	movw	r24, r20
     f8a:	b9 01       	movw	r22, r18
     f8c:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     f90:	9b 01       	movw	r18, r22
     f92:	ac 01       	movw	r20, r24
     f94:	c7 01       	movw	r24, r14
     f96:	b6 01       	movw	r22, r12
     f98:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     f9c:	6b 01       	movw	r12, r22
     f9e:	7c 01       	movw	r14, r24
     fa0:	a5 01       	movw	r20, r10
     fa2:	94 01       	movw	r18, r8
     fa4:	c5 01       	movw	r24, r10
     fa6:	b4 01       	movw	r22, r8
     fa8:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	c7 01       	movw	r24, r14
     fb2:	b6 01       	movw	r22, r12
     fb4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
     fb8:	0e 94 b6 04 	call	0x96c	; 0x96c <invSqrt>
     fbc:	6b 01       	movw	r12, r22
     fbe:	7c 01       	movw	r14, r24

	q0 *= recipNorm;
     fc0:	9b 01       	movw	r18, r22
     fc2:	ac 01       	movw	r20, r24
     fc4:	69 8d       	ldd	r22, Y+25	; 0x19
     fc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fca:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fcc:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     fd0:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <q0>
     fd4:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <q0+0x1>
     fd8:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <q0+0x2>
     fdc:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <q0+0x3>

	q1 *= recipNorm;
     fe0:	a7 01       	movw	r20, r14
     fe2:	96 01       	movw	r18, r12
     fe4:	6d 8d       	ldd	r22, Y+29	; 0x1d
     fe6:	7e 8d       	ldd	r23, Y+30	; 0x1e
     fe8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fea:	98 a1       	ldd	r25, Y+32	; 0x20
     fec:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
     ff0:	60 93 88 01 	sts	0x0188, r22	; 0x800188 <q1>
     ff4:	70 93 89 01 	sts	0x0189, r23	; 0x800189 <q1+0x1>
     ff8:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <q1+0x2>
     ffc:	90 93 8b 01 	sts	0x018B, r25	; 0x80018b <q1+0x3>

	q2 *= recipNorm;
    1000:	a7 01       	movw	r20, r14
    1002:	96 01       	movw	r18, r12
    1004:	6d 89       	ldd	r22, Y+21	; 0x15
    1006:	7e 89       	ldd	r23, Y+22	; 0x16
    1008:	8f 89       	ldd	r24, Y+23	; 0x17
    100a:	98 8d       	ldd	r25, Y+24	; 0x18
    100c:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    1010:	60 93 84 01 	sts	0x0184, r22	; 0x800184 <q2>
    1014:	70 93 85 01 	sts	0x0185, r23	; 0x800185 <q2+0x1>
    1018:	80 93 86 01 	sts	0x0186, r24	; 0x800186 <q2+0x2>
    101c:	90 93 87 01 	sts	0x0187, r25	; 0x800187 <q2+0x3>

	q3 *= recipNorm;
    1020:	a7 01       	movw	r20, r14
    1022:	96 01       	movw	r18, r12
    1024:	c5 01       	movw	r24, r10
    1026:	b4 01       	movw	r22, r8
    1028:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    102c:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <q3>
    1030:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <q3+0x1>
    1034:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <q3+0x2>
    1038:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <q3+0x3>

}
    103c:	a0 96       	adiw	r28, 0x20	; 32
    103e:	0f b6       	in	r0, 0x3f	; 63
    1040:	f8 94       	cli
    1042:	de bf       	out	0x3e, r29	; 62
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	cd bf       	out	0x3d, r28	; 61
    1048:	df 91       	pop	r29
    104a:	cf 91       	pop	r28
    104c:	1f 91       	pop	r17
    104e:	0f 91       	pop	r16
    1050:	ff 90       	pop	r15
    1052:	ef 90       	pop	r14
    1054:	df 90       	pop	r13
    1056:	cf 90       	pop	r12
    1058:	bf 90       	pop	r11
    105a:	af 90       	pop	r10
    105c:	9f 90       	pop	r9
    105e:	8f 90       	pop	r8
    1060:	7f 90       	pop	r7
    1062:	6f 90       	pop	r6
    1064:	5f 90       	pop	r5
    1066:	4f 90       	pop	r4
    1068:	08 95       	ret

0000106a <q2Angle>:

void q2Angle(float angle[3])
{
    106a:	4f 92       	push	r4
    106c:	5f 92       	push	r5
    106e:	6f 92       	push	r6
    1070:	7f 92       	push	r7
    1072:	8f 92       	push	r8
    1074:	9f 92       	push	r9
    1076:	af 92       	push	r10
    1078:	bf 92       	push	r11
    107a:	cf 92       	push	r12
    107c:	df 92       	push	r13
    107e:	ef 92       	push	r14
    1080:	ff 92       	push	r15
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
    1086:	cd b7       	in	r28, 0x3d	; 61
    1088:	de b7       	in	r29, 0x3e	; 62
    108a:	2e 97       	sbiw	r28, 0x0e	; 14
    108c:	0f b6       	in	r0, 0x3f	; 63
    108e:	f8 94       	cli
    1090:	de bf       	out	0x3e, r29	; 62
    1092:	0f be       	out	0x3f, r0	; 63
    1094:	cd bf       	out	0x3d, r28	; 61
    1096:	9e 87       	std	Y+14, r25	; 0x0e
    1098:	8d 87       	std	Y+13, r24	; 0x0d
	angle[2] = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2*q2 - 2 * q3* q3 + 1)* 57.3; // yaw
    109a:	c0 90 84 01 	lds	r12, 0x0184	; 0x800184 <q2>
    109e:	d0 90 85 01 	lds	r13, 0x0185	; 0x800185 <q2+0x1>
    10a2:	e0 90 86 01 	lds	r14, 0x0186	; 0x800186 <q2+0x2>
    10a6:	f0 90 87 01 	lds	r15, 0x0187	; 0x800187 <q2+0x3>
    10aa:	80 90 80 01 	lds	r8, 0x0180	; 0x800180 <q3>
    10ae:	90 90 81 01 	lds	r9, 0x0181	; 0x800181 <q3+0x1>
    10b2:	a0 90 82 01 	lds	r10, 0x0182	; 0x800182 <q3+0x2>
    10b6:	b0 90 83 01 	lds	r11, 0x0183	; 0x800183 <q3+0x3>
    10ba:	40 90 88 01 	lds	r4, 0x0188	; 0x800188 <q1>
    10be:	50 90 89 01 	lds	r5, 0x0189	; 0x800189 <q1+0x1>
    10c2:	60 90 8a 01 	lds	r6, 0x018A	; 0x80018a <q1+0x2>
    10c6:	70 90 8b 01 	lds	r7, 0x018B	; 0x80018b <q1+0x3>
    10ca:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <q0>
    10ce:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <q0+0x1>
    10d2:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <q0+0x2>
    10d6:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <q0+0x3>
    10da:	9b 01       	movw	r18, r22
    10dc:	ac 01       	movw	r20, r24
    10de:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    10e2:	69 87       	std	Y+9, r22	; 0x09
    10e4:	7a 87       	std	Y+10, r23	; 0x0a
    10e6:	8b 87       	std	Y+11, r24	; 0x0b
    10e8:	9c 87       	std	Y+12, r25	; 0x0c
    10ea:	20 e0       	ldi	r18, 0x00	; 0
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	40 e0       	ldi	r20, 0x00	; 0
    10f0:	50 ec       	ldi	r21, 0xC0	; 192
    10f2:	c7 01       	movw	r24, r14
    10f4:	b6 01       	movw	r22, r12
    10f6:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    10fa:	a7 01       	movw	r20, r14
    10fc:	96 01       	movw	r18, r12
    10fe:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    1102:	69 83       	std	Y+1, r22	; 0x01
    1104:	7a 83       	std	Y+2, r23	; 0x02
    1106:	8b 83       	std	Y+3, r24	; 0x03
    1108:	9c 83       	std	Y+4, r25	; 0x04
    110a:	a5 01       	movw	r20, r10
    110c:	94 01       	movw	r18, r8
    110e:	c5 01       	movw	r24, r10
    1110:	b4 01       	movw	r22, r8
    1112:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    1116:	a5 01       	movw	r20, r10
    1118:	94 01       	movw	r18, r8
    111a:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    111e:	9b 01       	movw	r18, r22
    1120:	ac 01       	movw	r20, r24
    1122:	69 81       	ldd	r22, Y+1	; 0x01
    1124:	7a 81       	ldd	r23, Y+2	; 0x02
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e8       	ldi	r20, 0x80	; 128
    1134:	5f e3       	ldi	r21, 0x3F	; 63
    1136:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    113a:	69 83       	std	Y+1, r22	; 0x01
    113c:	7a 83       	std	Y+2, r23	; 0x02
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	9c 83       	std	Y+4, r25	; 0x04
    1142:	a3 01       	movw	r20, r6
    1144:	92 01       	movw	r18, r4
    1146:	c3 01       	movw	r24, r6
    1148:	b2 01       	movw	r22, r4
    114a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    114e:	a7 01       	movw	r20, r14
    1150:	96 01       	movw	r18, r12
    1152:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    1156:	6d 83       	std	Y+5, r22	; 0x05
    1158:	7e 83       	std	Y+6, r23	; 0x06
    115a:	8f 83       	std	Y+7, r24	; 0x07
    115c:	98 87       	std	Y+8, r25	; 0x08
    115e:	29 85       	ldd	r18, Y+9	; 0x09
    1160:	3a 85       	ldd	r19, Y+10	; 0x0a
    1162:	4b 85       	ldd	r20, Y+11	; 0x0b
    1164:	5c 85       	ldd	r21, Y+12	; 0x0c
    1166:	c5 01       	movw	r24, r10
    1168:	b4 01       	movw	r22, r8
    116a:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    116e:	9b 01       	movw	r18, r22
    1170:	ac 01       	movw	r20, r24
    1172:	6d 81       	ldd	r22, Y+5	; 0x05
    1174:	7e 81       	ldd	r23, Y+6	; 0x06
    1176:	8f 81       	ldd	r24, Y+7	; 0x07
    1178:	98 85       	ldd	r25, Y+8	; 0x08
    117a:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    117e:	29 81       	ldd	r18, Y+1	; 0x01
    1180:	3a 81       	ldd	r19, Y+2	; 0x02
    1182:	4b 81       	ldd	r20, Y+3	; 0x03
    1184:	5c 81       	ldd	r21, Y+4	; 0x04
    1186:	0e 94 0e 19 	call	0x321c	; 0x321c <atan2>
    118a:	23 e3       	ldi	r18, 0x33	; 51
    118c:	33 e3       	ldi	r19, 0x33	; 51
    118e:	45 e6       	ldi	r20, 0x65	; 101
    1190:	52 e4       	ldi	r21, 0x42	; 66
    1192:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    1196:	ed 85       	ldd	r30, Y+13	; 0x0d
    1198:	fe 85       	ldd	r31, Y+14	; 0x0e
    119a:	60 87       	std	Z+8, r22	; 0x08
    119c:	71 87       	std	Z+9, r23	; 0x09
    119e:	82 87       	std	Z+10, r24	; 0x0a
    11a0:	93 87       	std	Z+11, r25	; 0x0b

	angle[1] = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; // pitch
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	30 e0       	ldi	r19, 0x00	; 0
    11a6:	40 e0       	ldi	r20, 0x00	; 0
    11a8:	50 ec       	ldi	r21, 0xC0	; 192
    11aa:	c3 01       	movw	r24, r6
    11ac:	b2 01       	movw	r22, r4
    11ae:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    11b2:	69 83       	std	Y+1, r22	; 0x01
    11b4:	7a 83       	std	Y+2, r23	; 0x02
    11b6:	8b 83       	std	Y+3, r24	; 0x03
    11b8:	9c 83       	std	Y+4, r25	; 0x04
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	c5 01       	movw	r24, r10
    11c0:	b4 01       	movw	r22, r8
    11c2:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    11c6:	6d 83       	std	Y+5, r22	; 0x05
    11c8:	7e 83       	std	Y+6, r23	; 0x06
    11ca:	8f 83       	std	Y+7, r24	; 0x07
    11cc:	98 87       	std	Y+8, r25	; 0x08
    11ce:	29 85       	ldd	r18, Y+9	; 0x09
    11d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d2:	4b 85       	ldd	r20, Y+11	; 0x0b
    11d4:	5c 85       	ldd	r21, Y+12	; 0x0c
    11d6:	c7 01       	movw	r24, r14
    11d8:	b6 01       	movw	r22, r12
    11da:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    11de:	9b 01       	movw	r18, r22
    11e0:	ac 01       	movw	r20, r24
    11e2:	6d 81       	ldd	r22, Y+5	; 0x05
    11e4:	7e 81       	ldd	r23, Y+6	; 0x06
    11e6:	8f 81       	ldd	r24, Y+7	; 0x07
    11e8:	98 85       	ldd	r25, Y+8	; 0x08
    11ea:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    11ee:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <asin>
    11f2:	23 e3       	ldi	r18, 0x33	; 51
    11f4:	33 e3       	ldi	r19, 0x33	; 51
    11f6:	45 e6       	ldi	r20, 0x65	; 101
    11f8:	52 e4       	ldi	r21, 0x42	; 66
    11fa:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    11fe:	ed 85       	ldd	r30, Y+13	; 0x0d
    1200:	fe 85       	ldd	r31, Y+14	; 0x0e
    1202:	64 83       	std	Z+4, r22	; 0x04
    1204:	75 83       	std	Z+5, r23	; 0x05
    1206:	86 83       	std	Z+6, r24	; 0x06
    1208:	97 83       	std	Z+7, r25	; 0x07

	angle[0] = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
    120a:	a7 01       	movw	r20, r14
    120c:	96 01       	movw	r18, r12
    120e:	c7 01       	movw	r24, r14
    1210:	b6 01       	movw	r22, r12
    1212:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    1216:	6d 83       	std	Y+5, r22	; 0x05
    1218:	7e 83       	std	Y+6, r23	; 0x06
    121a:	8f 83       	std	Y+7, r24	; 0x07
    121c:	98 87       	std	Y+8, r25	; 0x08
    121e:	29 81       	ldd	r18, Y+1	; 0x01
    1220:	3a 81       	ldd	r19, Y+2	; 0x02
    1222:	4b 81       	ldd	r20, Y+3	; 0x03
    1224:	5c 81       	ldd	r21, Y+4	; 0x04
    1226:	c3 01       	movw	r24, r6
    1228:	b2 01       	movw	r22, r4
    122a:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    122e:	69 83       	std	Y+1, r22	; 0x01
    1230:	7a 83       	std	Y+2, r23	; 0x02
    1232:	8b 83       	std	Y+3, r24	; 0x03
    1234:	9c 83       	std	Y+4, r25	; 0x04
    1236:	2d 81       	ldd	r18, Y+5	; 0x05
    1238:	3e 81       	ldd	r19, Y+6	; 0x06
    123a:	4f 81       	ldd	r20, Y+7	; 0x07
    123c:	58 85       	ldd	r21, Y+8	; 0x08
    123e:	c7 01       	movw	r24, r14
    1240:	b6 01       	movw	r22, r12
    1242:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    1246:	9b 01       	movw	r18, r22
    1248:	ac 01       	movw	r20, r24
    124a:	69 81       	ldd	r22, Y+1	; 0x01
    124c:	7a 81       	ldd	r23, Y+2	; 0x02
    124e:	8b 81       	ldd	r24, Y+3	; 0x03
    1250:	9c 81       	ldd	r25, Y+4	; 0x04
    1252:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	40 e8       	ldi	r20, 0x80	; 128
    125c:	5f e3       	ldi	r21, 0x3F	; 63
    125e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    1262:	6b 01       	movw	r12, r22
    1264:	7c 01       	movw	r14, r24
    1266:	2d 81       	ldd	r18, Y+5	; 0x05
    1268:	3e 81       	ldd	r19, Y+6	; 0x06
    126a:	4f 81       	ldd	r20, Y+7	; 0x07
    126c:	58 85       	ldd	r21, Y+8	; 0x08
    126e:	c5 01       	movw	r24, r10
    1270:	b4 01       	movw	r22, r8
    1272:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    1276:	4b 01       	movw	r8, r22
    1278:	5c 01       	movw	r10, r24
    127a:	29 85       	ldd	r18, Y+9	; 0x09
    127c:	3a 85       	ldd	r19, Y+10	; 0x0a
    127e:	4b 85       	ldd	r20, Y+11	; 0x0b
    1280:	5c 85       	ldd	r21, Y+12	; 0x0c
    1282:	c3 01       	movw	r24, r6
    1284:	b2 01       	movw	r22, r4
    1286:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    128a:	9b 01       	movw	r18, r22
    128c:	ac 01       	movw	r20, r24
    128e:	c5 01       	movw	r24, r10
    1290:	b4 01       	movw	r22, r8
    1292:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    1296:	a7 01       	movw	r20, r14
    1298:	96 01       	movw	r18, r12
    129a:	0e 94 0e 19 	call	0x321c	; 0x321c <atan2>
    129e:	23 e3       	ldi	r18, 0x33	; 51
    12a0:	33 e3       	ldi	r19, 0x33	; 51
    12a2:	45 e6       	ldi	r20, 0x65	; 101
    12a4:	52 e4       	ldi	r21, 0x42	; 66
    12a6:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    12aa:	ed 85       	ldd	r30, Y+13	; 0x0d
    12ac:	fe 85       	ldd	r31, Y+14	; 0x0e
    12ae:	60 83       	st	Z, r22
    12b0:	71 83       	std	Z+1, r23	; 0x01
    12b2:	82 83       	std	Z+2, r24	; 0x02
    12b4:	93 83       	std	Z+3, r25	; 0x03
    12b6:	2e 96       	adiw	r28, 0x0e	; 14
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	ff 90       	pop	r15
    12c8:	ef 90       	pop	r14
    12ca:	df 90       	pop	r13
    12cc:	cf 90       	pop	r12
    12ce:	bf 90       	pop	r11
    12d0:	af 90       	pop	r10
    12d2:	9f 90       	pop	r9
    12d4:	8f 90       	pop	r8
    12d6:	7f 90       	pop	r7
    12d8:	6f 90       	pop	r6
    12da:	5f 90       	pop	r5
    12dc:	4f 90       	pop	r4
    12de:	08 95       	ret

000012e0 <MPU_Start_Loc>:
	MPU_Calib(AccData,GyroData);
}

void MPU_Start_Loc(void)
{
	I2C_Start_Wait(MPU6050_addr);								/* I2C start with device write address */
    12e0:	80 ed       	ldi	r24, 0xD0	; 208
    12e2:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <I2C_Start_Wait>
	I2C_Write(0x3B);							/* Write start location address from where to read */
    12e6:	8b e3       	ldi	r24, 0x3B	; 59
    12e8:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
    12ec:	81 ed       	ldi	r24, 0xD1	; 209
    12ee:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <I2C_Repeated_Start>
    12f2:	08 95       	ret

000012f4 <MPU_read>:
}
void MPU_read(float Acc[3], float Gyro[3])
{
    12f4:	4f 92       	push	r4
    12f6:	5f 92       	push	r5
    12f8:	6f 92       	push	r6
    12fa:	7f 92       	push	r7
    12fc:	af 92       	push	r10
    12fe:	bf 92       	push	r11
    1300:	cf 92       	push	r12
    1302:	df 92       	push	r13
    1304:	ef 92       	push	r14
    1306:	ff 92       	push	r15
    1308:	0f 93       	push	r16
    130a:	1f 93       	push	r17
    130c:	cf 93       	push	r28
    130e:	df 93       	push	r29
    1310:	8c 01       	movw	r16, r24
    1312:	eb 01       	movw	r28, r22
	MPU_Start_Loc();									/* Read Gyro values */
    1314:	0e 94 70 09 	call	0x12e0	; 0x12e0 <MPU_Start_Loc>
	Acc[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1318:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    131c:	f8 2e       	mov	r15, r24
    131e:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    1322:	6f 2d       	mov	r22, r15
    1324:	70 e0       	ldi	r23, 0x00	; 0
    1326:	76 2f       	mov	r23, r22
    1328:	66 27       	eor	r22, r22
    132a:	68 2b       	or	r22, r24
    132c:	07 2e       	mov	r0, r23
    132e:	00 0c       	add	r0, r0
    1330:	88 0b       	sbc	r24, r24
    1332:	99 0b       	sbc	r25, r25
    1334:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
    1338:	f8 01       	movw	r30, r16
    133a:	60 83       	st	Z, r22
    133c:	71 83       	std	Z+1, r23	; 0x01
    133e:	82 83       	std	Z+2, r24	; 0x02
    1340:	93 83       	std	Z+3, r25	; 0x03
	Acc[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1342:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    1346:	f8 2e       	mov	r15, r24
    1348:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    134c:	6f 2d       	mov	r22, r15
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	76 2f       	mov	r23, r22
    1352:	66 27       	eor	r22, r22
    1354:	68 2b       	or	r22, r24
    1356:	07 2e       	mov	r0, r23
    1358:	00 0c       	add	r0, r0
    135a:	88 0b       	sbc	r24, r24
    135c:	99 0b       	sbc	r25, r25
    135e:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
    1362:	f8 01       	movw	r30, r16
    1364:	64 83       	std	Z+4, r22	; 0x04
    1366:	75 83       	std	Z+5, r23	; 0x05
    1368:	86 83       	std	Z+6, r24	; 0x06
    136a:	97 83       	std	Z+7, r25	; 0x07
	Acc[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    136c:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    1370:	f8 2e       	mov	r15, r24
    1372:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    1376:	6f 2d       	mov	r22, r15
    1378:	70 e0       	ldi	r23, 0x00	; 0
    137a:	76 2f       	mov	r23, r22
    137c:	66 27       	eor	r22, r22
    137e:	68 2b       	or	r22, r24
    1380:	07 2e       	mov	r0, r23
    1382:	00 0c       	add	r0, r0
    1384:	88 0b       	sbc	r24, r24
    1386:	99 0b       	sbc	r25, r25
    1388:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
    138c:	f8 01       	movw	r30, r16
    138e:	60 87       	std	Z+8, r22	; 0x08
    1390:	71 87       	std	Z+9, r23	; 0x09
    1392:	82 87       	std	Z+10, r24	; 0x0a
    1394:	93 87       	std	Z+11, r25	; 0x0b
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1396:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    139a:	f8 2e       	mov	r15, r24
    139c:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    13a0:	6f 2d       	mov	r22, r15
    13a2:	70 e0       	ldi	r23, 0x00	; 0
    13a4:	76 2f       	mov	r23, r22
    13a6:	66 27       	eor	r22, r22
    13a8:	68 2b       	or	r22, r24
    13aa:	07 2e       	mov	r0, r23
    13ac:	00 0c       	add	r0, r0
    13ae:	88 0b       	sbc	r24, r24
    13b0:	99 0b       	sbc	r25, r25
    13b2:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
    13b6:	60 93 41 02 	sts	0x0241, r22	; 0x800241 <Temperature>
    13ba:	70 93 42 02 	sts	0x0242, r23	; 0x800242 <Temperature+0x1>
    13be:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <Temperature+0x2>
    13c2:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <Temperature+0x3>
	Gyro[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    13c6:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    13ca:	f8 2e       	mov	r15, r24
    13cc:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    13d0:	6f 2d       	mov	r22, r15
    13d2:	70 e0       	ldi	r23, 0x00	; 0
    13d4:	76 2f       	mov	r23, r22
    13d6:	66 27       	eor	r22, r22
    13d8:	68 2b       	or	r22, r24
    13da:	07 2e       	mov	r0, r23
    13dc:	00 0c       	add	r0, r0
    13de:	88 0b       	sbc	r24, r24
    13e0:	99 0b       	sbc	r25, r25
    13e2:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
    13e6:	68 83       	st	Y, r22
    13e8:	79 83       	std	Y+1, r23	; 0x01
    13ea:	8a 83       	std	Y+2, r24	; 0x02
    13ec:	9b 83       	std	Y+3, r25	; 0x03
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    13ee:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    13f2:	f8 2e       	mov	r15, r24
    13f4:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    13f8:	6f 2d       	mov	r22, r15
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	76 2f       	mov	r23, r22
    13fe:	66 27       	eor	r22, r22
    1400:	68 2b       	or	r22, r24
    1402:	07 2e       	mov	r0, r23
    1404:	00 0c       	add	r0, r0
    1406:	88 0b       	sbc	r24, r24
    1408:	99 0b       	sbc	r25, r25
    140a:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
    140e:	6c 83       	std	Y+4, r22	; 0x04
    1410:	7d 83       	std	Y+5, r23	; 0x05
    1412:	8e 83       	std	Y+6, r24	; 0x06
    1414:	9f 83       	std	Y+7, r25	; 0x07
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
    1416:	0e 94 37 18 	call	0x306e	; 0x306e <I2C_Read_Ack>
    141a:	f8 2e       	mov	r15, r24
    141c:	0e 94 42 18 	call	0x3084	; 0x3084 <I2C_Read_Nack>
    1420:	6f 2d       	mov	r22, r15
    1422:	70 e0       	ldi	r23, 0x00	; 0
    1424:	76 2f       	mov	r23, r22
    1426:	66 27       	eor	r22, r22
    1428:	68 2b       	or	r22, r24
    142a:	07 2e       	mov	r0, r23
    142c:	00 0c       	add	r0, r0
    142e:	88 0b       	sbc	r24, r24
    1430:	99 0b       	sbc	r25, r25
    1432:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__floatsisf>
    1436:	68 87       	std	Y+8, r22	; 0x08
    1438:	79 87       	std	Y+9, r23	; 0x09
    143a:	8a 87       	std	Y+10, r24	; 0x0a
    143c:	9b 87       	std	Y+11, r25	; 0x0b
	I2C_Stop();
    143e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <I2C_Stop>
    1442:	0f 2e       	mov	r0, r31
    1444:	f5 e4       	ldi	r31, 0x45	; 69
    1446:	ef 2e       	mov	r14, r31
    1448:	f2 e0       	ldi	r31, 0x02	; 2
    144a:	ff 2e       	mov	r15, r31
    144c:	f0 2d       	mov	r31, r0
    144e:	0f 2e       	mov	r0, r31
    1450:	f1 e5       	ldi	r31, 0x51	; 81
    1452:	cf 2e       	mov	r12, r31
    1454:	f2 e0       	ldi	r31, 0x02	; 2
    1456:	df 2e       	mov	r13, r31
    1458:	f0 2d       	mov	r31, r0
    145a:	0f 2e       	mov	r0, r31
    145c:	f1 e5       	ldi	r31, 0x51	; 81
    145e:	af 2e       	mov	r10, r31
    1460:	f2 e0       	ldi	r31, 0x02	; 2
    1462:	bf 2e       	mov	r11, r31
    1464:	f0 2d       	mov	r31, r0
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
    1466:	f7 01       	movw	r30, r14
    1468:	41 90       	ld	r4, Z+
    146a:	51 90       	ld	r5, Z+
    146c:	61 90       	ld	r6, Z+
    146e:	71 90       	ld	r7, Z+
    1470:	7f 01       	movw	r14, r30
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	51 e4       	ldi	r21, 0x41	; 65
    147a:	f8 01       	movw	r30, r16
    147c:	60 81       	ld	r22, Z
    147e:	71 81       	ldd	r23, Z+1	; 0x01
    1480:	82 81       	ldd	r24, Z+2	; 0x02
    1482:	93 81       	ldd	r25, Z+3	; 0x03
    1484:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    1488:	2d ec       	ldi	r18, 0xCD	; 205
    148a:	3c ec       	ldi	r19, 0xCC	; 204
    148c:	4c e1       	ldi	r20, 0x1C	; 28
    148e:	51 e4       	ldi	r21, 0x41	; 65
    1490:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e0       	ldi	r20, 0x00	; 0
    149a:	58 e3       	ldi	r21, 0x38	; 56
    149c:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    14a0:	a3 01       	movw	r20, r6
    14a2:	92 01       	movw	r18, r4
    14a4:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
    14a8:	f8 01       	movw	r30, r16
    14aa:	61 93       	st	Z+, r22
    14ac:	71 93       	st	Z+, r23
    14ae:	81 93       	st	Z+, r24
    14b0:	91 93       	st	Z+, r25
    14b2:	8f 01       	movw	r16, r30
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
    14b4:	f6 01       	movw	r30, r12
    14b6:	41 90       	ld	r4, Z+
    14b8:	51 90       	ld	r5, Z+
    14ba:	61 90       	ld	r6, Z+
    14bc:	71 90       	ld	r7, Z+
    14be:	6f 01       	movw	r12, r30
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a e7       	ldi	r20, 0x7A	; 122
    14c6:	54 e4       	ldi	r21, 0x44	; 68
    14c8:	68 81       	ld	r22, Y
    14ca:	79 81       	ldd	r23, Y+1	; 0x01
    14cc:	8a 81       	ldd	r24, Y+2	; 0x02
    14ce:	9b 81       	ldd	r25, Y+3	; 0x03
    14d0:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	40 e0       	ldi	r20, 0x00	; 0
    14da:	58 e3       	ldi	r21, 0x38	; 56
    14dc:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	44 e3       	ldi	r20, 0x34	; 52
    14e6:	53 e4       	ldi	r21, 0x43	; 67
    14e8:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__divsf3>
    14ec:	23 ec       	ldi	r18, 0xC3	; 195
    14ee:	35 ef       	ldi	r19, 0xF5	; 245
    14f0:	48 e4       	ldi	r20, 0x48	; 72
    14f2:	50 e4       	ldi	r21, 0x40	; 64
    14f4:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    14f8:	a3 01       	movw	r20, r6
    14fa:	92 01       	movw	r18, r4
    14fc:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
    1500:	69 93       	st	Y+, r22
    1502:	79 93       	st	Y+, r23
    1504:	89 93       	st	Y+, r24
    1506:	99 93       	st	Y+, r25
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
    1508:	ea 14       	cp	r14, r10
    150a:	fb 04       	cpc	r15, r11
    150c:	09 f0       	breq	.+2      	; 0x1510 <MPU_read+0x21c>
    150e:	ab cf       	rjmp	.-170    	; 0x1466 <MPU_read+0x172>
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
	}
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	0f 91       	pop	r16
    1518:	ff 90       	pop	r15
    151a:	ef 90       	pop	r14
    151c:	df 90       	pop	r13
    151e:	cf 90       	pop	r12
    1520:	bf 90       	pop	r11
    1522:	af 90       	pop	r10
    1524:	7f 90       	pop	r7
    1526:	6f 90       	pop	r6
    1528:	5f 90       	pop	r5
    152a:	4f 90       	pop	r4
    152c:	08 95       	ret

0000152e <MPU_Calib>:

void MPU_Calib(float Acc[3], float Gyro[3])
{
    152e:	2f 92       	push	r2
    1530:	3f 92       	push	r3
    1532:	4f 92       	push	r4
    1534:	5f 92       	push	r5
    1536:	6f 92       	push	r6
    1538:	7f 92       	push	r7
    153a:	8f 92       	push	r8
    153c:	9f 92       	push	r9
    153e:	af 92       	push	r10
    1540:	bf 92       	push	r11
    1542:	cf 92       	push	r12
    1544:	df 92       	push	r13
    1546:	ef 92       	push	r14
    1548:	ff 92       	push	r15
    154a:	0f 93       	push	r16
    154c:	1f 93       	push	r17
    154e:	cf 93       	push	r28
    1550:	df 93       	push	r29
    1552:	00 d0       	rcall	.+0      	; 0x1554 <MPU_Calib+0x26>
    1554:	00 d0       	rcall	.+0      	; 0x1556 <MPU_Calib+0x28>
    1556:	cd b7       	in	r28, 0x3d	; 61
    1558:	de b7       	in	r29, 0x3e	; 62
    155a:	1c 01       	movw	r2, r24
    155c:	69 83       	std	Y+1, r22	; 0x01
    155e:	7a 83       	std	Y+2, r23	; 0x02
    1560:	81 2c       	mov	r8, r1
    1562:	91 2c       	mov	r9, r1
    1564:	5c 01       	movw	r10, r24
    1566:	8c e0       	ldi	r24, 0x0C	; 12
    1568:	a8 0e       	add	r10, r24
    156a:	b1 1c       	adc	r11, r1
	static float calib_loops = 1000;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
    156c:	69 81       	ldd	r22, Y+1	; 0x01
    156e:	7a 81       	ldd	r23, Y+2	; 0x02
    1570:	c1 01       	movw	r24, r2
    1572:	0e 94 7a 09 	call	0x12f4	; 0x12f4 <MPU_read>
    1576:	71 01       	movw	r14, r2
    1578:	0f 2e       	mov	r0, r31
    157a:	f8 e9       	ldi	r31, 0x98	; 152
    157c:	6f 2e       	mov	r6, r31
    157e:	f1 e0       	ldi	r31, 0x01	; 1
    1580:	7f 2e       	mov	r7, r31
    1582:	f0 2d       	mov	r31, r0
    1584:	c9 80       	ldd	r12, Y+1	; 0x01
    1586:	da 80       	ldd	r13, Y+2	; 0x02
    1588:	0f 2e       	mov	r0, r31
    158a:	fc e8       	ldi	r31, 0x8C	; 140
    158c:	4f 2e       	mov	r4, r31
    158e:	f1 e0       	ldi	r31, 0x01	; 1
    1590:	5f 2e       	mov	r5, r31
    1592:	f0 2d       	mov	r31, r0
    1594:	82 01       	movw	r16, r4
    1596:	7c 82       	std	Y+4, r7	; 0x04
    1598:	6b 82       	std	Y+3, r6	; 0x03
		for (int j=0;j<3;j++)
		{
			sum_acc_cal_sum[j] += Acc[j];
    159a:	f7 01       	movw	r30, r14
    159c:	21 91       	ld	r18, Z+
    159e:	31 91       	ld	r19, Z+
    15a0:	41 91       	ld	r20, Z+
    15a2:	51 91       	ld	r21, Z+
    15a4:	7f 01       	movw	r14, r30
    15a6:	eb 81       	ldd	r30, Y+3	; 0x03
    15a8:	fc 81       	ldd	r31, Y+4	; 0x04
    15aa:	60 81       	ld	r22, Z
    15ac:	71 81       	ldd	r23, Z+1	; 0x01
    15ae:	82 81       	ldd	r24, Z+2	; 0x02
    15b0:	93 81       	ldd	r25, Z+3	; 0x03
    15b2:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    15b6:	eb 81       	ldd	r30, Y+3	; 0x03
    15b8:	fc 81       	ldd	r31, Y+4	; 0x04
    15ba:	61 93       	st	Z+, r22
    15bc:	71 93       	st	Z+, r23
    15be:	81 93       	st	Z+, r24
    15c0:	91 93       	st	Z+, r25
    15c2:	fc 83       	std	Y+4, r31	; 0x04
    15c4:	eb 83       	std	Y+3, r30	; 0x03
			sum_gyro_cal_sum[j] += Gyro[j];
    15c6:	f6 01       	movw	r30, r12
    15c8:	21 91       	ld	r18, Z+
    15ca:	31 91       	ld	r19, Z+
    15cc:	41 91       	ld	r20, Z+
    15ce:	51 91       	ld	r21, Z+
    15d0:	6f 01       	movw	r12, r30
    15d2:	f8 01       	movw	r30, r16
    15d4:	60 81       	ld	r22, Z
    15d6:	71 81       	ldd	r23, Z+1	; 0x01
    15d8:	82 81       	ldd	r24, Z+2	; 0x02
    15da:	93 81       	ldd	r25, Z+3	; 0x03
    15dc:	0e 94 74 18 	call	0x30e8	; 0x30e8 <__addsf3>
    15e0:	f8 01       	movw	r30, r16
    15e2:	61 93       	st	Z+, r22
    15e4:	71 93       	st	Z+, r23
    15e6:	81 93       	st	Z+, r24
    15e8:	91 93       	st	Z+, r25
    15ea:	8f 01       	movw	r16, r30
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
		for (int j=0;j<3;j++)
    15ec:	ea 14       	cp	r14, r10
    15ee:	fb 04       	cpc	r15, r11
    15f0:	a1 f6       	brne	.-88     	; 0x159a <MPU_Calib+0x6c>
void MPU_Calib(float Acc[3], float Gyro[3])
{
	static float calib_loops = 1000;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
    15f2:	ff ef       	ldi	r31, 0xFF	; 255
    15f4:	8f 1a       	sub	r8, r31
    15f6:	9f 0a       	sbc	r9, r31
    15f8:	88 ee       	ldi	r24, 0xE8	; 232
    15fa:	88 16       	cp	r8, r24
    15fc:	83 e0       	ldi	r24, 0x03	; 3
    15fe:	98 06       	cpc	r9, r24
    1600:	09 f0       	breq	.+2      	; 0x1604 <MPU_Calib+0xd6>
    1602:	b4 cf       	rjmp	.-152    	; 0x156c <MPU_Calib+0x3e>
    1604:	05 e4       	ldi	r16, 0x45	; 69
    1606:	12 e0       	ldi	r17, 0x02	; 2
    1608:	e1 e5       	ldi	r30, 0x51	; 81
    160a:	f2 e0       	ldi	r31, 0x02	; 2
    160c:	fc 83       	std	Y+4, r31	; 0x04
    160e:	eb 83       	std	Y+3, r30	; 0x03
    1610:	0f 2e       	mov	r0, r31
    1612:	f4 ea       	ldi	r31, 0xA4	; 164
    1614:	ef 2e       	mov	r14, r31
    1616:	f1 e0       	ldi	r31, 0x01	; 1
    1618:	ff 2e       	mov	r15, r31
    161a:	f0 2d       	mov	r31, r0
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
    161c:	f3 01       	movw	r30, r6
    161e:	61 91       	ld	r22, Z+
    1620:	71 91       	ld	r23, Z+
    1622:	81 91       	ld	r24, Z+
    1624:	91 91       	ld	r25, Z+
    1626:	3f 01       	movw	r6, r30
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	4a e7       	ldi	r20, 0x7A	; 122
    162e:	54 e4       	ldi	r21, 0x44	; 68
    1630:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__divsf3>
    1634:	f8 01       	movw	r30, r16
    1636:	61 93       	st	Z+, r22
    1638:	71 93       	st	Z+, r23
    163a:	81 93       	st	Z+, r24
    163c:	91 93       	st	Z+, r25
    163e:	8f 01       	movw	r16, r30
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
    1640:	f2 01       	movw	r30, r4
    1642:	61 91       	ld	r22, Z+
    1644:	71 91       	ld	r23, Z+
    1646:	81 91       	ld	r24, Z+
    1648:	91 91       	ld	r25, Z+
    164a:	2f 01       	movw	r4, r30
    164c:	20 e0       	ldi	r18, 0x00	; 0
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	4a e7       	ldi	r20, 0x7A	; 122
    1652:	54 e4       	ldi	r21, 0x44	; 68
    1654:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__divsf3>
    1658:	eb 81       	ldd	r30, Y+3	; 0x03
    165a:	fc 81       	ldd	r31, Y+4	; 0x04
    165c:	61 93       	st	Z+, r22
    165e:	71 93       	st	Z+, r23
    1660:	81 93       	st	Z+, r24
    1662:	91 93       	st	Z+, r25
    1664:	fc 83       	std	Y+4, r31	; 0x04
    1666:	eb 83       	std	Y+3, r30	; 0x03
		{
			sum_acc_cal_sum[j] += Acc[j];
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
    1668:	6e 14       	cp	r6, r14
    166a:	7f 04       	cpc	r7, r15
    166c:	b9 f6       	brne	.-82     	; 0x161c <MPU_Calib+0xee>
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
	}
	acc_calib[2] -= 10;
    166e:	20 e0       	ldi	r18, 0x00	; 0
    1670:	30 e0       	ldi	r19, 0x00	; 0
    1672:	40 e2       	ldi	r20, 0x20	; 32
    1674:	51 e4       	ldi	r21, 0x41	; 65
    1676:	60 91 4d 02 	lds	r22, 0x024D	; 0x80024d <acc_calib+0x8>
    167a:	70 91 4e 02 	lds	r23, 0x024E	; 0x80024e <acc_calib+0x9>
    167e:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <acc_calib+0xa>
    1682:	90 91 50 02 	lds	r25, 0x0250	; 0x800250 <acc_calib+0xb>
    1686:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
    168a:	60 93 4d 02 	sts	0x024D, r22	; 0x80024d <acc_calib+0x8>
    168e:	70 93 4e 02 	sts	0x024E, r23	; 0x80024e <acc_calib+0x9>
    1692:	80 93 4f 02 	sts	0x024F, r24	; 0x80024f <acc_calib+0xa>
    1696:	90 93 50 02 	sts	0x0250, r25	; 0x800250 <acc_calib+0xb>
}
    169a:	0f 90       	pop	r0
    169c:	0f 90       	pop	r0
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	9f 90       	pop	r9
    16b8:	8f 90       	pop	r8
    16ba:	7f 90       	pop	r7
    16bc:	6f 90       	pop	r6
    16be:	5f 90       	pop	r5
    16c0:	4f 90       	pop	r4
    16c2:	3f 90       	pop	r3
    16c4:	2f 90       	pop	r2
    16c6:	08 95       	ret

000016c8 <MPU_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    16c8:	8b e7       	ldi	r24, 0x7B	; 123
    16ca:	92 e9       	ldi	r25, 0x92	; 146
    16cc:	01 97       	sbiw	r24, 0x01	; 1
    16ce:	f1 f7       	brne	.-4      	; 0x16cc <MPU_Init+0x4>
    16d0:	00 c0       	rjmp	.+0      	; 0x16d2 <MPU_Init+0xa>
    16d2:	00 00       	nop
void MPU_Init(void)
{
	//
	_delay_ms(150);										/* Power up time >100ms */
	//0x68
	I2C_Start_Wait(MPU6050_addr);
    16d4:	80 ed       	ldi	r24, 0xD0	; 208
    16d6:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <I2C_Start_Wait>
	I2C_Write(0x6B);								/* Write to power management register */
    16da:	8b e6       	ldi	r24, 0x6B	; 107
    16dc:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Write(0x01);									//select the clock X-axis 
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Stop();
    16e6:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <I2C_Stop>

	I2C_Start_Wait(MPU6050_addr);
    16ea:	80 ed       	ldi	r24, 0xD0	; 208
    16ec:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <I2C_Start_Wait>
	I2C_Write(0x1A);								//Low pass digital filter
    16f0:	8a e1       	ldi	r24, 0x1A	; 26
    16f2:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Write(0x05);									
    16f6:	85 e0       	ldi	r24, 0x05	; 5
    16f8:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Stop();
    16fc:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <I2C_Stop>
	00	+- 250 degrees/s
	01	+- 500 degrees/s
	10	+- 1000 degrees/s
	11	+- 2000 degrees/s
	*/
	I2C_Start_Wait(MPU6050_addr);
    1700:	80 ed       	ldi	r24, 0xD0	; 208
    1702:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <I2C_Start_Wait>
	I2C_Write(0x1B);			
    1706:	8b e1       	ldi	r24, 0x1B	; 27
    1708:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Write(0x10);
    170c:	80 e1       	ldi	r24, 0x10	; 16
    170e:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Stop();
    1712:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <I2C_Stop>
	00	+- 2 g
	01	+- 4 g
	10	+- 8 g
	11	+- 16 g
	*/
	I2C_Start_Wait(MPU6050_addr);
    1716:	80 ed       	ldi	r24, 0xD0	; 208
    1718:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <I2C_Start_Wait>
	I2C_Write(0x1C);
    171c:	8c e1       	ldi	r24, 0x1C	; 28
    171e:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Write(0x10);
    1722:	80 e1       	ldi	r24, 0x10	; 16
    1724:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Stop();
    1728:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <I2C_Stop>
	//disable INT 
	I2C_Start_Wait(MPU6050_addr);
    172c:	80 ed       	ldi	r24, 0xD0	; 208
    172e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <I2C_Start_Wait>
	I2C_Write(0x38);								/* Write to interrupt enable register */
    1732:	88 e3       	ldi	r24, 0x38	; 56
    1734:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Write(0x01);
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Stop();
    173e:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <I2C_Stop>
	//
	I2C_Start_Wait(0xD0);								/* Start with device write address */
    1742:	80 ed       	ldi	r24, 0xD0	; 208
    1744:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <I2C_Start_Wait>
	I2C_Write(0x19);								/* Write to sample rate register */
    1748:	89 e1       	ldi	r24, 0x19	; 25
    174a:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
    174e:	87 e0       	ldi	r24, 0x07	; 7
    1750:	0e 94 20 18 	call	0x3040	; 0x3040 <I2C_Write>
	I2C_Stop();
    1754:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <I2C_Stop>
	
	MPU_Calib(AccData,GyroData);
    1758:	6a e0       	ldi	r22, 0x0A	; 10
    175a:	71 e0       	ldi	r23, 0x01	; 1
    175c:	86 e1       	ldi	r24, 0x16	; 22
    175e:	91 e0       	ldi	r25, 0x01	; 1
    1760:	0e 94 97 0a 	call	0x152e	; 0x152e <MPU_Calib>
    1764:	08 95       	ret

00001766 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1766:	cf 93       	push	r28
    1768:	df 93       	push	r29
    176a:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    176c:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    1770:	ce 01       	movw	r24, r28
    1772:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <malloc>
    1776:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1778:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    177c:	20 97       	sbiw	r28, 0x00	; 0
    177e:	11 f4       	brne	.+4      	; 0x1784 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    1780:	0e 94 f1 0b 	call	0x17e2	; 0x17e2 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    1784:	ce 01       	movw	r24, r28
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    if( pv )
    1790:	00 97       	sbiw	r24, 0x00	; 0
    1792:	41 f0       	breq	.+16     	; 0x17a4 <vPortFree+0x18>
    1794:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    1796:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vTaskSuspendAll>
        {
            free( pv );
    179a:	ce 01       	movw	r24, r28
    179c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    17a0:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    }
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <vApplicationIdleHook>:

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // with 1284p
    DIDR0 = 0xFF;

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino with 328p
    DIDR0 = 0x3F;
    17aa:	8f e3       	ldi	r24, 0x3F	; 63
    17ac:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
    // When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
    // This bit can be set at any time to turn off the Analogue Comparator.
    // This will Yellowuce power consumption in Active and Idle mode.
    // When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
    // Otherwise an interrupt can occur when the ACD bit is changed.
    ACSR &= ~_BV(ACIE);
    17b0:	80 b7       	in	r24, 0x30	; 48
    17b2:	87 7f       	andi	r24, 0xF7	; 247
    17b4:	80 bf       	out	0x30, r24	; 48
    ACSR |=  _BV(ACD);
    17b6:	80 b7       	in	r24, 0x30	; 48
    17b8:	80 68       	ori	r24, 0x80	; 128
    17ba:	80 bf       	out	0x30, r24	; 48
    // SLEEP_MODE_PWR_DOWN     _BV(SM1)
    // SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
    // SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
    // SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

    set_sleep_mode( SLEEP_MODE_IDLE );
    17bc:	83 b7       	in	r24, 0x33	; 51
    17be:	81 7f       	andi	r24, 0xF1	; 241
    17c0:	83 bf       	out	0x33, r24	; 51

    portENTER_CRITICAL();
    17c2:	0f b6       	in	r0, 0x3f	; 63
    17c4:	f8 94       	cli
    17c6:	0f 92       	push	r0
    sleep_enable();
    17c8:	83 b7       	in	r24, 0x33	; 51
    17ca:	81 60       	ori	r24, 0x01	; 1
    17cc:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
    sleep_bod_disable();
    17ce:	85 b7       	in	r24, 0x35	; 53
    17d0:	80 66       	ori	r24, 0x60	; 96
    17d2:	85 bf       	out	0x35, r24	; 53
    17d4:	8f 7d       	andi	r24, 0xDF	; 223
    17d6:	85 bf       	out	0x35, r24	; 53
#endif

    portEXIT_CRITICAL();
    17d8:	0f 90       	pop	r0
    17da:	0f be       	out	0x3f, r0	; 63
    sleep_cpu();            // good night.
    17dc:	88 95       	sleep

    sleep_reset();          // reset the sleep_mode() faster than sleep_disable();
    17de:	13 be       	out	0x33, r1	; 51
    17e0:	08 95       	ret

000017e2 <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    17e2:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    17e4:	2d 9a       	sbi	0x05, 5	; 5
    17e6:	83 ed       	ldi	r24, 0xD3	; 211
    17e8:	90 e3       	ldi	r25, 0x30	; 48
    17ea:	01 97       	sbiw	r24, 0x01	; 1
    17ec:	f1 f7       	brne	.-4      	; 0x17ea <vApplicationMallocFailedHook+0x8>
    17ee:	00 c0       	rjmp	.+0      	; 0x17f0 <vApplicationMallocFailedHook+0xe>
    17f0:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED fast blink.
    17f2:	1d 9a       	sbi	0x03, 5	; 3
    17f4:	f8 cf       	rjmp	.-16     	; 0x17e6 <vApplicationMallocFailedHook+0x4>

000017f6 <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    17f6:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    17f8:	2d 9a       	sbi	0x05, 5	; 5
    17fa:	2f e7       	ldi	r18, 0x7F	; 127
    17fc:	8a e1       	ldi	r24, 0x1A	; 26
    17fe:	96 e0       	ldi	r25, 0x06	; 6
    1800:	21 50       	subi	r18, 0x01	; 1
    1802:	80 40       	sbci	r24, 0x00	; 0
    1804:	90 40       	sbci	r25, 0x00	; 0
    1806:	e1 f7       	brne	.-8      	; 0x1800 <vApplicationStackOverflowHook+0xa>
    1808:	00 c0       	rjmp	.+0      	; 0x180a <vApplicationStackOverflowHook+0x14>
    180a:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED slow blink.
    180c:	1d 9a       	sbi	0x03, 5	; 3
    180e:	f5 cf       	rjmp	.-22     	; 0x17fa <vApplicationStackOverflowHook+0x4>

00001810 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1810:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1812:	03 96       	adiw	r24, 0x03	; 3
    1814:	92 83       	std	Z+2, r25	; 0x02
    1816:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    1818:	2f ef       	ldi	r18, 0xFF	; 255
    181a:	3f ef       	ldi	r19, 0xFF	; 255
    181c:	34 83       	std	Z+4, r19	; 0x04
    181e:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1820:	96 83       	std	Z+6, r25	; 0x06
    1822:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1824:	90 87       	std	Z+8, r25	; 0x08
    1826:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1828:	10 82       	st	Z, r1
    182a:	08 95       	ret

0000182c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    182c:	fc 01       	movw	r30, r24
    182e:	11 86       	std	Z+9, r1	; 0x09
    1830:	10 86       	std	Z+8, r1	; 0x08
    1832:	08 95       	ret

00001834 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1834:	cf 93       	push	r28
    1836:	df 93       	push	r29
    1838:	9c 01       	movw	r18, r24
    183a:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    183c:	dc 01       	movw	r26, r24
    183e:	11 96       	adiw	r26, 0x01	; 1
    1840:	cd 91       	ld	r28, X+
    1842:	dc 91       	ld	r29, X
    1844:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1846:	d3 83       	std	Z+3, r29	; 0x03
    1848:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    184a:	8c 81       	ldd	r24, Y+4	; 0x04
    184c:	9d 81       	ldd	r25, Y+5	; 0x05
    184e:	95 83       	std	Z+5, r25	; 0x05
    1850:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	dc 01       	movw	r26, r24
    1858:	13 96       	adiw	r26, 0x03	; 3
    185a:	7c 93       	st	X, r23
    185c:	6e 93       	st	-X, r22
    185e:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1860:	7d 83       	std	Y+5, r23	; 0x05
    1862:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1864:	31 87       	std	Z+9, r19	; 0x09
    1866:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    1868:	f9 01       	movw	r30, r18
    186a:	80 81       	ld	r24, Z
    186c:	8f 5f       	subi	r24, 0xFF	; 255
    186e:	80 83       	st	Z, r24
}
    1870:	df 91       	pop	r29
    1872:	cf 91       	pop	r28
    1874:	08 95       	ret

00001876 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1876:	cf 93       	push	r28
    1878:	df 93       	push	r29
    187a:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    187c:	48 81       	ld	r20, Y
    187e:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stoYellow in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1880:	4f 3f       	cpi	r20, 0xFF	; 255
    1882:	2f ef       	ldi	r18, 0xFF	; 255
    1884:	52 07       	cpc	r21, r18
    1886:	21 f4       	brne	.+8      	; 0x1890 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1888:	fc 01       	movw	r30, r24
    188a:	a7 81       	ldd	r26, Z+7	; 0x07
    188c:	b0 85       	ldd	r27, Z+8	; 0x08
    188e:	0d c0       	rjmp	.+26     	; 0x18aa <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1890:	dc 01       	movw	r26, r24
    1892:	13 96       	adiw	r26, 0x03	; 3
    1894:	01 c0       	rjmp	.+2      	; 0x1898 <vListInsert+0x22>
    1896:	df 01       	movw	r26, r30
    1898:	12 96       	adiw	r26, 0x02	; 2
    189a:	ed 91       	ld	r30, X+
    189c:	fc 91       	ld	r31, X
    189e:	13 97       	sbiw	r26, 0x03	; 3
    18a0:	20 81       	ld	r18, Z
    18a2:	31 81       	ldd	r19, Z+1	; 0x01
    18a4:	42 17       	cp	r20, r18
    18a6:	53 07       	cpc	r21, r19
    18a8:	b0 f7       	brcc	.-20     	; 0x1896 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    18aa:	12 96       	adiw	r26, 0x02	; 2
    18ac:	ed 91       	ld	r30, X+
    18ae:	fc 91       	ld	r31, X
    18b0:	13 97       	sbiw	r26, 0x03	; 3
    18b2:	fb 83       	std	Y+3, r31	; 0x03
    18b4:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    18b6:	d5 83       	std	Z+5, r29	; 0x05
    18b8:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    18ba:	bd 83       	std	Y+5, r27	; 0x05
    18bc:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    18be:	13 96       	adiw	r26, 0x03	; 3
    18c0:	dc 93       	st	X, r29
    18c2:	ce 93       	st	-X, r28
    18c4:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    18c6:	99 87       	std	Y+9, r25	; 0x09
    18c8:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    18ca:	fc 01       	movw	r30, r24
    18cc:	20 81       	ld	r18, Z
    18ce:	2f 5f       	subi	r18, 0xFF	; 255
    18d0:	20 83       	st	Z, r18
}
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    18de:	a0 85       	ldd	r26, Z+8	; 0x08
    18e0:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    18e2:	c2 81       	ldd	r28, Z+2	; 0x02
    18e4:	d3 81       	ldd	r29, Z+3	; 0x03
    18e6:	84 81       	ldd	r24, Z+4	; 0x04
    18e8:	95 81       	ldd	r25, Z+5	; 0x05
    18ea:	9d 83       	std	Y+5, r25	; 0x05
    18ec:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    18ee:	c4 81       	ldd	r28, Z+4	; 0x04
    18f0:	d5 81       	ldd	r29, Z+5	; 0x05
    18f2:	82 81       	ldd	r24, Z+2	; 0x02
    18f4:	93 81       	ldd	r25, Z+3	; 0x03
    18f6:	9b 83       	std	Y+3, r25	; 0x03
    18f8:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    18fa:	11 96       	adiw	r26, 0x01	; 1
    18fc:	8d 91       	ld	r24, X+
    18fe:	9c 91       	ld	r25, X
    1900:	12 97       	sbiw	r26, 0x02	; 2
    1902:	e8 17       	cp	r30, r24
    1904:	f9 07       	cpc	r31, r25
    1906:	31 f4       	brne	.+12     	; 0x1914 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    1908:	84 81       	ldd	r24, Z+4	; 0x04
    190a:	95 81       	ldd	r25, Z+5	; 0x05
    190c:	12 96       	adiw	r26, 0x02	; 2
    190e:	9c 93       	st	X, r25
    1910:	8e 93       	st	-X, r24
    1912:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    1914:	11 86       	std	Z+9, r1	; 0x09
    1916:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    1918:	8c 91       	ld	r24, X
    191a:	81 50       	subi	r24, 0x01	; 1
    191c:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    191e:	8c 91       	ld	r24, X
}
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	08 95       	ret

00001926 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    1926:	fc 01       	movw	r30, r24
    1928:	60 83       	st	Z, r22
    192a:	31 97       	sbiw	r30, 0x01	; 1
    192c:	70 83       	st	Z, r23
    192e:	31 97       	sbiw	r30, 0x01	; 1
    1930:	10 82       	st	Z, r1
    1932:	31 97       	sbiw	r30, 0x01	; 1
    1934:	20 e8       	ldi	r18, 0x80	; 128
    1936:	20 83       	st	Z, r18
    1938:	31 97       	sbiw	r30, 0x01	; 1
    193a:	10 82       	st	Z, r1
    193c:	77 97       	sbiw	r30, 0x17	; 23
    193e:	40 83       	st	Z, r20
    1940:	31 97       	sbiw	r30, 0x01	; 1
    1942:	50 83       	st	Z, r21
    1944:	83 97       	sbiw	r24, 0x23	; 35
    1946:	08 95       	ret

00001948 <xPortStartScheduler>:
    1948:	a8 95       	wdr
    194a:	90 ec       	ldi	r25, 0xC0	; 192
    194c:	88 e1       	ldi	r24, 0x18	; 24
    194e:	0f b6       	in	r0, 0x3f	; 63
    1950:	f8 94       	cli
    1952:	a8 95       	wdr
    1954:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    195e:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <pxCurrentTCB>
    1962:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    1966:	cd 91       	ld	r28, X+
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	dd 91       	ld	r29, X+
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	ff 91       	pop	r31
    1970:	ef 91       	pop	r30
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	bf 91       	pop	r27
    1978:	af 91       	pop	r26
    197a:	9f 91       	pop	r25
    197c:	8f 91       	pop	r24
    197e:	7f 91       	pop	r23
    1980:	6f 91       	pop	r22
    1982:	5f 91       	pop	r21
    1984:	4f 91       	pop	r20
    1986:	3f 91       	pop	r19
    1988:	2f 91       	pop	r18
    198a:	1f 91       	pop	r17
    198c:	0f 91       	pop	r16
    198e:	ff 90       	pop	r15
    1990:	ef 90       	pop	r14
    1992:	df 90       	pop	r13
    1994:	cf 90       	pop	r12
    1996:	bf 90       	pop	r11
    1998:	af 90       	pop	r10
    199a:	9f 90       	pop	r9
    199c:	8f 90       	pop	r8
    199e:	7f 90       	pop	r7
    19a0:	6f 90       	pop	r6
    19a2:	5f 90       	pop	r5
    19a4:	4f 90       	pop	r4
    19a6:	3f 90       	pop	r3
    19a8:	2f 90       	pop	r2
    19aa:	1f 90       	pop	r1
    19ac:	0f 90       	pop	r0
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	0f 90       	pop	r0
    19b2:	08 95       	ret
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	08 95       	ret

000019b8 <vPortYield>:
    19b8:	0f 92       	push	r0
    19ba:	0f b6       	in	r0, 0x3f	; 63
    19bc:	f8 94       	cli
    19be:	0f 92       	push	r0
    19c0:	1f 92       	push	r1
    19c2:	11 24       	eor	r1, r1
    19c4:	2f 92       	push	r2
    19c6:	3f 92       	push	r3
    19c8:	4f 92       	push	r4
    19ca:	5f 92       	push	r5
    19cc:	6f 92       	push	r6
    19ce:	7f 92       	push	r7
    19d0:	8f 92       	push	r8
    19d2:	9f 92       	push	r9
    19d4:	af 92       	push	r10
    19d6:	bf 92       	push	r11
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	2f 93       	push	r18
    19e6:	3f 93       	push	r19
    19e8:	4f 93       	push	r20
    19ea:	5f 93       	push	r21
    19ec:	6f 93       	push	r22
    19ee:	7f 93       	push	r23
    19f0:	8f 93       	push	r24
    19f2:	9f 93       	push	r25
    19f4:	af 93       	push	r26
    19f6:	bf 93       	push	r27
    19f8:	cf 93       	push	r28
    19fa:	df 93       	push	r29
    19fc:	ef 93       	push	r30
    19fe:	ff 93       	push	r31
    1a00:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <pxCurrentTCB>
    1a04:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    1a08:	0d b6       	in	r0, 0x3d	; 61
    1a0a:	0d 92       	st	X+, r0
    1a0c:	0e b6       	in	r0, 0x3e	; 62
    1a0e:	0d 92       	st	X+, r0
    1a10:	0e 94 ed 13 	call	0x27da	; 0x27da <vTaskSwitchContext>
    1a14:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <pxCurrentTCB>
    1a18:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    1a1c:	cd 91       	ld	r28, X+
    1a1e:	cd bf       	out	0x3d, r28	; 61
    1a20:	dd 91       	ld	r29, X+
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	ff 91       	pop	r31
    1a26:	ef 91       	pop	r30
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	1f 91       	pop	r17
    1a42:	0f 91       	pop	r16
    1a44:	ff 90       	pop	r15
    1a46:	ef 90       	pop	r14
    1a48:	df 90       	pop	r13
    1a4a:	cf 90       	pop	r12
    1a4c:	bf 90       	pop	r11
    1a4e:	af 90       	pop	r10
    1a50:	9f 90       	pop	r9
    1a52:	8f 90       	pop	r8
    1a54:	7f 90       	pop	r7
    1a56:	6f 90       	pop	r6
    1a58:	5f 90       	pop	r5
    1a5a:	4f 90       	pop	r4
    1a5c:	3f 90       	pop	r3
    1a5e:	2f 90       	pop	r2
    1a60:	1f 90       	pop	r1
    1a62:	0f 90       	pop	r0
    1a64:	0f be       	out	0x3f, r0	; 63
    1a66:	0f 90       	pop	r0
    1a68:	08 95       	ret

00001a6a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1a6a:	0f 92       	push	r0
    1a6c:	0f b6       	in	r0, 0x3f	; 63
    1a6e:	f8 94       	cli
    1a70:	0f 92       	push	r0
    1a72:	1f 92       	push	r1
    1a74:	11 24       	eor	r1, r1
    1a76:	2f 92       	push	r2
    1a78:	3f 92       	push	r3
    1a7a:	4f 92       	push	r4
    1a7c:	5f 92       	push	r5
    1a7e:	6f 92       	push	r6
    1a80:	7f 92       	push	r7
    1a82:	8f 92       	push	r8
    1a84:	9f 92       	push	r9
    1a86:	af 92       	push	r10
    1a88:	bf 92       	push	r11
    1a8a:	cf 92       	push	r12
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	2f 93       	push	r18
    1a98:	3f 93       	push	r19
    1a9a:	4f 93       	push	r20
    1a9c:	5f 93       	push	r21
    1a9e:	6f 93       	push	r22
    1aa0:	7f 93       	push	r23
    1aa2:	8f 93       	push	r24
    1aa4:	9f 93       	push	r25
    1aa6:	af 93       	push	r26
    1aa8:	bf 93       	push	r27
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	ef 93       	push	r30
    1ab0:	ff 93       	push	r31
    1ab2:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <pxCurrentTCB>
    1ab6:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    1aba:	0d b6       	in	r0, 0x3d	; 61
    1abc:	0d 92       	st	X+, r0
    1abe:	0e b6       	in	r0, 0x3e	; 62
    1ac0:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1ac2:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1ac4:	0e 94 6d 12 	call	0x24da	; 0x24da <xTaskIncrementTick>
    1ac8:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1aca:	0e 94 ed 13 	call	0x27da	; 0x27da <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1ace:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <pxCurrentTCB>
    1ad2:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    1ad6:	cd 91       	ld	r28, X+
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	dd 91       	ld	r29, X+
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	ff 91       	pop	r31
    1ae0:	ef 91       	pop	r30
    1ae2:	df 91       	pop	r29
    1ae4:	cf 91       	pop	r28
    1ae6:	bf 91       	pop	r27
    1ae8:	af 91       	pop	r26
    1aea:	9f 91       	pop	r25
    1aec:	8f 91       	pop	r24
    1aee:	7f 91       	pop	r23
    1af0:	6f 91       	pop	r22
    1af2:	5f 91       	pop	r21
    1af4:	4f 91       	pop	r20
    1af6:	3f 91       	pop	r19
    1af8:	2f 91       	pop	r18
    1afa:	1f 91       	pop	r17
    1afc:	0f 91       	pop	r16
    1afe:	ff 90       	pop	r15
    1b00:	ef 90       	pop	r14
    1b02:	df 90       	pop	r13
    1b04:	cf 90       	pop	r12
    1b06:	bf 90       	pop	r11
    1b08:	af 90       	pop	r10
    1b0a:	9f 90       	pop	r9
    1b0c:	8f 90       	pop	r8
    1b0e:	7f 90       	pop	r7
    1b10:	6f 90       	pop	r6
    1b12:	5f 90       	pop	r5
    1b14:	4f 90       	pop	r4
    1b16:	3f 90       	pop	r3
    1b18:	2f 90       	pop	r2
    1b1a:	1f 90       	pop	r1
    1b1c:	0f 90       	pop	r0
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    1b22:	08 95       	ret

00001b24 <__vector_6>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1b24:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1b28:	18 95       	reti

00001b2a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	0f 92       	push	r0
    1b30:	fc 01       	movw	r30, r24
    1b32:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b34:	0f 90       	pop	r0
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	91 11       	cpse	r25, r1
    1b3c:	80 e0       	ldi	r24, 0x00	; 0
    1b3e:	08 95       	ret

00001b40 <prvCopyDataToQueue>:
    1b40:	0f 93       	push	r16
    1b42:	1f 93       	push	r17
    1b44:	cf 93       	push	r28
    1b46:	df 93       	push	r29
    1b48:	ec 01       	movw	r28, r24
    1b4a:	04 2f       	mov	r16, r20
    1b4c:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1b4e:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1b50:	41 11       	cpse	r20, r1
    1b52:	0c c0       	rjmp	.+24     	; 0x1b6c <prvCopyDataToQueue+0x2c>
    1b54:	88 81       	ld	r24, Y
    1b56:	99 81       	ldd	r25, Y+1	; 0x01
    1b58:	89 2b       	or	r24, r25
    1b5a:	09 f0       	breq	.+2      	; 0x1b5e <prvCopyDataToQueue+0x1e>
    1b5c:	42 c0       	rjmp	.+132    	; 0x1be2 <prvCopyDataToQueue+0xa2>
    1b5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b60:	9d 81       	ldd	r25, Y+5	; 0x05
    1b62:	0e 94 34 15 	call	0x2a68	; 0x2a68 <xTaskPriorityDisinherit>
    1b66:	1d 82       	std	Y+5, r1	; 0x05
    1b68:	1c 82       	std	Y+4, r1	; 0x04
    1b6a:	42 c0       	rjmp	.+132    	; 0x1bf0 <prvCopyDataToQueue+0xb0>
    1b6c:	01 11       	cpse	r16, r1
    1b6e:	17 c0       	rjmp	.+46     	; 0x1b9e <prvCopyDataToQueue+0x5e>
    1b70:	50 e0       	ldi	r21, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	9b 81       	ldd	r25, Y+3	; 0x03
    1b76:	0e 94 be 21 	call	0x437c	; 0x437c <memcpy>
    1b7a:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b80:	82 0f       	add	r24, r18
    1b82:	91 1d       	adc	r25, r1
    1b84:	9b 83       	std	Y+3, r25	; 0x03
    1b86:	8a 83       	std	Y+2, r24	; 0x02
    1b88:	2c 81       	ldd	r18, Y+4	; 0x04
    1b8a:	3d 81       	ldd	r19, Y+5	; 0x05
    1b8c:	82 17       	cp	r24, r18
    1b8e:	93 07       	cpc	r25, r19
    1b90:	50 f1       	brcs	.+84     	; 0x1be6 <prvCopyDataToQueue+0xa6>
    1b92:	88 81       	ld	r24, Y
    1b94:	99 81       	ldd	r25, Y+1	; 0x01
    1b96:	9b 83       	std	Y+3, r25	; 0x03
    1b98:	8a 83       	std	Y+2, r24	; 0x02
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	29 c0       	rjmp	.+82     	; 0x1bf0 <prvCopyDataToQueue+0xb0>
    1b9e:	50 e0       	ldi	r21, 0x00	; 0
    1ba0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ba2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ba4:	0e 94 be 21 	call	0x437c	; 0x437c <memcpy>
    1ba8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	91 95       	neg	r25
    1bae:	81 95       	neg	r24
    1bb0:	91 09       	sbc	r25, r1
    1bb2:	2e 81       	ldd	r18, Y+6	; 0x06
    1bb4:	3f 81       	ldd	r19, Y+7	; 0x07
    1bb6:	28 0f       	add	r18, r24
    1bb8:	39 1f       	adc	r19, r25
    1bba:	3f 83       	std	Y+7, r19	; 0x07
    1bbc:	2e 83       	std	Y+6, r18	; 0x06
    1bbe:	48 81       	ld	r20, Y
    1bc0:	59 81       	ldd	r21, Y+1	; 0x01
    1bc2:	24 17       	cp	r18, r20
    1bc4:	35 07       	cpc	r19, r21
    1bc6:	30 f4       	brcc	.+12     	; 0x1bd4 <prvCopyDataToQueue+0x94>
    1bc8:	2c 81       	ldd	r18, Y+4	; 0x04
    1bca:	3d 81       	ldd	r19, Y+5	; 0x05
    1bcc:	82 0f       	add	r24, r18
    1bce:	93 1f       	adc	r25, r19
    1bd0:	9f 83       	std	Y+7, r25	; 0x07
    1bd2:	8e 83       	std	Y+6, r24	; 0x06
    1bd4:	02 30       	cpi	r16, 0x02	; 2
    1bd6:	49 f4       	brne	.+18     	; 0x1bea <prvCopyDataToQueue+0xaa>
    1bd8:	11 23       	and	r17, r17
    1bda:	49 f0       	breq	.+18     	; 0x1bee <prvCopyDataToQueue+0xae>
    1bdc:	11 50       	subi	r17, 0x01	; 1
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	07 c0       	rjmp	.+14     	; 0x1bf0 <prvCopyDataToQueue+0xb0>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	05 c0       	rjmp	.+10     	; 0x1bf0 <prvCopyDataToQueue+0xb0>
    1be6:	80 e0       	ldi	r24, 0x00	; 0
    1be8:	03 c0       	rjmp	.+6      	; 0x1bf0 <prvCopyDataToQueue+0xb0>
    1bea:	80 e0       	ldi	r24, 0x00	; 0
    1bec:	01 c0       	rjmp	.+2      	; 0x1bf0 <prvCopyDataToQueue+0xb0>
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	1f 5f       	subi	r17, 0xFF	; 255
    1bf2:	1a 8f       	std	Y+26, r17	; 0x1a
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	08 95       	ret

00001bfe <prvCopyDataFromQueue>:
    1bfe:	fc 01       	movw	r30, r24
    1c00:	44 8d       	ldd	r20, Z+28	; 0x1c
    1c02:	44 23       	and	r20, r20
    1c04:	a9 f0       	breq	.+42     	; 0x1c30 <prvCopyDataFromQueue+0x32>
    1c06:	50 e0       	ldi	r21, 0x00	; 0
    1c08:	26 81       	ldd	r18, Z+6	; 0x06
    1c0a:	37 81       	ldd	r19, Z+7	; 0x07
    1c0c:	24 0f       	add	r18, r20
    1c0e:	35 1f       	adc	r19, r21
    1c10:	37 83       	std	Z+7, r19	; 0x07
    1c12:	26 83       	std	Z+6, r18	; 0x06
    1c14:	84 81       	ldd	r24, Z+4	; 0x04
    1c16:	95 81       	ldd	r25, Z+5	; 0x05
    1c18:	28 17       	cp	r18, r24
    1c1a:	39 07       	cpc	r19, r25
    1c1c:	20 f0       	brcs	.+8      	; 0x1c26 <prvCopyDataFromQueue+0x28>
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	97 83       	std	Z+7, r25	; 0x07
    1c24:	86 83       	std	Z+6, r24	; 0x06
    1c26:	cb 01       	movw	r24, r22
    1c28:	66 81       	ldd	r22, Z+6	; 0x06
    1c2a:	77 81       	ldd	r23, Z+7	; 0x07
    1c2c:	0e 94 be 21 	call	0x437c	; 0x437c <memcpy>
    1c30:	08 95       	ret

00001c32 <prvUnlockQueue>:
    1c32:	ef 92       	push	r14
    1c34:	ff 92       	push	r15
    1c36:	0f 93       	push	r16
    1c38:	1f 93       	push	r17
    1c3a:	cf 93       	push	r28
    1c3c:	8c 01       	movw	r16, r24
    1c3e:	0f b6       	in	r0, 0x3f	; 63
    1c40:	f8 94       	cli
    1c42:	0f 92       	push	r0
    1c44:	fc 01       	movw	r30, r24
    1c46:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1c48:	1c 16       	cp	r1, r28
    1c4a:	ac f4       	brge	.+42     	; 0x1c76 <prvUnlockQueue+0x44>
    1c4c:	81 89       	ldd	r24, Z+17	; 0x11
    1c4e:	81 11       	cpse	r24, r1
    1c50:	06 c0       	rjmp	.+12     	; 0x1c5e <prvUnlockQueue+0x2c>
    1c52:	11 c0       	rjmp	.+34     	; 0x1c76 <prvUnlockQueue+0x44>
    1c54:	f8 01       	movw	r30, r16
    1c56:	81 89       	ldd	r24, Z+17	; 0x11
    1c58:	81 11       	cpse	r24, r1
    1c5a:	05 c0       	rjmp	.+10     	; 0x1c66 <prvUnlockQueue+0x34>
    1c5c:	0c c0       	rjmp	.+24     	; 0x1c76 <prvUnlockQueue+0x44>
    1c5e:	78 01       	movw	r14, r16
    1c60:	f1 e1       	ldi	r31, 0x11	; 17
    1c62:	ef 0e       	add	r14, r31
    1c64:	f1 1c       	adc	r15, r1
    1c66:	c7 01       	movw	r24, r14
    1c68:	0e 94 99 14 	call	0x2932	; 0x2932 <xTaskRemoveFromEventList>
    1c6c:	81 11       	cpse	r24, r1
    1c6e:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vTaskMissedYield>
    1c72:	c1 50       	subi	r28, 0x01	; 1
    1c74:	79 f7       	brne	.-34     	; 0x1c54 <prvUnlockQueue+0x22>
    1c76:	8f ef       	ldi	r24, 0xFF	; 255
    1c78:	f8 01       	movw	r30, r16
    1c7a:	86 8f       	std	Z+30, r24	; 0x1e
    1c7c:	0f 90       	pop	r0
    1c7e:	0f be       	out	0x3f, r0	; 63
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	0f 92       	push	r0
    1c86:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1c88:	1c 16       	cp	r1, r28
    1c8a:	ac f4       	brge	.+42     	; 0x1cb6 <prvUnlockQueue+0x84>
    1c8c:	80 85       	ldd	r24, Z+8	; 0x08
    1c8e:	81 11       	cpse	r24, r1
    1c90:	06 c0       	rjmp	.+12     	; 0x1c9e <prvUnlockQueue+0x6c>
    1c92:	11 c0       	rjmp	.+34     	; 0x1cb6 <prvUnlockQueue+0x84>
    1c94:	f8 01       	movw	r30, r16
    1c96:	80 85       	ldd	r24, Z+8	; 0x08
    1c98:	81 11       	cpse	r24, r1
    1c9a:	05 c0       	rjmp	.+10     	; 0x1ca6 <prvUnlockQueue+0x74>
    1c9c:	0c c0       	rjmp	.+24     	; 0x1cb6 <prvUnlockQueue+0x84>
    1c9e:	78 01       	movw	r14, r16
    1ca0:	f8 e0       	ldi	r31, 0x08	; 8
    1ca2:	ef 0e       	add	r14, r31
    1ca4:	f1 1c       	adc	r15, r1
    1ca6:	c7 01       	movw	r24, r14
    1ca8:	0e 94 99 14 	call	0x2932	; 0x2932 <xTaskRemoveFromEventList>
    1cac:	81 11       	cpse	r24, r1
    1cae:	0e 94 22 15 	call	0x2a44	; 0x2a44 <vTaskMissedYield>
    1cb2:	c1 50       	subi	r28, 0x01	; 1
    1cb4:	79 f7       	brne	.-34     	; 0x1c94 <prvUnlockQueue+0x62>
    1cb6:	8f ef       	ldi	r24, 0xFF	; 255
    1cb8:	f8 01       	movw	r30, r16
    1cba:	85 8f       	std	Z+29, r24	; 0x1d
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	cf 91       	pop	r28
    1cc2:	1f 91       	pop	r17
    1cc4:	0f 91       	pop	r16
    1cc6:	ff 90       	pop	r15
    1cc8:	ef 90       	pop	r14
    1cca:	08 95       	ret

00001ccc <xQueueGenericReset>:
    1ccc:	cf 93       	push	r28
    1cce:	df 93       	push	r29
    1cd0:	ec 01       	movw	r28, r24
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	0f 92       	push	r0
    1cd8:	e8 81       	ld	r30, Y
    1cda:	f9 81       	ldd	r31, Y+1	; 0x01
    1cdc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cde:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	82 9f       	mul	r24, r18
    1ce6:	a0 01       	movw	r20, r0
    1ce8:	83 9f       	mul	r24, r19
    1cea:	50 0d       	add	r21, r0
    1cec:	92 9f       	mul	r25, r18
    1cee:	50 0d       	add	r21, r0
    1cf0:	11 24       	eor	r1, r1
    1cf2:	4e 0f       	add	r20, r30
    1cf4:	5f 1f       	adc	r21, r31
    1cf6:	5d 83       	std	Y+5, r21	; 0x05
    1cf8:	4c 83       	std	Y+4, r20	; 0x04
    1cfa:	1a 8e       	std	Y+26, r1	; 0x1a
    1cfc:	fb 83       	std	Y+3, r31	; 0x03
    1cfe:	ea 83       	std	Y+2, r30	; 0x02
    1d00:	01 97       	sbiw	r24, 0x01	; 1
    1d02:	82 9f       	mul	r24, r18
    1d04:	a0 01       	movw	r20, r0
    1d06:	83 9f       	mul	r24, r19
    1d08:	50 0d       	add	r21, r0
    1d0a:	92 9f       	mul	r25, r18
    1d0c:	50 0d       	add	r21, r0
    1d0e:	11 24       	eor	r1, r1
    1d10:	cf 01       	movw	r24, r30
    1d12:	84 0f       	add	r24, r20
    1d14:	95 1f       	adc	r25, r21
    1d16:	9f 83       	std	Y+7, r25	; 0x07
    1d18:	8e 83       	std	Y+6, r24	; 0x06
    1d1a:	8f ef       	ldi	r24, 0xFF	; 255
    1d1c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d1e:	8e 8f       	std	Y+30, r24	; 0x1e
    1d20:	61 11       	cpse	r22, r1
    1d22:	0c c0       	rjmp	.+24     	; 0x1d3c <xQueueGenericReset+0x70>
    1d24:	88 85       	ldd	r24, Y+8	; 0x08
    1d26:	88 23       	and	r24, r24
    1d28:	89 f0       	breq	.+34     	; 0x1d4c <xQueueGenericReset+0x80>
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	08 96       	adiw	r24, 0x08	; 8
    1d2e:	0e 94 99 14 	call	0x2932	; 0x2932 <xTaskRemoveFromEventList>
    1d32:	88 23       	and	r24, r24
    1d34:	59 f0       	breq	.+22     	; 0x1d4c <xQueueGenericReset+0x80>
    1d36:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    1d3a:	08 c0       	rjmp	.+16     	; 0x1d4c <xQueueGenericReset+0x80>
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	08 96       	adiw	r24, 0x08	; 8
    1d40:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    1d44:	ce 01       	movw	r24, r28
    1d46:	41 96       	adiw	r24, 0x11	; 17
    1d48:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    1d4c:	0f 90       	pop	r0
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	df 91       	pop	r29
    1d54:	cf 91       	pop	r28
    1d56:	08 95       	ret

00001d58 <xQueueGenericCreate>:
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	08 2f       	mov	r16, r24
    1d62:	16 2f       	mov	r17, r22
    1d64:	86 9f       	mul	r24, r22
    1d66:	c0 01       	movw	r24, r0
    1d68:	11 24       	eor	r1, r1
    1d6a:	4f 96       	adiw	r24, 0x1f	; 31
    1d6c:	0e 94 b3 0b 	call	0x1766	; 0x1766 <pvPortMalloc>
    1d70:	ec 01       	movw	r28, r24
    1d72:	00 97       	sbiw	r24, 0x00	; 0
    1d74:	71 f0       	breq	.+28     	; 0x1d92 <xQueueGenericCreate+0x3a>
    1d76:	11 11       	cpse	r17, r1
    1d78:	03 c0       	rjmp	.+6      	; 0x1d80 <xQueueGenericCreate+0x28>
    1d7a:	99 83       	std	Y+1, r25	; 0x01
    1d7c:	88 83       	st	Y, r24
    1d7e:	03 c0       	rjmp	.+6      	; 0x1d86 <xQueueGenericCreate+0x2e>
    1d80:	4f 96       	adiw	r24, 0x1f	; 31
    1d82:	99 83       	std	Y+1, r25	; 0x01
    1d84:	88 83       	st	Y, r24
    1d86:	0b 8f       	std	Y+27, r16	; 0x1b
    1d88:	1c 8f       	std	Y+28, r17	; 0x1c
    1d8a:	61 e0       	ldi	r22, 0x01	; 1
    1d8c:	ce 01       	movw	r24, r28
    1d8e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xQueueGenericReset>
    1d92:	ce 01       	movw	r24, r28
    1d94:	df 91       	pop	r29
    1d96:	cf 91       	pop	r28
    1d98:	1f 91       	pop	r17
    1d9a:	0f 91       	pop	r16
    1d9c:	08 95       	ret

00001d9e <xQueueGenericSend>:
    1d9e:	9f 92       	push	r9
    1da0:	af 92       	push	r10
    1da2:	bf 92       	push	r11
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	cf 93       	push	r28
    1db2:	df 93       	push	r29
    1db4:	00 d0       	rcall	.+0      	; 0x1db6 <xQueueGenericSend+0x18>
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <xQueueGenericSend+0x1a>
    1db8:	1f 92       	push	r1
    1dba:	cd b7       	in	r28, 0x3d	; 61
    1dbc:	de b7       	in	r29, 0x3e	; 62
    1dbe:	8c 01       	movw	r16, r24
    1dc0:	6b 01       	movw	r12, r22
    1dc2:	5d 83       	std	Y+5, r21	; 0x05
    1dc4:	4c 83       	std	Y+4, r20	; 0x04
    1dc6:	a2 2e       	mov	r10, r18
    1dc8:	b1 2c       	mov	r11, r1
    1dca:	99 24       	eor	r9, r9
    1dcc:	93 94       	inc	r9
    1dce:	7c 01       	movw	r14, r24
    1dd0:	88 e0       	ldi	r24, 0x08	; 8
    1dd2:	e8 0e       	add	r14, r24
    1dd4:	f1 1c       	adc	r15, r1
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	0f 92       	push	r0
    1ddc:	f8 01       	movw	r30, r16
    1dde:	92 8d       	ldd	r25, Z+26	; 0x1a
    1de0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1de2:	98 17       	cp	r25, r24
    1de4:	18 f0       	brcs	.+6      	; 0x1dec <xQueueGenericSend+0x4e>
    1de6:	f2 e0       	ldi	r31, 0x02	; 2
    1de8:	af 12       	cpse	r10, r31
    1dea:	19 c0       	rjmp	.+50     	; 0x1e1e <xQueueGenericSend+0x80>
    1dec:	4a 2d       	mov	r20, r10
    1dee:	b6 01       	movw	r22, r12
    1df0:	c8 01       	movw	r24, r16
    1df2:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <prvCopyDataToQueue>
    1df6:	f8 01       	movw	r30, r16
    1df8:	91 89       	ldd	r25, Z+17	; 0x11
    1dfa:	99 23       	and	r25, r25
    1dfc:	49 f0       	breq	.+18     	; 0x1e10 <xQueueGenericSend+0x72>
    1dfe:	c8 01       	movw	r24, r16
    1e00:	41 96       	adiw	r24, 0x11	; 17
    1e02:	0e 94 99 14 	call	0x2932	; 0x2932 <xTaskRemoveFromEventList>
    1e06:	88 23       	and	r24, r24
    1e08:	31 f0       	breq	.+12     	; 0x1e16 <xQueueGenericSend+0x78>
    1e0a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    1e0e:	03 c0       	rjmp	.+6      	; 0x1e16 <xQueueGenericSend+0x78>
    1e10:	81 11       	cpse	r24, r1
    1e12:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    1e16:	0f 90       	pop	r0
    1e18:	0f be       	out	0x3f, r0	; 63
    1e1a:	81 e0       	ldi	r24, 0x01	; 1
    1e1c:	50 c0       	rjmp	.+160    	; 0x1ebe <xQueueGenericSend+0x120>
    1e1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e20:	9d 81       	ldd	r25, Y+5	; 0x05
    1e22:	89 2b       	or	r24, r25
    1e24:	21 f4       	brne	.+8      	; 0x1e2e <xQueueGenericSend+0x90>
    1e26:	0f 90       	pop	r0
    1e28:	0f be       	out	0x3f, r0	; 63
    1e2a:	80 e0       	ldi	r24, 0x00	; 0
    1e2c:	48 c0       	rjmp	.+144    	; 0x1ebe <xQueueGenericSend+0x120>
    1e2e:	b1 10       	cpse	r11, r1
    1e30:	05 c0       	rjmp	.+10     	; 0x1e3c <xQueueGenericSend+0x9e>
    1e32:	ce 01       	movw	r24, r28
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vTaskInternalSetTimeOutState>
    1e3a:	b9 2c       	mov	r11, r9
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vTaskSuspendAll>
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	0f 92       	push	r0
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e4e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <xQueueGenericSend+0xb6>
    1e52:	15 8e       	std	Z+29, r1	; 0x1d
    1e54:	f8 01       	movw	r30, r16
    1e56:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e58:	8f 3f       	cpi	r24, 0xFF	; 255
    1e5a:	09 f4       	brne	.+2      	; 0x1e5e <xQueueGenericSend+0xc0>
    1e5c:	16 8e       	std	Z+30, r1	; 0x1e
    1e5e:	0f 90       	pop	r0
    1e60:	0f be       	out	0x3f, r0	; 63
    1e62:	be 01       	movw	r22, r28
    1e64:	6c 5f       	subi	r22, 0xFC	; 252
    1e66:	7f 4f       	sbci	r23, 0xFF	; 255
    1e68:	ce 01       	movw	r24, r28
    1e6a:	01 96       	adiw	r24, 0x01	; 1
    1e6c:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <xTaskCheckForTimeOut>
    1e70:	81 11       	cpse	r24, r1
    1e72:	1f c0       	rjmp	.+62     	; 0x1eb2 <xQueueGenericSend+0x114>
    1e74:	0f b6       	in	r0, 0x3f	; 63
    1e76:	f8 94       	cli
    1e78:	0f 92       	push	r0
    1e7a:	f8 01       	movw	r30, r16
    1e7c:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e7e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	98 13       	cpse	r25, r24
    1e86:	0f c0       	rjmp	.+30     	; 0x1ea6 <xQueueGenericSend+0x108>
    1e88:	6c 81       	ldd	r22, Y+4	; 0x04
    1e8a:	7d 81       	ldd	r23, Y+5	; 0x05
    1e8c:	c7 01       	movw	r24, r14
    1e8e:	0e 94 6e 14 	call	0x28dc	; 0x28dc <vTaskPlaceOnEventList>
    1e92:	c8 01       	movw	r24, r16
    1e94:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <prvUnlockQueue>
    1e98:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    1e9c:	81 11       	cpse	r24, r1
    1e9e:	9b cf       	rjmp	.-202    	; 0x1dd6 <xQueueGenericSend+0x38>
    1ea0:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    1ea4:	98 cf       	rjmp	.-208    	; 0x1dd6 <xQueueGenericSend+0x38>
    1ea6:	c8 01       	movw	r24, r16
    1ea8:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <prvUnlockQueue>
    1eac:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    1eb0:	92 cf       	rjmp	.-220    	; 0x1dd6 <xQueueGenericSend+0x38>
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <prvUnlockQueue>
    1eb8:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    1ebc:	80 e0       	ldi	r24, 0x00	; 0
    1ebe:	0f 90       	pop	r0
    1ec0:	0f 90       	pop	r0
    1ec2:	0f 90       	pop	r0
    1ec4:	0f 90       	pop	r0
    1ec6:	0f 90       	pop	r0
    1ec8:	df 91       	pop	r29
    1eca:	cf 91       	pop	r28
    1ecc:	1f 91       	pop	r17
    1ece:	0f 91       	pop	r16
    1ed0:	ff 90       	pop	r15
    1ed2:	ef 90       	pop	r14
    1ed4:	df 90       	pop	r13
    1ed6:	cf 90       	pop	r12
    1ed8:	bf 90       	pop	r11
    1eda:	af 90       	pop	r10
    1edc:	9f 90       	pop	r9
    1ede:	08 95       	ret

00001ee0 <xQueueGenericSendFromISR>:
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	8a 01       	movw	r16, r20
    1eee:	fc 01       	movw	r30, r24
    1ef0:	52 8d       	ldd	r21, Z+26	; 0x1a
    1ef2:	33 8d       	ldd	r19, Z+27	; 0x1b
    1ef4:	53 17       	cp	r21, r19
    1ef6:	10 f0       	brcs	.+4      	; 0x1efc <xQueueGenericSendFromISR+0x1c>
    1ef8:	22 30       	cpi	r18, 0x02	; 2
    1efa:	01 f5       	brne	.+64     	; 0x1f3c <xQueueGenericSendFromISR+0x5c>
    1efc:	42 2f       	mov	r20, r18
    1efe:	78 01       	movw	r14, r16
    1f00:	ec 01       	movw	r28, r24
    1f02:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1f04:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f06:	ce 01       	movw	r24, r28
    1f08:	0e 94 a0 0d 	call	0x1b40	; 0x1b40 <prvCopyDataToQueue>
    1f0c:	1f 3f       	cpi	r17, 0xFF	; 255
    1f0e:	81 f4       	brne	.+32     	; 0x1f30 <xQueueGenericSendFromISR+0x50>
    1f10:	89 89       	ldd	r24, Y+17	; 0x11
    1f12:	88 23       	and	r24, r24
    1f14:	a9 f0       	breq	.+42     	; 0x1f40 <xQueueGenericSendFromISR+0x60>
    1f16:	ce 01       	movw	r24, r28
    1f18:	41 96       	adiw	r24, 0x11	; 17
    1f1a:	0e 94 99 14 	call	0x2932	; 0x2932 <xTaskRemoveFromEventList>
    1f1e:	88 23       	and	r24, r24
    1f20:	89 f0       	breq	.+34     	; 0x1f44 <xQueueGenericSendFromISR+0x64>
    1f22:	e1 14       	cp	r14, r1
    1f24:	f1 04       	cpc	r15, r1
    1f26:	81 f0       	breq	.+32     	; 0x1f48 <xQueueGenericSendFromISR+0x68>
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	f7 01       	movw	r30, r14
    1f2c:	80 83       	st	Z, r24
    1f2e:	0d c0       	rjmp	.+26     	; 0x1f4a <xQueueGenericSendFromISR+0x6a>
    1f30:	ff 24       	eor	r15, r15
    1f32:	f3 94       	inc	r15
    1f34:	f1 0e       	add	r15, r17
    1f36:	fe 8e       	std	Y+30, r15	; 0x1e
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	07 c0       	rjmp	.+14     	; 0x1f4a <xQueueGenericSendFromISR+0x6a>
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	05 c0       	rjmp	.+10     	; 0x1f4a <xQueueGenericSendFromISR+0x6a>
    1f40:	81 e0       	ldi	r24, 0x01	; 1
    1f42:	03 c0       	rjmp	.+6      	; 0x1f4a <xQueueGenericSendFromISR+0x6a>
    1f44:	81 e0       	ldi	r24, 0x01	; 1
    1f46:	01 c0       	rjmp	.+2      	; 0x1f4a <xQueueGenericSendFromISR+0x6a>
    1f48:	81 e0       	ldi	r24, 0x01	; 1
    1f4a:	df 91       	pop	r29
    1f4c:	cf 91       	pop	r28
    1f4e:	1f 91       	pop	r17
    1f50:	0f 91       	pop	r16
    1f52:	ff 90       	pop	r15
    1f54:	ef 90       	pop	r14
    1f56:	08 95       	ret

00001f58 <xQueueReceive>:
    1f58:	9f 92       	push	r9
    1f5a:	af 92       	push	r10
    1f5c:	bf 92       	push	r11
    1f5e:	cf 92       	push	r12
    1f60:	df 92       	push	r13
    1f62:	ef 92       	push	r14
    1f64:	ff 92       	push	r15
    1f66:	0f 93       	push	r16
    1f68:	1f 93       	push	r17
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <xQueueReceive+0x18>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <xQueueReceive+0x1a>
    1f72:	1f 92       	push	r1
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	8c 01       	movw	r16, r24
    1f7a:	5b 01       	movw	r10, r22
    1f7c:	5d 83       	std	Y+5, r21	; 0x05
    1f7e:	4c 83       	std	Y+4, r20	; 0x04
    1f80:	e1 2c       	mov	r14, r1
    1f82:	99 24       	eor	r9, r9
    1f84:	93 94       	inc	r9
    1f86:	6c 01       	movw	r12, r24
    1f88:	81 e1       	ldi	r24, 0x11	; 17
    1f8a:	c8 0e       	add	r12, r24
    1f8c:	d1 1c       	adc	r13, r1
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	0f 92       	push	r0
    1f94:	f8 01       	movw	r30, r16
    1f96:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1f98:	ff 20       	and	r15, r15
    1f9a:	a9 f0       	breq	.+42     	; 0x1fc6 <xQueueReceive+0x6e>
    1f9c:	b5 01       	movw	r22, r10
    1f9e:	c8 01       	movw	r24, r16
    1fa0:	0e 94 ff 0d 	call	0x1bfe	; 0x1bfe <prvCopyDataFromQueue>
    1fa4:	fa 94       	dec	r15
    1fa6:	f8 01       	movw	r30, r16
    1fa8:	f2 8e       	std	Z+26, r15	; 0x1a
    1faa:	80 85       	ldd	r24, Z+8	; 0x08
    1fac:	88 23       	and	r24, r24
    1fae:	39 f0       	breq	.+14     	; 0x1fbe <xQueueReceive+0x66>
    1fb0:	c8 01       	movw	r24, r16
    1fb2:	08 96       	adiw	r24, 0x08	; 8
    1fb4:	0e 94 99 14 	call	0x2932	; 0x2932 <xTaskRemoveFromEventList>
    1fb8:	81 11       	cpse	r24, r1
    1fba:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    1fbe:	0f 90       	pop	r0
    1fc0:	0f be       	out	0x3f, r0	; 63
    1fc2:	81 e0       	ldi	r24, 0x01	; 1
    1fc4:	51 c0       	rjmp	.+162    	; 0x2068 <xQueueReceive+0x110>
    1fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    1fca:	89 2b       	or	r24, r25
    1fcc:	21 f4       	brne	.+8      	; 0x1fd6 <xQueueReceive+0x7e>
    1fce:	0f 90       	pop	r0
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	49 c0       	rjmp	.+146    	; 0x2068 <xQueueReceive+0x110>
    1fd6:	e1 10       	cpse	r14, r1
    1fd8:	05 c0       	rjmp	.+10     	; 0x1fe4 <xQueueReceive+0x8c>
    1fda:	ce 01       	movw	r24, r28
    1fdc:	01 96       	adiw	r24, 0x01	; 1
    1fde:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vTaskInternalSetTimeOutState>
    1fe2:	e9 2c       	mov	r14, r9
    1fe4:	0f 90       	pop	r0
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vTaskSuspendAll>
    1fec:	0f b6       	in	r0, 0x3f	; 63
    1fee:	f8 94       	cli
    1ff0:	0f 92       	push	r0
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ff6:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff8:	09 f4       	brne	.+2      	; 0x1ffc <xQueueReceive+0xa4>
    1ffa:	15 8e       	std	Z+29, r1	; 0x1d
    1ffc:	f8 01       	movw	r30, r16
    1ffe:	86 8d       	ldd	r24, Z+30	; 0x1e
    2000:	8f 3f       	cpi	r24, 0xFF	; 255
    2002:	09 f4       	brne	.+2      	; 0x2006 <xQueueReceive+0xae>
    2004:	16 8e       	std	Z+30, r1	; 0x1e
    2006:	0f 90       	pop	r0
    2008:	0f be       	out	0x3f, r0	; 63
    200a:	be 01       	movw	r22, r28
    200c:	6c 5f       	subi	r22, 0xFC	; 252
    200e:	7f 4f       	sbci	r23, 0xFF	; 255
    2010:	ce 01       	movw	r24, r28
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	0e 94 ec 14 	call	0x29d8	; 0x29d8 <xTaskCheckForTimeOut>
    2018:	81 11       	cpse	r24, r1
    201a:	1a c0       	rjmp	.+52     	; 0x2050 <xQueueReceive+0xf8>
    201c:	c8 01       	movw	r24, r16
    201e:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <prvIsQueueEmpty>
    2022:	88 23       	and	r24, r24
    2024:	79 f0       	breq	.+30     	; 0x2044 <xQueueReceive+0xec>
    2026:	6c 81       	ldd	r22, Y+4	; 0x04
    2028:	7d 81       	ldd	r23, Y+5	; 0x05
    202a:	c6 01       	movw	r24, r12
    202c:	0e 94 6e 14 	call	0x28dc	; 0x28dc <vTaskPlaceOnEventList>
    2030:	c8 01       	movw	r24, r16
    2032:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <prvUnlockQueue>
    2036:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    203a:	81 11       	cpse	r24, r1
    203c:	a8 cf       	rjmp	.-176    	; 0x1f8e <xQueueReceive+0x36>
    203e:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    2042:	a5 cf       	rjmp	.-182    	; 0x1f8e <xQueueReceive+0x36>
    2044:	c8 01       	movw	r24, r16
    2046:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <prvUnlockQueue>
    204a:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    204e:	9f cf       	rjmp	.-194    	; 0x1f8e <xQueueReceive+0x36>
    2050:	c8 01       	movw	r24, r16
    2052:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <prvUnlockQueue>
    2056:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    205a:	c8 01       	movw	r24, r16
    205c:	0e 94 95 0d 	call	0x1b2a	; 0x1b2a <prvIsQueueEmpty>
    2060:	88 23       	and	r24, r24
    2062:	09 f4       	brne	.+2      	; 0x2066 <xQueueReceive+0x10e>
    2064:	94 cf       	rjmp	.-216    	; 0x1f8e <xQueueReceive+0x36>
    2066:	80 e0       	ldi	r24, 0x00	; 0
    2068:	0f 90       	pop	r0
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	df 90       	pop	r13
    2080:	cf 90       	pop	r12
    2082:	bf 90       	pop	r11
    2084:	af 90       	pop	r10
    2086:	9f 90       	pop	r9
    2088:	08 95       	ret

0000208a <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    208a:	cf 93       	push	r28
    208c:	df 93       	push	r29
    208e:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	0f 92       	push	r0
    2096:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2098:	8f 3f       	cpi	r24, 0xFF	; 255
    209a:	09 f4       	brne	.+2      	; 0x209e <vQueueWaitForMessageRestricted+0x14>
    209c:	1d 8e       	std	Y+29, r1	; 0x1d
    209e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    20a0:	8f 3f       	cpi	r24, 0xFF	; 255
    20a2:	09 f4       	brne	.+2      	; 0x20a6 <vQueueWaitForMessageRestricted+0x1c>
    20a4:	1e 8e       	std	Y+30, r1	; 0x1e
    20a6:	0f 90       	pop	r0
    20a8:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    20aa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    20ac:	81 11       	cpse	r24, r1
    20ae:	04 c0       	rjmp	.+8      	; 0x20b8 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    20b0:	ce 01       	movw	r24, r28
    20b2:	41 96       	adiw	r24, 0x11	; 17
    20b4:	0e 94 80 14 	call	0x2900	; 0x2900 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    20b8:	ce 01       	movw	r24, r28
    20ba:	0e 94 19 0e 	call	0x1c32	; 0x1c32 <prvUnlockQueue>
    }
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	08 95       	ret

000020c4 <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    20c4:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <pxDelayedTaskList>
    20c8:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <pxDelayedTaskList+0x1>
    20cc:	80 81       	ld	r24, Z
    20ce:	81 11       	cpse	r24, r1
    20d0:	07 c0       	rjmp	.+14     	; 0x20e0 <prvResetNextTaskUnblockTime+0x1c>
    20d2:	8f ef       	ldi	r24, 0xFF	; 255
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <xNextTaskUnblockTime+0x1>
    20da:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <xNextTaskUnblockTime>
    20de:	08 95       	ret
    20e0:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <pxDelayedTaskList>
    20e4:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <pxDelayedTaskList+0x1>
    20e8:	05 80       	ldd	r0, Z+5	; 0x05
    20ea:	f6 81       	ldd	r31, Z+6	; 0x06
    20ec:	e0 2d       	mov	r30, r0
    20ee:	06 80       	ldd	r0, Z+6	; 0x06
    20f0:	f7 81       	ldd	r31, Z+7	; 0x07
    20f2:	e0 2d       	mov	r30, r0
    20f4:	82 81       	ldd	r24, Z+2	; 0x02
    20f6:	93 81       	ldd	r25, Z+3	; 0x03
    20f8:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <xNextTaskUnblockTime+0x1>
    20fc:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <xNextTaskUnblockTime>
    2100:	08 95       	ret

00002102 <prvAddCurrentTaskToDelayedList>:
    2102:	ff 92       	push	r15
    2104:	0f 93       	push	r16
    2106:	1f 93       	push	r17
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	ec 01       	movw	r28, r24
    210e:	f6 2e       	mov	r15, r22
    2110:	00 91 b0 01 	lds	r16, 0x01B0	; 0x8001b0 <xTickCount>
    2114:	10 91 b1 01 	lds	r17, 0x01B1	; 0x8001b1 <xTickCount+0x1>
    2118:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <pxCurrentTCB>
    211c:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    2120:	02 96       	adiw	r24, 0x02	; 2
    2122:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    2126:	cf 3f       	cpi	r28, 0xFF	; 255
    2128:	8f ef       	ldi	r24, 0xFF	; 255
    212a:	d8 07       	cpc	r29, r24
    212c:	69 f4       	brne	.+26     	; 0x2148 <prvAddCurrentTaskToDelayedList+0x46>
    212e:	ff 20       	and	r15, r15
    2130:	59 f0       	breq	.+22     	; 0x2148 <prvAddCurrentTaskToDelayedList+0x46>
    2132:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <pxCurrentTCB>
    2136:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    213a:	6e 5f       	subi	r22, 0xFE	; 254
    213c:	7f 4f       	sbci	r23, 0xFF	; 255
    213e:	83 eb       	ldi	r24, 0xB3	; 179
    2140:	91 e0       	ldi	r25, 0x01	; 1
    2142:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInsertEnd>
    2146:	2f c0       	rjmp	.+94     	; 0x21a6 <prvAddCurrentTaskToDelayedList+0xa4>
    2148:	c0 0f       	add	r28, r16
    214a:	d1 1f       	adc	r29, r17
    214c:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxCurrentTCB>
    2150:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    2154:	d3 83       	std	Z+3, r29	; 0x03
    2156:	c2 83       	std	Z+2, r28	; 0x02
    2158:	c0 17       	cp	r28, r16
    215a:	d1 07       	cpc	r29, r17
    215c:	68 f4       	brcc	.+26     	; 0x2178 <prvAddCurrentTaskToDelayedList+0x76>
    215e:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <pxCurrentTCB>
    2162:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    2166:	80 91 cf 01 	lds	r24, 0x01CF	; 0x8001cf <pxOverflowDelayedTaskList>
    216a:	90 91 d0 01 	lds	r25, 0x01D0	; 0x8001d0 <pxOverflowDelayedTaskList+0x1>
    216e:	6e 5f       	subi	r22, 0xFE	; 254
    2170:	7f 4f       	sbci	r23, 0xFF	; 255
    2172:	0e 94 3b 0c 	call	0x1876	; 0x1876 <vListInsert>
    2176:	17 c0       	rjmp	.+46     	; 0x21a6 <prvAddCurrentTaskToDelayedList+0xa4>
    2178:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <pxCurrentTCB>
    217c:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    2180:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <pxDelayedTaskList>
    2184:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <pxDelayedTaskList+0x1>
    2188:	6e 5f       	subi	r22, 0xFE	; 254
    218a:	7f 4f       	sbci	r23, 0xFF	; 255
    218c:	0e 94 3b 0c 	call	0x1876	; 0x1876 <vListInsert>
    2190:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <xNextTaskUnblockTime>
    2194:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <xNextTaskUnblockTime+0x1>
    2198:	c8 17       	cp	r28, r24
    219a:	d9 07       	cpc	r29, r25
    219c:	20 f4       	brcc	.+8      	; 0x21a6 <prvAddCurrentTaskToDelayedList+0xa4>
    219e:	d0 93 a8 01 	sts	0x01A8, r29	; 0x8001a8 <xNextTaskUnblockTime+0x1>
    21a2:	c0 93 a7 01 	sts	0x01A7, r28	; 0x8001a7 <xNextTaskUnblockTime>
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	08 95       	ret

000021b2 <prvIdleTask>:
    21b2:	0d eb       	ldi	r16, 0xBD	; 189
    21b4:	11 e0       	ldi	r17, 0x01	; 1
    21b6:	0f 2e       	mov	r0, r31
    21b8:	f5 ee       	ldi	r31, 0xE5	; 229
    21ba:	ef 2e       	mov	r14, r31
    21bc:	f1 e0       	ldi	r31, 0x01	; 1
    21be:	ff 2e       	mov	r15, r31
    21c0:	f0 2d       	mov	r31, r0
    21c2:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxDeletedTasksWaitingCleanUp>
    21c6:	88 23       	and	r24, r24
    21c8:	29 f1       	breq	.+74     	; 0x2214 <prvIdleTask+0x62>
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	0f 92       	push	r0
    21d0:	d8 01       	movw	r26, r16
    21d2:	15 96       	adiw	r26, 0x05	; 5
    21d4:	ed 91       	ld	r30, X+
    21d6:	fc 91       	ld	r31, X
    21d8:	16 97       	sbiw	r26, 0x06	; 6
    21da:	c6 81       	ldd	r28, Z+6	; 0x06
    21dc:	d7 81       	ldd	r29, Z+7	; 0x07
    21de:	ce 01       	movw	r24, r28
    21e0:	02 96       	adiw	r24, 0x02	; 2
    21e2:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    21e6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <uxCurrentNumberOfTasks>
    21ea:	81 50       	subi	r24, 0x01	; 1
    21ec:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <uxCurrentNumberOfTasks>
    21f0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxDeletedTasksWaitingCleanUp>
    21f4:	81 50       	subi	r24, 0x01	; 1
    21f6:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <uxDeletedTasksWaitingCleanUp>
    21fa:	0f 90       	pop	r0
    21fc:	0f be       	out	0x3f, r0	; 63
    21fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2200:	98 8d       	ldd	r25, Y+24	; 0x18
    2202:	0e 94 c6 0b 	call	0x178c	; 0x178c <vPortFree>
    2206:	ce 01       	movw	r24, r28
    2208:	0e 94 c6 0b 	call	0x178c	; 0x178c <vPortFree>
    220c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxDeletedTasksWaitingCleanUp>
    2210:	81 11       	cpse	r24, r1
    2212:	db cf       	rjmp	.-74     	; 0x21ca <prvIdleTask+0x18>
    2214:	f7 01       	movw	r30, r14
    2216:	80 81       	ld	r24, Z
    2218:	82 30       	cpi	r24, 0x02	; 2
    221a:	10 f0       	brcs	.+4      	; 0x2220 <prvIdleTask+0x6e>
    221c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    2220:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <vApplicationIdleHook>
    2224:	ce cf       	rjmp	.-100    	; 0x21c2 <prvIdleTask+0x10>

00002226 <xTaskCreate>:
    2226:	4f 92       	push	r4
    2228:	5f 92       	push	r5
    222a:	6f 92       	push	r6
    222c:	7f 92       	push	r7
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	af 92       	push	r10
    2234:	bf 92       	push	r11
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	cf 93       	push	r28
    2242:	df 93       	push	r29
    2244:	4c 01       	movw	r8, r24
    2246:	6b 01       	movw	r12, r22
    2248:	5a 01       	movw	r10, r20
    224a:	29 01       	movw	r4, r18
    224c:	ca 01       	movw	r24, r20
    224e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <pvPortMalloc>
    2252:	3c 01       	movw	r6, r24
    2254:	89 2b       	or	r24, r25
    2256:	09 f4       	brne	.+2      	; 0x225a <xTaskCreate+0x34>
    2258:	f1 c0       	rjmp	.+482    	; 0x243c <xTaskCreate+0x216>
    225a:	88 e2       	ldi	r24, 0x28	; 40
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	0e 94 b3 0b 	call	0x1766	; 0x1766 <pvPortMalloc>
    2262:	ec 01       	movw	r28, r24
    2264:	89 2b       	or	r24, r25
    2266:	99 f0       	breq	.+38     	; 0x228e <xTaskCreate+0x68>
    2268:	78 8e       	std	Y+24, r7	; 0x18
    226a:	6f 8a       	std	Y+23, r6	; 0x17
    226c:	a5 01       	movw	r20, r10
    226e:	65 ea       	ldi	r22, 0xA5	; 165
    2270:	70 e0       	ldi	r23, 0x00	; 0
    2272:	c3 01       	movw	r24, r6
    2274:	0e 94 c7 21 	call	0x438e	; 0x438e <memset>
    2278:	81 e0       	ldi	r24, 0x01	; 1
    227a:	a8 1a       	sub	r10, r24
    227c:	b1 08       	sbc	r11, r1
    227e:	8f 89       	ldd	r24, Y+23	; 0x17
    2280:	98 8d       	ldd	r25, Y+24	; 0x18
    2282:	a8 0e       	add	r10, r24
    2284:	b9 1e       	adc	r11, r25
    2286:	c1 14       	cp	r12, r1
    2288:	d1 04       	cpc	r13, r1
    228a:	29 f4       	brne	.+10     	; 0x2296 <xTaskCreate+0x70>
    228c:	20 c0       	rjmp	.+64     	; 0x22ce <xTaskCreate+0xa8>
    228e:	c3 01       	movw	r24, r6
    2290:	0e 94 c6 0b 	call	0x178c	; 0x178c <vPortFree>
    2294:	d3 c0       	rjmp	.+422    	; 0x243c <xTaskCreate+0x216>
    2296:	d6 01       	movw	r26, r12
    2298:	8c 91       	ld	r24, X
    229a:	89 8f       	std	Y+25, r24	; 0x19
    229c:	8c 91       	ld	r24, X
    229e:	88 23       	and	r24, r24
    22a0:	a1 f0       	breq	.+40     	; 0x22ca <xTaskCreate+0xa4>
    22a2:	ae 01       	movw	r20, r28
    22a4:	46 5e       	subi	r20, 0xE6	; 230
    22a6:	5f 4f       	sbci	r21, 0xFF	; 255
    22a8:	f6 01       	movw	r30, r12
    22aa:	31 96       	adiw	r30, 0x01	; 1
    22ac:	b8 e0       	ldi	r27, 0x08	; 8
    22ae:	cb 0e       	add	r12, r27
    22b0:	d1 1c       	adc	r13, r1
    22b2:	cf 01       	movw	r24, r30
    22b4:	21 91       	ld	r18, Z+
    22b6:	da 01       	movw	r26, r20
    22b8:	2d 93       	st	X+, r18
    22ba:	ad 01       	movw	r20, r26
    22bc:	dc 01       	movw	r26, r24
    22be:	8c 91       	ld	r24, X
    22c0:	88 23       	and	r24, r24
    22c2:	19 f0       	breq	.+6      	; 0x22ca <xTaskCreate+0xa4>
    22c4:	ec 15       	cp	r30, r12
    22c6:	fd 05       	cpc	r31, r13
    22c8:	a1 f7       	brne	.-24     	; 0x22b2 <xTaskCreate+0x8c>
    22ca:	18 a2       	std	Y+32, r1	; 0x20
    22cc:	01 c0       	rjmp	.+2      	; 0x22d0 <xTaskCreate+0xaa>
    22ce:	19 8e       	std	Y+25, r1	; 0x19
    22d0:	04 30       	cpi	r16, 0x04	; 4
    22d2:	08 f0       	brcs	.+2      	; 0x22d6 <xTaskCreate+0xb0>
    22d4:	03 e0       	ldi	r16, 0x03	; 3
    22d6:	0e 8b       	std	Y+22, r16	; 0x16
    22d8:	09 a3       	std	Y+33, r16	; 0x21
    22da:	1a a2       	std	Y+34, r1	; 0x22
    22dc:	6e 01       	movw	r12, r28
    22de:	b2 e0       	ldi	r27, 0x02	; 2
    22e0:	cb 0e       	add	r12, r27
    22e2:	d1 1c       	adc	r13, r1
    22e4:	c6 01       	movw	r24, r12
    22e6:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInitialiseItem>
    22ea:	ce 01       	movw	r24, r28
    22ec:	0c 96       	adiw	r24, 0x0c	; 12
    22ee:	0e 94 16 0c 	call	0x182c	; 0x182c <vListInitialiseItem>
    22f2:	d9 87       	std	Y+9, r29	; 0x09
    22f4:	c8 87       	std	Y+8, r28	; 0x08
    22f6:	84 e0       	ldi	r24, 0x04	; 4
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	80 1b       	sub	r24, r16
    22fc:	91 09       	sbc	r25, r1
    22fe:	9d 87       	std	Y+13, r25	; 0x0d
    2300:	8c 87       	std	Y+12, r24	; 0x0c
    2302:	db 8b       	std	Y+19, r29	; 0x13
    2304:	ca 8b       	std	Y+18, r28	; 0x12
    2306:	1b a2       	std	Y+35, r1	; 0x23
    2308:	1c a2       	std	Y+36, r1	; 0x24
    230a:	1d a2       	std	Y+37, r1	; 0x25
    230c:	1e a2       	std	Y+38, r1	; 0x26
    230e:	1f a2       	std	Y+39, r1	; 0x27
    2310:	a2 01       	movw	r20, r4
    2312:	b4 01       	movw	r22, r8
    2314:	c5 01       	movw	r24, r10
    2316:	0e 94 93 0c 	call	0x1926	; 0x1926 <pxPortInitialiseStack>
    231a:	99 83       	std	Y+1, r25	; 0x01
    231c:	88 83       	st	Y, r24
    231e:	e1 14       	cp	r14, r1
    2320:	f1 04       	cpc	r15, r1
    2322:	19 f0       	breq	.+6      	; 0x232a <xTaskCreate+0x104>
    2324:	f7 01       	movw	r30, r14
    2326:	d1 83       	std	Z+1, r29	; 0x01
    2328:	c0 83       	st	Z, r28
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	0f 92       	push	r0
    2330:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <uxCurrentNumberOfTasks>
    2334:	8f 5f       	subi	r24, 0xFF	; 255
    2336:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <uxCurrentNumberOfTasks>
    233a:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <pxCurrentTCB>
    233e:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    2342:	89 2b       	or	r24, r25
    2344:	d1 f5       	brne	.+116    	; 0x23ba <xTaskCreate+0x194>
    2346:	d0 93 0a 02 	sts	0x020A, r29	; 0x80020a <pxCurrentTCB+0x1>
    234a:	c0 93 09 02 	sts	0x0209, r28	; 0x800209 <pxCurrentTCB>
    234e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <uxCurrentNumberOfTasks>
    2352:	81 30       	cpi	r24, 0x01	; 1
    2354:	09 f0       	breq	.+2      	; 0x2358 <xTaskCreate+0x132>
    2356:	41 c0       	rjmp	.+130    	; 0x23da <xTaskCreate+0x1b4>
    2358:	85 ee       	ldi	r24, 0xE5	; 229
    235a:	91 e0       	ldi	r25, 0x01	; 1
    235c:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2360:	8e ee       	ldi	r24, 0xEE	; 238
    2362:	91 e0       	ldi	r25, 0x01	; 1
    2364:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2368:	87 ef       	ldi	r24, 0xF7	; 247
    236a:	91 e0       	ldi	r25, 0x01	; 1
    236c:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	92 e0       	ldi	r25, 0x02	; 2
    2374:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2378:	8c ed       	ldi	r24, 0xDC	; 220
    237a:	91 e0       	ldi	r25, 0x01	; 1
    237c:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2380:	83 ed       	ldi	r24, 0xD3	; 211
    2382:	91 e0       	ldi	r25, 0x01	; 1
    2384:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2388:	86 ec       	ldi	r24, 0xC6	; 198
    238a:	91 e0       	ldi	r25, 0x01	; 1
    238c:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2390:	8d eb       	ldi	r24, 0xBD	; 189
    2392:	91 e0       	ldi	r25, 0x01	; 1
    2394:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2398:	83 eb       	ldi	r24, 0xB3	; 179
    239a:	91 e0       	ldi	r25, 0x01	; 1
    239c:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    23a0:	8c ed       	ldi	r24, 0xDC	; 220
    23a2:	91 e0       	ldi	r25, 0x01	; 1
    23a4:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <pxDelayedTaskList+0x1>
    23a8:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <pxDelayedTaskList>
    23ac:	83 ed       	ldi	r24, 0xD3	; 211
    23ae:	91 e0       	ldi	r25, 0x01	; 1
    23b0:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <pxOverflowDelayedTaskList+0x1>
    23b4:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <pxOverflowDelayedTaskList>
    23b8:	10 c0       	rjmp	.+32     	; 0x23da <xTaskCreate+0x1b4>
    23ba:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <xSchedulerRunning>
    23be:	81 11       	cpse	r24, r1
    23c0:	0c c0       	rjmp	.+24     	; 0x23da <xTaskCreate+0x1b4>
    23c2:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxCurrentTCB>
    23c6:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    23ca:	96 89       	ldd	r25, Z+22	; 0x16
    23cc:	8e 89       	ldd	r24, Y+22	; 0x16
    23ce:	89 17       	cp	r24, r25
    23d0:	20 f0       	brcs	.+8      	; 0x23da <xTaskCreate+0x1b4>
    23d2:	d0 93 0a 02 	sts	0x020A, r29	; 0x80020a <pxCurrentTCB+0x1>
    23d6:	c0 93 09 02 	sts	0x0209, r28	; 0x800209 <pxCurrentTCB>
    23da:	80 91 a9 01 	lds	r24, 0x01A9	; 0x8001a9 <uxTaskNumber>
    23de:	8f 5f       	subi	r24, 0xFF	; 255
    23e0:	80 93 a9 01 	sts	0x01A9, r24	; 0x8001a9 <uxTaskNumber>
    23e4:	8e 89       	ldd	r24, Y+22	; 0x16
    23e6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <uxTopReadyPriority>
    23ea:	98 17       	cp	r25, r24
    23ec:	10 f4       	brcc	.+4      	; 0x23f2 <xTaskCreate+0x1cc>
    23ee:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <uxTopReadyPriority>
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	9c 01       	movw	r18, r24
    23f6:	22 0f       	add	r18, r18
    23f8:	33 1f       	adc	r19, r19
    23fa:	22 0f       	add	r18, r18
    23fc:	33 1f       	adc	r19, r19
    23fe:	22 0f       	add	r18, r18
    2400:	33 1f       	adc	r19, r19
    2402:	82 0f       	add	r24, r18
    2404:	93 1f       	adc	r25, r19
    2406:	b6 01       	movw	r22, r12
    2408:	8b 51       	subi	r24, 0x1B	; 27
    240a:	9e 4f       	sbci	r25, 0xFE	; 254
    240c:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInsertEnd>
    2410:	0f 90       	pop	r0
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <xSchedulerRunning>
    2418:	88 23       	and	r24, r24
    241a:	61 f0       	breq	.+24     	; 0x2434 <xTaskCreate+0x20e>
    241c:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxCurrentTCB>
    2420:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    2424:	96 89       	ldd	r25, Z+22	; 0x16
    2426:	8e 89       	ldd	r24, Y+22	; 0x16
    2428:	98 17       	cp	r25, r24
    242a:	30 f4       	brcc	.+12     	; 0x2438 <xTaskCreate+0x212>
    242c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	05 c0       	rjmp	.+10     	; 0x243e <xTaskCreate+0x218>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	03 c0       	rjmp	.+6      	; 0x243e <xTaskCreate+0x218>
    2438:	81 e0       	ldi	r24, 0x01	; 1
    243a:	01 c0       	rjmp	.+2      	; 0x243e <xTaskCreate+0x218>
    243c:	8f ef       	ldi	r24, 0xFF	; 255
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	0f 91       	pop	r16
    2444:	ff 90       	pop	r15
    2446:	ef 90       	pop	r14
    2448:	df 90       	pop	r13
    244a:	cf 90       	pop	r12
    244c:	bf 90       	pop	r11
    244e:	af 90       	pop	r10
    2450:	9f 90       	pop	r9
    2452:	8f 90       	pop	r8
    2454:	7f 90       	pop	r7
    2456:	6f 90       	pop	r6
    2458:	5f 90       	pop	r5
    245a:	4f 90       	pop	r4
    245c:	08 95       	ret

0000245e <vTaskStartScheduler>:
    245e:	ef 92       	push	r14
    2460:	ff 92       	push	r15
    2462:	0f 93       	push	r16
    2464:	0f 2e       	mov	r0, r31
    2466:	f5 ea       	ldi	r31, 0xA5	; 165
    2468:	ef 2e       	mov	r14, r31
    246a:	f1 e0       	ldi	r31, 0x01	; 1
    246c:	ff 2e       	mov	r15, r31
    246e:	f0 2d       	mov	r31, r0
    2470:	00 e0       	ldi	r16, 0x00	; 0
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	45 e5       	ldi	r20, 0x55	; 85
    2478:	50 e0       	ldi	r21, 0x00	; 0
    247a:	62 e4       	ldi	r22, 0x42	; 66
    247c:	71 e0       	ldi	r23, 0x01	; 1
    247e:	89 ed       	ldi	r24, 0xD9	; 217
    2480:	90 e1       	ldi	r25, 0x10	; 16
    2482:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
    2486:	81 30       	cpi	r24, 0x01	; 1
    2488:	a1 f4       	brne	.+40     	; 0x24b2 <vTaskStartScheduler+0x54>
    248a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <xTimerCreateTimerTask>
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	81 f4       	brne	.+32     	; 0x24b2 <vTaskStartScheduler+0x54>
    2492:	f8 94       	cli
    2494:	8f ef       	ldi	r24, 0xFF	; 255
    2496:	9f ef       	ldi	r25, 0xFF	; 255
    2498:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <xNextTaskUnblockTime+0x1>
    249c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <xNextTaskUnblockTime>
    24a0:	81 e0       	ldi	r24, 0x01	; 1
    24a2:	80 93 ae 01 	sts	0x01AE, r24	; 0x8001ae <xSchedulerRunning>
    24a6:	10 92 b1 01 	sts	0x01B1, r1	; 0x8001b1 <xTickCount+0x1>
    24aa:	10 92 b0 01 	sts	0x01B0, r1	; 0x8001b0 <xTickCount>
    24ae:	0e 94 a4 0c 	call	0x1948	; 0x1948 <xPortStartScheduler>
    24b2:	0f 91       	pop	r16
    24b4:	ff 90       	pop	r15
    24b6:	ef 90       	pop	r14
    24b8:	08 95       	ret

000024ba <vTaskSuspendAll>:
    24ba:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <uxSchedulerSuspended>
    24be:	8f 5f       	subi	r24, 0xFF	; 255
    24c0:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <uxSchedulerSuspended>
    24c4:	08 95       	ret

000024c6 <xTaskGetTickCount>:
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	0f 92       	push	r0
    24cc:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <xTickCount>
    24d0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <xTickCount+0x1>
    24d4:	0f 90       	pop	r0
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	08 95       	ret

000024da <xTaskIncrementTick>:
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	0f 93       	push	r16
    24e4:	1f 93       	push	r17
    24e6:	cf 93       	push	r28
    24e8:	df 93       	push	r29
    24ea:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <uxSchedulerSuspended>
    24ee:	81 11       	cpse	r24, r1
    24f0:	9f c0       	rjmp	.+318    	; 0x2630 <xTaskIncrementTick+0x156>
    24f2:	e0 90 b0 01 	lds	r14, 0x01B0	; 0x8001b0 <xTickCount>
    24f6:	f0 90 b1 01 	lds	r15, 0x01B1	; 0x8001b1 <xTickCount+0x1>
    24fa:	8f ef       	ldi	r24, 0xFF	; 255
    24fc:	e8 1a       	sub	r14, r24
    24fe:	f8 0a       	sbc	r15, r24
    2500:	f0 92 b1 01 	sts	0x01B1, r15	; 0x8001b1 <xTickCount+0x1>
    2504:	e0 92 b0 01 	sts	0x01B0, r14	; 0x8001b0 <xTickCount>
    2508:	e1 14       	cp	r14, r1
    250a:	f1 04       	cpc	r15, r1
    250c:	b9 f4       	brne	.+46     	; 0x253c <xTaskIncrementTick+0x62>
    250e:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <pxDelayedTaskList>
    2512:	90 91 d2 01 	lds	r25, 0x01D2	; 0x8001d2 <pxDelayedTaskList+0x1>
    2516:	20 91 cf 01 	lds	r18, 0x01CF	; 0x8001cf <pxOverflowDelayedTaskList>
    251a:	30 91 d0 01 	lds	r19, 0x01D0	; 0x8001d0 <pxOverflowDelayedTaskList+0x1>
    251e:	30 93 d2 01 	sts	0x01D2, r19	; 0x8001d2 <pxDelayedTaskList+0x1>
    2522:	20 93 d1 01 	sts	0x01D1, r18	; 0x8001d1 <pxDelayedTaskList>
    2526:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <pxOverflowDelayedTaskList+0x1>
    252a:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <pxOverflowDelayedTaskList>
    252e:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <xNumOfOverflows>
    2532:	8f 5f       	subi	r24, 0xFF	; 255
    2534:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <xNumOfOverflows>
    2538:	0e 94 62 10 	call	0x20c4	; 0x20c4 <prvResetNextTaskUnblockTime>
    253c:	80 91 a7 01 	lds	r24, 0x01A7	; 0x8001a7 <xNextTaskUnblockTime>
    2540:	90 91 a8 01 	lds	r25, 0x01A8	; 0x8001a8 <xNextTaskUnblockTime+0x1>
    2544:	e8 16       	cp	r14, r24
    2546:	f9 06       	cpc	r15, r25
    2548:	10 f4       	brcc	.+4      	; 0x254e <xTaskIncrementTick+0x74>
    254a:	d1 2c       	mov	r13, r1
    254c:	53 c0       	rjmp	.+166    	; 0x25f4 <xTaskIncrementTick+0x11a>
    254e:	d1 2c       	mov	r13, r1
    2550:	cc 24       	eor	r12, r12
    2552:	c3 94       	inc	r12
    2554:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <pxDelayedTaskList>
    2558:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <pxDelayedTaskList+0x1>
    255c:	80 81       	ld	r24, Z
    255e:	81 11       	cpse	r24, r1
    2560:	07 c0       	rjmp	.+14     	; 0x2570 <xTaskIncrementTick+0x96>
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	9f ef       	ldi	r25, 0xFF	; 255
    2566:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <xNextTaskUnblockTime+0x1>
    256a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <xNextTaskUnblockTime>
    256e:	42 c0       	rjmp	.+132    	; 0x25f4 <xTaskIncrementTick+0x11a>
    2570:	e0 91 d1 01 	lds	r30, 0x01D1	; 0x8001d1 <pxDelayedTaskList>
    2574:	f0 91 d2 01 	lds	r31, 0x01D2	; 0x8001d2 <pxDelayedTaskList+0x1>
    2578:	05 80       	ldd	r0, Z+5	; 0x05
    257a:	f6 81       	ldd	r31, Z+6	; 0x06
    257c:	e0 2d       	mov	r30, r0
    257e:	c6 81       	ldd	r28, Z+6	; 0x06
    2580:	d7 81       	ldd	r29, Z+7	; 0x07
    2582:	8a 81       	ldd	r24, Y+2	; 0x02
    2584:	9b 81       	ldd	r25, Y+3	; 0x03
    2586:	e8 16       	cp	r14, r24
    2588:	f9 06       	cpc	r15, r25
    258a:	28 f4       	brcc	.+10     	; 0x2596 <xTaskIncrementTick+0xbc>
    258c:	90 93 a8 01 	sts	0x01A8, r25	; 0x8001a8 <xNextTaskUnblockTime+0x1>
    2590:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <xNextTaskUnblockTime>
    2594:	2f c0       	rjmp	.+94     	; 0x25f4 <xTaskIncrementTick+0x11a>
    2596:	8e 01       	movw	r16, r28
    2598:	0e 5f       	subi	r16, 0xFE	; 254
    259a:	1f 4f       	sbci	r17, 0xFF	; 255
    259c:	c8 01       	movw	r24, r16
    259e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    25a2:	8c 89       	ldd	r24, Y+20	; 0x14
    25a4:	9d 89       	ldd	r25, Y+21	; 0x15
    25a6:	89 2b       	or	r24, r25
    25a8:	21 f0       	breq	.+8      	; 0x25b2 <xTaskIncrementTick+0xd8>
    25aa:	ce 01       	movw	r24, r28
    25ac:	0c 96       	adiw	r24, 0x0c	; 12
    25ae:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    25b2:	8e 89       	ldd	r24, Y+22	; 0x16
    25b4:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <uxTopReadyPriority>
    25b8:	98 17       	cp	r25, r24
    25ba:	10 f4       	brcc	.+4      	; 0x25c0 <xTaskIncrementTick+0xe6>
    25bc:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <uxTopReadyPriority>
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9c 01       	movw	r18, r24
    25c4:	22 0f       	add	r18, r18
    25c6:	33 1f       	adc	r19, r19
    25c8:	22 0f       	add	r18, r18
    25ca:	33 1f       	adc	r19, r19
    25cc:	22 0f       	add	r18, r18
    25ce:	33 1f       	adc	r19, r19
    25d0:	82 0f       	add	r24, r18
    25d2:	93 1f       	adc	r25, r19
    25d4:	b8 01       	movw	r22, r16
    25d6:	8b 51       	subi	r24, 0x1B	; 27
    25d8:	9e 4f       	sbci	r25, 0xFE	; 254
    25da:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInsertEnd>
    25de:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxCurrentTCB>
    25e2:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    25e6:	9e 89       	ldd	r25, Y+22	; 0x16
    25e8:	86 89       	ldd	r24, Z+22	; 0x16
    25ea:	98 17       	cp	r25, r24
    25ec:	08 f4       	brcc	.+2      	; 0x25f0 <xTaskIncrementTick+0x116>
    25ee:	b2 cf       	rjmp	.-156    	; 0x2554 <xTaskIncrementTick+0x7a>
    25f0:	dc 2c       	mov	r13, r12
    25f2:	b0 cf       	rjmp	.-160    	; 0x2554 <xTaskIncrementTick+0x7a>
    25f4:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxCurrentTCB>
    25f8:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    25fc:	86 89       	ldd	r24, Z+22	; 0x16
    25fe:	90 e0       	ldi	r25, 0x00	; 0
    2600:	fc 01       	movw	r30, r24
    2602:	ee 0f       	add	r30, r30
    2604:	ff 1f       	adc	r31, r31
    2606:	ee 0f       	add	r30, r30
    2608:	ff 1f       	adc	r31, r31
    260a:	ee 0f       	add	r30, r30
    260c:	ff 1f       	adc	r31, r31
    260e:	8e 0f       	add	r24, r30
    2610:	9f 1f       	adc	r25, r31
    2612:	fc 01       	movw	r30, r24
    2614:	eb 51       	subi	r30, 0x1B	; 27
    2616:	fe 4f       	sbci	r31, 0xFE	; 254
    2618:	80 81       	ld	r24, Z
    261a:	82 30       	cpi	r24, 0x02	; 2
    261c:	10 f0       	brcs	.+4      	; 0x2622 <xTaskIncrementTick+0x148>
    261e:	dd 24       	eor	r13, r13
    2620:	d3 94       	inc	r13
    2622:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <xYieldPending>
    2626:	88 23       	and	r24, r24
    2628:	69 f0       	breq	.+26     	; 0x2644 <xTaskIncrementTick+0x16a>
    262a:	dd 24       	eor	r13, r13
    262c:	d3 94       	inc	r13
    262e:	0a c0       	rjmp	.+20     	; 0x2644 <xTaskIncrementTick+0x16a>
    2630:	80 91 ac 01 	lds	r24, 0x01AC	; 0x8001ac <xPendedTicks>
    2634:	90 91 ad 01 	lds	r25, 0x01AD	; 0x8001ad <xPendedTicks+0x1>
    2638:	01 96       	adiw	r24, 0x01	; 1
    263a:	90 93 ad 01 	sts	0x01AD, r25	; 0x8001ad <xPendedTicks+0x1>
    263e:	80 93 ac 01 	sts	0x01AC, r24	; 0x8001ac <xPendedTicks>
    2642:	d1 2c       	mov	r13, r1
    2644:	8d 2d       	mov	r24, r13
    2646:	df 91       	pop	r29
    2648:	cf 91       	pop	r28
    264a:	1f 91       	pop	r17
    264c:	0f 91       	pop	r16
    264e:	ff 90       	pop	r15
    2650:	ef 90       	pop	r14
    2652:	df 90       	pop	r13
    2654:	cf 90       	pop	r12
    2656:	08 95       	ret

00002658 <xTaskResumeAll>:
    2658:	df 92       	push	r13
    265a:	ef 92       	push	r14
    265c:	ff 92       	push	r15
    265e:	0f 93       	push	r16
    2660:	1f 93       	push	r17
    2662:	cf 93       	push	r28
    2664:	df 93       	push	r29
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	0f 92       	push	r0
    266c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <uxSchedulerSuspended>
    2670:	81 50       	subi	r24, 0x01	; 1
    2672:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <uxSchedulerSuspended>
    2676:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <uxSchedulerSuspended>
    267a:	81 11       	cpse	r24, r1
    267c:	63 c0       	rjmp	.+198    	; 0x2744 <xTaskResumeAll+0xec>
    267e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <uxCurrentNumberOfTasks>
    2682:	81 11       	cpse	r24, r1
    2684:	33 c0       	rjmp	.+102    	; 0x26ec <xTaskResumeAll+0x94>
    2686:	61 c0       	rjmp	.+194    	; 0x274a <xTaskResumeAll+0xf2>
    2688:	d7 01       	movw	r26, r14
    268a:	15 96       	adiw	r26, 0x05	; 5
    268c:	ed 91       	ld	r30, X+
    268e:	fc 91       	ld	r31, X
    2690:	16 97       	sbiw	r26, 0x06	; 6
    2692:	c6 81       	ldd	r28, Z+6	; 0x06
    2694:	d7 81       	ldd	r29, Z+7	; 0x07
    2696:	ce 01       	movw	r24, r28
    2698:	0c 96       	adiw	r24, 0x0c	; 12
    269a:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    269e:	8e 01       	movw	r16, r28
    26a0:	0e 5f       	subi	r16, 0xFE	; 254
    26a2:	1f 4f       	sbci	r17, 0xFF	; 255
    26a4:	c8 01       	movw	r24, r16
    26a6:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    26aa:	8e 89       	ldd	r24, Y+22	; 0x16
    26ac:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <uxTopReadyPriority>
    26b0:	98 17       	cp	r25, r24
    26b2:	10 f4       	brcc	.+4      	; 0x26b8 <xTaskResumeAll+0x60>
    26b4:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <uxTopReadyPriority>
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	9c 01       	movw	r18, r24
    26bc:	22 0f       	add	r18, r18
    26be:	33 1f       	adc	r19, r19
    26c0:	22 0f       	add	r18, r18
    26c2:	33 1f       	adc	r19, r19
    26c4:	22 0f       	add	r18, r18
    26c6:	33 1f       	adc	r19, r19
    26c8:	82 0f       	add	r24, r18
    26ca:	93 1f       	adc	r25, r19
    26cc:	b8 01       	movw	r22, r16
    26ce:	8b 51       	subi	r24, 0x1B	; 27
    26d0:	9e 4f       	sbci	r25, 0xFE	; 254
    26d2:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInsertEnd>
    26d6:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxCurrentTCB>
    26da:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    26de:	9e 89       	ldd	r25, Y+22	; 0x16
    26e0:	86 89       	ldd	r24, Z+22	; 0x16
    26e2:	98 17       	cp	r25, r24
    26e4:	68 f0       	brcs	.+26     	; 0x2700 <xTaskResumeAll+0xa8>
    26e6:	d0 92 ab 01 	sts	0x01AB, r13	; 0x8001ab <xYieldPending>
    26ea:	0a c0       	rjmp	.+20     	; 0x2700 <xTaskResumeAll+0xa8>
    26ec:	c0 e0       	ldi	r28, 0x00	; 0
    26ee:	d0 e0       	ldi	r29, 0x00	; 0
    26f0:	0f 2e       	mov	r0, r31
    26f2:	f6 ec       	ldi	r31, 0xC6	; 198
    26f4:	ef 2e       	mov	r14, r31
    26f6:	f1 e0       	ldi	r31, 0x01	; 1
    26f8:	ff 2e       	mov	r15, r31
    26fa:	f0 2d       	mov	r31, r0
    26fc:	dd 24       	eor	r13, r13
    26fe:	d3 94       	inc	r13
    2700:	f7 01       	movw	r30, r14
    2702:	80 81       	ld	r24, Z
    2704:	81 11       	cpse	r24, r1
    2706:	c0 cf       	rjmp	.-128    	; 0x2688 <xTaskResumeAll+0x30>
    2708:	cd 2b       	or	r28, r29
    270a:	11 f0       	breq	.+4      	; 0x2710 <xTaskResumeAll+0xb8>
    270c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <prvResetNextTaskUnblockTime>
    2710:	c0 91 ac 01 	lds	r28, 0x01AC	; 0x8001ac <xPendedTicks>
    2714:	d0 91 ad 01 	lds	r29, 0x01AD	; 0x8001ad <xPendedTicks+0x1>
    2718:	20 97       	sbiw	r28, 0x00	; 0
    271a:	61 f0       	breq	.+24     	; 0x2734 <xTaskResumeAll+0xdc>
    271c:	11 e0       	ldi	r17, 0x01	; 1
    271e:	0e 94 6d 12 	call	0x24da	; 0x24da <xTaskIncrementTick>
    2722:	81 11       	cpse	r24, r1
    2724:	10 93 ab 01 	sts	0x01AB, r17	; 0x8001ab <xYieldPending>
    2728:	21 97       	sbiw	r28, 0x01	; 1
    272a:	c9 f7       	brne	.-14     	; 0x271e <xTaskResumeAll+0xc6>
    272c:	10 92 ad 01 	sts	0x01AD, r1	; 0x8001ad <xPendedTicks+0x1>
    2730:	10 92 ac 01 	sts	0x01AC, r1	; 0x8001ac <xPendedTicks>
    2734:	80 91 ab 01 	lds	r24, 0x01AB	; 0x8001ab <xYieldPending>
    2738:	88 23       	and	r24, r24
    273a:	31 f0       	breq	.+12     	; 0x2748 <xTaskResumeAll+0xf0>
    273c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	03 c0       	rjmp	.+6      	; 0x274a <xTaskResumeAll+0xf2>
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	01 c0       	rjmp	.+2      	; 0x274a <xTaskResumeAll+0xf2>
    2748:	80 e0       	ldi	r24, 0x00	; 0
    274a:	0f 90       	pop	r0
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	df 91       	pop	r29
    2750:	cf 91       	pop	r28
    2752:	1f 91       	pop	r17
    2754:	0f 91       	pop	r16
    2756:	ff 90       	pop	r15
    2758:	ef 90       	pop	r14
    275a:	df 90       	pop	r13
    275c:	08 95       	ret

0000275e <vTaskDelayUntil>:
    275e:	0f 93       	push	r16
    2760:	1f 93       	push	r17
    2762:	cf 93       	push	r28
    2764:	df 93       	push	r29
    2766:	8c 01       	movw	r16, r24
    2768:	eb 01       	movw	r28, r22
    276a:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vTaskSuspendAll>
    276e:	40 91 b0 01 	lds	r20, 0x01B0	; 0x8001b0 <xTickCount>
    2772:	50 91 b1 01 	lds	r21, 0x01B1	; 0x8001b1 <xTickCount+0x1>
    2776:	f8 01       	movw	r30, r16
    2778:	20 81       	ld	r18, Z
    277a:	31 81       	ldd	r19, Z+1	; 0x01
    277c:	c9 01       	movw	r24, r18
    277e:	8c 0f       	add	r24, r28
    2780:	9d 1f       	adc	r25, r29
    2782:	42 17       	cp	r20, r18
    2784:	53 07       	cpc	r21, r19
    2786:	48 f4       	brcc	.+18     	; 0x279a <vTaskDelayUntil+0x3c>
    2788:	82 17       	cp	r24, r18
    278a:	93 07       	cpc	r25, r19
    278c:	e8 f4       	brcc	.+58     	; 0x27c8 <vTaskDelayUntil+0x6a>
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
    2792:	48 17       	cp	r20, r24
    2794:	59 07       	cpc	r21, r25
    2796:	68 f4       	brcc	.+26     	; 0x27b2 <vTaskDelayUntil+0x54>
    2798:	07 c0       	rjmp	.+14     	; 0x27a8 <vTaskDelayUntil+0x4a>
    279a:	82 17       	cp	r24, r18
    279c:	93 07       	cpc	r25, r19
    279e:	80 f0       	brcs	.+32     	; 0x27c0 <vTaskDelayUntil+0x62>
    27a0:	48 17       	cp	r20, r24
    27a2:	59 07       	cpc	r21, r25
    27a4:	68 f0       	brcs	.+26     	; 0x27c0 <vTaskDelayUntil+0x62>
    27a6:	10 c0       	rjmp	.+32     	; 0x27c8 <vTaskDelayUntil+0x6a>
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	84 1b       	sub	r24, r20
    27ac:	95 0b       	sbc	r25, r21
    27ae:	0e 94 81 10 	call	0x2102	; 0x2102 <prvAddCurrentTaskToDelayedList>
    27b2:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    27b6:	81 11       	cpse	r24, r1
    27b8:	0b c0       	rjmp	.+22     	; 0x27d0 <vTaskDelayUntil+0x72>
    27ba:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    27be:	08 c0       	rjmp	.+16     	; 0x27d0 <vTaskDelayUntil+0x72>
    27c0:	f8 01       	movw	r30, r16
    27c2:	91 83       	std	Z+1, r25	; 0x01
    27c4:	80 83       	st	Z, r24
    27c6:	f0 cf       	rjmp	.-32     	; 0x27a8 <vTaskDelayUntil+0x4a>
    27c8:	f8 01       	movw	r30, r16
    27ca:	91 83       	std	Z+1, r25	; 0x01
    27cc:	80 83       	st	Z, r24
    27ce:	f1 cf       	rjmp	.-30     	; 0x27b2 <vTaskDelayUntil+0x54>
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <vTaskSwitchContext>:
    27da:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <uxSchedulerSuspended>
    27de:	88 23       	and	r24, r24
    27e0:	21 f0       	breq	.+8      	; 0x27ea <vTaskSwitchContext+0x10>
    27e2:	81 e0       	ldi	r24, 0x01	; 1
    27e4:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <xYieldPending>
    27e8:	08 95       	ret
    27ea:	10 92 ab 01 	sts	0x01AB, r1	; 0x8001ab <xYieldPending>
    27ee:	a0 91 09 02 	lds	r26, 0x0209	; 0x800209 <pxCurrentTCB>
    27f2:	b0 91 0a 02 	lds	r27, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    27f6:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxCurrentTCB>
    27fa:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    27fe:	2d 91       	ld	r18, X+
    2800:	3c 91       	ld	r19, X
    2802:	87 89       	ldd	r24, Z+23	; 0x17
    2804:	90 8d       	ldd	r25, Z+24	; 0x18
    2806:	82 17       	cp	r24, r18
    2808:	93 07       	cpc	r25, r19
    280a:	60 f0       	brcs	.+24     	; 0x2824 <vTaskSwitchContext+0x4a>
    280c:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <pxCurrentTCB>
    2810:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    2814:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <pxCurrentTCB>
    2818:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    281c:	67 5e       	subi	r22, 0xE7	; 231
    281e:	7f 4f       	sbci	r23, 0xFF	; 255
    2820:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vApplicationStackOverflowHook>
    2824:	20 91 af 01 	lds	r18, 0x01AF	; 0x8001af <uxTopReadyPriority>
    2828:	82 2f       	mov	r24, r18
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	fc 01       	movw	r30, r24
    282e:	ee 0f       	add	r30, r30
    2830:	ff 1f       	adc	r31, r31
    2832:	ee 0f       	add	r30, r30
    2834:	ff 1f       	adc	r31, r31
    2836:	ee 0f       	add	r30, r30
    2838:	ff 1f       	adc	r31, r31
    283a:	e8 0f       	add	r30, r24
    283c:	f9 1f       	adc	r31, r25
    283e:	eb 51       	subi	r30, 0x1B	; 27
    2840:	fe 4f       	sbci	r31, 0xFE	; 254
    2842:	30 81       	ld	r19, Z
    2844:	31 11       	cpse	r19, r1
    2846:	11 c0       	rjmp	.+34     	; 0x286a <vTaskSwitchContext+0x90>
    2848:	21 50       	subi	r18, 0x01	; 1
    284a:	82 2f       	mov	r24, r18
    284c:	90 e0       	ldi	r25, 0x00	; 0
    284e:	fc 01       	movw	r30, r24
    2850:	ee 0f       	add	r30, r30
    2852:	ff 1f       	adc	r31, r31
    2854:	ee 0f       	add	r30, r30
    2856:	ff 1f       	adc	r31, r31
    2858:	ee 0f       	add	r30, r30
    285a:	ff 1f       	adc	r31, r31
    285c:	e8 0f       	add	r30, r24
    285e:	f9 1f       	adc	r31, r25
    2860:	eb 51       	subi	r30, 0x1B	; 27
    2862:	fe 4f       	sbci	r31, 0xFE	; 254
    2864:	30 81       	ld	r19, Z
    2866:	33 23       	and	r19, r19
    2868:	79 f3       	breq	.-34     	; 0x2848 <vTaskSwitchContext+0x6e>
    286a:	ac 01       	movw	r20, r24
    286c:	44 0f       	add	r20, r20
    286e:	55 1f       	adc	r21, r21
    2870:	44 0f       	add	r20, r20
    2872:	55 1f       	adc	r21, r21
    2874:	44 0f       	add	r20, r20
    2876:	55 1f       	adc	r21, r21
    2878:	48 0f       	add	r20, r24
    287a:	59 1f       	adc	r21, r25
    287c:	da 01       	movw	r26, r20
    287e:	ab 51       	subi	r26, 0x1B	; 27
    2880:	be 4f       	sbci	r27, 0xFE	; 254
    2882:	11 96       	adiw	r26, 0x01	; 1
    2884:	ed 91       	ld	r30, X+
    2886:	fc 91       	ld	r31, X
    2888:	12 97       	sbiw	r26, 0x02	; 2
    288a:	02 80       	ldd	r0, Z+2	; 0x02
    288c:	f3 81       	ldd	r31, Z+3	; 0x03
    288e:	e0 2d       	mov	r30, r0
    2890:	12 96       	adiw	r26, 0x02	; 2
    2892:	fc 93       	st	X, r31
    2894:	ee 93       	st	-X, r30
    2896:	11 97       	sbiw	r26, 0x01	; 1
    2898:	48 51       	subi	r20, 0x18	; 24
    289a:	5e 4f       	sbci	r21, 0xFE	; 254
    289c:	e4 17       	cp	r30, r20
    289e:	f5 07       	cpc	r31, r21
    28a0:	29 f4       	brne	.+10     	; 0x28ac <vTaskSwitchContext+0xd2>
    28a2:	42 81       	ldd	r20, Z+2	; 0x02
    28a4:	53 81       	ldd	r21, Z+3	; 0x03
    28a6:	fd 01       	movw	r30, r26
    28a8:	52 83       	std	Z+2, r21	; 0x02
    28aa:	41 83       	std	Z+1, r20	; 0x01
    28ac:	fc 01       	movw	r30, r24
    28ae:	ee 0f       	add	r30, r30
    28b0:	ff 1f       	adc	r31, r31
    28b2:	ee 0f       	add	r30, r30
    28b4:	ff 1f       	adc	r31, r31
    28b6:	ee 0f       	add	r30, r30
    28b8:	ff 1f       	adc	r31, r31
    28ba:	8e 0f       	add	r24, r30
    28bc:	9f 1f       	adc	r25, r31
    28be:	fc 01       	movw	r30, r24
    28c0:	eb 51       	subi	r30, 0x1B	; 27
    28c2:	fe 4f       	sbci	r31, 0xFE	; 254
    28c4:	01 80       	ldd	r0, Z+1	; 0x01
    28c6:	f2 81       	ldd	r31, Z+2	; 0x02
    28c8:	e0 2d       	mov	r30, r0
    28ca:	86 81       	ldd	r24, Z+6	; 0x06
    28cc:	97 81       	ldd	r25, Z+7	; 0x07
    28ce:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <pxCurrentTCB+0x1>
    28d2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <pxCurrentTCB>
    28d6:	20 93 af 01 	sts	0x01AF, r18	; 0x8001af <uxTopReadyPriority>
    28da:	08 95       	ret

000028dc <vTaskPlaceOnEventList>:
    28dc:	cf 93       	push	r28
    28de:	df 93       	push	r29
    28e0:	eb 01       	movw	r28, r22
    28e2:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <pxCurrentTCB>
    28e6:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    28ea:	64 5f       	subi	r22, 0xF4	; 244
    28ec:	7f 4f       	sbci	r23, 0xFF	; 255
    28ee:	0e 94 3b 0c 	call	0x1876	; 0x1876 <vListInsert>
    28f2:	61 e0       	ldi	r22, 0x01	; 1
    28f4:	ce 01       	movw	r24, r28
    28f6:	0e 94 81 10 	call	0x2102	; 0x2102 <prvAddCurrentTaskToDelayedList>
    28fa:	df 91       	pop	r29
    28fc:	cf 91       	pop	r28
    28fe:	08 95       	ret

00002900 <vTaskPlaceOnEventListRestricted>:
    2900:	0f 93       	push	r16
    2902:	1f 93       	push	r17
    2904:	cf 93       	push	r28
    2906:	8b 01       	movw	r16, r22
    2908:	c4 2f       	mov	r28, r20
    290a:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <pxCurrentTCB>
    290e:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    2912:	64 5f       	subi	r22, 0xF4	; 244
    2914:	7f 4f       	sbci	r23, 0xFF	; 255
    2916:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInsertEnd>
    291a:	cc 23       	and	r28, r28
    291c:	11 f0       	breq	.+4      	; 0x2922 <vTaskPlaceOnEventListRestricted+0x22>
    291e:	0f ef       	ldi	r16, 0xFF	; 255
    2920:	1f ef       	ldi	r17, 0xFF	; 255
    2922:	6c 2f       	mov	r22, r28
    2924:	c8 01       	movw	r24, r16
    2926:	0e 94 81 10 	call	0x2102	; 0x2102 <prvAddCurrentTaskToDelayedList>
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	08 95       	ret

00002932 <xTaskRemoveFromEventList>:
    2932:	0f 93       	push	r16
    2934:	1f 93       	push	r17
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	dc 01       	movw	r26, r24
    293c:	15 96       	adiw	r26, 0x05	; 5
    293e:	ed 91       	ld	r30, X+
    2940:	fc 91       	ld	r31, X
    2942:	16 97       	sbiw	r26, 0x06	; 6
    2944:	c6 81       	ldd	r28, Z+6	; 0x06
    2946:	d7 81       	ldd	r29, Z+7	; 0x07
    2948:	8e 01       	movw	r16, r28
    294a:	04 5f       	subi	r16, 0xF4	; 244
    294c:	1f 4f       	sbci	r17, 0xFF	; 255
    294e:	c8 01       	movw	r24, r16
    2950:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    2954:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <uxSchedulerSuspended>
    2958:	81 11       	cpse	r24, r1
    295a:	1c c0       	rjmp	.+56     	; 0x2994 <xTaskRemoveFromEventList+0x62>
    295c:	0a 50       	subi	r16, 0x0A	; 10
    295e:	11 09       	sbc	r17, r1
    2960:	c8 01       	movw	r24, r16
    2962:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    2966:	8e 89       	ldd	r24, Y+22	; 0x16
    2968:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <uxTopReadyPriority>
    296c:	98 17       	cp	r25, r24
    296e:	10 f4       	brcc	.+4      	; 0x2974 <xTaskRemoveFromEventList+0x42>
    2970:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <uxTopReadyPriority>
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9c 01       	movw	r18, r24
    2978:	22 0f       	add	r18, r18
    297a:	33 1f       	adc	r19, r19
    297c:	22 0f       	add	r18, r18
    297e:	33 1f       	adc	r19, r19
    2980:	22 0f       	add	r18, r18
    2982:	33 1f       	adc	r19, r19
    2984:	82 0f       	add	r24, r18
    2986:	93 1f       	adc	r25, r19
    2988:	b8 01       	movw	r22, r16
    298a:	8b 51       	subi	r24, 0x1B	; 27
    298c:	9e 4f       	sbci	r25, 0xFE	; 254
    298e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInsertEnd>
    2992:	05 c0       	rjmp	.+10     	; 0x299e <xTaskRemoveFromEventList+0x6c>
    2994:	b8 01       	movw	r22, r16
    2996:	86 ec       	ldi	r24, 0xC6	; 198
    2998:	91 e0       	ldi	r25, 0x01	; 1
    299a:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInsertEnd>
    299e:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxCurrentTCB>
    29a2:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxCurrentTCB+0x1>
    29a6:	9e 89       	ldd	r25, Y+22	; 0x16
    29a8:	86 89       	ldd	r24, Z+22	; 0x16
    29aa:	89 17       	cp	r24, r25
    29ac:	20 f4       	brcc	.+8      	; 0x29b6 <xTaskRemoveFromEventList+0x84>
    29ae:	81 e0       	ldi	r24, 0x01	; 1
    29b0:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <xYieldPending>
    29b4:	01 c0       	rjmp	.+2      	; 0x29b8 <xTaskRemoveFromEventList+0x86>
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	df 91       	pop	r29
    29ba:	cf 91       	pop	r28
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	08 95       	ret

000029c2 <vTaskInternalSetTimeOutState>:
    29c2:	20 91 aa 01 	lds	r18, 0x01AA	; 0x8001aa <xNumOfOverflows>
    29c6:	fc 01       	movw	r30, r24
    29c8:	20 83       	st	Z, r18
    29ca:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <xTickCount>
    29ce:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <xTickCount+0x1>
    29d2:	32 83       	std	Z+2, r19	; 0x02
    29d4:	21 83       	std	Z+1, r18	; 0x01
    29d6:	08 95       	ret

000029d8 <xTaskCheckForTimeOut>:
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	0f 92       	push	r0
    29e2:	20 91 b0 01 	lds	r18, 0x01B0	; 0x8001b0 <xTickCount>
    29e6:	30 91 b1 01 	lds	r19, 0x01B1	; 0x8001b1 <xTickCount+0x1>
    29ea:	db 01       	movw	r26, r22
    29ec:	4d 91       	ld	r20, X+
    29ee:	5c 91       	ld	r21, X
    29f0:	4f 3f       	cpi	r20, 0xFF	; 255
    29f2:	bf ef       	ldi	r27, 0xFF	; 255
    29f4:	5b 07       	cpc	r21, r27
    29f6:	f1 f0       	breq	.+60     	; 0x2a34 <xTaskCheckForTimeOut+0x5c>
    29f8:	ec 01       	movw	r28, r24
    29fa:	e9 81       	ldd	r30, Y+1	; 0x01
    29fc:	fa 81       	ldd	r31, Y+2	; 0x02
    29fe:	a0 91 aa 01 	lds	r26, 0x01AA	; 0x8001aa <xNumOfOverflows>
    2a02:	b8 81       	ld	r27, Y
    2a04:	ba 17       	cp	r27, r26
    2a06:	19 f0       	breq	.+6      	; 0x2a0e <xTaskCheckForTimeOut+0x36>
    2a08:	2e 17       	cp	r18, r30
    2a0a:	3f 07       	cpc	r19, r31
    2a0c:	a8 f4       	brcc	.+42     	; 0x2a38 <xTaskCheckForTimeOut+0x60>
    2a0e:	2e 1b       	sub	r18, r30
    2a10:	3f 0b       	sbc	r19, r31
    2a12:	24 17       	cp	r18, r20
    2a14:	35 07       	cpc	r19, r21
    2a16:	48 f4       	brcc	.+18     	; 0x2a2a <xTaskCheckForTimeOut+0x52>
    2a18:	fb 01       	movw	r30, r22
    2a1a:	42 1b       	sub	r20, r18
    2a1c:	53 0b       	sbc	r21, r19
    2a1e:	51 83       	std	Z+1, r21	; 0x01
    2a20:	40 83       	st	Z, r20
    2a22:	0e 94 e1 14 	call	0x29c2	; 0x29c2 <vTaskInternalSetTimeOutState>
    2a26:	80 e0       	ldi	r24, 0x00	; 0
    2a28:	08 c0       	rjmp	.+16     	; 0x2a3a <xTaskCheckForTimeOut+0x62>
    2a2a:	fb 01       	movw	r30, r22
    2a2c:	11 82       	std	Z+1, r1	; 0x01
    2a2e:	10 82       	st	Z, r1
    2a30:	81 e0       	ldi	r24, 0x01	; 1
    2a32:	03 c0       	rjmp	.+6      	; 0x2a3a <xTaskCheckForTimeOut+0x62>
    2a34:	80 e0       	ldi	r24, 0x00	; 0
    2a36:	01 c0       	rjmp	.+2      	; 0x2a3a <xTaskCheckForTimeOut+0x62>
    2a38:	81 e0       	ldi	r24, 0x01	; 1
    2a3a:	0f 90       	pop	r0
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	df 91       	pop	r29
    2a40:	cf 91       	pop	r28
    2a42:	08 95       	ret

00002a44 <vTaskMissedYield>:
    2a44:	81 e0       	ldi	r24, 0x01	; 1
    2a46:	80 93 ab 01 	sts	0x01AB, r24	; 0x8001ab <xYieldPending>
    2a4a:	08 95       	ret

00002a4c <xTaskGetSchedulerState>:
    2a4c:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <xSchedulerRunning>
    2a50:	88 23       	and	r24, r24
    2a52:	31 f0       	breq	.+12     	; 0x2a60 <xTaskGetSchedulerState+0x14>
    2a54:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <uxSchedulerSuspended>
    2a58:	88 23       	and	r24, r24
    2a5a:	21 f0       	breq	.+8      	; 0x2a64 <xTaskGetSchedulerState+0x18>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
    2a5e:	08 95       	ret
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	08 95       	ret
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	08 95       	ret

00002a68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2a68:	0f 93       	push	r16
    2a6a:	1f 93       	push	r17
    2a6c:	cf 93       	push	r28
    2a6e:	df 93       	push	r29
    2a70:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2a72:	89 2b       	or	r24, r25
    2a74:	79 f1       	breq	.+94     	; 0x2ad4 <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2a76:	82 a1       	ldd	r24, Z+34	; 0x22
    2a78:	81 50       	subi	r24, 0x01	; 1
    2a7a:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2a7c:	26 89       	ldd	r18, Z+22	; 0x16
    2a7e:	91 a1       	ldd	r25, Z+33	; 0x21
    2a80:	29 17       	cp	r18, r25
    2a82:	51 f1       	breq	.+84     	; 0x2ad8 <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2a84:	81 11       	cpse	r24, r1
    2a86:	2a c0       	rjmp	.+84     	; 0x2adc <xTaskPriorityDisinherit+0x74>
    2a88:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready/delayed list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2a8a:	8f 01       	movw	r16, r30
    2a8c:	0e 5f       	subi	r16, 0xFE	; 254
    2a8e:	1f 4f       	sbci	r17, 0xFF	; 255
    2a90:	c8 01       	movw	r24, r16
    2a92:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2a96:	89 a1       	ldd	r24, Y+33	; 0x21
    2a98:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only Yellowundant for some ports. */
    2a9a:	24 e0       	ldi	r18, 0x04	; 4
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	28 1b       	sub	r18, r24
    2aa0:	31 09       	sbc	r19, r1
    2aa2:	3d 87       	std	Y+13, r19	; 0x0d
    2aa4:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2aa6:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <uxTopReadyPriority>
    2aaa:	98 17       	cp	r25, r24
    2aac:	10 f4       	brcc	.+4      	; 0x2ab2 <xTaskPriorityDisinherit+0x4a>
    2aae:	80 93 af 01 	sts	0x01AF, r24	; 0x8001af <uxTopReadyPriority>
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	9c 01       	movw	r18, r24
    2ab6:	22 0f       	add	r18, r18
    2ab8:	33 1f       	adc	r19, r19
    2aba:	22 0f       	add	r18, r18
    2abc:	33 1f       	adc	r19, r19
    2abe:	22 0f       	add	r18, r18
    2ac0:	33 1f       	adc	r19, r19
    2ac2:	82 0f       	add	r24, r18
    2ac4:	93 1f       	adc	r25, r19
    2ac6:	b8 01       	movw	r22, r16
    2ac8:	8b 51       	subi	r24, 0x1B	; 27
    2aca:	9e 4f       	sbci	r25, 0xFE	; 254
    2acc:	0e 94 1a 0c 	call	0x1834	; 0x1834 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	05 c0       	rjmp	.+10     	; 0x2ade <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <xTaskPriorityDisinherit+0x76>
    2ad8:	80 e0       	ldi	r24, 0x00	; 0
    2ada:	01 c0       	rjmp	.+2      	; 0x2ade <xTaskPriorityDisinherit+0x76>
    2adc:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2ade:	df 91       	pop	r29
    2ae0:	cf 91       	pop	r28
    2ae2:	1f 91       	pop	r17
    2ae4:	0f 91       	pop	r16
    2ae6:	08 95       	ret

00002ae8 <prvInsertTimerInActiveList>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    2ae8:	fc 01       	movw	r30, r24
    2aea:	73 83       	std	Z+3, r23	; 0x03
    2aec:	62 83       	std	Z+2, r22	; 0x02
    2aee:	91 87       	std	Z+9, r25	; 0x09
    2af0:	80 87       	std	Z+8, r24	; 0x08
    2af2:	46 17       	cp	r20, r22
    2af4:	57 07       	cpc	r21, r23
    2af6:	90 f0       	brcs	.+36     	; 0x2b1c <prvInsertTimerInActiveList+0x34>
    2af8:	42 1b       	sub	r20, r18
    2afa:	53 0b       	sbc	r21, r19
    2afc:	84 85       	ldd	r24, Z+12	; 0x0c
    2afe:	95 85       	ldd	r25, Z+13	; 0x0d
    2b00:	48 17       	cp	r20, r24
    2b02:	59 07       	cpc	r21, r25
    2b04:	e0 f4       	brcc	.+56     	; 0x2b3e <prvInsertTimerInActiveList+0x56>
    2b06:	bf 01       	movw	r22, r30
    2b08:	6e 5f       	subi	r22, 0xFE	; 254
    2b0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0c:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <pxOverflowTimerList>
    2b10:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <pxOverflowTimerList+0x1>
    2b14:	0e 94 3b 0c 	call	0x1876	; 0x1876 <vListInsert>
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    2b1a:	08 95       	ret
    2b1c:	42 17       	cp	r20, r18
    2b1e:	53 07       	cpc	r21, r19
    2b20:	18 f4       	brcc	.+6      	; 0x2b28 <prvInsertTimerInActiveList+0x40>
    2b22:	62 17       	cp	r22, r18
    2b24:	73 07       	cpc	r23, r19
    2b26:	68 f4       	brcc	.+26     	; 0x2b42 <prvInsertTimerInActiveList+0x5a>
    2b28:	bf 01       	movw	r22, r30
    2b2a:	6e 5f       	subi	r22, 0xFE	; 254
    2b2c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2e:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <pxCurrentTimerList>
    2b32:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <pxCurrentTimerList+0x1>
    2b36:	0e 94 3b 0c 	call	0x1876	; 0x1876 <vListInsert>
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	08 95       	ret
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	08 95       	ret
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	08 95       	ret

00002b46 <prvCheckForValidListAndQueue>:
    2b46:	0f b6       	in	r0, 0x3f	; 63
    2b48:	f8 94       	cli
    2b4a:	0f 92       	push	r0
    2b4c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <xTimerQueue>
    2b50:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <xTimerQueue+0x1>
    2b54:	89 2b       	or	r24, r25
    2b56:	e9 f4       	brne	.+58     	; 0x2b92 <prvCheckForValidListAndQueue+0x4c>
    2b58:	8e e1       	ldi	r24, 0x1E	; 30
    2b5a:	92 e0       	ldi	r25, 0x02	; 2
    2b5c:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2b60:	85 e1       	ldi	r24, 0x15	; 21
    2b62:	92 e0       	ldi	r25, 0x02	; 2
    2b64:	0e 94 08 0c 	call	0x1810	; 0x1810 <vListInitialise>
    2b68:	8e e1       	ldi	r24, 0x1E	; 30
    2b6a:	92 e0       	ldi	r25, 0x02	; 2
    2b6c:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <pxCurrentTimerList+0x1>
    2b70:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <pxCurrentTimerList>
    2b74:	85 e1       	ldi	r24, 0x15	; 21
    2b76:	92 e0       	ldi	r25, 0x02	; 2
    2b78:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <pxOverflowTimerList+0x1>
    2b7c:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <pxOverflowTimerList>
    2b80:	40 e0       	ldi	r20, 0x00	; 0
    2b82:	65 e0       	ldi	r22, 0x05	; 5
    2b84:	8a e0       	ldi	r24, 0x0A	; 10
    2b86:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <xQueueGenericCreate>
    2b8a:	90 93 10 02 	sts	0x0210, r25	; 0x800210 <xTimerQueue+0x1>
    2b8e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <xTimerQueue>
    2b92:	0f 90       	pop	r0
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	08 95       	ret

00002b98 <xTimerCreateTimerTask>:
    2b98:	ef 92       	push	r14
    2b9a:	ff 92       	push	r15
    2b9c:	0f 93       	push	r16
    2b9e:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <prvCheckForValidListAndQueue>
    2ba2:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <xTimerQueue>
    2ba6:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <xTimerQueue+0x1>
    2baa:	89 2b       	or	r24, r25
    2bac:	91 f0       	breq	.+36     	; 0x2bd2 <xTimerCreateTimerTask+0x3a>
    2bae:	0f 2e       	mov	r0, r31
    2bb0:	fd e0       	ldi	r31, 0x0D	; 13
    2bb2:	ef 2e       	mov	r14, r31
    2bb4:	f2 e0       	ldi	r31, 0x02	; 2
    2bb6:	ff 2e       	mov	r15, r31
    2bb8:	f0 2d       	mov	r31, r0
    2bba:	03 e0       	ldi	r16, 0x03	; 3
    2bbc:	20 e0       	ldi	r18, 0x00	; 0
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	45 e5       	ldi	r20, 0x55	; 85
    2bc2:	50 e0       	ldi	r21, 0x00	; 0
    2bc4:	67 e4       	ldi	r22, 0x47	; 71
    2bc6:	71 e0       	ldi	r23, 0x01	; 1
    2bc8:	86 ea       	ldi	r24, 0xA6	; 166
    2bca:	96 e1       	ldi	r25, 0x16	; 22
    2bcc:	0e 94 13 11 	call	0x2226	; 0x2226 <xTaskCreate>
    2bd0:	01 c0       	rjmp	.+2      	; 0x2bd4 <xTimerCreateTimerTask+0x3c>
    2bd2:	80 e0       	ldi	r24, 0x00	; 0
    2bd4:	0f 91       	pop	r16
    2bd6:	ff 90       	pop	r15
    2bd8:	ef 90       	pop	r14
    2bda:	08 95       	ret

00002bdc <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	00 d0       	rcall	.+0      	; 0x2be6 <xTimerGenericCommand+0xa>
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <xTimerGenericCommand+0xc>
    2be8:	1f 92       	push	r1
    2bea:	cd b7       	in	r28, 0x3d	; 61
    2bec:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2bee:	e0 91 0f 02 	lds	r30, 0x020F	; 0x80020f <xTimerQueue>
    2bf2:	f0 91 10 02 	lds	r31, 0x0210	; 0x800210 <xTimerQueue+0x1>
    2bf6:	30 97       	sbiw	r30, 0x00	; 0
    2bf8:	71 f1       	breq	.+92     	; 0x2c56 <xTimerGenericCommand+0x7a>
    2bfa:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2bfc:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2bfe:	5b 83       	std	Y+3, r21	; 0x03
    2c00:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2c02:	9d 83       	std	Y+5, r25	; 0x05
    2c04:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2c06:	66 30       	cpi	r22, 0x06	; 6
    2c08:	ec f4       	brge	.+58     	; 0x2c44 <xTimerGenericCommand+0x68>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2c0a:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <xTaskGetSchedulerState>
    2c0e:	82 30       	cpi	r24, 0x02	; 2
    2c10:	61 f4       	brne	.+24     	; 0x2c2a <xTimerGenericCommand+0x4e>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2c12:	20 e0       	ldi	r18, 0x00	; 0
    2c14:	a8 01       	movw	r20, r16
    2c16:	be 01       	movw	r22, r28
    2c18:	6f 5f       	subi	r22, 0xFF	; 255
    2c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c1c:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <xTimerQueue>
    2c20:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <xTimerQueue+0x1>
    2c24:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xQueueGenericSend>
    2c28:	17 c0       	rjmp	.+46     	; 0x2c58 <xTimerGenericCommand+0x7c>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2c2a:	20 e0       	ldi	r18, 0x00	; 0
    2c2c:	40 e0       	ldi	r20, 0x00	; 0
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	be 01       	movw	r22, r28
    2c32:	6f 5f       	subi	r22, 0xFF	; 255
    2c34:	7f 4f       	sbci	r23, 0xFF	; 255
    2c36:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <xTimerQueue>
    2c3a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <xTimerQueue+0x1>
    2c3e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <xQueueGenericSend>
    2c42:	0a c0       	rjmp	.+20     	; 0x2c58 <xTimerGenericCommand+0x7c>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	ad 01       	movw	r20, r26
    2c48:	be 01       	movw	r22, r28
    2c4a:	6f 5f       	subi	r22, 0xFF	; 255
    2c4c:	7f 4f       	sbci	r23, 0xFF	; 255
    2c4e:	cf 01       	movw	r24, r30
    2c50:	0e 94 70 0f 	call	0x1ee0	; 0x1ee0 <xQueueGenericSendFromISR>
    2c54:	01 c0       	rjmp	.+2      	; 0x2c58 <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2c56:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2c58:	0f 90       	pop	r0
    2c5a:	0f 90       	pop	r0
    2c5c:	0f 90       	pop	r0
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	df 91       	pop	r29
    2c64:	cf 91       	pop	r28
    2c66:	1f 91       	pop	r17
    2c68:	0f 91       	pop	r16
    2c6a:	08 95       	ret

00002c6c <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2c6c:	af 92       	push	r10
    2c6e:	bf 92       	push	r11
    2c70:	cf 92       	push	r12
    2c72:	df 92       	push	r13
    2c74:	ef 92       	push	r14
    2c76:	ff 92       	push	r15
    2c78:	0f 93       	push	r16
    2c7a:	1f 93       	push	r17
    2c7c:	cf 93       	push	r28
    2c7e:	df 93       	push	r29
    2c80:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2c82:	0e 94 63 12 	call	0x24c6	; 0x24c6 <xTaskGetTickCount>
    2c86:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2c88:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <xLastTime.2416>
    2c8c:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <xLastTime.2416+0x1>
    2c90:	e8 16       	cp	r14, r24
    2c92:	f9 06       	cpc	r15, r25
    2c94:	08 f0       	brcs	.+2      	; 0x2c98 <prvSampleTimeNow+0x2c>
    2c96:	48 c0       	rjmp	.+144    	; 0x2d28 <prvSampleTimeNow+0xbc>
    2c98:	30 c0       	rjmp	.+96     	; 0x2cfa <prvSampleTimeNow+0x8e>
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c9a:	05 80       	ldd	r0, Z+5	; 0x05
    2c9c:	f6 81       	ldd	r31, Z+6	; 0x06
    2c9e:	e0 2d       	mov	r30, r0
    2ca0:	a0 80       	ld	r10, Z
    2ca2:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2ca4:	c6 81       	ldd	r28, Z+6	; 0x06
    2ca6:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ca8:	8e 01       	movw	r16, r28
    2caa:	0e 5f       	subi	r16, 0xFE	; 254
    2cac:	1f 4f       	sbci	r17, 0xFF	; 255
    2cae:	c8 01       	movw	r24, r16
    2cb0:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
        traceTIMER_EXPIYellow( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cb4:	e8 89       	ldd	r30, Y+16	; 0x10
    2cb6:	f9 89       	ldd	r31, Y+17	; 0x11
    2cb8:	ce 01       	movw	r24, r28
    2cba:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2cbc:	8a 89       	ldd	r24, Y+18	; 0x12
    2cbe:	82 ff       	sbrs	r24, 2
    2cc0:	1c c0       	rjmp	.+56     	; 0x2cfa <prvSampleTimeNow+0x8e>
            the timer going into the same timer list then it has already expiYellow
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2cc2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cc4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cc6:	8a 0d       	add	r24, r10
    2cc8:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2cca:	a8 16       	cp	r10, r24
    2ccc:	b9 06       	cpc	r11, r25
    2cce:	60 f4       	brcc	.+24     	; 0x2ce8 <prvSampleTimeNow+0x7c>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2cd0:	9b 83       	std	Y+3, r25	; 0x03
    2cd2:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2cd4:	d9 87       	std	Y+9, r29	; 0x09
    2cd6:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2cd8:	b8 01       	movw	r22, r16
    2cda:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <pxCurrentTimerList>
    2cde:	90 91 14 02 	lds	r25, 0x0214	; 0x800214 <pxCurrentTimerList+0x1>
    2ce2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <vListInsert>
    2ce6:	09 c0       	rjmp	.+18     	; 0x2cfa <prvSampleTimeNow+0x8e>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ce8:	00 e0       	ldi	r16, 0x00	; 0
    2cea:	10 e0       	ldi	r17, 0x00	; 0
    2cec:	20 e0       	ldi	r18, 0x00	; 0
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	a5 01       	movw	r20, r10
    2cf2:	60 e0       	ldi	r22, 0x00	; 0
    2cf4:	ce 01       	movw	r24, r28
    2cf6:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2cfa:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTimerList>
    2cfe:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTimerList+0x1>
    2d02:	80 81       	ld	r24, Z
    2d04:	81 11       	cpse	r24, r1
    2d06:	c9 cf       	rjmp	.-110    	; 0x2c9a <prvSampleTimeNow+0x2e>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2d08:	80 91 11 02 	lds	r24, 0x0211	; 0x800211 <pxOverflowTimerList>
    2d0c:	90 91 12 02 	lds	r25, 0x0212	; 0x800212 <pxOverflowTimerList+0x1>
    2d10:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <pxCurrentTimerList+0x1>
    2d14:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2d18:	f0 93 12 02 	sts	0x0212, r31	; 0x800212 <pxOverflowTimerList+0x1>
    2d1c:	e0 93 11 02 	sts	0x0211, r30	; 0x800211 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	f6 01       	movw	r30, r12
    2d24:	80 83       	st	Z, r24
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <prvSampleTimeNow+0xc0>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2d28:	f6 01       	movw	r30, r12
    2d2a:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2d2c:	f0 92 0c 02 	sts	0x020C, r15	; 0x80020c <xLastTime.2416+0x1>
    2d30:	e0 92 0b 02 	sts	0x020B, r14	; 0x80020b <xLastTime.2416>

    return xTimeNow;
}
    2d34:	c7 01       	movw	r24, r14
    2d36:	df 91       	pop	r29
    2d38:	cf 91       	pop	r28
    2d3a:	1f 91       	pop	r17
    2d3c:	0f 91       	pop	r16
    2d3e:	ff 90       	pop	r15
    2d40:	ef 90       	pop	r14
    2d42:	df 90       	pop	r13
    2d44:	cf 90       	pop	r12
    2d46:	bf 90       	pop	r11
    2d48:	af 90       	pop	r10
    2d4a:	08 95       	ret

00002d4c <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    2d4c:	cf 93       	push	r28
    2d4e:	df 93       	push	r29
    2d50:	00 d0       	rcall	.+0      	; 0x2d52 <prvTimerTask+0x6>
    2d52:	00 d0       	rcall	.+0      	; 0x2d54 <prvTimerTask+0x8>
    2d54:	00 d0       	rcall	.+0      	; 0x2d56 <prvTimerTask+0xa>
    2d56:	cd b7       	in	r28, 0x3d	; 61
    2d58:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	01 96       	adiw	r24, 0x01	; 1
    2d5e:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d60:	44 24       	eor	r4, r4
    2d62:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2d64:	e1 2c       	mov	r14, r1
    2d66:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2d68:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2d6a:	c8 2e       	mov	r12, r24
    2d6c:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2d6e:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTimerList>
    2d72:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTimerList+0x1>
    2d76:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    2d78:	88 23       	and	r24, r24
    2d7a:	09 f4       	brne	.+2      	; 0x2d7e <prvTimerTask+0x32>
    2d7c:	dc c0       	rjmp	.+440    	; 0x2f36 <prvTimerTask+0x1ea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2d7e:	05 80       	ldd	r0, Z+5	; 0x05
    2d80:	f6 81       	ldd	r31, Z+6	; 0x06
    2d82:	e0 2d       	mov	r30, r0
    2d84:	a0 80       	ld	r10, Z
    2d86:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2d88:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d8c:	c4 01       	movw	r24, r8
    2d8e:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <prvSampleTimeNow>
    2d92:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	81 11       	cpse	r24, r1
    2d98:	4b c0       	rjmp	.+150    	; 0x2e30 <prvTimerTask+0xe4>
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2d9a:	0a 15       	cp	r16, r10
    2d9c:	1b 05       	cpc	r17, r11
    2d9e:	b8 f1       	brcs	.+110    	; 0x2e0e <prvTimerTask+0xc2>
            {
                ( void ) xTaskResumeAll();
    2da0:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiYellowTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2da4:	e0 91 13 02 	lds	r30, 0x0213	; 0x800213 <pxCurrentTimerList>
    2da8:	f0 91 14 02 	lds	r31, 0x0214	; 0x800214 <pxCurrentTimerList+0x1>
    2dac:	05 80       	ldd	r0, Z+5	; 0x05
    2dae:	f6 81       	ldd	r31, Z+6	; 0x06
    2db0:	e0 2d       	mov	r30, r0
    2db2:	66 80       	ldd	r6, Z+6	; 0x06
    2db4:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2db6:	c3 01       	movw	r24, r6
    2db8:	02 96       	adiw	r24, 0x02	; 2
    2dba:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
    traceTIMER_EXPIYellow( pxTimer );

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2dbe:	d3 01       	movw	r26, r6
    2dc0:	52 96       	adiw	r26, 0x12	; 18
    2dc2:	8c 91       	ld	r24, X
    2dc4:	52 97       	sbiw	r26, 0x12	; 18
    2dc6:	82 ff       	sbrs	r24, 2
    2dc8:	17 c0       	rjmp	.+46     	; 0x2df8 <prvTimerTask+0xac>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2dca:	1c 96       	adiw	r26, 0x0c	; 12
    2dcc:	6d 91       	ld	r22, X+
    2dce:	7c 91       	ld	r23, X
    2dd0:	1d 97       	sbiw	r26, 0x0d	; 13
    2dd2:	6a 0d       	add	r22, r10
    2dd4:	7b 1d       	adc	r23, r11
    2dd6:	95 01       	movw	r18, r10
    2dd8:	a8 01       	movw	r20, r16
    2dda:	c3 01       	movw	r24, r6
    2ddc:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <prvInsertTimerInActiveList>
    2de0:	88 23       	and	r24, r24
    2de2:	69 f0       	breq	.+26     	; 0x2dfe <prvTimerTask+0xb2>
        {
            /* The timer expiYellow before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2de4:	0e 2d       	mov	r16, r14
    2de6:	1f 2d       	mov	r17, r15
    2de8:	2e 2d       	mov	r18, r14
    2dea:	3f 2d       	mov	r19, r15
    2dec:	a5 01       	movw	r20, r10
    2dee:	65 2d       	mov	r22, r5
    2df0:	c3 01       	movw	r24, r6
    2df2:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <xTimerGenericCommand>
    2df6:	03 c0       	rjmp	.+6      	; 0x2dfe <prvTimerTask+0xb2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2df8:	8e 7f       	andi	r24, 0xFE	; 254
    2dfa:	f3 01       	movw	r30, r6
    2dfc:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2dfe:	d3 01       	movw	r26, r6
    2e00:	50 96       	adiw	r26, 0x10	; 16
    2e02:	ed 91       	ld	r30, X+
    2e04:	fc 91       	ld	r31, X
    2e06:	51 97       	sbiw	r26, 0x11	; 17
    2e08:	c3 01       	movw	r24, r6
    2e0a:	09 95       	icall
    2e0c:	87 c0       	rjmp	.+270    	; 0x2f1c <prvTimerTask+0x1d0>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2e0e:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2e10:	b5 01       	movw	r22, r10
    2e12:	60 1b       	sub	r22, r16
    2e14:	71 0b       	sbc	r23, r17
    2e16:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <xTimerQueue>
    2e1a:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <xTimerQueue+0x1>
    2e1e:	0e 94 45 10 	call	0x208a	; 0x208a <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    2e22:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    2e26:	81 11       	cpse	r24, r1
    2e28:	79 c0       	rjmp	.+242    	; 0x2f1c <prvTimerTask+0x1d0>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2e2a:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <vPortYield>
    2e2e:	76 c0       	rjmp	.+236    	; 0x2f1c <prvTimerTask+0x1d0>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2e30:	0e 94 2c 13 	call	0x2658	; 0x2658 <xTaskResumeAll>
    2e34:	73 c0       	rjmp	.+230    	; 0x2f1c <prvTimerTask+0x1d0>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	88 23       	and	r24, r24
    2e3a:	0c f4       	brge	.+2      	; 0x2e3e <prvTimerTask+0xf2>
    2e3c:	6f c0       	rjmp	.+222    	; 0x2f1c <prvTimerTask+0x1d0>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2e3e:	ac 80       	ldd	r10, Y+4	; 0x04
    2e40:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only Yellowundant when NULL is passed into the macro. */
    2e42:	f5 01       	movw	r30, r10
    2e44:	82 85       	ldd	r24, Z+10	; 0x0a
    2e46:	93 85       	ldd	r25, Z+11	; 0x0b
    2e48:	89 2b       	or	r24, r25
    2e4a:	21 f0       	breq	.+8      	; 0x2e54 <prvTimerTask+0x108>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2e4c:	c5 01       	movw	r24, r10
    2e4e:	02 96       	adiw	r24, 0x02	; 2
    2e50:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e54:	ce 01       	movw	r24, r28
    2e56:	06 96       	adiw	r24, 0x06	; 6
    2e58:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <prvSampleTimeNow>

            switch( xMessage.xMessageID )
    2e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5e:	0e 2e       	mov	r0, r30
    2e60:	00 0c       	add	r0, r0
    2e62:	ff 0b       	sbc	r31, r31
    2e64:	ea 30       	cpi	r30, 0x0A	; 10
    2e66:	f1 05       	cpc	r31, r1
    2e68:	08 f0       	brcs	.+2      	; 0x2e6c <prvTimerTask+0x120>
    2e6a:	58 c0       	rjmp	.+176    	; 0x2f1c <prvTimerTask+0x1d0>
    2e6c:	ec 5c       	subi	r30, 0xCC	; 204
    2e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e70:	0c 94 7d 1f 	jmp	0x3efa	; 0x3efa <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2e74:	d5 01       	movw	r26, r10
    2e76:	52 96       	adiw	r26, 0x12	; 18
    2e78:	2c 91       	ld	r18, X
    2e7a:	52 97       	sbiw	r26, 0x12	; 18
    2e7c:	21 60       	ori	r18, 0x01	; 1
    2e7e:	52 96       	adiw	r26, 0x12	; 18
    2e80:	2c 93       	st	X, r18
    2e82:	52 97       	sbiw	r26, 0x12	; 18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2e84:	2a 81       	ldd	r18, Y+2	; 0x02
    2e86:	3b 81       	ldd	r19, Y+3	; 0x03
    2e88:	1c 96       	adiw	r26, 0x0c	; 12
    2e8a:	6d 91       	ld	r22, X+
    2e8c:	7c 91       	ld	r23, X
    2e8e:	1d 97       	sbiw	r26, 0x0d	; 13
    2e90:	62 0f       	add	r22, r18
    2e92:	73 1f       	adc	r23, r19
    2e94:	ac 01       	movw	r20, r24
    2e96:	c5 01       	movw	r24, r10
    2e98:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <prvInsertTimerInActiveList>
    2e9c:	88 23       	and	r24, r24
    2e9e:	f1 f1       	breq	.+124    	; 0x2f1c <prvTimerTask+0x1d0>
                    {
                        /* The timer expiYellow before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2ea0:	d5 01       	movw	r26, r10
    2ea2:	50 96       	adiw	r26, 0x10	; 16
    2ea4:	ed 91       	ld	r30, X+
    2ea6:	fc 91       	ld	r31, X
    2ea8:	51 97       	sbiw	r26, 0x11	; 17
    2eaa:	c5 01       	movw	r24, r10
    2eac:	09 95       	icall
                        traceTIMER_EXPIYellow( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2eae:	f5 01       	movw	r30, r10
    2eb0:	82 89       	ldd	r24, Z+18	; 0x12
    2eb2:	82 ff       	sbrs	r24, 2
    2eb4:	33 c0       	rjmp	.+102    	; 0x2f1c <prvTimerTask+0x1d0>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2eb6:	4a 81       	ldd	r20, Y+2	; 0x02
    2eb8:	5b 81       	ldd	r21, Y+3	; 0x03
    2eba:	84 85       	ldd	r24, Z+12	; 0x0c
    2ebc:	95 85       	ldd	r25, Z+13	; 0x0d
    2ebe:	48 0f       	add	r20, r24
    2ec0:	59 1f       	adc	r21, r25
    2ec2:	0e 2d       	mov	r16, r14
    2ec4:	1f 2d       	mov	r17, r15
    2ec6:	2e 2d       	mov	r18, r14
    2ec8:	3f 2d       	mov	r19, r15
    2eca:	65 2d       	mov	r22, r5
    2ecc:	c5 01       	movw	r24, r10
    2ece:	0e 94 ee 15 	call	0x2bdc	; 0x2bdc <xTimerGenericCommand>
    2ed2:	24 c0       	rjmp	.+72     	; 0x2f1c <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2ed4:	d5 01       	movw	r26, r10
    2ed6:	52 96       	adiw	r26, 0x12	; 18
    2ed8:	8c 91       	ld	r24, X
    2eda:	52 97       	sbiw	r26, 0x12	; 18
    2edc:	8e 7f       	andi	r24, 0xFE	; 254
    2ede:	52 96       	adiw	r26, 0x12	; 18
    2ee0:	8c 93       	st	X, r24
    2ee2:	1c c0       	rjmp	.+56     	; 0x2f1c <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2ee4:	f5 01       	movw	r30, r10
    2ee6:	22 89       	ldd	r18, Z+18	; 0x12
    2ee8:	21 60       	ori	r18, 0x01	; 1
    2eea:	22 8b       	std	Z+18, r18	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2eec:	6a 81       	ldd	r22, Y+2	; 0x02
    2eee:	7b 81       	ldd	r23, Y+3	; 0x03
    2ef0:	75 87       	std	Z+13, r23	; 0x0d
    2ef2:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2ef4:	68 0f       	add	r22, r24
    2ef6:	79 1f       	adc	r23, r25
    2ef8:	9c 01       	movw	r18, r24
    2efa:	ac 01       	movw	r20, r24
    2efc:	c5 01       	movw	r24, r10
    2efe:	0e 94 74 15 	call	0x2ae8	; 0x2ae8 <prvInsertTimerInActiveList>
    2f02:	0c c0       	rjmp	.+24     	; 0x2f1c <prvTimerTask+0x1d0>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2f04:	d5 01       	movw	r26, r10
    2f06:	52 96       	adiw	r26, 0x12	; 18
    2f08:	8c 91       	ld	r24, X
    2f0a:	81 fd       	sbrc	r24, 1
    2f0c:	04 c0       	rjmp	.+8      	; 0x2f16 <prvTimerTask+0x1ca>
                        {
                            vPortFree( pxTimer );
    2f0e:	c5 01       	movw	r24, r10
    2f10:	0e 94 c6 0b 	call	0x178c	; 0x178c <vPortFree>
    2f14:	03 c0       	rjmp	.+6      	; 0x2f1c <prvTimerTask+0x1d0>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2f16:	8e 7f       	andi	r24, 0xFE	; 254
    2f18:	f5 01       	movw	r30, r10
    2f1a:	82 8b       	std	Z+18, r24	; 0x12
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2f1c:	4e 2d       	mov	r20, r14
    2f1e:	5f 2d       	mov	r21, r15
    2f20:	6c 2d       	mov	r22, r12
    2f22:	7d 2d       	mov	r23, r13
    2f24:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <xTimerQueue>
    2f28:	90 91 10 02 	lds	r25, 0x0210	; 0x800210 <xTimerQueue+0x1>
    2f2c:	0e 94 ac 0f 	call	0x1f58	; 0x1f58 <xQueueReceive>
    2f30:	81 11       	cpse	r24, r1
    2f32:	81 cf       	rjmp	.-254    	; 0x2e36 <prvTimerTask+0xea>
    2f34:	1c cf       	rjmp	.-456    	; 0x2d6e <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2f36:	0e 94 5d 12 	call	0x24ba	; 0x24ba <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2f3a:	c4 01       	movw	r24, r8
    2f3c:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <prvSampleTimeNow>
    2f40:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2f42:	89 81       	ldd	r24, Y+1	; 0x01
    2f44:	81 11       	cpse	r24, r1
    2f46:	74 cf       	rjmp	.-280    	; 0x2e30 <prvTimerTask+0xe4>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2f48:	e0 91 11 02 	lds	r30, 0x0211	; 0x800211 <pxOverflowTimerList>
    2f4c:	f0 91 12 02 	lds	r31, 0x0212	; 0x800212 <pxOverflowTimerList+0x1>
    2f50:	80 81       	ld	r24, Z
    2f52:	44 2d       	mov	r20, r4
    2f54:	81 11       	cpse	r24, r1
    2f56:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2f58:	ae 2c       	mov	r10, r14
    2f5a:	bf 2c       	mov	r11, r15
    2f5c:	59 cf       	rjmp	.-334    	; 0x2e10 <prvTimerTask+0xc4>

00002f5e <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2f5e:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2f62:	88 e4       	ldi	r24, 0x48	; 72
    2f64:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2f68:	08 95       	ret

00002f6a <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    2f6a:	94 ea       	ldi	r25, 0xA4	; 164
    2f6c:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    2f70:	ec eb       	ldi	r30, 0xBC	; 188
    2f72:	f0 e0       	ldi	r31, 0x00	; 0
    2f74:	90 81       	ld	r25, Z
    2f76:	99 23       	and	r25, r25
    2f78:	ec f7       	brge	.-6      	; 0x2f74 <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2f7a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
    2f7e:	98 7f       	andi	r25, 0xF8	; 248
    2f80:	90 31       	cpi	r25, 0x10	; 16
    2f82:	99 f4       	brne	.+38     	; 0x2faa <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
    2f84:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    2f88:	84 e8       	ldi	r24, 0x84	; 132
    2f8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    2f8e:	ec eb       	ldi	r30, 0xBC	; 188
    2f90:	f0 e0       	ldi	r31, 0x00	; 0
    2f92:	80 81       	ld	r24, Z
    2f94:	88 23       	and	r24, r24
    2f96:	ec f7       	brge	.-6      	; 0x2f92 <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2f98:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2f9c:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
    2f9e:	80 34       	cpi	r24, 0x40	; 64
    2fa0:	31 f0       	breq	.+12     	; 0x2fae <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
    2fa2:	80 32       	cpi	r24, 0x20	; 32
    2fa4:	31 f0       	breq	.+12     	; 0x2fb2 <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    2fa6:	83 e0       	ldi	r24, 0x03	; 3
    2fa8:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
    2faa:	80 e0       	ldi	r24, 0x00	; 0
    2fac:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
    2fae:	81 e0       	ldi	r24, 0x01	; 1
    2fb0:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2fb4:	08 95       	ret

00002fb6 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    2fb6:	84 e9       	ldi	r24, 0x94	; 148
    2fb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
    2fbc:	ec eb       	ldi	r30, 0xBC	; 188
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	84 fd       	sbrc	r24, 4
    2fc4:	fd cf       	rjmp	.-6      	; 0x2fc0 <I2C_Stop+0xa>
}
    2fc6:	08 95       	ret

00002fc8 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
    2fc8:	bf 92       	push	r11
    2fca:	cf 92       	push	r12
    2fcc:	df 92       	push	r13
    2fce:	ef 92       	push	r14
    2fd0:	ff 92       	push	r15
    2fd2:	0f 93       	push	r16
    2fd4:	1f 93       	push	r17
    2fd6:	cf 93       	push	r28
    2fd8:	df 93       	push	r29
    2fda:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2fdc:	cc eb       	ldi	r28, 0xBC	; 188
    2fde:	d0 e0       	ldi	r29, 0x00	; 0
    2fe0:	0f 2e       	mov	r0, r31
    2fe2:	f4 ea       	ldi	r31, 0xA4	; 164
    2fe4:	df 2e       	mov	r13, r31
    2fe6:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2fe8:	09 eb       	ldi	r16, 0xB9	; 185
    2fea:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2fec:	0f 2e       	mov	r0, r31
    2fee:	fb eb       	ldi	r31, 0xBB	; 187
    2ff0:	ef 2e       	mov	r14, r31
    2ff2:	f1 2c       	mov	r15, r1
    2ff4:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2ff6:	0f 2e       	mov	r0, r31
    2ff8:	f4 e8       	ldi	r31, 0x84	; 132
    2ffa:	cf 2e       	mov	r12, r31
    2ffc:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2ffe:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    3000:	88 81       	ld	r24, Y
    3002:	88 23       	and	r24, r24
    3004:	ec f7       	brge	.-6      	; 0x3000 <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    3006:	f8 01       	movw	r30, r16
    3008:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    300a:	88 7f       	andi	r24, 0xF8	; 248
    300c:	88 30       	cpi	r24, 0x08	; 8
    300e:	b9 f7       	brne	.-18     	; 0x2ffe <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    3010:	f7 01       	movw	r30, r14
    3012:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    3014:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    3016:	88 81       	ld	r24, Y
    3018:	88 23       	and	r24, r24
    301a:	ec f7       	brge	.-6      	; 0x3016 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    301c:	f8 01       	movw	r30, r16
    301e:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
    3020:	88 7f       	andi	r24, 0xF8	; 248
    3022:	88 31       	cpi	r24, 0x18	; 24
    3024:	19 f0       	breq	.+6      	; 0x302c <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
    3026:	0e 94 db 17 	call	0x2fb6	; 0x2fb6 <I2C_Stop>
			continue;										/* continue with start loop again */
    302a:	e9 cf       	rjmp	.-46     	; 0x2ffe <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
    302c:	df 91       	pop	r29
    302e:	cf 91       	pop	r28
    3030:	1f 91       	pop	r17
    3032:	0f 91       	pop	r16
    3034:	ff 90       	pop	r15
    3036:	ef 90       	pop	r14
    3038:	df 90       	pop	r13
    303a:	cf 90       	pop	r12
    303c:	bf 90       	pop	r11
    303e:	08 95       	ret

00003040 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
    3040:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    3044:	84 e8       	ldi	r24, 0x84	; 132
    3046:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    304a:	ec eb       	ldi	r30, 0xBC	; 188
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	88 23       	and	r24, r24
    3052:	ec f7       	brge	.-6      	; 0x304e <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    3054:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    3058:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
    305a:	88 32       	cpi	r24, 0x28	; 40
    305c:	21 f0       	breq	.+8      	; 0x3066 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
    305e:	80 33       	cpi	r24, 0x30	; 48
    3060:	21 f0       	breq	.+8      	; 0x306a <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
    3062:	82 e0       	ldi	r24, 0x02	; 2
    3064:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
    3066:	80 e0       	ldi	r24, 0x00	; 0
    3068:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
    306a:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
    306c:	08 95       	ret

0000306e <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
    306e:	84 ec       	ldi	r24, 0xC4	; 196
    3070:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    3074:	ec eb       	ldi	r30, 0xBC	; 188
    3076:	f0 e0       	ldi	r31, 0x00	; 0
    3078:	80 81       	ld	r24, Z
    307a:	88 23       	and	r24, r24
    307c:	ec f7       	brge	.-6      	; 0x3078 <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
    307e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    3082:	08 95       	ret

00003084 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
    3084:	84 e8       	ldi	r24, 0x84	; 132
    3086:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    308a:	ec eb       	ldi	r30, 0xBC	; 188
    308c:	f0 e0       	ldi	r31, 0x00	; 0
    308e:	80 81       	ld	r24, Z
    3090:	88 23       	and	r24, r24
    3092:	ec f7       	brge	.-6      	; 0x308e <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
    3094:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    3098:	08 95       	ret

0000309a <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
    309a:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
    309e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    30a2:	88 e1       	ldi	r24, 0x18	; 24
    30a4:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C |= (1<<USBS0); // 2 stop bits
    30a8:	e2 ec       	ldi	r30, 0xC2	; 194
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	80 81       	ld	r24, Z
    30ae:	88 60       	ori	r24, 0x08	; 8
    30b0:	80 83       	st	Z, r24
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
    30b2:	86 e0       	ldi	r24, 0x06	; 6
    30b4:	80 83       	st	Z, r24
    30b6:	08 95       	ret

000030b8 <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
    30b8:	e0 ec       	ldi	r30, 0xC0	; 192
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	90 81       	ld	r25, Z
    30be:	95 ff       	sbrs	r25, 5
    30c0:	fd cf       	rjmp	.-6      	; 0x30bc <UART_send+0x4>
  // Put data into buffer and send data
  UDR0 = data;
    30c2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    30c6:	08 95       	ret

000030c8 <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
    30c8:	cf 93       	push	r28
    30ca:	df 93       	push	r29
    30cc:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
    30ce:	88 81       	ld	r24, Y
    30d0:	88 23       	and	r24, r24
    30d2:	31 f0       	breq	.+12     	; 0x30e0 <UART_putstring+0x18>
    30d4:	21 96       	adiw	r28, 0x01	; 1
  {
    UART_send(*StringPtr);
    30d6:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <UART_send>
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
    30da:	89 91       	ld	r24, Y+
    30dc:	81 11       	cpse	r24, r1
    30de:	fb cf       	rjmp	.-10     	; 0x30d6 <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
    30e0:	df 91       	pop	r29
    30e2:	cf 91       	pop	r28
    30e4:	08 95       	ret

000030e6 <__subsf3>:
    30e6:	50 58       	subi	r21, 0x80	; 128

000030e8 <__addsf3>:
    30e8:	bb 27       	eor	r27, r27
    30ea:	aa 27       	eor	r26, r26
    30ec:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3x>
    30f0:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__fp_round>
    30f4:	0e 94 df 1a 	call	0x35be	; 0x35be <__fp_pscA>
    30f8:	38 f0       	brcs	.+14     	; 0x3108 <__addsf3+0x20>
    30fa:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__fp_pscB>
    30fe:	20 f0       	brcs	.+8      	; 0x3108 <__addsf3+0x20>
    3100:	39 f4       	brne	.+14     	; 0x3110 <__addsf3+0x28>
    3102:	9f 3f       	cpi	r25, 0xFF	; 255
    3104:	19 f4       	brne	.+6      	; 0x310c <__addsf3+0x24>
    3106:	26 f4       	brtc	.+8      	; 0x3110 <__addsf3+0x28>
    3108:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_nan>
    310c:	0e f4       	brtc	.+2      	; 0x3110 <__addsf3+0x28>
    310e:	e0 95       	com	r30
    3110:	e7 fb       	bst	r30, 7
    3112:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__fp_inf>

00003116 <__addsf3x>:
    3116:	e9 2f       	mov	r30, r25
    3118:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <__fp_split3>
    311c:	58 f3       	brcs	.-42     	; 0x30f4 <__addsf3+0xc>
    311e:	ba 17       	cp	r27, r26
    3120:	62 07       	cpc	r22, r18
    3122:	73 07       	cpc	r23, r19
    3124:	84 07       	cpc	r24, r20
    3126:	95 07       	cpc	r25, r21
    3128:	20 f0       	brcs	.+8      	; 0x3132 <__addsf3x+0x1c>
    312a:	79 f4       	brne	.+30     	; 0x314a <__addsf3x+0x34>
    312c:	a6 f5       	brtc	.+104    	; 0x3196 <__addsf3x+0x80>
    312e:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__fp_zero>
    3132:	0e f4       	brtc	.+2      	; 0x3136 <__addsf3x+0x20>
    3134:	e0 95       	com	r30
    3136:	0b 2e       	mov	r0, r27
    3138:	ba 2f       	mov	r27, r26
    313a:	a0 2d       	mov	r26, r0
    313c:	0b 01       	movw	r0, r22
    313e:	b9 01       	movw	r22, r18
    3140:	90 01       	movw	r18, r0
    3142:	0c 01       	movw	r0, r24
    3144:	ca 01       	movw	r24, r20
    3146:	a0 01       	movw	r20, r0
    3148:	11 24       	eor	r1, r1
    314a:	ff 27       	eor	r31, r31
    314c:	59 1b       	sub	r21, r25
    314e:	99 f0       	breq	.+38     	; 0x3176 <__addsf3x+0x60>
    3150:	59 3f       	cpi	r21, 0xF9	; 249
    3152:	50 f4       	brcc	.+20     	; 0x3168 <__addsf3x+0x52>
    3154:	50 3e       	cpi	r21, 0xE0	; 224
    3156:	68 f1       	brcs	.+90     	; 0x31b2 <__addsf3x+0x9c>
    3158:	1a 16       	cp	r1, r26
    315a:	f0 40       	sbci	r31, 0x00	; 0
    315c:	a2 2f       	mov	r26, r18
    315e:	23 2f       	mov	r18, r19
    3160:	34 2f       	mov	r19, r20
    3162:	44 27       	eor	r20, r20
    3164:	58 5f       	subi	r21, 0xF8	; 248
    3166:	f3 cf       	rjmp	.-26     	; 0x314e <__addsf3x+0x38>
    3168:	46 95       	lsr	r20
    316a:	37 95       	ror	r19
    316c:	27 95       	ror	r18
    316e:	a7 95       	ror	r26
    3170:	f0 40       	sbci	r31, 0x00	; 0
    3172:	53 95       	inc	r21
    3174:	c9 f7       	brne	.-14     	; 0x3168 <__addsf3x+0x52>
    3176:	7e f4       	brtc	.+30     	; 0x3196 <__addsf3x+0x80>
    3178:	1f 16       	cp	r1, r31
    317a:	ba 0b       	sbc	r27, r26
    317c:	62 0b       	sbc	r22, r18
    317e:	73 0b       	sbc	r23, r19
    3180:	84 0b       	sbc	r24, r20
    3182:	ba f0       	brmi	.+46     	; 0x31b2 <__addsf3x+0x9c>
    3184:	91 50       	subi	r25, 0x01	; 1
    3186:	a1 f0       	breq	.+40     	; 0x31b0 <__addsf3x+0x9a>
    3188:	ff 0f       	add	r31, r31
    318a:	bb 1f       	adc	r27, r27
    318c:	66 1f       	adc	r22, r22
    318e:	77 1f       	adc	r23, r23
    3190:	88 1f       	adc	r24, r24
    3192:	c2 f7       	brpl	.-16     	; 0x3184 <__addsf3x+0x6e>
    3194:	0e c0       	rjmp	.+28     	; 0x31b2 <__addsf3x+0x9c>
    3196:	ba 0f       	add	r27, r26
    3198:	62 1f       	adc	r22, r18
    319a:	73 1f       	adc	r23, r19
    319c:	84 1f       	adc	r24, r20
    319e:	48 f4       	brcc	.+18     	; 0x31b2 <__addsf3x+0x9c>
    31a0:	87 95       	ror	r24
    31a2:	77 95       	ror	r23
    31a4:	67 95       	ror	r22
    31a6:	b7 95       	ror	r27
    31a8:	f7 95       	ror	r31
    31aa:	9e 3f       	cpi	r25, 0xFE	; 254
    31ac:	08 f0       	brcs	.+2      	; 0x31b0 <__addsf3x+0x9a>
    31ae:	b0 cf       	rjmp	.-160    	; 0x3110 <__addsf3+0x28>
    31b0:	93 95       	inc	r25
    31b2:	88 0f       	add	r24, r24
    31b4:	08 f0       	brcs	.+2      	; 0x31b8 <__addsf3x+0xa2>
    31b6:	99 27       	eor	r25, r25
    31b8:	ee 0f       	add	r30, r30
    31ba:	97 95       	ror	r25
    31bc:	87 95       	ror	r24
    31be:	08 95       	ret

000031c0 <asin>:
    31c0:	9f 93       	push	r25
    31c2:	9f 77       	andi	r25, 0x7F	; 127
    31c4:	ee e3       	ldi	r30, 0x3E	; 62
    31c6:	89 37       	cpi	r24, 0x79	; 121
    31c8:	9e 07       	cpc	r25, r30
    31ca:	28 f4       	brcc	.+10     	; 0x31d6 <asin+0x16>
    31cc:	ec e7       	ldi	r30, 0x7C	; 124
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	0e 94 cb 1a 	call	0x3596	; 0x3596 <__fp_powsodd>
    31d4:	0c c0       	rjmp	.+24     	; 0x31ee <asin+0x2e>
    31d6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__fp_arccos>
    31da:	90 58       	subi	r25, 0x80	; 128
    31dc:	a2 ea       	ldi	r26, 0xA2	; 162
    31de:	2a ed       	ldi	r18, 0xDA	; 218
    31e0:	3f e0       	ldi	r19, 0x0F	; 15
    31e2:	49 ec       	ldi	r20, 0xC9	; 201
    31e4:	5f e3       	ldi	r21, 0x3F	; 63
    31e6:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3x>
    31ea:	0e 94 ed 1a 	call	0x35da	; 0x35da <__fp_round>
    31ee:	0f 90       	pop	r0
    31f0:	07 fc       	sbrc	r0, 7
    31f2:	90 58       	subi	r25, 0x80	; 128
    31f4:	08 95       	ret
    31f6:	0e 94 df 1a 	call	0x35be	; 0x35be <__fp_pscA>
    31fa:	60 f0       	brcs	.+24     	; 0x3214 <asin+0x54>
    31fc:	80 e8       	ldi	r24, 0x80	; 128
    31fe:	91 e0       	ldi	r25, 0x01	; 1
    3200:	09 f4       	brne	.+2      	; 0x3204 <asin+0x44>
    3202:	9e ef       	ldi	r25, 0xFE	; 254
    3204:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__fp_pscB>
    3208:	28 f0       	brcs	.+10     	; 0x3214 <asin+0x54>
    320a:	40 e8       	ldi	r20, 0x80	; 128
    320c:	51 e0       	ldi	r21, 0x01	; 1
    320e:	71 f4       	brne	.+28     	; 0x322c <atan2+0x10>
    3210:	5e ef       	ldi	r21, 0xFE	; 254
    3212:	0c c0       	rjmp	.+24     	; 0x322c <atan2+0x10>
    3214:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_nan>
    3218:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__fp_zero>

0000321c <atan2>:
    321c:	e9 2f       	mov	r30, r25
    321e:	e0 78       	andi	r30, 0x80	; 128
    3220:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <__fp_split3>
    3224:	40 f3       	brcs	.-48     	; 0x31f6 <asin+0x36>
    3226:	09 2e       	mov	r0, r25
    3228:	05 2a       	or	r0, r21
    322a:	b1 f3       	breq	.-20     	; 0x3218 <asin+0x58>
    322c:	26 17       	cp	r18, r22
    322e:	37 07       	cpc	r19, r23
    3230:	48 07       	cpc	r20, r24
    3232:	59 07       	cpc	r21, r25
    3234:	38 f0       	brcs	.+14     	; 0x3244 <atan2+0x28>
    3236:	0e 2e       	mov	r0, r30
    3238:	07 f8       	bld	r0, 7
    323a:	e0 25       	eor	r30, r0
    323c:	69 f0       	breq	.+26     	; 0x3258 <atan2+0x3c>
    323e:	e0 25       	eor	r30, r0
    3240:	e0 64       	ori	r30, 0x40	; 64
    3242:	0a c0       	rjmp	.+20     	; 0x3258 <atan2+0x3c>
    3244:	ef 63       	ori	r30, 0x3F	; 63
    3246:	07 f8       	bld	r0, 7
    3248:	00 94       	com	r0
    324a:	07 fa       	bst	r0, 7
    324c:	db 01       	movw	r26, r22
    324e:	b9 01       	movw	r22, r18
    3250:	9d 01       	movw	r18, r26
    3252:	dc 01       	movw	r26, r24
    3254:	ca 01       	movw	r24, r20
    3256:	ad 01       	movw	r20, r26
    3258:	ef 93       	push	r30
    325a:	0e 94 89 19 	call	0x3312	; 0x3312 <__divsf3_pse>
    325e:	0e 94 ed 1a 	call	0x35da	; 0x35da <__fp_round>
    3262:	0e 94 3e 19 	call	0x327c	; 0x327c <atan>
    3266:	5f 91       	pop	r21
    3268:	55 23       	and	r21, r21
    326a:	39 f0       	breq	.+14     	; 0x327a <atan2+0x5e>
    326c:	2b ed       	ldi	r18, 0xDB	; 219
    326e:	3f e0       	ldi	r19, 0x0F	; 15
    3270:	49 e4       	ldi	r20, 0x49	; 73
    3272:	50 fd       	sbrc	r21, 0
    3274:	49 ec       	ldi	r20, 0xC9	; 201
    3276:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__addsf3>
    327a:	08 95       	ret

0000327c <atan>:
    327c:	df 93       	push	r29
    327e:	dd 27       	eor	r29, r29
    3280:	b9 2f       	mov	r27, r25
    3282:	bf 77       	andi	r27, 0x7F	; 127
    3284:	40 e8       	ldi	r20, 0x80	; 128
    3286:	5f e3       	ldi	r21, 0x3F	; 63
    3288:	16 16       	cp	r1, r22
    328a:	17 06       	cpc	r1, r23
    328c:	48 07       	cpc	r20, r24
    328e:	5b 07       	cpc	r21, r27
    3290:	18 f4       	brcc	.+6      	; 0x3298 <atan+0x1c>
    3292:	d9 2f       	mov	r29, r25
    3294:	0e 94 2c 1b 	call	0x3658	; 0x3658 <inverse>
    3298:	9f 93       	push	r25
    329a:	8f 93       	push	r24
    329c:	7f 93       	push	r23
    329e:	6f 93       	push	r22
    32a0:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <square>
    32a4:	e0 e9       	ldi	r30, 0x90	; 144
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	0e 94 a4 1a 	call	0x3548	; 0x3548 <__fp_powser>
    32ac:	0e 94 ed 1a 	call	0x35da	; 0x35da <__fp_round>
    32b0:	2f 91       	pop	r18
    32b2:	3f 91       	pop	r19
    32b4:	4f 91       	pop	r20
    32b6:	5f 91       	pop	r21
    32b8:	0e 94 47 1b 	call	0x368e	; 0x368e <__mulsf3x>
    32bc:	dd 23       	and	r29, r29
    32be:	51 f0       	breq	.+20     	; 0x32d4 <atan+0x58>
    32c0:	90 58       	subi	r25, 0x80	; 128
    32c2:	a2 ea       	ldi	r26, 0xA2	; 162
    32c4:	2a ed       	ldi	r18, 0xDA	; 218
    32c6:	3f e0       	ldi	r19, 0x0F	; 15
    32c8:	49 ec       	ldi	r20, 0xC9	; 201
    32ca:	5f e3       	ldi	r21, 0x3F	; 63
    32cc:	d0 78       	andi	r29, 0x80	; 128
    32ce:	5d 27       	eor	r21, r29
    32d0:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3x>
    32d4:	df 91       	pop	r29
    32d6:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__fp_round>

000032da <__cmpsf2>:
    32da:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__fp_cmp>
    32de:	08 f4       	brcc	.+2      	; 0x32e2 <__cmpsf2+0x8>
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	08 95       	ret

000032e4 <__divsf3>:
    32e4:	0e 94 86 19 	call	0x330c	; 0x330c <__divsf3x>
    32e8:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__fp_round>
    32ec:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__fp_pscB>
    32f0:	58 f0       	brcs	.+22     	; 0x3308 <__divsf3+0x24>
    32f2:	0e 94 df 1a 	call	0x35be	; 0x35be <__fp_pscA>
    32f6:	40 f0       	brcs	.+16     	; 0x3308 <__divsf3+0x24>
    32f8:	29 f4       	brne	.+10     	; 0x3304 <__divsf3+0x20>
    32fa:	5f 3f       	cpi	r21, 0xFF	; 255
    32fc:	29 f0       	breq	.+10     	; 0x3308 <__divsf3+0x24>
    32fe:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__fp_inf>
    3302:	51 11       	cpse	r21, r1
    3304:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__fp_szero>
    3308:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_nan>

0000330c <__divsf3x>:
    330c:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <__fp_split3>
    3310:	68 f3       	brcs	.-38     	; 0x32ec <__divsf3+0x8>

00003312 <__divsf3_pse>:
    3312:	99 23       	and	r25, r25
    3314:	b1 f3       	breq	.-20     	; 0x3302 <__divsf3+0x1e>
    3316:	55 23       	and	r21, r21
    3318:	91 f3       	breq	.-28     	; 0x32fe <__divsf3+0x1a>
    331a:	95 1b       	sub	r25, r21
    331c:	55 0b       	sbc	r21, r21
    331e:	bb 27       	eor	r27, r27
    3320:	aa 27       	eor	r26, r26
    3322:	62 17       	cp	r22, r18
    3324:	73 07       	cpc	r23, r19
    3326:	84 07       	cpc	r24, r20
    3328:	38 f0       	brcs	.+14     	; 0x3338 <__divsf3_pse+0x26>
    332a:	9f 5f       	subi	r25, 0xFF	; 255
    332c:	5f 4f       	sbci	r21, 0xFF	; 255
    332e:	22 0f       	add	r18, r18
    3330:	33 1f       	adc	r19, r19
    3332:	44 1f       	adc	r20, r20
    3334:	aa 1f       	adc	r26, r26
    3336:	a9 f3       	breq	.-22     	; 0x3322 <__divsf3_pse+0x10>
    3338:	35 d0       	rcall	.+106    	; 0x33a4 <__divsf3_pse+0x92>
    333a:	0e 2e       	mov	r0, r30
    333c:	3a f0       	brmi	.+14     	; 0x334c <__divsf3_pse+0x3a>
    333e:	e0 e8       	ldi	r30, 0x80	; 128
    3340:	32 d0       	rcall	.+100    	; 0x33a6 <__divsf3_pse+0x94>
    3342:	91 50       	subi	r25, 0x01	; 1
    3344:	50 40       	sbci	r21, 0x00	; 0
    3346:	e6 95       	lsr	r30
    3348:	00 1c       	adc	r0, r0
    334a:	ca f7       	brpl	.-14     	; 0x333e <__divsf3_pse+0x2c>
    334c:	2b d0       	rcall	.+86     	; 0x33a4 <__divsf3_pse+0x92>
    334e:	fe 2f       	mov	r31, r30
    3350:	29 d0       	rcall	.+82     	; 0x33a4 <__divsf3_pse+0x92>
    3352:	66 0f       	add	r22, r22
    3354:	77 1f       	adc	r23, r23
    3356:	88 1f       	adc	r24, r24
    3358:	bb 1f       	adc	r27, r27
    335a:	26 17       	cp	r18, r22
    335c:	37 07       	cpc	r19, r23
    335e:	48 07       	cpc	r20, r24
    3360:	ab 07       	cpc	r26, r27
    3362:	b0 e8       	ldi	r27, 0x80	; 128
    3364:	09 f0       	breq	.+2      	; 0x3368 <__divsf3_pse+0x56>
    3366:	bb 0b       	sbc	r27, r27
    3368:	80 2d       	mov	r24, r0
    336a:	bf 01       	movw	r22, r30
    336c:	ff 27       	eor	r31, r31
    336e:	93 58       	subi	r25, 0x83	; 131
    3370:	5f 4f       	sbci	r21, 0xFF	; 255
    3372:	3a f0       	brmi	.+14     	; 0x3382 <__divsf3_pse+0x70>
    3374:	9e 3f       	cpi	r25, 0xFE	; 254
    3376:	51 05       	cpc	r21, r1
    3378:	78 f0       	brcs	.+30     	; 0x3398 <__divsf3_pse+0x86>
    337a:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__fp_inf>
    337e:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__fp_szero>
    3382:	5f 3f       	cpi	r21, 0xFF	; 255
    3384:	e4 f3       	brlt	.-8      	; 0x337e <__divsf3_pse+0x6c>
    3386:	98 3e       	cpi	r25, 0xE8	; 232
    3388:	d4 f3       	brlt	.-12     	; 0x337e <__divsf3_pse+0x6c>
    338a:	86 95       	lsr	r24
    338c:	77 95       	ror	r23
    338e:	67 95       	ror	r22
    3390:	b7 95       	ror	r27
    3392:	f7 95       	ror	r31
    3394:	9f 5f       	subi	r25, 0xFF	; 255
    3396:	c9 f7       	brne	.-14     	; 0x338a <__divsf3_pse+0x78>
    3398:	88 0f       	add	r24, r24
    339a:	91 1d       	adc	r25, r1
    339c:	96 95       	lsr	r25
    339e:	87 95       	ror	r24
    33a0:	97 f9       	bld	r25, 7
    33a2:	08 95       	ret
    33a4:	e1 e0       	ldi	r30, 0x01	; 1
    33a6:	66 0f       	add	r22, r22
    33a8:	77 1f       	adc	r23, r23
    33aa:	88 1f       	adc	r24, r24
    33ac:	bb 1f       	adc	r27, r27
    33ae:	62 17       	cp	r22, r18
    33b0:	73 07       	cpc	r23, r19
    33b2:	84 07       	cpc	r24, r20
    33b4:	ba 07       	cpc	r27, r26
    33b6:	20 f0       	brcs	.+8      	; 0x33c0 <__divsf3_pse+0xae>
    33b8:	62 1b       	sub	r22, r18
    33ba:	73 0b       	sbc	r23, r19
    33bc:	84 0b       	sbc	r24, r20
    33be:	ba 0b       	sbc	r27, r26
    33c0:	ee 1f       	adc	r30, r30
    33c2:	88 f7       	brcc	.-30     	; 0x33a6 <__divsf3_pse+0x94>
    33c4:	e0 95       	com	r30
    33c6:	08 95       	ret

000033c8 <__fixsfsi>:
    33c8:	0e 94 eb 19 	call	0x33d6	; 0x33d6 <__fixunssfsi>
    33cc:	68 94       	set
    33ce:	b1 11       	cpse	r27, r1
    33d0:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__fp_szero>
    33d4:	08 95       	ret

000033d6 <__fixunssfsi>:
    33d6:	0e 94 06 1b 	call	0x360c	; 0x360c <__fp_splitA>
    33da:	88 f0       	brcs	.+34     	; 0x33fe <__fixunssfsi+0x28>
    33dc:	9f 57       	subi	r25, 0x7F	; 127
    33de:	98 f0       	brcs	.+38     	; 0x3406 <__fixunssfsi+0x30>
    33e0:	b9 2f       	mov	r27, r25
    33e2:	99 27       	eor	r25, r25
    33e4:	b7 51       	subi	r27, 0x17	; 23
    33e6:	b0 f0       	brcs	.+44     	; 0x3414 <__fixunssfsi+0x3e>
    33e8:	e1 f0       	breq	.+56     	; 0x3422 <__fixunssfsi+0x4c>
    33ea:	66 0f       	add	r22, r22
    33ec:	77 1f       	adc	r23, r23
    33ee:	88 1f       	adc	r24, r24
    33f0:	99 1f       	adc	r25, r25
    33f2:	1a f0       	brmi	.+6      	; 0x33fa <__fixunssfsi+0x24>
    33f4:	ba 95       	dec	r27
    33f6:	c9 f7       	brne	.-14     	; 0x33ea <__fixunssfsi+0x14>
    33f8:	14 c0       	rjmp	.+40     	; 0x3422 <__fixunssfsi+0x4c>
    33fa:	b1 30       	cpi	r27, 0x01	; 1
    33fc:	91 f0       	breq	.+36     	; 0x3422 <__fixunssfsi+0x4c>
    33fe:	0e 94 20 1b 	call	0x3640	; 0x3640 <__fp_zero>
    3402:	b1 e0       	ldi	r27, 0x01	; 1
    3404:	08 95       	ret
    3406:	0c 94 20 1b 	jmp	0x3640	; 0x3640 <__fp_zero>
    340a:	67 2f       	mov	r22, r23
    340c:	78 2f       	mov	r23, r24
    340e:	88 27       	eor	r24, r24
    3410:	b8 5f       	subi	r27, 0xF8	; 248
    3412:	39 f0       	breq	.+14     	; 0x3422 <__fixunssfsi+0x4c>
    3414:	b9 3f       	cpi	r27, 0xF9	; 249
    3416:	cc f3       	brlt	.-14     	; 0x340a <__fixunssfsi+0x34>
    3418:	86 95       	lsr	r24
    341a:	77 95       	ror	r23
    341c:	67 95       	ror	r22
    341e:	b3 95       	inc	r27
    3420:	d9 f7       	brne	.-10     	; 0x3418 <__fixunssfsi+0x42>
    3422:	3e f4       	brtc	.+14     	; 0x3432 <__fixunssfsi+0x5c>
    3424:	90 95       	com	r25
    3426:	80 95       	com	r24
    3428:	70 95       	com	r23
    342a:	61 95       	neg	r22
    342c:	7f 4f       	sbci	r23, 0xFF	; 255
    342e:	8f 4f       	sbci	r24, 0xFF	; 255
    3430:	9f 4f       	sbci	r25, 0xFF	; 255
    3432:	08 95       	ret

00003434 <__floatunsisf>:
    3434:	e8 94       	clt
    3436:	09 c0       	rjmp	.+18     	; 0x344a <__floatsisf+0x12>

00003438 <__floatsisf>:
    3438:	97 fb       	bst	r25, 7
    343a:	3e f4       	brtc	.+14     	; 0x344a <__floatsisf+0x12>
    343c:	90 95       	com	r25
    343e:	80 95       	com	r24
    3440:	70 95       	com	r23
    3442:	61 95       	neg	r22
    3444:	7f 4f       	sbci	r23, 0xFF	; 255
    3446:	8f 4f       	sbci	r24, 0xFF	; 255
    3448:	9f 4f       	sbci	r25, 0xFF	; 255
    344a:	99 23       	and	r25, r25
    344c:	a9 f0       	breq	.+42     	; 0x3478 <__floatsisf+0x40>
    344e:	f9 2f       	mov	r31, r25
    3450:	96 e9       	ldi	r25, 0x96	; 150
    3452:	bb 27       	eor	r27, r27
    3454:	93 95       	inc	r25
    3456:	f6 95       	lsr	r31
    3458:	87 95       	ror	r24
    345a:	77 95       	ror	r23
    345c:	67 95       	ror	r22
    345e:	b7 95       	ror	r27
    3460:	f1 11       	cpse	r31, r1
    3462:	f8 cf       	rjmp	.-16     	; 0x3454 <__floatsisf+0x1c>
    3464:	fa f4       	brpl	.+62     	; 0x34a4 <__floatsisf+0x6c>
    3466:	bb 0f       	add	r27, r27
    3468:	11 f4       	brne	.+4      	; 0x346e <__floatsisf+0x36>
    346a:	60 ff       	sbrs	r22, 0
    346c:	1b c0       	rjmp	.+54     	; 0x34a4 <__floatsisf+0x6c>
    346e:	6f 5f       	subi	r22, 0xFF	; 255
    3470:	7f 4f       	sbci	r23, 0xFF	; 255
    3472:	8f 4f       	sbci	r24, 0xFF	; 255
    3474:	9f 4f       	sbci	r25, 0xFF	; 255
    3476:	16 c0       	rjmp	.+44     	; 0x34a4 <__floatsisf+0x6c>
    3478:	88 23       	and	r24, r24
    347a:	11 f0       	breq	.+4      	; 0x3480 <__floatsisf+0x48>
    347c:	96 e9       	ldi	r25, 0x96	; 150
    347e:	11 c0       	rjmp	.+34     	; 0x34a2 <__floatsisf+0x6a>
    3480:	77 23       	and	r23, r23
    3482:	21 f0       	breq	.+8      	; 0x348c <__floatsisf+0x54>
    3484:	9e e8       	ldi	r25, 0x8E	; 142
    3486:	87 2f       	mov	r24, r23
    3488:	76 2f       	mov	r23, r22
    348a:	05 c0       	rjmp	.+10     	; 0x3496 <__floatsisf+0x5e>
    348c:	66 23       	and	r22, r22
    348e:	71 f0       	breq	.+28     	; 0x34ac <__floatsisf+0x74>
    3490:	96 e8       	ldi	r25, 0x86	; 134
    3492:	86 2f       	mov	r24, r22
    3494:	70 e0       	ldi	r23, 0x00	; 0
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	2a f0       	brmi	.+10     	; 0x34a4 <__floatsisf+0x6c>
    349a:	9a 95       	dec	r25
    349c:	66 0f       	add	r22, r22
    349e:	77 1f       	adc	r23, r23
    34a0:	88 1f       	adc	r24, r24
    34a2:	da f7       	brpl	.-10     	; 0x349a <__floatsisf+0x62>
    34a4:	88 0f       	add	r24, r24
    34a6:	96 95       	lsr	r25
    34a8:	87 95       	ror	r24
    34aa:	97 f9       	bld	r25, 7
    34ac:	08 95       	ret

000034ae <__fp_arccos>:
    34ae:	df 93       	push	r29
    34b0:	cf 93       	push	r28
    34b2:	1f 93       	push	r17
    34b4:	0f 93       	push	r16
    34b6:	8b 01       	movw	r16, r22
    34b8:	ec 01       	movw	r28, r24
    34ba:	ed eb       	ldi	r30, 0xBD	; 189
    34bc:	f0 e0       	ldi	r31, 0x00	; 0
    34be:	0e 94 a4 1a 	call	0x3548	; 0x3548 <__fp_powser>
    34c2:	0e 94 ed 1a 	call	0x35da	; 0x35da <__fp_round>
    34c6:	98 01       	movw	r18, r16
    34c8:	ae 01       	movw	r20, r28
    34ca:	8b 01       	movw	r16, r22
    34cc:	ec 01       	movw	r28, r24
    34ce:	60 e0       	ldi	r22, 0x00	; 0
    34d0:	70 e0       	ldi	r23, 0x00	; 0
    34d2:	80 e8       	ldi	r24, 0x80	; 128
    34d4:	9f e3       	ldi	r25, 0x3F	; 63
    34d6:	0e 94 73 18 	call	0x30e6	; 0x30e6 <__subsf3>
    34da:	0e 94 a7 1b 	call	0x374e	; 0x374e <sqrt>
    34de:	98 01       	movw	r18, r16
    34e0:	ae 01       	movw	r20, r28
    34e2:	0f 91       	pop	r16
    34e4:	1f 91       	pop	r17
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__mulsf3x>

000034ee <__fp_cmp>:
    34ee:	99 0f       	add	r25, r25
    34f0:	00 08       	sbc	r0, r0
    34f2:	55 0f       	add	r21, r21
    34f4:	aa 0b       	sbc	r26, r26
    34f6:	e0 e8       	ldi	r30, 0x80	; 128
    34f8:	fe ef       	ldi	r31, 0xFE	; 254
    34fa:	16 16       	cp	r1, r22
    34fc:	17 06       	cpc	r1, r23
    34fe:	e8 07       	cpc	r30, r24
    3500:	f9 07       	cpc	r31, r25
    3502:	c0 f0       	brcs	.+48     	; 0x3534 <__fp_cmp+0x46>
    3504:	12 16       	cp	r1, r18
    3506:	13 06       	cpc	r1, r19
    3508:	e4 07       	cpc	r30, r20
    350a:	f5 07       	cpc	r31, r21
    350c:	98 f0       	brcs	.+38     	; 0x3534 <__fp_cmp+0x46>
    350e:	62 1b       	sub	r22, r18
    3510:	73 0b       	sbc	r23, r19
    3512:	84 0b       	sbc	r24, r20
    3514:	95 0b       	sbc	r25, r21
    3516:	39 f4       	brne	.+14     	; 0x3526 <__fp_cmp+0x38>
    3518:	0a 26       	eor	r0, r26
    351a:	61 f0       	breq	.+24     	; 0x3534 <__fp_cmp+0x46>
    351c:	23 2b       	or	r18, r19
    351e:	24 2b       	or	r18, r20
    3520:	25 2b       	or	r18, r21
    3522:	21 f4       	brne	.+8      	; 0x352c <__fp_cmp+0x3e>
    3524:	08 95       	ret
    3526:	0a 26       	eor	r0, r26
    3528:	09 f4       	brne	.+2      	; 0x352c <__fp_cmp+0x3e>
    352a:	a1 40       	sbci	r26, 0x01	; 1
    352c:	a6 95       	lsr	r26
    352e:	8f ef       	ldi	r24, 0xFF	; 255
    3530:	81 1d       	adc	r24, r1
    3532:	81 1d       	adc	r24, r1
    3534:	08 95       	ret

00003536 <__fp_inf>:
    3536:	97 f9       	bld	r25, 7
    3538:	9f 67       	ori	r25, 0x7F	; 127
    353a:	80 e8       	ldi	r24, 0x80	; 128
    353c:	70 e0       	ldi	r23, 0x00	; 0
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	08 95       	ret

00003542 <__fp_nan>:
    3542:	9f ef       	ldi	r25, 0xFF	; 255
    3544:	80 ec       	ldi	r24, 0xC0	; 192
    3546:	08 95       	ret

00003548 <__fp_powser>:
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	1f 93       	push	r17
    354e:	0f 93       	push	r16
    3550:	ff 92       	push	r15
    3552:	ef 92       	push	r14
    3554:	df 92       	push	r13
    3556:	7b 01       	movw	r14, r22
    3558:	8c 01       	movw	r16, r24
    355a:	68 94       	set
    355c:	06 c0       	rjmp	.+12     	; 0x356a <__fp_powser+0x22>
    355e:	da 2e       	mov	r13, r26
    3560:	ef 01       	movw	r28, r30
    3562:	0e 94 47 1b 	call	0x368e	; 0x368e <__mulsf3x>
    3566:	fe 01       	movw	r30, r28
    3568:	e8 94       	clt
    356a:	a5 91       	lpm	r26, Z+
    356c:	25 91       	lpm	r18, Z+
    356e:	35 91       	lpm	r19, Z+
    3570:	45 91       	lpm	r20, Z+
    3572:	55 91       	lpm	r21, Z+
    3574:	a6 f3       	brts	.-24     	; 0x355e <__fp_powser+0x16>
    3576:	ef 01       	movw	r28, r30
    3578:	0e 94 8b 18 	call	0x3116	; 0x3116 <__addsf3x>
    357c:	fe 01       	movw	r30, r28
    357e:	97 01       	movw	r18, r14
    3580:	a8 01       	movw	r20, r16
    3582:	da 94       	dec	r13
    3584:	69 f7       	brne	.-38     	; 0x3560 <__fp_powser+0x18>
    3586:	df 90       	pop	r13
    3588:	ef 90       	pop	r14
    358a:	ff 90       	pop	r15
    358c:	0f 91       	pop	r16
    358e:	1f 91       	pop	r17
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	08 95       	ret

00003596 <__fp_powsodd>:
    3596:	9f 93       	push	r25
    3598:	8f 93       	push	r24
    359a:	7f 93       	push	r23
    359c:	6f 93       	push	r22
    359e:	ff 93       	push	r31
    35a0:	ef 93       	push	r30
    35a2:	9b 01       	movw	r18, r22
    35a4:	ac 01       	movw	r20, r24
    35a6:	0e 94 34 1b 	call	0x3668	; 0x3668 <__mulsf3>
    35aa:	ef 91       	pop	r30
    35ac:	ff 91       	pop	r31
    35ae:	0e 94 a4 1a 	call	0x3548	; 0x3548 <__fp_powser>
    35b2:	2f 91       	pop	r18
    35b4:	3f 91       	pop	r19
    35b6:	4f 91       	pop	r20
    35b8:	5f 91       	pop	r21
    35ba:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__mulsf3>

000035be <__fp_pscA>:
    35be:	00 24       	eor	r0, r0
    35c0:	0a 94       	dec	r0
    35c2:	16 16       	cp	r1, r22
    35c4:	17 06       	cpc	r1, r23
    35c6:	18 06       	cpc	r1, r24
    35c8:	09 06       	cpc	r0, r25
    35ca:	08 95       	ret

000035cc <__fp_pscB>:
    35cc:	00 24       	eor	r0, r0
    35ce:	0a 94       	dec	r0
    35d0:	12 16       	cp	r1, r18
    35d2:	13 06       	cpc	r1, r19
    35d4:	14 06       	cpc	r1, r20
    35d6:	05 06       	cpc	r0, r21
    35d8:	08 95       	ret

000035da <__fp_round>:
    35da:	09 2e       	mov	r0, r25
    35dc:	03 94       	inc	r0
    35de:	00 0c       	add	r0, r0
    35e0:	11 f4       	brne	.+4      	; 0x35e6 <__fp_round+0xc>
    35e2:	88 23       	and	r24, r24
    35e4:	52 f0       	brmi	.+20     	; 0x35fa <__fp_round+0x20>
    35e6:	bb 0f       	add	r27, r27
    35e8:	40 f4       	brcc	.+16     	; 0x35fa <__fp_round+0x20>
    35ea:	bf 2b       	or	r27, r31
    35ec:	11 f4       	brne	.+4      	; 0x35f2 <__fp_round+0x18>
    35ee:	60 ff       	sbrs	r22, 0
    35f0:	04 c0       	rjmp	.+8      	; 0x35fa <__fp_round+0x20>
    35f2:	6f 5f       	subi	r22, 0xFF	; 255
    35f4:	7f 4f       	sbci	r23, 0xFF	; 255
    35f6:	8f 4f       	sbci	r24, 0xFF	; 255
    35f8:	9f 4f       	sbci	r25, 0xFF	; 255
    35fa:	08 95       	ret

000035fc <__fp_split3>:
    35fc:	57 fd       	sbrc	r21, 7
    35fe:	90 58       	subi	r25, 0x80	; 128
    3600:	44 0f       	add	r20, r20
    3602:	55 1f       	adc	r21, r21
    3604:	59 f0       	breq	.+22     	; 0x361c <__fp_splitA+0x10>
    3606:	5f 3f       	cpi	r21, 0xFF	; 255
    3608:	71 f0       	breq	.+28     	; 0x3626 <__fp_splitA+0x1a>
    360a:	47 95       	ror	r20

0000360c <__fp_splitA>:
    360c:	88 0f       	add	r24, r24
    360e:	97 fb       	bst	r25, 7
    3610:	99 1f       	adc	r25, r25
    3612:	61 f0       	breq	.+24     	; 0x362c <__fp_splitA+0x20>
    3614:	9f 3f       	cpi	r25, 0xFF	; 255
    3616:	79 f0       	breq	.+30     	; 0x3636 <__fp_splitA+0x2a>
    3618:	87 95       	ror	r24
    361a:	08 95       	ret
    361c:	12 16       	cp	r1, r18
    361e:	13 06       	cpc	r1, r19
    3620:	14 06       	cpc	r1, r20
    3622:	55 1f       	adc	r21, r21
    3624:	f2 cf       	rjmp	.-28     	; 0x360a <__fp_split3+0xe>
    3626:	46 95       	lsr	r20
    3628:	f1 df       	rcall	.-30     	; 0x360c <__fp_splitA>
    362a:	08 c0       	rjmp	.+16     	; 0x363c <__fp_splitA+0x30>
    362c:	16 16       	cp	r1, r22
    362e:	17 06       	cpc	r1, r23
    3630:	18 06       	cpc	r1, r24
    3632:	99 1f       	adc	r25, r25
    3634:	f1 cf       	rjmp	.-30     	; 0x3618 <__fp_splitA+0xc>
    3636:	86 95       	lsr	r24
    3638:	71 05       	cpc	r23, r1
    363a:	61 05       	cpc	r22, r1
    363c:	08 94       	sec
    363e:	08 95       	ret

00003640 <__fp_zero>:
    3640:	e8 94       	clt

00003642 <__fp_szero>:
    3642:	bb 27       	eor	r27, r27
    3644:	66 27       	eor	r22, r22
    3646:	77 27       	eor	r23, r23
    3648:	cb 01       	movw	r24, r22
    364a:	97 f9       	bld	r25, 7
    364c:	08 95       	ret

0000364e <__gesf2>:
    364e:	0e 94 77 1a 	call	0x34ee	; 0x34ee <__fp_cmp>
    3652:	08 f4       	brcc	.+2      	; 0x3656 <__gesf2+0x8>
    3654:	8f ef       	ldi	r24, 0xFF	; 255
    3656:	08 95       	ret

00003658 <inverse>:
    3658:	9b 01       	movw	r18, r22
    365a:	ac 01       	movw	r20, r24
    365c:	60 e0       	ldi	r22, 0x00	; 0
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	80 e8       	ldi	r24, 0x80	; 128
    3662:	9f e3       	ldi	r25, 0x3F	; 63
    3664:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__divsf3>

00003668 <__mulsf3>:
    3668:	0e 94 47 1b 	call	0x368e	; 0x368e <__mulsf3x>
    366c:	0c 94 ed 1a 	jmp	0x35da	; 0x35da <__fp_round>
    3670:	0e 94 df 1a 	call	0x35be	; 0x35be <__fp_pscA>
    3674:	38 f0       	brcs	.+14     	; 0x3684 <__mulsf3+0x1c>
    3676:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <__fp_pscB>
    367a:	20 f0       	brcs	.+8      	; 0x3684 <__mulsf3+0x1c>
    367c:	95 23       	and	r25, r21
    367e:	11 f0       	breq	.+4      	; 0x3684 <__mulsf3+0x1c>
    3680:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__fp_inf>
    3684:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_nan>
    3688:	11 24       	eor	r1, r1
    368a:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__fp_szero>

0000368e <__mulsf3x>:
    368e:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <__fp_split3>
    3692:	70 f3       	brcs	.-36     	; 0x3670 <__mulsf3+0x8>

00003694 <__mulsf3_pse>:
    3694:	95 9f       	mul	r25, r21
    3696:	c1 f3       	breq	.-16     	; 0x3688 <__mulsf3+0x20>
    3698:	95 0f       	add	r25, r21
    369a:	50 e0       	ldi	r21, 0x00	; 0
    369c:	55 1f       	adc	r21, r21
    369e:	62 9f       	mul	r22, r18
    36a0:	f0 01       	movw	r30, r0
    36a2:	72 9f       	mul	r23, r18
    36a4:	bb 27       	eor	r27, r27
    36a6:	f0 0d       	add	r31, r0
    36a8:	b1 1d       	adc	r27, r1
    36aa:	63 9f       	mul	r22, r19
    36ac:	aa 27       	eor	r26, r26
    36ae:	f0 0d       	add	r31, r0
    36b0:	b1 1d       	adc	r27, r1
    36b2:	aa 1f       	adc	r26, r26
    36b4:	64 9f       	mul	r22, r20
    36b6:	66 27       	eor	r22, r22
    36b8:	b0 0d       	add	r27, r0
    36ba:	a1 1d       	adc	r26, r1
    36bc:	66 1f       	adc	r22, r22
    36be:	82 9f       	mul	r24, r18
    36c0:	22 27       	eor	r18, r18
    36c2:	b0 0d       	add	r27, r0
    36c4:	a1 1d       	adc	r26, r1
    36c6:	62 1f       	adc	r22, r18
    36c8:	73 9f       	mul	r23, r19
    36ca:	b0 0d       	add	r27, r0
    36cc:	a1 1d       	adc	r26, r1
    36ce:	62 1f       	adc	r22, r18
    36d0:	83 9f       	mul	r24, r19
    36d2:	a0 0d       	add	r26, r0
    36d4:	61 1d       	adc	r22, r1
    36d6:	22 1f       	adc	r18, r18
    36d8:	74 9f       	mul	r23, r20
    36da:	33 27       	eor	r19, r19
    36dc:	a0 0d       	add	r26, r0
    36de:	61 1d       	adc	r22, r1
    36e0:	23 1f       	adc	r18, r19
    36e2:	84 9f       	mul	r24, r20
    36e4:	60 0d       	add	r22, r0
    36e6:	21 1d       	adc	r18, r1
    36e8:	82 2f       	mov	r24, r18
    36ea:	76 2f       	mov	r23, r22
    36ec:	6a 2f       	mov	r22, r26
    36ee:	11 24       	eor	r1, r1
    36f0:	9f 57       	subi	r25, 0x7F	; 127
    36f2:	50 40       	sbci	r21, 0x00	; 0
    36f4:	9a f0       	brmi	.+38     	; 0x371c <__mulsf3_pse+0x88>
    36f6:	f1 f0       	breq	.+60     	; 0x3734 <__mulsf3_pse+0xa0>
    36f8:	88 23       	and	r24, r24
    36fa:	4a f0       	brmi	.+18     	; 0x370e <__mulsf3_pse+0x7a>
    36fc:	ee 0f       	add	r30, r30
    36fe:	ff 1f       	adc	r31, r31
    3700:	bb 1f       	adc	r27, r27
    3702:	66 1f       	adc	r22, r22
    3704:	77 1f       	adc	r23, r23
    3706:	88 1f       	adc	r24, r24
    3708:	91 50       	subi	r25, 0x01	; 1
    370a:	50 40       	sbci	r21, 0x00	; 0
    370c:	a9 f7       	brne	.-22     	; 0x36f8 <__mulsf3_pse+0x64>
    370e:	9e 3f       	cpi	r25, 0xFE	; 254
    3710:	51 05       	cpc	r21, r1
    3712:	80 f0       	brcs	.+32     	; 0x3734 <__mulsf3_pse+0xa0>
    3714:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__fp_inf>
    3718:	0c 94 21 1b 	jmp	0x3642	; 0x3642 <__fp_szero>
    371c:	5f 3f       	cpi	r21, 0xFF	; 255
    371e:	e4 f3       	brlt	.-8      	; 0x3718 <__mulsf3_pse+0x84>
    3720:	98 3e       	cpi	r25, 0xE8	; 232
    3722:	d4 f3       	brlt	.-12     	; 0x3718 <__mulsf3_pse+0x84>
    3724:	86 95       	lsr	r24
    3726:	77 95       	ror	r23
    3728:	67 95       	ror	r22
    372a:	b7 95       	ror	r27
    372c:	f7 95       	ror	r31
    372e:	e7 95       	ror	r30
    3730:	9f 5f       	subi	r25, 0xFF	; 255
    3732:	c1 f7       	brne	.-16     	; 0x3724 <__mulsf3_pse+0x90>
    3734:	fe 2b       	or	r31, r30
    3736:	88 0f       	add	r24, r24
    3738:	91 1d       	adc	r25, r1
    373a:	96 95       	lsr	r25
    373c:	87 95       	ror	r24
    373e:	97 f9       	bld	r25, 7
    3740:	08 95       	ret
    3742:	19 f4       	brne	.+6      	; 0x374a <__mulsf3_pse+0xb6>
    3744:	16 f4       	brtc	.+4      	; 0x374a <__mulsf3_pse+0xb6>
    3746:	0c 94 a1 1a 	jmp	0x3542	; 0x3542 <__fp_nan>
    374a:	0c 94 eb 1b 	jmp	0x37d6	; 0x37d6 <__fp_mpack>

0000374e <sqrt>:
    374e:	0e 94 06 1b 	call	0x360c	; 0x360c <__fp_splitA>
    3752:	b8 f3       	brcs	.-18     	; 0x3742 <__mulsf3_pse+0xae>
    3754:	99 23       	and	r25, r25
    3756:	c9 f3       	breq	.-14     	; 0x374a <__mulsf3_pse+0xb6>
    3758:	b6 f3       	brts	.-20     	; 0x3746 <__mulsf3_pse+0xb2>
    375a:	9f 57       	subi	r25, 0x7F	; 127
    375c:	55 0b       	sbc	r21, r21
    375e:	87 ff       	sbrs	r24, 7
    3760:	0e 94 f9 1b 	call	0x37f2	; 0x37f2 <__fp_norm2>
    3764:	00 24       	eor	r0, r0
    3766:	a0 e6       	ldi	r26, 0x60	; 96
    3768:	40 ea       	ldi	r20, 0xA0	; 160
    376a:	90 01       	movw	r18, r0
    376c:	80 58       	subi	r24, 0x80	; 128
    376e:	56 95       	lsr	r21
    3770:	97 95       	ror	r25
    3772:	28 f4       	brcc	.+10     	; 0x377e <sqrt+0x30>
    3774:	80 5c       	subi	r24, 0xC0	; 192
    3776:	66 0f       	add	r22, r22
    3778:	77 1f       	adc	r23, r23
    377a:	88 1f       	adc	r24, r24
    377c:	20 f0       	brcs	.+8      	; 0x3786 <sqrt+0x38>
    377e:	26 17       	cp	r18, r22
    3780:	37 07       	cpc	r19, r23
    3782:	48 07       	cpc	r20, r24
    3784:	30 f4       	brcc	.+12     	; 0x3792 <sqrt+0x44>
    3786:	62 1b       	sub	r22, r18
    3788:	73 0b       	sbc	r23, r19
    378a:	84 0b       	sbc	r24, r20
    378c:	20 29       	or	r18, r0
    378e:	31 29       	or	r19, r1
    3790:	4a 2b       	or	r20, r26
    3792:	a6 95       	lsr	r26
    3794:	17 94       	ror	r1
    3796:	07 94       	ror	r0
    3798:	20 25       	eor	r18, r0
    379a:	31 25       	eor	r19, r1
    379c:	4a 27       	eor	r20, r26
    379e:	58 f7       	brcc	.-42     	; 0x3776 <sqrt+0x28>
    37a0:	66 0f       	add	r22, r22
    37a2:	77 1f       	adc	r23, r23
    37a4:	88 1f       	adc	r24, r24
    37a6:	20 f0       	brcs	.+8      	; 0x37b0 <sqrt+0x62>
    37a8:	26 17       	cp	r18, r22
    37aa:	37 07       	cpc	r19, r23
    37ac:	48 07       	cpc	r20, r24
    37ae:	30 f4       	brcc	.+12     	; 0x37bc <sqrt+0x6e>
    37b0:	62 0b       	sbc	r22, r18
    37b2:	73 0b       	sbc	r23, r19
    37b4:	84 0b       	sbc	r24, r20
    37b6:	20 0d       	add	r18, r0
    37b8:	31 1d       	adc	r19, r1
    37ba:	41 1d       	adc	r20, r1
    37bc:	a0 95       	com	r26
    37be:	81 f7       	brne	.-32     	; 0x37a0 <sqrt+0x52>
    37c0:	b9 01       	movw	r22, r18
    37c2:	84 2f       	mov	r24, r20
    37c4:	91 58       	subi	r25, 0x81	; 129
    37c6:	88 0f       	add	r24, r24
    37c8:	96 95       	lsr	r25
    37ca:	87 95       	ror	r24
    37cc:	08 95       	ret

000037ce <square>:
    37ce:	9b 01       	movw	r18, r22
    37d0:	ac 01       	movw	r20, r24
    37d2:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__mulsf3>

000037d6 <__fp_mpack>:
    37d6:	9f 3f       	cpi	r25, 0xFF	; 255
    37d8:	31 f0       	breq	.+12     	; 0x37e6 <__fp_mpack_finite+0xc>

000037da <__fp_mpack_finite>:
    37da:	91 50       	subi	r25, 0x01	; 1
    37dc:	20 f4       	brcc	.+8      	; 0x37e6 <__fp_mpack_finite+0xc>
    37de:	87 95       	ror	r24
    37e0:	77 95       	ror	r23
    37e2:	67 95       	ror	r22
    37e4:	b7 95       	ror	r27
    37e6:	88 0f       	add	r24, r24
    37e8:	91 1d       	adc	r25, r1
    37ea:	96 95       	lsr	r25
    37ec:	87 95       	ror	r24
    37ee:	97 f9       	bld	r25, 7
    37f0:	08 95       	ret

000037f2 <__fp_norm2>:
    37f2:	91 50       	subi	r25, 0x01	; 1
    37f4:	50 40       	sbci	r21, 0x00	; 0
    37f6:	66 0f       	add	r22, r22
    37f8:	77 1f       	adc	r23, r23
    37fa:	88 1f       	adc	r24, r24
    37fc:	d2 f7       	brpl	.-12     	; 0x37f2 <__fp_norm2>
    37fe:	08 95       	ret

00003800 <vfprintf>:
    3800:	a0 e1       	ldi	r26, 0x10	; 16
    3802:	b0 e0       	ldi	r27, 0x00	; 0
    3804:	e6 e0       	ldi	r30, 0x06	; 6
    3806:	fc e1       	ldi	r31, 0x1C	; 28
    3808:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__prologue_saves__>
    380c:	7c 01       	movw	r14, r24
    380e:	1b 01       	movw	r2, r22
    3810:	6a 01       	movw	r12, r20
    3812:	fc 01       	movw	r30, r24
    3814:	17 82       	std	Z+7, r1	; 0x07
    3816:	16 82       	std	Z+6, r1	; 0x06
    3818:	83 81       	ldd	r24, Z+3	; 0x03
    381a:	81 ff       	sbrs	r24, 1
    381c:	44 c3       	rjmp	.+1672   	; 0x3ea6 <vfprintf+0x6a6>
    381e:	9e 01       	movw	r18, r28
    3820:	2f 5f       	subi	r18, 0xFF	; 255
    3822:	3f 4f       	sbci	r19, 0xFF	; 255
    3824:	39 01       	movw	r6, r18
    3826:	f7 01       	movw	r30, r14
    3828:	93 81       	ldd	r25, Z+3	; 0x03
    382a:	f1 01       	movw	r30, r2
    382c:	93 fd       	sbrc	r25, 3
    382e:	85 91       	lpm	r24, Z+
    3830:	93 ff       	sbrs	r25, 3
    3832:	81 91       	ld	r24, Z+
    3834:	1f 01       	movw	r2, r30
    3836:	88 23       	and	r24, r24
    3838:	09 f4       	brne	.+2      	; 0x383c <vfprintf+0x3c>
    383a:	31 c3       	rjmp	.+1634   	; 0x3e9e <vfprintf+0x69e>
    383c:	85 32       	cpi	r24, 0x25	; 37
    383e:	39 f4       	brne	.+14     	; 0x384e <vfprintf+0x4e>
    3840:	93 fd       	sbrc	r25, 3
    3842:	85 91       	lpm	r24, Z+
    3844:	93 ff       	sbrs	r25, 3
    3846:	81 91       	ld	r24, Z+
    3848:	1f 01       	movw	r2, r30
    384a:	85 32       	cpi	r24, 0x25	; 37
    384c:	39 f4       	brne	.+14     	; 0x385c <vfprintf+0x5c>
    384e:	b7 01       	movw	r22, r14
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3856:	56 01       	movw	r10, r12
    3858:	65 01       	movw	r12, r10
    385a:	e5 cf       	rjmp	.-54     	; 0x3826 <vfprintf+0x26>
    385c:	10 e0       	ldi	r17, 0x00	; 0
    385e:	51 2c       	mov	r5, r1
    3860:	91 2c       	mov	r9, r1
    3862:	ff e1       	ldi	r31, 0x1F	; 31
    3864:	f9 15       	cp	r31, r9
    3866:	d8 f0       	brcs	.+54     	; 0x389e <vfprintf+0x9e>
    3868:	8b 32       	cpi	r24, 0x2B	; 43
    386a:	79 f0       	breq	.+30     	; 0x388a <vfprintf+0x8a>
    386c:	38 f4       	brcc	.+14     	; 0x387c <vfprintf+0x7c>
    386e:	80 32       	cpi	r24, 0x20	; 32
    3870:	79 f0       	breq	.+30     	; 0x3890 <vfprintf+0x90>
    3872:	83 32       	cpi	r24, 0x23	; 35
    3874:	a1 f4       	brne	.+40     	; 0x389e <vfprintf+0x9e>
    3876:	f9 2d       	mov	r31, r9
    3878:	f0 61       	ori	r31, 0x10	; 16
    387a:	2e c0       	rjmp	.+92     	; 0x38d8 <vfprintf+0xd8>
    387c:	8d 32       	cpi	r24, 0x2D	; 45
    387e:	61 f0       	breq	.+24     	; 0x3898 <vfprintf+0x98>
    3880:	80 33       	cpi	r24, 0x30	; 48
    3882:	69 f4       	brne	.+26     	; 0x389e <vfprintf+0x9e>
    3884:	29 2d       	mov	r18, r9
    3886:	21 60       	ori	r18, 0x01	; 1
    3888:	2d c0       	rjmp	.+90     	; 0x38e4 <vfprintf+0xe4>
    388a:	39 2d       	mov	r19, r9
    388c:	32 60       	ori	r19, 0x02	; 2
    388e:	93 2e       	mov	r9, r19
    3890:	89 2d       	mov	r24, r9
    3892:	84 60       	ori	r24, 0x04	; 4
    3894:	98 2e       	mov	r9, r24
    3896:	2a c0       	rjmp	.+84     	; 0x38ec <vfprintf+0xec>
    3898:	e9 2d       	mov	r30, r9
    389a:	e8 60       	ori	r30, 0x08	; 8
    389c:	15 c0       	rjmp	.+42     	; 0x38c8 <vfprintf+0xc8>
    389e:	97 fc       	sbrc	r9, 7
    38a0:	2d c0       	rjmp	.+90     	; 0x38fc <vfprintf+0xfc>
    38a2:	20 ed       	ldi	r18, 0xD0	; 208
    38a4:	28 0f       	add	r18, r24
    38a6:	2a 30       	cpi	r18, 0x0A	; 10
    38a8:	88 f4       	brcc	.+34     	; 0x38cc <vfprintf+0xcc>
    38aa:	96 fe       	sbrs	r9, 6
    38ac:	06 c0       	rjmp	.+12     	; 0x38ba <vfprintf+0xba>
    38ae:	3a e0       	ldi	r19, 0x0A	; 10
    38b0:	13 9f       	mul	r17, r19
    38b2:	20 0d       	add	r18, r0
    38b4:	11 24       	eor	r1, r1
    38b6:	12 2f       	mov	r17, r18
    38b8:	19 c0       	rjmp	.+50     	; 0x38ec <vfprintf+0xec>
    38ba:	8a e0       	ldi	r24, 0x0A	; 10
    38bc:	58 9e       	mul	r5, r24
    38be:	20 0d       	add	r18, r0
    38c0:	11 24       	eor	r1, r1
    38c2:	52 2e       	mov	r5, r18
    38c4:	e9 2d       	mov	r30, r9
    38c6:	e0 62       	ori	r30, 0x20	; 32
    38c8:	9e 2e       	mov	r9, r30
    38ca:	10 c0       	rjmp	.+32     	; 0x38ec <vfprintf+0xec>
    38cc:	8e 32       	cpi	r24, 0x2E	; 46
    38ce:	31 f4       	brne	.+12     	; 0x38dc <vfprintf+0xdc>
    38d0:	96 fc       	sbrc	r9, 6
    38d2:	e5 c2       	rjmp	.+1482   	; 0x3e9e <vfprintf+0x69e>
    38d4:	f9 2d       	mov	r31, r9
    38d6:	f0 64       	ori	r31, 0x40	; 64
    38d8:	9f 2e       	mov	r9, r31
    38da:	08 c0       	rjmp	.+16     	; 0x38ec <vfprintf+0xec>
    38dc:	8c 36       	cpi	r24, 0x6C	; 108
    38de:	21 f4       	brne	.+8      	; 0x38e8 <vfprintf+0xe8>
    38e0:	29 2d       	mov	r18, r9
    38e2:	20 68       	ori	r18, 0x80	; 128
    38e4:	92 2e       	mov	r9, r18
    38e6:	02 c0       	rjmp	.+4      	; 0x38ec <vfprintf+0xec>
    38e8:	88 36       	cpi	r24, 0x68	; 104
    38ea:	41 f4       	brne	.+16     	; 0x38fc <vfprintf+0xfc>
    38ec:	f1 01       	movw	r30, r2
    38ee:	93 fd       	sbrc	r25, 3
    38f0:	85 91       	lpm	r24, Z+
    38f2:	93 ff       	sbrs	r25, 3
    38f4:	81 91       	ld	r24, Z+
    38f6:	1f 01       	movw	r2, r30
    38f8:	81 11       	cpse	r24, r1
    38fa:	b3 cf       	rjmp	.-154    	; 0x3862 <vfprintf+0x62>
    38fc:	9b eb       	ldi	r25, 0xBB	; 187
    38fe:	98 0f       	add	r25, r24
    3900:	93 30       	cpi	r25, 0x03	; 3
    3902:	20 f4       	brcc	.+8      	; 0x390c <vfprintf+0x10c>
    3904:	99 2d       	mov	r25, r9
    3906:	90 61       	ori	r25, 0x10	; 16
    3908:	80 5e       	subi	r24, 0xE0	; 224
    390a:	07 c0       	rjmp	.+14     	; 0x391a <vfprintf+0x11a>
    390c:	9b e9       	ldi	r25, 0x9B	; 155
    390e:	98 0f       	add	r25, r24
    3910:	93 30       	cpi	r25, 0x03	; 3
    3912:	08 f0       	brcs	.+2      	; 0x3916 <vfprintf+0x116>
    3914:	66 c1       	rjmp	.+716    	; 0x3be2 <vfprintf+0x3e2>
    3916:	99 2d       	mov	r25, r9
    3918:	9f 7e       	andi	r25, 0xEF	; 239
    391a:	96 ff       	sbrs	r25, 6
    391c:	16 e0       	ldi	r17, 0x06	; 6
    391e:	9f 73       	andi	r25, 0x3F	; 63
    3920:	99 2e       	mov	r9, r25
    3922:	85 36       	cpi	r24, 0x65	; 101
    3924:	19 f4       	brne	.+6      	; 0x392c <vfprintf+0x12c>
    3926:	90 64       	ori	r25, 0x40	; 64
    3928:	99 2e       	mov	r9, r25
    392a:	08 c0       	rjmp	.+16     	; 0x393c <vfprintf+0x13c>
    392c:	86 36       	cpi	r24, 0x66	; 102
    392e:	21 f4       	brne	.+8      	; 0x3938 <vfprintf+0x138>
    3930:	39 2f       	mov	r19, r25
    3932:	30 68       	ori	r19, 0x80	; 128
    3934:	93 2e       	mov	r9, r19
    3936:	02 c0       	rjmp	.+4      	; 0x393c <vfprintf+0x13c>
    3938:	11 11       	cpse	r17, r1
    393a:	11 50       	subi	r17, 0x01	; 1
    393c:	97 fe       	sbrs	r9, 7
    393e:	07 c0       	rjmp	.+14     	; 0x394e <vfprintf+0x14e>
    3940:	1c 33       	cpi	r17, 0x3C	; 60
    3942:	50 f4       	brcc	.+20     	; 0x3958 <vfprintf+0x158>
    3944:	44 24       	eor	r4, r4
    3946:	43 94       	inc	r4
    3948:	41 0e       	add	r4, r17
    394a:	27 e0       	ldi	r18, 0x07	; 7
    394c:	0b c0       	rjmp	.+22     	; 0x3964 <vfprintf+0x164>
    394e:	18 30       	cpi	r17, 0x08	; 8
    3950:	38 f0       	brcs	.+14     	; 0x3960 <vfprintf+0x160>
    3952:	27 e0       	ldi	r18, 0x07	; 7
    3954:	17 e0       	ldi	r17, 0x07	; 7
    3956:	05 c0       	rjmp	.+10     	; 0x3962 <vfprintf+0x162>
    3958:	27 e0       	ldi	r18, 0x07	; 7
    395a:	9c e3       	ldi	r25, 0x3C	; 60
    395c:	49 2e       	mov	r4, r25
    395e:	02 c0       	rjmp	.+4      	; 0x3964 <vfprintf+0x164>
    3960:	21 2f       	mov	r18, r17
    3962:	41 2c       	mov	r4, r1
    3964:	56 01       	movw	r10, r12
    3966:	84 e0       	ldi	r24, 0x04	; 4
    3968:	a8 0e       	add	r10, r24
    396a:	b1 1c       	adc	r11, r1
    396c:	f6 01       	movw	r30, r12
    396e:	60 81       	ld	r22, Z
    3970:	71 81       	ldd	r23, Z+1	; 0x01
    3972:	82 81       	ldd	r24, Z+2	; 0x02
    3974:	93 81       	ldd	r25, Z+3	; 0x03
    3976:	04 2d       	mov	r16, r4
    3978:	a3 01       	movw	r20, r6
    397a:	0e 94 db 20 	call	0x41b6	; 0x41b6 <__ftoa_engine>
    397e:	6c 01       	movw	r12, r24
    3980:	f9 81       	ldd	r31, Y+1	; 0x01
    3982:	fc 87       	std	Y+12, r31	; 0x0c
    3984:	f0 ff       	sbrs	r31, 0
    3986:	02 c0       	rjmp	.+4      	; 0x398c <vfprintf+0x18c>
    3988:	f3 ff       	sbrs	r31, 3
    398a:	06 c0       	rjmp	.+12     	; 0x3998 <vfprintf+0x198>
    398c:	91 fc       	sbrc	r9, 1
    398e:	06 c0       	rjmp	.+12     	; 0x399c <vfprintf+0x19c>
    3990:	92 fe       	sbrs	r9, 2
    3992:	06 c0       	rjmp	.+12     	; 0x39a0 <vfprintf+0x1a0>
    3994:	00 e2       	ldi	r16, 0x20	; 32
    3996:	05 c0       	rjmp	.+10     	; 0x39a2 <vfprintf+0x1a2>
    3998:	0d e2       	ldi	r16, 0x2D	; 45
    399a:	03 c0       	rjmp	.+6      	; 0x39a2 <vfprintf+0x1a2>
    399c:	0b e2       	ldi	r16, 0x2B	; 43
    399e:	01 c0       	rjmp	.+2      	; 0x39a2 <vfprintf+0x1a2>
    39a0:	00 e0       	ldi	r16, 0x00	; 0
    39a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    39a4:	8c 70       	andi	r24, 0x0C	; 12
    39a6:	19 f0       	breq	.+6      	; 0x39ae <vfprintf+0x1ae>
    39a8:	01 11       	cpse	r16, r1
    39aa:	5a c2       	rjmp	.+1204   	; 0x3e60 <vfprintf+0x660>
    39ac:	9b c2       	rjmp	.+1334   	; 0x3ee4 <vfprintf+0x6e4>
    39ae:	97 fe       	sbrs	r9, 7
    39b0:	10 c0       	rjmp	.+32     	; 0x39d2 <vfprintf+0x1d2>
    39b2:	4c 0c       	add	r4, r12
    39b4:	fc 85       	ldd	r31, Y+12	; 0x0c
    39b6:	f4 ff       	sbrs	r31, 4
    39b8:	04 c0       	rjmp	.+8      	; 0x39c2 <vfprintf+0x1c2>
    39ba:	8a 81       	ldd	r24, Y+2	; 0x02
    39bc:	81 33       	cpi	r24, 0x31	; 49
    39be:	09 f4       	brne	.+2      	; 0x39c2 <vfprintf+0x1c2>
    39c0:	4a 94       	dec	r4
    39c2:	14 14       	cp	r1, r4
    39c4:	74 f5       	brge	.+92     	; 0x3a22 <vfprintf+0x222>
    39c6:	28 e0       	ldi	r18, 0x08	; 8
    39c8:	24 15       	cp	r18, r4
    39ca:	78 f5       	brcc	.+94     	; 0x3a2a <vfprintf+0x22a>
    39cc:	88 e0       	ldi	r24, 0x08	; 8
    39ce:	48 2e       	mov	r4, r24
    39d0:	2c c0       	rjmp	.+88     	; 0x3a2a <vfprintf+0x22a>
    39d2:	96 fc       	sbrc	r9, 6
    39d4:	2a c0       	rjmp	.+84     	; 0x3a2a <vfprintf+0x22a>
    39d6:	81 2f       	mov	r24, r17
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	8c 15       	cp	r24, r12
    39dc:	9d 05       	cpc	r25, r13
    39de:	9c f0       	brlt	.+38     	; 0x3a06 <vfprintf+0x206>
    39e0:	3c ef       	ldi	r19, 0xFC	; 252
    39e2:	c3 16       	cp	r12, r19
    39e4:	3f ef       	ldi	r19, 0xFF	; 255
    39e6:	d3 06       	cpc	r13, r19
    39e8:	74 f0       	brlt	.+28     	; 0x3a06 <vfprintf+0x206>
    39ea:	89 2d       	mov	r24, r9
    39ec:	80 68       	ori	r24, 0x80	; 128
    39ee:	98 2e       	mov	r9, r24
    39f0:	0a c0       	rjmp	.+20     	; 0x3a06 <vfprintf+0x206>
    39f2:	e2 e0       	ldi	r30, 0x02	; 2
    39f4:	f0 e0       	ldi	r31, 0x00	; 0
    39f6:	ec 0f       	add	r30, r28
    39f8:	fd 1f       	adc	r31, r29
    39fa:	e1 0f       	add	r30, r17
    39fc:	f1 1d       	adc	r31, r1
    39fe:	80 81       	ld	r24, Z
    3a00:	80 33       	cpi	r24, 0x30	; 48
    3a02:	19 f4       	brne	.+6      	; 0x3a0a <vfprintf+0x20a>
    3a04:	11 50       	subi	r17, 0x01	; 1
    3a06:	11 11       	cpse	r17, r1
    3a08:	f4 cf       	rjmp	.-24     	; 0x39f2 <vfprintf+0x1f2>
    3a0a:	97 fe       	sbrs	r9, 7
    3a0c:	0e c0       	rjmp	.+28     	; 0x3a2a <vfprintf+0x22a>
    3a0e:	44 24       	eor	r4, r4
    3a10:	43 94       	inc	r4
    3a12:	41 0e       	add	r4, r17
    3a14:	81 2f       	mov	r24, r17
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	c8 16       	cp	r12, r24
    3a1a:	d9 06       	cpc	r13, r25
    3a1c:	2c f4       	brge	.+10     	; 0x3a28 <vfprintf+0x228>
    3a1e:	1c 19       	sub	r17, r12
    3a20:	04 c0       	rjmp	.+8      	; 0x3a2a <vfprintf+0x22a>
    3a22:	44 24       	eor	r4, r4
    3a24:	43 94       	inc	r4
    3a26:	01 c0       	rjmp	.+2      	; 0x3a2a <vfprintf+0x22a>
    3a28:	10 e0       	ldi	r17, 0x00	; 0
    3a2a:	97 fe       	sbrs	r9, 7
    3a2c:	06 c0       	rjmp	.+12     	; 0x3a3a <vfprintf+0x23a>
    3a2e:	1c 14       	cp	r1, r12
    3a30:	1d 04       	cpc	r1, r13
    3a32:	34 f4       	brge	.+12     	; 0x3a40 <vfprintf+0x240>
    3a34:	c6 01       	movw	r24, r12
    3a36:	01 96       	adiw	r24, 0x01	; 1
    3a38:	05 c0       	rjmp	.+10     	; 0x3a44 <vfprintf+0x244>
    3a3a:	85 e0       	ldi	r24, 0x05	; 5
    3a3c:	90 e0       	ldi	r25, 0x00	; 0
    3a3e:	02 c0       	rjmp	.+4      	; 0x3a44 <vfprintf+0x244>
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	01 11       	cpse	r16, r1
    3a46:	01 96       	adiw	r24, 0x01	; 1
    3a48:	11 23       	and	r17, r17
    3a4a:	31 f0       	breq	.+12     	; 0x3a58 <vfprintf+0x258>
    3a4c:	21 2f       	mov	r18, r17
    3a4e:	30 e0       	ldi	r19, 0x00	; 0
    3a50:	2f 5f       	subi	r18, 0xFF	; 255
    3a52:	3f 4f       	sbci	r19, 0xFF	; 255
    3a54:	82 0f       	add	r24, r18
    3a56:	93 1f       	adc	r25, r19
    3a58:	25 2d       	mov	r18, r5
    3a5a:	30 e0       	ldi	r19, 0x00	; 0
    3a5c:	82 17       	cp	r24, r18
    3a5e:	93 07       	cpc	r25, r19
    3a60:	14 f4       	brge	.+4      	; 0x3a66 <vfprintf+0x266>
    3a62:	58 1a       	sub	r5, r24
    3a64:	01 c0       	rjmp	.+2      	; 0x3a68 <vfprintf+0x268>
    3a66:	51 2c       	mov	r5, r1
    3a68:	89 2d       	mov	r24, r9
    3a6a:	89 70       	andi	r24, 0x09	; 9
    3a6c:	49 f4       	brne	.+18     	; 0x3a80 <vfprintf+0x280>
    3a6e:	55 20       	and	r5, r5
    3a70:	39 f0       	breq	.+14     	; 0x3a80 <vfprintf+0x280>
    3a72:	b7 01       	movw	r22, r14
    3a74:	80 e2       	ldi	r24, 0x20	; 32
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3a7c:	5a 94       	dec	r5
    3a7e:	f7 cf       	rjmp	.-18     	; 0x3a6e <vfprintf+0x26e>
    3a80:	00 23       	and	r16, r16
    3a82:	29 f0       	breq	.+10     	; 0x3a8e <vfprintf+0x28e>
    3a84:	b7 01       	movw	r22, r14
    3a86:	80 2f       	mov	r24, r16
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3a8e:	93 fc       	sbrc	r9, 3
    3a90:	09 c0       	rjmp	.+18     	; 0x3aa4 <vfprintf+0x2a4>
    3a92:	55 20       	and	r5, r5
    3a94:	39 f0       	breq	.+14     	; 0x3aa4 <vfprintf+0x2a4>
    3a96:	b7 01       	movw	r22, r14
    3a98:	80 e3       	ldi	r24, 0x30	; 48
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3aa0:	5a 94       	dec	r5
    3aa2:	f7 cf       	rjmp	.-18     	; 0x3a92 <vfprintf+0x292>
    3aa4:	97 fe       	sbrs	r9, 7
    3aa6:	4c c0       	rjmp	.+152    	; 0x3b40 <vfprintf+0x340>
    3aa8:	46 01       	movw	r8, r12
    3aaa:	d7 fe       	sbrs	r13, 7
    3aac:	02 c0       	rjmp	.+4      	; 0x3ab2 <vfprintf+0x2b2>
    3aae:	81 2c       	mov	r8, r1
    3ab0:	91 2c       	mov	r9, r1
    3ab2:	c6 01       	movw	r24, r12
    3ab4:	88 19       	sub	r24, r8
    3ab6:	99 09       	sbc	r25, r9
    3ab8:	f3 01       	movw	r30, r6
    3aba:	e8 0f       	add	r30, r24
    3abc:	f9 1f       	adc	r31, r25
    3abe:	fe 87       	std	Y+14, r31	; 0x0e
    3ac0:	ed 87       	std	Y+13, r30	; 0x0d
    3ac2:	96 01       	movw	r18, r12
    3ac4:	24 19       	sub	r18, r4
    3ac6:	31 09       	sbc	r19, r1
    3ac8:	38 8b       	std	Y+16, r19	; 0x10
    3aca:	2f 87       	std	Y+15, r18	; 0x0f
    3acc:	01 2f       	mov	r16, r17
    3ace:	10 e0       	ldi	r17, 0x00	; 0
    3ad0:	11 95       	neg	r17
    3ad2:	01 95       	neg	r16
    3ad4:	11 09       	sbc	r17, r1
    3ad6:	3f ef       	ldi	r19, 0xFF	; 255
    3ad8:	83 16       	cp	r8, r19
    3ada:	93 06       	cpc	r9, r19
    3adc:	29 f4       	brne	.+10     	; 0x3ae8 <vfprintf+0x2e8>
    3ade:	b7 01       	movw	r22, r14
    3ae0:	8e e2       	ldi	r24, 0x2E	; 46
    3ae2:	90 e0       	ldi	r25, 0x00	; 0
    3ae4:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3ae8:	c8 14       	cp	r12, r8
    3aea:	d9 04       	cpc	r13, r9
    3aec:	4c f0       	brlt	.+18     	; 0x3b00 <vfprintf+0x300>
    3aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    3af0:	98 89       	ldd	r25, Y+16	; 0x10
    3af2:	88 15       	cp	r24, r8
    3af4:	99 05       	cpc	r25, r9
    3af6:	24 f4       	brge	.+8      	; 0x3b00 <vfprintf+0x300>
    3af8:	ed 85       	ldd	r30, Y+13	; 0x0d
    3afa:	fe 85       	ldd	r31, Y+14	; 0x0e
    3afc:	81 81       	ldd	r24, Z+1	; 0x01
    3afe:	01 c0       	rjmp	.+2      	; 0x3b02 <vfprintf+0x302>
    3b00:	80 e3       	ldi	r24, 0x30	; 48
    3b02:	f1 e0       	ldi	r31, 0x01	; 1
    3b04:	8f 1a       	sub	r8, r31
    3b06:	91 08       	sbc	r9, r1
    3b08:	2d 85       	ldd	r18, Y+13	; 0x0d
    3b0a:	3e 85       	ldd	r19, Y+14	; 0x0e
    3b0c:	2f 5f       	subi	r18, 0xFF	; 255
    3b0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3b10:	3e 87       	std	Y+14, r19	; 0x0e
    3b12:	2d 87       	std	Y+13, r18	; 0x0d
    3b14:	80 16       	cp	r8, r16
    3b16:	91 06       	cpc	r9, r17
    3b18:	2c f0       	brlt	.+10     	; 0x3b24 <vfprintf+0x324>
    3b1a:	b7 01       	movw	r22, r14
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3b22:	d9 cf       	rjmp	.-78     	; 0x3ad6 <vfprintf+0x2d6>
    3b24:	c8 14       	cp	r12, r8
    3b26:	d9 04       	cpc	r13, r9
    3b28:	41 f4       	brne	.+16     	; 0x3b3a <vfprintf+0x33a>
    3b2a:	9a 81       	ldd	r25, Y+2	; 0x02
    3b2c:	96 33       	cpi	r25, 0x36	; 54
    3b2e:	20 f4       	brcc	.+8      	; 0x3b38 <vfprintf+0x338>
    3b30:	95 33       	cpi	r25, 0x35	; 53
    3b32:	19 f4       	brne	.+6      	; 0x3b3a <vfprintf+0x33a>
    3b34:	3c 85       	ldd	r19, Y+12	; 0x0c
    3b36:	34 ff       	sbrs	r19, 4
    3b38:	81 e3       	ldi	r24, 0x31	; 49
    3b3a:	b7 01       	movw	r22, r14
    3b3c:	90 e0       	ldi	r25, 0x00	; 0
    3b3e:	4e c0       	rjmp	.+156    	; 0x3bdc <vfprintf+0x3dc>
    3b40:	8a 81       	ldd	r24, Y+2	; 0x02
    3b42:	81 33       	cpi	r24, 0x31	; 49
    3b44:	19 f0       	breq	.+6      	; 0x3b4c <vfprintf+0x34c>
    3b46:	9c 85       	ldd	r25, Y+12	; 0x0c
    3b48:	9f 7e       	andi	r25, 0xEF	; 239
    3b4a:	9c 87       	std	Y+12, r25	; 0x0c
    3b4c:	b7 01       	movw	r22, r14
    3b4e:	90 e0       	ldi	r25, 0x00	; 0
    3b50:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3b54:	11 11       	cpse	r17, r1
    3b56:	05 c0       	rjmp	.+10     	; 0x3b62 <vfprintf+0x362>
    3b58:	94 fc       	sbrc	r9, 4
    3b5a:	18 c0       	rjmp	.+48     	; 0x3b8c <vfprintf+0x38c>
    3b5c:	85 e6       	ldi	r24, 0x65	; 101
    3b5e:	90 e0       	ldi	r25, 0x00	; 0
    3b60:	17 c0       	rjmp	.+46     	; 0x3b90 <vfprintf+0x390>
    3b62:	b7 01       	movw	r22, r14
    3b64:	8e e2       	ldi	r24, 0x2E	; 46
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3b6c:	1e 5f       	subi	r17, 0xFE	; 254
    3b6e:	82 e0       	ldi	r24, 0x02	; 2
    3b70:	01 e0       	ldi	r16, 0x01	; 1
    3b72:	08 0f       	add	r16, r24
    3b74:	f3 01       	movw	r30, r6
    3b76:	e8 0f       	add	r30, r24
    3b78:	f1 1d       	adc	r31, r1
    3b7a:	80 81       	ld	r24, Z
    3b7c:	b7 01       	movw	r22, r14
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3b84:	80 2f       	mov	r24, r16
    3b86:	01 13       	cpse	r16, r17
    3b88:	f3 cf       	rjmp	.-26     	; 0x3b70 <vfprintf+0x370>
    3b8a:	e6 cf       	rjmp	.-52     	; 0x3b58 <vfprintf+0x358>
    3b8c:	85 e4       	ldi	r24, 0x45	; 69
    3b8e:	90 e0       	ldi	r25, 0x00	; 0
    3b90:	b7 01       	movw	r22, r14
    3b92:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3b96:	d7 fc       	sbrc	r13, 7
    3b98:	06 c0       	rjmp	.+12     	; 0x3ba6 <vfprintf+0x3a6>
    3b9a:	c1 14       	cp	r12, r1
    3b9c:	d1 04       	cpc	r13, r1
    3b9e:	41 f4       	brne	.+16     	; 0x3bb0 <vfprintf+0x3b0>
    3ba0:	ec 85       	ldd	r30, Y+12	; 0x0c
    3ba2:	e4 ff       	sbrs	r30, 4
    3ba4:	05 c0       	rjmp	.+10     	; 0x3bb0 <vfprintf+0x3b0>
    3ba6:	d1 94       	neg	r13
    3ba8:	c1 94       	neg	r12
    3baa:	d1 08       	sbc	r13, r1
    3bac:	8d e2       	ldi	r24, 0x2D	; 45
    3bae:	01 c0       	rjmp	.+2      	; 0x3bb2 <vfprintf+0x3b2>
    3bb0:	8b e2       	ldi	r24, 0x2B	; 43
    3bb2:	b7 01       	movw	r22, r14
    3bb4:	90 e0       	ldi	r25, 0x00	; 0
    3bb6:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3bba:	80 e3       	ldi	r24, 0x30	; 48
    3bbc:	2a e0       	ldi	r18, 0x0A	; 10
    3bbe:	c2 16       	cp	r12, r18
    3bc0:	d1 04       	cpc	r13, r1
    3bc2:	2c f0       	brlt	.+10     	; 0x3bce <vfprintf+0x3ce>
    3bc4:	8f 5f       	subi	r24, 0xFF	; 255
    3bc6:	fa e0       	ldi	r31, 0x0A	; 10
    3bc8:	cf 1a       	sub	r12, r31
    3bca:	d1 08       	sbc	r13, r1
    3bcc:	f7 cf       	rjmp	.-18     	; 0x3bbc <vfprintf+0x3bc>
    3bce:	b7 01       	movw	r22, r14
    3bd0:	90 e0       	ldi	r25, 0x00	; 0
    3bd2:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3bd6:	b7 01       	movw	r22, r14
    3bd8:	c6 01       	movw	r24, r12
    3bda:	c0 96       	adiw	r24, 0x30	; 48
    3bdc:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3be0:	54 c1       	rjmp	.+680    	; 0x3e8a <vfprintf+0x68a>
    3be2:	83 36       	cpi	r24, 0x63	; 99
    3be4:	31 f0       	breq	.+12     	; 0x3bf2 <vfprintf+0x3f2>
    3be6:	83 37       	cpi	r24, 0x73	; 115
    3be8:	79 f0       	breq	.+30     	; 0x3c08 <vfprintf+0x408>
    3bea:	83 35       	cpi	r24, 0x53	; 83
    3bec:	09 f0       	breq	.+2      	; 0x3bf0 <vfprintf+0x3f0>
    3bee:	56 c0       	rjmp	.+172    	; 0x3c9c <vfprintf+0x49c>
    3bf0:	20 c0       	rjmp	.+64     	; 0x3c32 <vfprintf+0x432>
    3bf2:	56 01       	movw	r10, r12
    3bf4:	32 e0       	ldi	r19, 0x02	; 2
    3bf6:	a3 0e       	add	r10, r19
    3bf8:	b1 1c       	adc	r11, r1
    3bfa:	f6 01       	movw	r30, r12
    3bfc:	80 81       	ld	r24, Z
    3bfe:	89 83       	std	Y+1, r24	; 0x01
    3c00:	01 e0       	ldi	r16, 0x01	; 1
    3c02:	10 e0       	ldi	r17, 0x00	; 0
    3c04:	63 01       	movw	r12, r6
    3c06:	12 c0       	rjmp	.+36     	; 0x3c2c <vfprintf+0x42c>
    3c08:	56 01       	movw	r10, r12
    3c0a:	f2 e0       	ldi	r31, 0x02	; 2
    3c0c:	af 0e       	add	r10, r31
    3c0e:	b1 1c       	adc	r11, r1
    3c10:	f6 01       	movw	r30, r12
    3c12:	c0 80       	ld	r12, Z
    3c14:	d1 80       	ldd	r13, Z+1	; 0x01
    3c16:	96 fe       	sbrs	r9, 6
    3c18:	03 c0       	rjmp	.+6      	; 0x3c20 <vfprintf+0x420>
    3c1a:	61 2f       	mov	r22, r17
    3c1c:	70 e0       	ldi	r23, 0x00	; 0
    3c1e:	02 c0       	rjmp	.+4      	; 0x3c24 <vfprintf+0x424>
    3c20:	6f ef       	ldi	r22, 0xFF	; 255
    3c22:	7f ef       	ldi	r23, 0xFF	; 255
    3c24:	c6 01       	movw	r24, r12
    3c26:	0e 94 ce 21 	call	0x439c	; 0x439c <strnlen>
    3c2a:	8c 01       	movw	r16, r24
    3c2c:	f9 2d       	mov	r31, r9
    3c2e:	ff 77       	andi	r31, 0x7F	; 127
    3c30:	14 c0       	rjmp	.+40     	; 0x3c5a <vfprintf+0x45a>
    3c32:	56 01       	movw	r10, r12
    3c34:	22 e0       	ldi	r18, 0x02	; 2
    3c36:	a2 0e       	add	r10, r18
    3c38:	b1 1c       	adc	r11, r1
    3c3a:	f6 01       	movw	r30, r12
    3c3c:	c0 80       	ld	r12, Z
    3c3e:	d1 80       	ldd	r13, Z+1	; 0x01
    3c40:	96 fe       	sbrs	r9, 6
    3c42:	03 c0       	rjmp	.+6      	; 0x3c4a <vfprintf+0x44a>
    3c44:	61 2f       	mov	r22, r17
    3c46:	70 e0       	ldi	r23, 0x00	; 0
    3c48:	02 c0       	rjmp	.+4      	; 0x3c4e <vfprintf+0x44e>
    3c4a:	6f ef       	ldi	r22, 0xFF	; 255
    3c4c:	7f ef       	ldi	r23, 0xFF	; 255
    3c4e:	c6 01       	movw	r24, r12
    3c50:	0e 94 b3 21 	call	0x4366	; 0x4366 <strnlen_P>
    3c54:	8c 01       	movw	r16, r24
    3c56:	f9 2d       	mov	r31, r9
    3c58:	f0 68       	ori	r31, 0x80	; 128
    3c5a:	9f 2e       	mov	r9, r31
    3c5c:	f3 fd       	sbrc	r31, 3
    3c5e:	1a c0       	rjmp	.+52     	; 0x3c94 <vfprintf+0x494>
    3c60:	85 2d       	mov	r24, r5
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	08 17       	cp	r16, r24
    3c66:	19 07       	cpc	r17, r25
    3c68:	a8 f4       	brcc	.+42     	; 0x3c94 <vfprintf+0x494>
    3c6a:	b7 01       	movw	r22, r14
    3c6c:	80 e2       	ldi	r24, 0x20	; 32
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3c74:	5a 94       	dec	r5
    3c76:	f4 cf       	rjmp	.-24     	; 0x3c60 <vfprintf+0x460>
    3c78:	f6 01       	movw	r30, r12
    3c7a:	97 fc       	sbrc	r9, 7
    3c7c:	85 91       	lpm	r24, Z+
    3c7e:	97 fe       	sbrs	r9, 7
    3c80:	81 91       	ld	r24, Z+
    3c82:	6f 01       	movw	r12, r30
    3c84:	b7 01       	movw	r22, r14
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3c8c:	51 10       	cpse	r5, r1
    3c8e:	5a 94       	dec	r5
    3c90:	01 50       	subi	r16, 0x01	; 1
    3c92:	11 09       	sbc	r17, r1
    3c94:	01 15       	cp	r16, r1
    3c96:	11 05       	cpc	r17, r1
    3c98:	79 f7       	brne	.-34     	; 0x3c78 <vfprintf+0x478>
    3c9a:	f7 c0       	rjmp	.+494    	; 0x3e8a <vfprintf+0x68a>
    3c9c:	84 36       	cpi	r24, 0x64	; 100
    3c9e:	11 f0       	breq	.+4      	; 0x3ca4 <vfprintf+0x4a4>
    3ca0:	89 36       	cpi	r24, 0x69	; 105
    3ca2:	61 f5       	brne	.+88     	; 0x3cfc <vfprintf+0x4fc>
    3ca4:	56 01       	movw	r10, r12
    3ca6:	97 fe       	sbrs	r9, 7
    3ca8:	09 c0       	rjmp	.+18     	; 0x3cbc <vfprintf+0x4bc>
    3caa:	24 e0       	ldi	r18, 0x04	; 4
    3cac:	a2 0e       	add	r10, r18
    3cae:	b1 1c       	adc	r11, r1
    3cb0:	f6 01       	movw	r30, r12
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	82 81       	ldd	r24, Z+2	; 0x02
    3cb8:	93 81       	ldd	r25, Z+3	; 0x03
    3cba:	0a c0       	rjmp	.+20     	; 0x3cd0 <vfprintf+0x4d0>
    3cbc:	f2 e0       	ldi	r31, 0x02	; 2
    3cbe:	af 0e       	add	r10, r31
    3cc0:	b1 1c       	adc	r11, r1
    3cc2:	f6 01       	movw	r30, r12
    3cc4:	60 81       	ld	r22, Z
    3cc6:	71 81       	ldd	r23, Z+1	; 0x01
    3cc8:	07 2e       	mov	r0, r23
    3cca:	00 0c       	add	r0, r0
    3ccc:	88 0b       	sbc	r24, r24
    3cce:	99 0b       	sbc	r25, r25
    3cd0:	f9 2d       	mov	r31, r9
    3cd2:	ff 76       	andi	r31, 0x6F	; 111
    3cd4:	9f 2e       	mov	r9, r31
    3cd6:	97 ff       	sbrs	r25, 7
    3cd8:	09 c0       	rjmp	.+18     	; 0x3cec <vfprintf+0x4ec>
    3cda:	90 95       	com	r25
    3cdc:	80 95       	com	r24
    3cde:	70 95       	com	r23
    3ce0:	61 95       	neg	r22
    3ce2:	7f 4f       	sbci	r23, 0xFF	; 255
    3ce4:	8f 4f       	sbci	r24, 0xFF	; 255
    3ce6:	9f 4f       	sbci	r25, 0xFF	; 255
    3ce8:	f0 68       	ori	r31, 0x80	; 128
    3cea:	9f 2e       	mov	r9, r31
    3cec:	2a e0       	ldi	r18, 0x0A	; 10
    3cee:	30 e0       	ldi	r19, 0x00	; 0
    3cf0:	a3 01       	movw	r20, r6
    3cf2:	0e 94 15 22 	call	0x442a	; 0x442a <__ultoa_invert>
    3cf6:	c8 2e       	mov	r12, r24
    3cf8:	c6 18       	sub	r12, r6
    3cfa:	3f c0       	rjmp	.+126    	; 0x3d7a <vfprintf+0x57a>
    3cfc:	09 2d       	mov	r16, r9
    3cfe:	85 37       	cpi	r24, 0x75	; 117
    3d00:	21 f4       	brne	.+8      	; 0x3d0a <vfprintf+0x50a>
    3d02:	0f 7e       	andi	r16, 0xEF	; 239
    3d04:	2a e0       	ldi	r18, 0x0A	; 10
    3d06:	30 e0       	ldi	r19, 0x00	; 0
    3d08:	1d c0       	rjmp	.+58     	; 0x3d44 <vfprintf+0x544>
    3d0a:	09 7f       	andi	r16, 0xF9	; 249
    3d0c:	8f 36       	cpi	r24, 0x6F	; 111
    3d0e:	91 f0       	breq	.+36     	; 0x3d34 <vfprintf+0x534>
    3d10:	18 f4       	brcc	.+6      	; 0x3d18 <vfprintf+0x518>
    3d12:	88 35       	cpi	r24, 0x58	; 88
    3d14:	59 f0       	breq	.+22     	; 0x3d2c <vfprintf+0x52c>
    3d16:	c3 c0       	rjmp	.+390    	; 0x3e9e <vfprintf+0x69e>
    3d18:	80 37       	cpi	r24, 0x70	; 112
    3d1a:	19 f0       	breq	.+6      	; 0x3d22 <vfprintf+0x522>
    3d1c:	88 37       	cpi	r24, 0x78	; 120
    3d1e:	11 f0       	breq	.+4      	; 0x3d24 <vfprintf+0x524>
    3d20:	be c0       	rjmp	.+380    	; 0x3e9e <vfprintf+0x69e>
    3d22:	00 61       	ori	r16, 0x10	; 16
    3d24:	04 ff       	sbrs	r16, 4
    3d26:	09 c0       	rjmp	.+18     	; 0x3d3a <vfprintf+0x53a>
    3d28:	04 60       	ori	r16, 0x04	; 4
    3d2a:	07 c0       	rjmp	.+14     	; 0x3d3a <vfprintf+0x53a>
    3d2c:	94 fe       	sbrs	r9, 4
    3d2e:	08 c0       	rjmp	.+16     	; 0x3d40 <vfprintf+0x540>
    3d30:	06 60       	ori	r16, 0x06	; 6
    3d32:	06 c0       	rjmp	.+12     	; 0x3d40 <vfprintf+0x540>
    3d34:	28 e0       	ldi	r18, 0x08	; 8
    3d36:	30 e0       	ldi	r19, 0x00	; 0
    3d38:	05 c0       	rjmp	.+10     	; 0x3d44 <vfprintf+0x544>
    3d3a:	20 e1       	ldi	r18, 0x10	; 16
    3d3c:	30 e0       	ldi	r19, 0x00	; 0
    3d3e:	02 c0       	rjmp	.+4      	; 0x3d44 <vfprintf+0x544>
    3d40:	20 e1       	ldi	r18, 0x10	; 16
    3d42:	32 e0       	ldi	r19, 0x02	; 2
    3d44:	56 01       	movw	r10, r12
    3d46:	07 ff       	sbrs	r16, 7
    3d48:	09 c0       	rjmp	.+18     	; 0x3d5c <vfprintf+0x55c>
    3d4a:	84 e0       	ldi	r24, 0x04	; 4
    3d4c:	a8 0e       	add	r10, r24
    3d4e:	b1 1c       	adc	r11, r1
    3d50:	f6 01       	movw	r30, r12
    3d52:	60 81       	ld	r22, Z
    3d54:	71 81       	ldd	r23, Z+1	; 0x01
    3d56:	82 81       	ldd	r24, Z+2	; 0x02
    3d58:	93 81       	ldd	r25, Z+3	; 0x03
    3d5a:	08 c0       	rjmp	.+16     	; 0x3d6c <vfprintf+0x56c>
    3d5c:	f2 e0       	ldi	r31, 0x02	; 2
    3d5e:	af 0e       	add	r10, r31
    3d60:	b1 1c       	adc	r11, r1
    3d62:	f6 01       	movw	r30, r12
    3d64:	60 81       	ld	r22, Z
    3d66:	71 81       	ldd	r23, Z+1	; 0x01
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	a3 01       	movw	r20, r6
    3d6e:	0e 94 15 22 	call	0x442a	; 0x442a <__ultoa_invert>
    3d72:	c8 2e       	mov	r12, r24
    3d74:	c6 18       	sub	r12, r6
    3d76:	0f 77       	andi	r16, 0x7F	; 127
    3d78:	90 2e       	mov	r9, r16
    3d7a:	96 fe       	sbrs	r9, 6
    3d7c:	0b c0       	rjmp	.+22     	; 0x3d94 <vfprintf+0x594>
    3d7e:	09 2d       	mov	r16, r9
    3d80:	0e 7f       	andi	r16, 0xFE	; 254
    3d82:	c1 16       	cp	r12, r17
    3d84:	50 f4       	brcc	.+20     	; 0x3d9a <vfprintf+0x59a>
    3d86:	94 fe       	sbrs	r9, 4
    3d88:	0a c0       	rjmp	.+20     	; 0x3d9e <vfprintf+0x59e>
    3d8a:	92 fc       	sbrc	r9, 2
    3d8c:	08 c0       	rjmp	.+16     	; 0x3d9e <vfprintf+0x59e>
    3d8e:	09 2d       	mov	r16, r9
    3d90:	0e 7e       	andi	r16, 0xEE	; 238
    3d92:	05 c0       	rjmp	.+10     	; 0x3d9e <vfprintf+0x59e>
    3d94:	dc 2c       	mov	r13, r12
    3d96:	09 2d       	mov	r16, r9
    3d98:	03 c0       	rjmp	.+6      	; 0x3da0 <vfprintf+0x5a0>
    3d9a:	dc 2c       	mov	r13, r12
    3d9c:	01 c0       	rjmp	.+2      	; 0x3da0 <vfprintf+0x5a0>
    3d9e:	d1 2e       	mov	r13, r17
    3da0:	04 ff       	sbrs	r16, 4
    3da2:	0d c0       	rjmp	.+26     	; 0x3dbe <vfprintf+0x5be>
    3da4:	fe 01       	movw	r30, r28
    3da6:	ec 0d       	add	r30, r12
    3da8:	f1 1d       	adc	r31, r1
    3daa:	80 81       	ld	r24, Z
    3dac:	80 33       	cpi	r24, 0x30	; 48
    3dae:	11 f4       	brne	.+4      	; 0x3db4 <vfprintf+0x5b4>
    3db0:	09 7e       	andi	r16, 0xE9	; 233
    3db2:	09 c0       	rjmp	.+18     	; 0x3dc6 <vfprintf+0x5c6>
    3db4:	02 ff       	sbrs	r16, 2
    3db6:	06 c0       	rjmp	.+12     	; 0x3dc4 <vfprintf+0x5c4>
    3db8:	d3 94       	inc	r13
    3dba:	d3 94       	inc	r13
    3dbc:	04 c0       	rjmp	.+8      	; 0x3dc6 <vfprintf+0x5c6>
    3dbe:	80 2f       	mov	r24, r16
    3dc0:	86 78       	andi	r24, 0x86	; 134
    3dc2:	09 f0       	breq	.+2      	; 0x3dc6 <vfprintf+0x5c6>
    3dc4:	d3 94       	inc	r13
    3dc6:	03 fd       	sbrc	r16, 3
    3dc8:	11 c0       	rjmp	.+34     	; 0x3dec <vfprintf+0x5ec>
    3dca:	00 ff       	sbrs	r16, 0
    3dcc:	06 c0       	rjmp	.+12     	; 0x3dda <vfprintf+0x5da>
    3dce:	1c 2d       	mov	r17, r12
    3dd0:	d5 14       	cp	r13, r5
    3dd2:	80 f4       	brcc	.+32     	; 0x3df4 <vfprintf+0x5f4>
    3dd4:	15 0d       	add	r17, r5
    3dd6:	1d 19       	sub	r17, r13
    3dd8:	0d c0       	rjmp	.+26     	; 0x3df4 <vfprintf+0x5f4>
    3dda:	d5 14       	cp	r13, r5
    3ddc:	58 f4       	brcc	.+22     	; 0x3df4 <vfprintf+0x5f4>
    3dde:	b7 01       	movw	r22, r14
    3de0:	80 e2       	ldi	r24, 0x20	; 32
    3de2:	90 e0       	ldi	r25, 0x00	; 0
    3de4:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3de8:	d3 94       	inc	r13
    3dea:	f7 cf       	rjmp	.-18     	; 0x3dda <vfprintf+0x5da>
    3dec:	d5 14       	cp	r13, r5
    3dee:	10 f4       	brcc	.+4      	; 0x3df4 <vfprintf+0x5f4>
    3df0:	5d 18       	sub	r5, r13
    3df2:	01 c0       	rjmp	.+2      	; 0x3df6 <vfprintf+0x5f6>
    3df4:	51 2c       	mov	r5, r1
    3df6:	04 ff       	sbrs	r16, 4
    3df8:	10 c0       	rjmp	.+32     	; 0x3e1a <vfprintf+0x61a>
    3dfa:	b7 01       	movw	r22, r14
    3dfc:	80 e3       	ldi	r24, 0x30	; 48
    3dfe:	90 e0       	ldi	r25, 0x00	; 0
    3e00:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3e04:	02 ff       	sbrs	r16, 2
    3e06:	17 c0       	rjmp	.+46     	; 0x3e36 <vfprintf+0x636>
    3e08:	01 fd       	sbrc	r16, 1
    3e0a:	03 c0       	rjmp	.+6      	; 0x3e12 <vfprintf+0x612>
    3e0c:	88 e7       	ldi	r24, 0x78	; 120
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	02 c0       	rjmp	.+4      	; 0x3e16 <vfprintf+0x616>
    3e12:	88 e5       	ldi	r24, 0x58	; 88
    3e14:	90 e0       	ldi	r25, 0x00	; 0
    3e16:	b7 01       	movw	r22, r14
    3e18:	0c c0       	rjmp	.+24     	; 0x3e32 <vfprintf+0x632>
    3e1a:	80 2f       	mov	r24, r16
    3e1c:	86 78       	andi	r24, 0x86	; 134
    3e1e:	59 f0       	breq	.+22     	; 0x3e36 <vfprintf+0x636>
    3e20:	01 ff       	sbrs	r16, 1
    3e22:	02 c0       	rjmp	.+4      	; 0x3e28 <vfprintf+0x628>
    3e24:	8b e2       	ldi	r24, 0x2B	; 43
    3e26:	01 c0       	rjmp	.+2      	; 0x3e2a <vfprintf+0x62a>
    3e28:	80 e2       	ldi	r24, 0x20	; 32
    3e2a:	07 fd       	sbrc	r16, 7
    3e2c:	8d e2       	ldi	r24, 0x2D	; 45
    3e2e:	b7 01       	movw	r22, r14
    3e30:	90 e0       	ldi	r25, 0x00	; 0
    3e32:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3e36:	c1 16       	cp	r12, r17
    3e38:	38 f4       	brcc	.+14     	; 0x3e48 <vfprintf+0x648>
    3e3a:	b7 01       	movw	r22, r14
    3e3c:	80 e3       	ldi	r24, 0x30	; 48
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3e44:	11 50       	subi	r17, 0x01	; 1
    3e46:	f7 cf       	rjmp	.-18     	; 0x3e36 <vfprintf+0x636>
    3e48:	ca 94       	dec	r12
    3e4a:	f3 01       	movw	r30, r6
    3e4c:	ec 0d       	add	r30, r12
    3e4e:	f1 1d       	adc	r31, r1
    3e50:	80 81       	ld	r24, Z
    3e52:	b7 01       	movw	r22, r14
    3e54:	90 e0       	ldi	r25, 0x00	; 0
    3e56:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3e5a:	c1 10       	cpse	r12, r1
    3e5c:	f5 cf       	rjmp	.-22     	; 0x3e48 <vfprintf+0x648>
    3e5e:	15 c0       	rjmp	.+42     	; 0x3e8a <vfprintf+0x68a>
    3e60:	f4 e0       	ldi	r31, 0x04	; 4
    3e62:	f5 15       	cp	r31, r5
    3e64:	60 f5       	brcc	.+88     	; 0x3ebe <vfprintf+0x6be>
    3e66:	84 e0       	ldi	r24, 0x04	; 4
    3e68:	58 1a       	sub	r5, r24
    3e6a:	93 fe       	sbrs	r9, 3
    3e6c:	1f c0       	rjmp	.+62     	; 0x3eac <vfprintf+0x6ac>
    3e6e:	01 11       	cpse	r16, r1
    3e70:	27 c0       	rjmp	.+78     	; 0x3ec0 <vfprintf+0x6c0>
    3e72:	2c 85       	ldd	r18, Y+12	; 0x0c
    3e74:	23 ff       	sbrs	r18, 3
    3e76:	2a c0       	rjmp	.+84     	; 0x3ecc <vfprintf+0x6cc>
    3e78:	06 ee       	ldi	r16, 0xE6	; 230
    3e7a:	10 e0       	ldi	r17, 0x00	; 0
    3e7c:	39 2d       	mov	r19, r9
    3e7e:	30 71       	andi	r19, 0x10	; 16
    3e80:	93 2e       	mov	r9, r19
    3e82:	f8 01       	movw	r30, r16
    3e84:	84 91       	lpm	r24, Z
    3e86:	81 11       	cpse	r24, r1
    3e88:	24 c0       	rjmp	.+72     	; 0x3ed2 <vfprintf+0x6d2>
    3e8a:	55 20       	and	r5, r5
    3e8c:	09 f4       	brne	.+2      	; 0x3e90 <vfprintf+0x690>
    3e8e:	e4 cc       	rjmp	.-1592   	; 0x3858 <vfprintf+0x58>
    3e90:	b7 01       	movw	r22, r14
    3e92:	80 e2       	ldi	r24, 0x20	; 32
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3e9a:	5a 94       	dec	r5
    3e9c:	f6 cf       	rjmp	.-20     	; 0x3e8a <vfprintf+0x68a>
    3e9e:	f7 01       	movw	r30, r14
    3ea0:	86 81       	ldd	r24, Z+6	; 0x06
    3ea2:	97 81       	ldd	r25, Z+7	; 0x07
    3ea4:	26 c0       	rjmp	.+76     	; 0x3ef2 <vfprintf+0x6f2>
    3ea6:	8f ef       	ldi	r24, 0xFF	; 255
    3ea8:	9f ef       	ldi	r25, 0xFF	; 255
    3eaa:	23 c0       	rjmp	.+70     	; 0x3ef2 <vfprintf+0x6f2>
    3eac:	b7 01       	movw	r22, r14
    3eae:	80 e2       	ldi	r24, 0x20	; 32
    3eb0:	90 e0       	ldi	r25, 0x00	; 0
    3eb2:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3eb6:	5a 94       	dec	r5
    3eb8:	51 10       	cpse	r5, r1
    3eba:	f8 cf       	rjmp	.-16     	; 0x3eac <vfprintf+0x6ac>
    3ebc:	d8 cf       	rjmp	.-80     	; 0x3e6e <vfprintf+0x66e>
    3ebe:	51 2c       	mov	r5, r1
    3ec0:	b7 01       	movw	r22, r14
    3ec2:	80 2f       	mov	r24, r16
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3eca:	d3 cf       	rjmp	.-90     	; 0x3e72 <vfprintf+0x672>
    3ecc:	0a ee       	ldi	r16, 0xEA	; 234
    3ece:	10 e0       	ldi	r17, 0x00	; 0
    3ed0:	d5 cf       	rjmp	.-86     	; 0x3e7c <vfprintf+0x67c>
    3ed2:	91 10       	cpse	r9, r1
    3ed4:	80 52       	subi	r24, 0x20	; 32
    3ed6:	b7 01       	movw	r22, r14
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	0e 94 d9 21 	call	0x43b2	; 0x43b2 <fputc>
    3ede:	0f 5f       	subi	r16, 0xFF	; 255
    3ee0:	1f 4f       	sbci	r17, 0xFF	; 255
    3ee2:	cf cf       	rjmp	.-98     	; 0x3e82 <vfprintf+0x682>
    3ee4:	23 e0       	ldi	r18, 0x03	; 3
    3ee6:	25 15       	cp	r18, r5
    3ee8:	10 f4       	brcc	.+4      	; 0x3eee <vfprintf+0x6ee>
    3eea:	83 e0       	ldi	r24, 0x03	; 3
    3eec:	bd cf       	rjmp	.-134    	; 0x3e68 <vfprintf+0x668>
    3eee:	51 2c       	mov	r5, r1
    3ef0:	c0 cf       	rjmp	.-128    	; 0x3e72 <vfprintf+0x672>
    3ef2:	60 96       	adiw	r28, 0x10	; 16
    3ef4:	e2 e1       	ldi	r30, 0x12	; 18
    3ef6:	0c 94 9f 1f 	jmp	0x3f3e	; 0x3f3e <__epilogue_restores__>

00003efa <__tablejump2__>:
    3efa:	ee 0f       	add	r30, r30
    3efc:	ff 1f       	adc	r31, r31
    3efe:	05 90       	lpm	r0, Z+
    3f00:	f4 91       	lpm	r31, Z
    3f02:	e0 2d       	mov	r30, r0
    3f04:	09 94       	ijmp

00003f06 <__prologue_saves__>:
    3f06:	2f 92       	push	r2
    3f08:	3f 92       	push	r3
    3f0a:	4f 92       	push	r4
    3f0c:	5f 92       	push	r5
    3f0e:	6f 92       	push	r6
    3f10:	7f 92       	push	r7
    3f12:	8f 92       	push	r8
    3f14:	9f 92       	push	r9
    3f16:	af 92       	push	r10
    3f18:	bf 92       	push	r11
    3f1a:	cf 92       	push	r12
    3f1c:	df 92       	push	r13
    3f1e:	ef 92       	push	r14
    3f20:	ff 92       	push	r15
    3f22:	0f 93       	push	r16
    3f24:	1f 93       	push	r17
    3f26:	cf 93       	push	r28
    3f28:	df 93       	push	r29
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	ca 1b       	sub	r28, r26
    3f30:	db 0b       	sbc	r29, r27
    3f32:	0f b6       	in	r0, 0x3f	; 63
    3f34:	f8 94       	cli
    3f36:	de bf       	out	0x3e, r29	; 62
    3f38:	0f be       	out	0x3f, r0	; 63
    3f3a:	cd bf       	out	0x3d, r28	; 61
    3f3c:	09 94       	ijmp

00003f3e <__epilogue_restores__>:
    3f3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3f40:	39 88       	ldd	r3, Y+17	; 0x11
    3f42:	48 88       	ldd	r4, Y+16	; 0x10
    3f44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3f46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3f48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3f4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3f4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3f4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3f50:	b9 84       	ldd	r11, Y+9	; 0x09
    3f52:	c8 84       	ldd	r12, Y+8	; 0x08
    3f54:	df 80       	ldd	r13, Y+7	; 0x07
    3f56:	ee 80       	ldd	r14, Y+6	; 0x06
    3f58:	fd 80       	ldd	r15, Y+5	; 0x05
    3f5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3f5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3f5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3f60:	b9 81       	ldd	r27, Y+1	; 0x01
    3f62:	ce 0f       	add	r28, r30
    3f64:	d1 1d       	adc	r29, r1
    3f66:	0f b6       	in	r0, 0x3f	; 63
    3f68:	f8 94       	cli
    3f6a:	de bf       	out	0x3e, r29	; 62
    3f6c:	0f be       	out	0x3f, r0	; 63
    3f6e:	cd bf       	out	0x3d, r28	; 61
    3f70:	ed 01       	movw	r28, r26
    3f72:	08 95       	ret

00003f74 <malloc>:
    3f74:	0f 93       	push	r16
    3f76:	1f 93       	push	r17
    3f78:	cf 93       	push	r28
    3f7a:	df 93       	push	r29
    3f7c:	82 30       	cpi	r24, 0x02	; 2
    3f7e:	91 05       	cpc	r25, r1
    3f80:	10 f4       	brcc	.+4      	; 0x3f86 <malloc+0x12>
    3f82:	82 e0       	ldi	r24, 0x02	; 2
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	e0 91 5f 02 	lds	r30, 0x025F	; 0x80025f <__flp>
    3f8a:	f0 91 60 02 	lds	r31, 0x0260	; 0x800260 <__flp+0x1>
    3f8e:	20 e0       	ldi	r18, 0x00	; 0
    3f90:	30 e0       	ldi	r19, 0x00	; 0
    3f92:	a0 e0       	ldi	r26, 0x00	; 0
    3f94:	b0 e0       	ldi	r27, 0x00	; 0
    3f96:	30 97       	sbiw	r30, 0x00	; 0
    3f98:	19 f1       	breq	.+70     	; 0x3fe0 <malloc+0x6c>
    3f9a:	40 81       	ld	r20, Z
    3f9c:	51 81       	ldd	r21, Z+1	; 0x01
    3f9e:	02 81       	ldd	r16, Z+2	; 0x02
    3fa0:	13 81       	ldd	r17, Z+3	; 0x03
    3fa2:	48 17       	cp	r20, r24
    3fa4:	59 07       	cpc	r21, r25
    3fa6:	c8 f0       	brcs	.+50     	; 0x3fda <malloc+0x66>
    3fa8:	84 17       	cp	r24, r20
    3faa:	95 07       	cpc	r25, r21
    3fac:	69 f4       	brne	.+26     	; 0x3fc8 <malloc+0x54>
    3fae:	10 97       	sbiw	r26, 0x00	; 0
    3fb0:	31 f0       	breq	.+12     	; 0x3fbe <malloc+0x4a>
    3fb2:	12 96       	adiw	r26, 0x02	; 2
    3fb4:	0c 93       	st	X, r16
    3fb6:	12 97       	sbiw	r26, 0x02	; 2
    3fb8:	13 96       	adiw	r26, 0x03	; 3
    3fba:	1c 93       	st	X, r17
    3fbc:	27 c0       	rjmp	.+78     	; 0x400c <malloc+0x98>
    3fbe:	00 93 5f 02 	sts	0x025F, r16	; 0x80025f <__flp>
    3fc2:	10 93 60 02 	sts	0x0260, r17	; 0x800260 <__flp+0x1>
    3fc6:	22 c0       	rjmp	.+68     	; 0x400c <malloc+0x98>
    3fc8:	21 15       	cp	r18, r1
    3fca:	31 05       	cpc	r19, r1
    3fcc:	19 f0       	breq	.+6      	; 0x3fd4 <malloc+0x60>
    3fce:	42 17       	cp	r20, r18
    3fd0:	53 07       	cpc	r21, r19
    3fd2:	18 f4       	brcc	.+6      	; 0x3fda <malloc+0x66>
    3fd4:	9a 01       	movw	r18, r20
    3fd6:	bd 01       	movw	r22, r26
    3fd8:	ef 01       	movw	r28, r30
    3fda:	df 01       	movw	r26, r30
    3fdc:	f8 01       	movw	r30, r16
    3fde:	db cf       	rjmp	.-74     	; 0x3f96 <malloc+0x22>
    3fe0:	21 15       	cp	r18, r1
    3fe2:	31 05       	cpc	r19, r1
    3fe4:	f9 f0       	breq	.+62     	; 0x4024 <malloc+0xb0>
    3fe6:	28 1b       	sub	r18, r24
    3fe8:	39 0b       	sbc	r19, r25
    3fea:	24 30       	cpi	r18, 0x04	; 4
    3fec:	31 05       	cpc	r19, r1
    3fee:	80 f4       	brcc	.+32     	; 0x4010 <malloc+0x9c>
    3ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    3ff2:	9b 81       	ldd	r25, Y+3	; 0x03
    3ff4:	61 15       	cp	r22, r1
    3ff6:	71 05       	cpc	r23, r1
    3ff8:	21 f0       	breq	.+8      	; 0x4002 <malloc+0x8e>
    3ffa:	fb 01       	movw	r30, r22
    3ffc:	93 83       	std	Z+3, r25	; 0x03
    3ffe:	82 83       	std	Z+2, r24	; 0x02
    4000:	04 c0       	rjmp	.+8      	; 0x400a <malloc+0x96>
    4002:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <__flp+0x1>
    4006:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <__flp>
    400a:	fe 01       	movw	r30, r28
    400c:	32 96       	adiw	r30, 0x02	; 2
    400e:	44 c0       	rjmp	.+136    	; 0x4098 <malloc+0x124>
    4010:	fe 01       	movw	r30, r28
    4012:	e2 0f       	add	r30, r18
    4014:	f3 1f       	adc	r31, r19
    4016:	81 93       	st	Z+, r24
    4018:	91 93       	st	Z+, r25
    401a:	22 50       	subi	r18, 0x02	; 2
    401c:	31 09       	sbc	r19, r1
    401e:	39 83       	std	Y+1, r19	; 0x01
    4020:	28 83       	st	Y, r18
    4022:	3a c0       	rjmp	.+116    	; 0x4098 <malloc+0x124>
    4024:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <__brkval>
    4028:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <__brkval+0x1>
    402c:	23 2b       	or	r18, r19
    402e:	41 f4       	brne	.+16     	; 0x4040 <malloc+0xcc>
    4030:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    4034:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    4038:	30 93 5e 02 	sts	0x025E, r19	; 0x80025e <__brkval+0x1>
    403c:	20 93 5d 02 	sts	0x025D, r18	; 0x80025d <__brkval>
    4040:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    4044:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    4048:	21 15       	cp	r18, r1
    404a:	31 05       	cpc	r19, r1
    404c:	41 f4       	brne	.+16     	; 0x405e <malloc+0xea>
    404e:	2d b7       	in	r18, 0x3d	; 61
    4050:	3e b7       	in	r19, 0x3e	; 62
    4052:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    4056:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    405a:	24 1b       	sub	r18, r20
    405c:	35 0b       	sbc	r19, r21
    405e:	e0 91 5d 02 	lds	r30, 0x025D	; 0x80025d <__brkval>
    4062:	f0 91 5e 02 	lds	r31, 0x025E	; 0x80025e <__brkval+0x1>
    4066:	e2 17       	cp	r30, r18
    4068:	f3 07       	cpc	r31, r19
    406a:	a0 f4       	brcc	.+40     	; 0x4094 <malloc+0x120>
    406c:	2e 1b       	sub	r18, r30
    406e:	3f 0b       	sbc	r19, r31
    4070:	28 17       	cp	r18, r24
    4072:	39 07       	cpc	r19, r25
    4074:	78 f0       	brcs	.+30     	; 0x4094 <malloc+0x120>
    4076:	ac 01       	movw	r20, r24
    4078:	4e 5f       	subi	r20, 0xFE	; 254
    407a:	5f 4f       	sbci	r21, 0xFF	; 255
    407c:	24 17       	cp	r18, r20
    407e:	35 07       	cpc	r19, r21
    4080:	48 f0       	brcs	.+18     	; 0x4094 <malloc+0x120>
    4082:	4e 0f       	add	r20, r30
    4084:	5f 1f       	adc	r21, r31
    4086:	50 93 5e 02 	sts	0x025E, r21	; 0x80025e <__brkval+0x1>
    408a:	40 93 5d 02 	sts	0x025D, r20	; 0x80025d <__brkval>
    408e:	81 93       	st	Z+, r24
    4090:	91 93       	st	Z+, r25
    4092:	02 c0       	rjmp	.+4      	; 0x4098 <malloc+0x124>
    4094:	e0 e0       	ldi	r30, 0x00	; 0
    4096:	f0 e0       	ldi	r31, 0x00	; 0
    4098:	cf 01       	movw	r24, r30
    409a:	df 91       	pop	r29
    409c:	cf 91       	pop	r28
    409e:	1f 91       	pop	r17
    40a0:	0f 91       	pop	r16
    40a2:	08 95       	ret

000040a4 <free>:
    40a4:	cf 93       	push	r28
    40a6:	df 93       	push	r29
    40a8:	00 97       	sbiw	r24, 0x00	; 0
    40aa:	09 f4       	brne	.+2      	; 0x40ae <free+0xa>
    40ac:	81 c0       	rjmp	.+258    	; 0x41b0 <free+0x10c>
    40ae:	fc 01       	movw	r30, r24
    40b0:	32 97       	sbiw	r30, 0x02	; 2
    40b2:	13 82       	std	Z+3, r1	; 0x03
    40b4:	12 82       	std	Z+2, r1	; 0x02
    40b6:	a0 91 5f 02 	lds	r26, 0x025F	; 0x80025f <__flp>
    40ba:	b0 91 60 02 	lds	r27, 0x0260	; 0x800260 <__flp+0x1>
    40be:	10 97       	sbiw	r26, 0x00	; 0
    40c0:	81 f4       	brne	.+32     	; 0x40e2 <free+0x3e>
    40c2:	20 81       	ld	r18, Z
    40c4:	31 81       	ldd	r19, Z+1	; 0x01
    40c6:	82 0f       	add	r24, r18
    40c8:	93 1f       	adc	r25, r19
    40ca:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <__brkval>
    40ce:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <__brkval+0x1>
    40d2:	28 17       	cp	r18, r24
    40d4:	39 07       	cpc	r19, r25
    40d6:	51 f5       	brne	.+84     	; 0x412c <free+0x88>
    40d8:	f0 93 5e 02 	sts	0x025E, r31	; 0x80025e <__brkval+0x1>
    40dc:	e0 93 5d 02 	sts	0x025D, r30	; 0x80025d <__brkval>
    40e0:	67 c0       	rjmp	.+206    	; 0x41b0 <free+0x10c>
    40e2:	ed 01       	movw	r28, r26
    40e4:	20 e0       	ldi	r18, 0x00	; 0
    40e6:	30 e0       	ldi	r19, 0x00	; 0
    40e8:	ce 17       	cp	r28, r30
    40ea:	df 07       	cpc	r29, r31
    40ec:	40 f4       	brcc	.+16     	; 0x40fe <free+0x5a>
    40ee:	4a 81       	ldd	r20, Y+2	; 0x02
    40f0:	5b 81       	ldd	r21, Y+3	; 0x03
    40f2:	9e 01       	movw	r18, r28
    40f4:	41 15       	cp	r20, r1
    40f6:	51 05       	cpc	r21, r1
    40f8:	f1 f0       	breq	.+60     	; 0x4136 <free+0x92>
    40fa:	ea 01       	movw	r28, r20
    40fc:	f5 cf       	rjmp	.-22     	; 0x40e8 <free+0x44>
    40fe:	d3 83       	std	Z+3, r29	; 0x03
    4100:	c2 83       	std	Z+2, r28	; 0x02
    4102:	40 81       	ld	r20, Z
    4104:	51 81       	ldd	r21, Z+1	; 0x01
    4106:	84 0f       	add	r24, r20
    4108:	95 1f       	adc	r25, r21
    410a:	c8 17       	cp	r28, r24
    410c:	d9 07       	cpc	r29, r25
    410e:	59 f4       	brne	.+22     	; 0x4126 <free+0x82>
    4110:	88 81       	ld	r24, Y
    4112:	99 81       	ldd	r25, Y+1	; 0x01
    4114:	84 0f       	add	r24, r20
    4116:	95 1f       	adc	r25, r21
    4118:	02 96       	adiw	r24, 0x02	; 2
    411a:	91 83       	std	Z+1, r25	; 0x01
    411c:	80 83       	st	Z, r24
    411e:	8a 81       	ldd	r24, Y+2	; 0x02
    4120:	9b 81       	ldd	r25, Y+3	; 0x03
    4122:	93 83       	std	Z+3, r25	; 0x03
    4124:	82 83       	std	Z+2, r24	; 0x02
    4126:	21 15       	cp	r18, r1
    4128:	31 05       	cpc	r19, r1
    412a:	29 f4       	brne	.+10     	; 0x4136 <free+0x92>
    412c:	f0 93 60 02 	sts	0x0260, r31	; 0x800260 <__flp+0x1>
    4130:	e0 93 5f 02 	sts	0x025F, r30	; 0x80025f <__flp>
    4134:	3d c0       	rjmp	.+122    	; 0x41b0 <free+0x10c>
    4136:	e9 01       	movw	r28, r18
    4138:	fb 83       	std	Y+3, r31	; 0x03
    413a:	ea 83       	std	Y+2, r30	; 0x02
    413c:	49 91       	ld	r20, Y+
    413e:	59 91       	ld	r21, Y+
    4140:	c4 0f       	add	r28, r20
    4142:	d5 1f       	adc	r29, r21
    4144:	ec 17       	cp	r30, r28
    4146:	fd 07       	cpc	r31, r29
    4148:	61 f4       	brne	.+24     	; 0x4162 <free+0xbe>
    414a:	80 81       	ld	r24, Z
    414c:	91 81       	ldd	r25, Z+1	; 0x01
    414e:	84 0f       	add	r24, r20
    4150:	95 1f       	adc	r25, r21
    4152:	02 96       	adiw	r24, 0x02	; 2
    4154:	e9 01       	movw	r28, r18
    4156:	99 83       	std	Y+1, r25	; 0x01
    4158:	88 83       	st	Y, r24
    415a:	82 81       	ldd	r24, Z+2	; 0x02
    415c:	93 81       	ldd	r25, Z+3	; 0x03
    415e:	9b 83       	std	Y+3, r25	; 0x03
    4160:	8a 83       	std	Y+2, r24	; 0x02
    4162:	e0 e0       	ldi	r30, 0x00	; 0
    4164:	f0 e0       	ldi	r31, 0x00	; 0
    4166:	12 96       	adiw	r26, 0x02	; 2
    4168:	8d 91       	ld	r24, X+
    416a:	9c 91       	ld	r25, X
    416c:	13 97       	sbiw	r26, 0x03	; 3
    416e:	00 97       	sbiw	r24, 0x00	; 0
    4170:	19 f0       	breq	.+6      	; 0x4178 <free+0xd4>
    4172:	fd 01       	movw	r30, r26
    4174:	dc 01       	movw	r26, r24
    4176:	f7 cf       	rjmp	.-18     	; 0x4166 <free+0xc2>
    4178:	8d 91       	ld	r24, X+
    417a:	9c 91       	ld	r25, X
    417c:	11 97       	sbiw	r26, 0x01	; 1
    417e:	9d 01       	movw	r18, r26
    4180:	2e 5f       	subi	r18, 0xFE	; 254
    4182:	3f 4f       	sbci	r19, 0xFF	; 255
    4184:	82 0f       	add	r24, r18
    4186:	93 1f       	adc	r25, r19
    4188:	20 91 5d 02 	lds	r18, 0x025D	; 0x80025d <__brkval>
    418c:	30 91 5e 02 	lds	r19, 0x025E	; 0x80025e <__brkval+0x1>
    4190:	28 17       	cp	r18, r24
    4192:	39 07       	cpc	r19, r25
    4194:	69 f4       	brne	.+26     	; 0x41b0 <free+0x10c>
    4196:	30 97       	sbiw	r30, 0x00	; 0
    4198:	29 f4       	brne	.+10     	; 0x41a4 <free+0x100>
    419a:	10 92 60 02 	sts	0x0260, r1	; 0x800260 <__flp+0x1>
    419e:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <__flp>
    41a2:	02 c0       	rjmp	.+4      	; 0x41a8 <free+0x104>
    41a4:	13 82       	std	Z+3, r1	; 0x03
    41a6:	12 82       	std	Z+2, r1	; 0x02
    41a8:	b0 93 5e 02 	sts	0x025E, r27	; 0x80025e <__brkval+0x1>
    41ac:	a0 93 5d 02 	sts	0x025D, r26	; 0x80025d <__brkval>
    41b0:	df 91       	pop	r29
    41b2:	cf 91       	pop	r28
    41b4:	08 95       	ret

000041b6 <__ftoa_engine>:
    41b6:	28 30       	cpi	r18, 0x08	; 8
    41b8:	08 f0       	brcs	.+2      	; 0x41bc <__ftoa_engine+0x6>
    41ba:	27 e0       	ldi	r18, 0x07	; 7
    41bc:	33 27       	eor	r19, r19
    41be:	da 01       	movw	r26, r20
    41c0:	99 0f       	add	r25, r25
    41c2:	31 1d       	adc	r19, r1
    41c4:	87 fd       	sbrc	r24, 7
    41c6:	91 60       	ori	r25, 0x01	; 1
    41c8:	00 96       	adiw	r24, 0x00	; 0
    41ca:	61 05       	cpc	r22, r1
    41cc:	71 05       	cpc	r23, r1
    41ce:	39 f4       	brne	.+14     	; 0x41de <__ftoa_engine+0x28>
    41d0:	32 60       	ori	r19, 0x02	; 2
    41d2:	2e 5f       	subi	r18, 0xFE	; 254
    41d4:	3d 93       	st	X+, r19
    41d6:	30 e3       	ldi	r19, 0x30	; 48
    41d8:	2a 95       	dec	r18
    41da:	e1 f7       	brne	.-8      	; 0x41d4 <__ftoa_engine+0x1e>
    41dc:	08 95       	ret
    41de:	9f 3f       	cpi	r25, 0xFF	; 255
    41e0:	30 f0       	brcs	.+12     	; 0x41ee <__ftoa_engine+0x38>
    41e2:	80 38       	cpi	r24, 0x80	; 128
    41e4:	71 05       	cpc	r23, r1
    41e6:	61 05       	cpc	r22, r1
    41e8:	09 f0       	breq	.+2      	; 0x41ec <__ftoa_engine+0x36>
    41ea:	3c 5f       	subi	r19, 0xFC	; 252
    41ec:	3c 5f       	subi	r19, 0xFC	; 252
    41ee:	3d 93       	st	X+, r19
    41f0:	91 30       	cpi	r25, 0x01	; 1
    41f2:	08 f0       	brcs	.+2      	; 0x41f6 <__ftoa_engine+0x40>
    41f4:	80 68       	ori	r24, 0x80	; 128
    41f6:	91 1d       	adc	r25, r1
    41f8:	df 93       	push	r29
    41fa:	cf 93       	push	r28
    41fc:	1f 93       	push	r17
    41fe:	0f 93       	push	r16
    4200:	ff 92       	push	r15
    4202:	ef 92       	push	r14
    4204:	19 2f       	mov	r17, r25
    4206:	98 7f       	andi	r25, 0xF8	; 248
    4208:	96 95       	lsr	r25
    420a:	e9 2f       	mov	r30, r25
    420c:	96 95       	lsr	r25
    420e:	96 95       	lsr	r25
    4210:	e9 0f       	add	r30, r25
    4212:	ff 27       	eor	r31, r31
    4214:	e8 5b       	subi	r30, 0xB8	; 184
    4216:	fe 4f       	sbci	r31, 0xFE	; 254
    4218:	99 27       	eor	r25, r25
    421a:	33 27       	eor	r19, r19
    421c:	ee 24       	eor	r14, r14
    421e:	ff 24       	eor	r15, r15
    4220:	a7 01       	movw	r20, r14
    4222:	e7 01       	movw	r28, r14
    4224:	05 90       	lpm	r0, Z+
    4226:	08 94       	sec
    4228:	07 94       	ror	r0
    422a:	28 f4       	brcc	.+10     	; 0x4236 <__ftoa_engine+0x80>
    422c:	36 0f       	add	r19, r22
    422e:	e7 1e       	adc	r14, r23
    4230:	f8 1e       	adc	r15, r24
    4232:	49 1f       	adc	r20, r25
    4234:	51 1d       	adc	r21, r1
    4236:	66 0f       	add	r22, r22
    4238:	77 1f       	adc	r23, r23
    423a:	88 1f       	adc	r24, r24
    423c:	99 1f       	adc	r25, r25
    423e:	06 94       	lsr	r0
    4240:	a1 f7       	brne	.-24     	; 0x422a <__ftoa_engine+0x74>
    4242:	05 90       	lpm	r0, Z+
    4244:	07 94       	ror	r0
    4246:	28 f4       	brcc	.+10     	; 0x4252 <__ftoa_engine+0x9c>
    4248:	e7 0e       	add	r14, r23
    424a:	f8 1e       	adc	r15, r24
    424c:	49 1f       	adc	r20, r25
    424e:	56 1f       	adc	r21, r22
    4250:	c1 1d       	adc	r28, r1
    4252:	77 0f       	add	r23, r23
    4254:	88 1f       	adc	r24, r24
    4256:	99 1f       	adc	r25, r25
    4258:	66 1f       	adc	r22, r22
    425a:	06 94       	lsr	r0
    425c:	a1 f7       	brne	.-24     	; 0x4246 <__ftoa_engine+0x90>
    425e:	05 90       	lpm	r0, Z+
    4260:	07 94       	ror	r0
    4262:	28 f4       	brcc	.+10     	; 0x426e <__ftoa_engine+0xb8>
    4264:	f8 0e       	add	r15, r24
    4266:	49 1f       	adc	r20, r25
    4268:	56 1f       	adc	r21, r22
    426a:	c7 1f       	adc	r28, r23
    426c:	d1 1d       	adc	r29, r1
    426e:	88 0f       	add	r24, r24
    4270:	99 1f       	adc	r25, r25
    4272:	66 1f       	adc	r22, r22
    4274:	77 1f       	adc	r23, r23
    4276:	06 94       	lsr	r0
    4278:	a1 f7       	brne	.-24     	; 0x4262 <__ftoa_engine+0xac>
    427a:	05 90       	lpm	r0, Z+
    427c:	07 94       	ror	r0
    427e:	20 f4       	brcc	.+8      	; 0x4288 <__ftoa_engine+0xd2>
    4280:	49 0f       	add	r20, r25
    4282:	56 1f       	adc	r21, r22
    4284:	c7 1f       	adc	r28, r23
    4286:	d8 1f       	adc	r29, r24
    4288:	99 0f       	add	r25, r25
    428a:	66 1f       	adc	r22, r22
    428c:	77 1f       	adc	r23, r23
    428e:	88 1f       	adc	r24, r24
    4290:	06 94       	lsr	r0
    4292:	a9 f7       	brne	.-22     	; 0x427e <__ftoa_engine+0xc8>
    4294:	84 91       	lpm	r24, Z
    4296:	10 95       	com	r17
    4298:	17 70       	andi	r17, 0x07	; 7
    429a:	41 f0       	breq	.+16     	; 0x42ac <__ftoa_engine+0xf6>
    429c:	d6 95       	lsr	r29
    429e:	c7 95       	ror	r28
    42a0:	57 95       	ror	r21
    42a2:	47 95       	ror	r20
    42a4:	f7 94       	ror	r15
    42a6:	e7 94       	ror	r14
    42a8:	1a 95       	dec	r17
    42aa:	c1 f7       	brne	.-16     	; 0x429c <__ftoa_engine+0xe6>
    42ac:	ee ee       	ldi	r30, 0xEE	; 238
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	68 94       	set
    42b2:	15 90       	lpm	r1, Z+
    42b4:	15 91       	lpm	r17, Z+
    42b6:	35 91       	lpm	r19, Z+
    42b8:	65 91       	lpm	r22, Z+
    42ba:	95 91       	lpm	r25, Z+
    42bc:	05 90       	lpm	r0, Z+
    42be:	7f e2       	ldi	r23, 0x2F	; 47
    42c0:	73 95       	inc	r23
    42c2:	e1 18       	sub	r14, r1
    42c4:	f1 0a       	sbc	r15, r17
    42c6:	43 0b       	sbc	r20, r19
    42c8:	56 0b       	sbc	r21, r22
    42ca:	c9 0b       	sbc	r28, r25
    42cc:	d0 09       	sbc	r29, r0
    42ce:	c0 f7       	brcc	.-16     	; 0x42c0 <__ftoa_engine+0x10a>
    42d0:	e1 0c       	add	r14, r1
    42d2:	f1 1e       	adc	r15, r17
    42d4:	43 1f       	adc	r20, r19
    42d6:	56 1f       	adc	r21, r22
    42d8:	c9 1f       	adc	r28, r25
    42da:	d0 1d       	adc	r29, r0
    42dc:	7e f4       	brtc	.+30     	; 0x42fc <__ftoa_engine+0x146>
    42de:	70 33       	cpi	r23, 0x30	; 48
    42e0:	11 f4       	brne	.+4      	; 0x42e6 <__ftoa_engine+0x130>
    42e2:	8a 95       	dec	r24
    42e4:	e6 cf       	rjmp	.-52     	; 0x42b2 <__ftoa_engine+0xfc>
    42e6:	e8 94       	clt
    42e8:	01 50       	subi	r16, 0x01	; 1
    42ea:	30 f0       	brcs	.+12     	; 0x42f8 <__ftoa_engine+0x142>
    42ec:	08 0f       	add	r16, r24
    42ee:	0a f4       	brpl	.+2      	; 0x42f2 <__ftoa_engine+0x13c>
    42f0:	00 27       	eor	r16, r16
    42f2:	02 17       	cp	r16, r18
    42f4:	08 f4       	brcc	.+2      	; 0x42f8 <__ftoa_engine+0x142>
    42f6:	20 2f       	mov	r18, r16
    42f8:	23 95       	inc	r18
    42fa:	02 2f       	mov	r16, r18
    42fc:	7a 33       	cpi	r23, 0x3A	; 58
    42fe:	28 f0       	brcs	.+10     	; 0x430a <__ftoa_engine+0x154>
    4300:	79 e3       	ldi	r23, 0x39	; 57
    4302:	7d 93       	st	X+, r23
    4304:	2a 95       	dec	r18
    4306:	e9 f7       	brne	.-6      	; 0x4302 <__ftoa_engine+0x14c>
    4308:	10 c0       	rjmp	.+32     	; 0x432a <__ftoa_engine+0x174>
    430a:	7d 93       	st	X+, r23
    430c:	2a 95       	dec	r18
    430e:	89 f6       	brne	.-94     	; 0x42b2 <__ftoa_engine+0xfc>
    4310:	06 94       	lsr	r0
    4312:	97 95       	ror	r25
    4314:	67 95       	ror	r22
    4316:	37 95       	ror	r19
    4318:	17 95       	ror	r17
    431a:	17 94       	ror	r1
    431c:	e1 18       	sub	r14, r1
    431e:	f1 0a       	sbc	r15, r17
    4320:	43 0b       	sbc	r20, r19
    4322:	56 0b       	sbc	r21, r22
    4324:	c9 0b       	sbc	r28, r25
    4326:	d0 09       	sbc	r29, r0
    4328:	98 f0       	brcs	.+38     	; 0x4350 <__ftoa_engine+0x19a>
    432a:	23 95       	inc	r18
    432c:	7e 91       	ld	r23, -X
    432e:	73 95       	inc	r23
    4330:	7a 33       	cpi	r23, 0x3A	; 58
    4332:	08 f0       	brcs	.+2      	; 0x4336 <__ftoa_engine+0x180>
    4334:	70 e3       	ldi	r23, 0x30	; 48
    4336:	7c 93       	st	X, r23
    4338:	20 13       	cpse	r18, r16
    433a:	b8 f7       	brcc	.-18     	; 0x432a <__ftoa_engine+0x174>
    433c:	7e 91       	ld	r23, -X
    433e:	70 61       	ori	r23, 0x10	; 16
    4340:	7d 93       	st	X+, r23
    4342:	30 f0       	brcs	.+12     	; 0x4350 <__ftoa_engine+0x19a>
    4344:	83 95       	inc	r24
    4346:	71 e3       	ldi	r23, 0x31	; 49
    4348:	7d 93       	st	X+, r23
    434a:	70 e3       	ldi	r23, 0x30	; 48
    434c:	2a 95       	dec	r18
    434e:	e1 f7       	brne	.-8      	; 0x4348 <__ftoa_engine+0x192>
    4350:	11 24       	eor	r1, r1
    4352:	ef 90       	pop	r14
    4354:	ff 90       	pop	r15
    4356:	0f 91       	pop	r16
    4358:	1f 91       	pop	r17
    435a:	cf 91       	pop	r28
    435c:	df 91       	pop	r29
    435e:	99 27       	eor	r25, r25
    4360:	87 fd       	sbrc	r24, 7
    4362:	90 95       	com	r25
    4364:	08 95       	ret

00004366 <strnlen_P>:
    4366:	fc 01       	movw	r30, r24
    4368:	05 90       	lpm	r0, Z+
    436a:	61 50       	subi	r22, 0x01	; 1
    436c:	70 40       	sbci	r23, 0x00	; 0
    436e:	01 10       	cpse	r0, r1
    4370:	d8 f7       	brcc	.-10     	; 0x4368 <strnlen_P+0x2>
    4372:	80 95       	com	r24
    4374:	90 95       	com	r25
    4376:	8e 0f       	add	r24, r30
    4378:	9f 1f       	adc	r25, r31
    437a:	08 95       	ret

0000437c <memcpy>:
    437c:	fb 01       	movw	r30, r22
    437e:	dc 01       	movw	r26, r24
    4380:	02 c0       	rjmp	.+4      	; 0x4386 <memcpy+0xa>
    4382:	01 90       	ld	r0, Z+
    4384:	0d 92       	st	X+, r0
    4386:	41 50       	subi	r20, 0x01	; 1
    4388:	50 40       	sbci	r21, 0x00	; 0
    438a:	d8 f7       	brcc	.-10     	; 0x4382 <memcpy+0x6>
    438c:	08 95       	ret

0000438e <memset>:
    438e:	dc 01       	movw	r26, r24
    4390:	01 c0       	rjmp	.+2      	; 0x4394 <memset+0x6>
    4392:	6d 93       	st	X+, r22
    4394:	41 50       	subi	r20, 0x01	; 1
    4396:	50 40       	sbci	r21, 0x00	; 0
    4398:	e0 f7       	brcc	.-8      	; 0x4392 <memset+0x4>
    439a:	08 95       	ret

0000439c <strnlen>:
    439c:	fc 01       	movw	r30, r24
    439e:	61 50       	subi	r22, 0x01	; 1
    43a0:	70 40       	sbci	r23, 0x00	; 0
    43a2:	01 90       	ld	r0, Z+
    43a4:	01 10       	cpse	r0, r1
    43a6:	d8 f7       	brcc	.-10     	; 0x439e <strnlen+0x2>
    43a8:	80 95       	com	r24
    43aa:	90 95       	com	r25
    43ac:	8e 0f       	add	r24, r30
    43ae:	9f 1f       	adc	r25, r31
    43b0:	08 95       	ret

000043b2 <fputc>:
    43b2:	0f 93       	push	r16
    43b4:	1f 93       	push	r17
    43b6:	cf 93       	push	r28
    43b8:	df 93       	push	r29
    43ba:	fb 01       	movw	r30, r22
    43bc:	23 81       	ldd	r18, Z+3	; 0x03
    43be:	21 fd       	sbrc	r18, 1
    43c0:	03 c0       	rjmp	.+6      	; 0x43c8 <fputc+0x16>
    43c2:	8f ef       	ldi	r24, 0xFF	; 255
    43c4:	9f ef       	ldi	r25, 0xFF	; 255
    43c6:	2c c0       	rjmp	.+88     	; 0x4420 <fputc+0x6e>
    43c8:	22 ff       	sbrs	r18, 2
    43ca:	16 c0       	rjmp	.+44     	; 0x43f8 <fputc+0x46>
    43cc:	46 81       	ldd	r20, Z+6	; 0x06
    43ce:	57 81       	ldd	r21, Z+7	; 0x07
    43d0:	24 81       	ldd	r18, Z+4	; 0x04
    43d2:	35 81       	ldd	r19, Z+5	; 0x05
    43d4:	42 17       	cp	r20, r18
    43d6:	53 07       	cpc	r21, r19
    43d8:	44 f4       	brge	.+16     	; 0x43ea <fputc+0x38>
    43da:	a0 81       	ld	r26, Z
    43dc:	b1 81       	ldd	r27, Z+1	; 0x01
    43de:	9d 01       	movw	r18, r26
    43e0:	2f 5f       	subi	r18, 0xFF	; 255
    43e2:	3f 4f       	sbci	r19, 0xFF	; 255
    43e4:	31 83       	std	Z+1, r19	; 0x01
    43e6:	20 83       	st	Z, r18
    43e8:	8c 93       	st	X, r24
    43ea:	26 81       	ldd	r18, Z+6	; 0x06
    43ec:	37 81       	ldd	r19, Z+7	; 0x07
    43ee:	2f 5f       	subi	r18, 0xFF	; 255
    43f0:	3f 4f       	sbci	r19, 0xFF	; 255
    43f2:	37 83       	std	Z+7, r19	; 0x07
    43f4:	26 83       	std	Z+6, r18	; 0x06
    43f6:	14 c0       	rjmp	.+40     	; 0x4420 <fputc+0x6e>
    43f8:	8b 01       	movw	r16, r22
    43fa:	ec 01       	movw	r28, r24
    43fc:	fb 01       	movw	r30, r22
    43fe:	00 84       	ldd	r0, Z+8	; 0x08
    4400:	f1 85       	ldd	r31, Z+9	; 0x09
    4402:	e0 2d       	mov	r30, r0
    4404:	09 95       	icall
    4406:	89 2b       	or	r24, r25
    4408:	e1 f6       	brne	.-72     	; 0x43c2 <fputc+0x10>
    440a:	d8 01       	movw	r26, r16
    440c:	16 96       	adiw	r26, 0x06	; 6
    440e:	8d 91       	ld	r24, X+
    4410:	9c 91       	ld	r25, X
    4412:	17 97       	sbiw	r26, 0x07	; 7
    4414:	01 96       	adiw	r24, 0x01	; 1
    4416:	17 96       	adiw	r26, 0x07	; 7
    4418:	9c 93       	st	X, r25
    441a:	8e 93       	st	-X, r24
    441c:	16 97       	sbiw	r26, 0x06	; 6
    441e:	ce 01       	movw	r24, r28
    4420:	df 91       	pop	r29
    4422:	cf 91       	pop	r28
    4424:	1f 91       	pop	r17
    4426:	0f 91       	pop	r16
    4428:	08 95       	ret

0000442a <__ultoa_invert>:
    442a:	fa 01       	movw	r30, r20
    442c:	aa 27       	eor	r26, r26
    442e:	28 30       	cpi	r18, 0x08	; 8
    4430:	51 f1       	breq	.+84     	; 0x4486 <__ultoa_invert+0x5c>
    4432:	20 31       	cpi	r18, 0x10	; 16
    4434:	81 f1       	breq	.+96     	; 0x4496 <__ultoa_invert+0x6c>
    4436:	e8 94       	clt
    4438:	6f 93       	push	r22
    443a:	6e 7f       	andi	r22, 0xFE	; 254
    443c:	6e 5f       	subi	r22, 0xFE	; 254
    443e:	7f 4f       	sbci	r23, 0xFF	; 255
    4440:	8f 4f       	sbci	r24, 0xFF	; 255
    4442:	9f 4f       	sbci	r25, 0xFF	; 255
    4444:	af 4f       	sbci	r26, 0xFF	; 255
    4446:	b1 e0       	ldi	r27, 0x01	; 1
    4448:	3e d0       	rcall	.+124    	; 0x44c6 <__ultoa_invert+0x9c>
    444a:	b4 e0       	ldi	r27, 0x04	; 4
    444c:	3c d0       	rcall	.+120    	; 0x44c6 <__ultoa_invert+0x9c>
    444e:	67 0f       	add	r22, r23
    4450:	78 1f       	adc	r23, r24
    4452:	89 1f       	adc	r24, r25
    4454:	9a 1f       	adc	r25, r26
    4456:	a1 1d       	adc	r26, r1
    4458:	68 0f       	add	r22, r24
    445a:	79 1f       	adc	r23, r25
    445c:	8a 1f       	adc	r24, r26
    445e:	91 1d       	adc	r25, r1
    4460:	a1 1d       	adc	r26, r1
    4462:	6a 0f       	add	r22, r26
    4464:	71 1d       	adc	r23, r1
    4466:	81 1d       	adc	r24, r1
    4468:	91 1d       	adc	r25, r1
    446a:	a1 1d       	adc	r26, r1
    446c:	20 d0       	rcall	.+64     	; 0x44ae <__ultoa_invert+0x84>
    446e:	09 f4       	brne	.+2      	; 0x4472 <__ultoa_invert+0x48>
    4470:	68 94       	set
    4472:	3f 91       	pop	r19
    4474:	2a e0       	ldi	r18, 0x0A	; 10
    4476:	26 9f       	mul	r18, r22
    4478:	11 24       	eor	r1, r1
    447a:	30 19       	sub	r19, r0
    447c:	30 5d       	subi	r19, 0xD0	; 208
    447e:	31 93       	st	Z+, r19
    4480:	de f6       	brtc	.-74     	; 0x4438 <__ultoa_invert+0xe>
    4482:	cf 01       	movw	r24, r30
    4484:	08 95       	ret
    4486:	46 2f       	mov	r20, r22
    4488:	47 70       	andi	r20, 0x07	; 7
    448a:	40 5d       	subi	r20, 0xD0	; 208
    448c:	41 93       	st	Z+, r20
    448e:	b3 e0       	ldi	r27, 0x03	; 3
    4490:	0f d0       	rcall	.+30     	; 0x44b0 <__ultoa_invert+0x86>
    4492:	c9 f7       	brne	.-14     	; 0x4486 <__ultoa_invert+0x5c>
    4494:	f6 cf       	rjmp	.-20     	; 0x4482 <__ultoa_invert+0x58>
    4496:	46 2f       	mov	r20, r22
    4498:	4f 70       	andi	r20, 0x0F	; 15
    449a:	40 5d       	subi	r20, 0xD0	; 208
    449c:	4a 33       	cpi	r20, 0x3A	; 58
    449e:	18 f0       	brcs	.+6      	; 0x44a6 <__ultoa_invert+0x7c>
    44a0:	49 5d       	subi	r20, 0xD9	; 217
    44a2:	31 fd       	sbrc	r19, 1
    44a4:	40 52       	subi	r20, 0x20	; 32
    44a6:	41 93       	st	Z+, r20
    44a8:	02 d0       	rcall	.+4      	; 0x44ae <__ultoa_invert+0x84>
    44aa:	a9 f7       	brne	.-22     	; 0x4496 <__ultoa_invert+0x6c>
    44ac:	ea cf       	rjmp	.-44     	; 0x4482 <__ultoa_invert+0x58>
    44ae:	b4 e0       	ldi	r27, 0x04	; 4
    44b0:	a6 95       	lsr	r26
    44b2:	97 95       	ror	r25
    44b4:	87 95       	ror	r24
    44b6:	77 95       	ror	r23
    44b8:	67 95       	ror	r22
    44ba:	ba 95       	dec	r27
    44bc:	c9 f7       	brne	.-14     	; 0x44b0 <__ultoa_invert+0x86>
    44be:	00 97       	sbiw	r24, 0x00	; 0
    44c0:	61 05       	cpc	r22, r1
    44c2:	71 05       	cpc	r23, r1
    44c4:	08 95       	ret
    44c6:	9b 01       	movw	r18, r22
    44c8:	ac 01       	movw	r20, r24
    44ca:	0a 2e       	mov	r0, r26
    44cc:	06 94       	lsr	r0
    44ce:	57 95       	ror	r21
    44d0:	47 95       	ror	r20
    44d2:	37 95       	ror	r19
    44d4:	27 95       	ror	r18
    44d6:	ba 95       	dec	r27
    44d8:	c9 f7       	brne	.-14     	; 0x44cc <__ultoa_invert+0xa2>
    44da:	62 0f       	add	r22, r18
    44dc:	73 1f       	adc	r23, r19
    44de:	84 1f       	adc	r24, r20
    44e0:	95 1f       	adc	r25, r21
    44e2:	a0 1d       	adc	r26, r0
    44e4:	08 95       	ret

000044e6 <_exit>:
    44e6:	f8 94       	cli

000044e8 <__stop_program>:
    44e8:	ff cf       	rjmp	.-2      	; 0x44e8 <__stop_program>
