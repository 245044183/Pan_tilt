
Pantilt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  0000440a  0000449e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000440a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fd  0080015c  0080015c  000044fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000044fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b8  00000000  00000000  00004598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e7d  00000000  00000000  00004b50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ae9  00000000  00000000  0000b9cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c6a  00000000  00000000  0000d4b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011f0  00000000  00000000  00011120  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fe5  00000000  00000000  00012310  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000653e  00000000  00000000  000142f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0001a833  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      18:	0c 94 00 0d 	jmp	0x1a00	; 0x1a00 <__vector_6>
      1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      68:	a8 16       	cp	r10, r24
      6a:	a8 16       	cp	r10, r24
      6c:	a8 16       	cp	r10, r24
      6e:	d8 16       	cp	r13, r24
      70:	e0 16       	cp	r14, r16
      72:	f0 16       	cp	r15, r16
      74:	a8 16       	cp	r10, r24
      76:	a8 16       	cp	r10, r24
      78:	d8 16       	cp	r13, r24
      7a:	e0 16       	cp	r14, r16
      7c:	03 6e       	ori	r16, 0xE3	; 227
      7e:	db 36       	cpi	r29, 0x6B	; 107
      80:	3d 9a       	sbi	0x07, 5	; 7
      82:	99 99       	sbic	0x13, 1	; 19
      84:	99 3d       	cpi	r25, 0xD9	; 217
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	3e 00       	.word	0x003e	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 4a       	sbci	r16, 0xA8	; 168
      92:	d7 3b       	cpi	r29, 0xB7	; 183
      94:	3b ce       	rjmp	.-906    	; 0xfffffd0c <__eeprom_end+0xff7efd0c>
      96:	01 6e       	ori	r16, 0xE1	; 225
      98:	84 bc       	out	0x24, r8	; 36
      9a:	bf fd       	.word	0xfdbf	; ????
      9c:	c1 2f       	mov	r28, r17
      9e:	3d 6c       	ori	r19, 0xCD	; 205
      a0:	74 31       	cpi	r23, 0x14	; 20
      a2:	9a bd       	out	0x2a, r25	; 42
      a4:	56 83       	std	Z+6, r21	; 0x06
      a6:	3d da       	rcall	.-2950   	; 0xfffff522 <__eeprom_end+0xff7ef522>
      a8:	3d 00       	.word	0x003d	; ????
      aa:	c7 7f       	andi	r28, 0xF7	; 247
      ac:	11 be       	out	0x31, r1	; 49
      ae:	d9 e4       	ldi	r29, 0x49	; 73
      b0:	bb 4c       	sbci	r27, 0xCB	; 203
      b2:	3e 91       	ld	r19, -X
      b4:	6b aa       	std	Y+51, r6	; 0x33
      b6:	aa be       	out	0x3a, r10	; 58
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <__stack+0x29d>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 00       	.word	0x003f	; ????

000000e6 <__trampolines_end>:
      e6:	6e 61       	ori	r22, 0x1E	; 30
      e8:	6e 00       	.word	0x006e	; ????

000000ea <__c.2332>:
      ea:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      fa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1aa:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1ba:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ca:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1da:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d8 e0       	ldi	r29, 0x08	; 8
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	11 e0       	ldi	r17, 0x01	; 1
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	ea e0       	ldi	r30, 0x0A	; 10
     1fc:	f4 e4       	ldi	r31, 0x44	; 68
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x10>
     200:	05 90       	lpm	r0, Z+
     202:	0d 92       	st	X+, r0
     204:	ac 35       	cpi	r26, 0x5C	; 92
     206:	b1 07       	cpc	r27, r17
     208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0xc>

0000020a <__do_clear_bss>:
     20a:	22 e0       	ldi	r18, 0x02	; 2
     20c:	ac e5       	ldi	r26, 0x5C	; 92
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
     212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
     214:	a9 35       	cpi	r26, 0x59	; 89
     216:	b2 07       	cpc	r27, r18
     218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
     21a:	0e 94 13 01 	call	0x226	; 0x226 <main>
     21e:	0c 94 03 22 	jmp	0x4406	; 0x4406 <_exit>

00000222 <__bad_interrupt>:
     222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <main>:
char MyString[10];
/*-----------------------------------------------------*/
int main(void)
{
	/* Replace with your application code */
	UART_init(BAUD_PRESCALER);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 bb 17 	call	0x2f76	; 0x2f76 <UART_init>
	I2C_Init();
     22e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_Init>
	MPU_Init();
     232:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <MPU_Init>
	ADC_Init();
     236:	0e 94 33 01 	call	0x266	; 0x266 <ADC_Init>
	initialize_pwm_2servos();
     23a:	0e 94 a5 01 	call	0x34a	; 0x34a <initialize_pwm_2servos>
	initialize_pwm_joyservo();
     23e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <initialize_pwm_joyservo>
	sprintf(MyString,"Init OK");
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	af e1       	ldi	r26, 0x1F	; 31
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <main+0x26>
	UART_putstring(MyString);
     254:	8f e1       	ldi	r24, 0x1F	; 31
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <UART_putstring>
	
	MytaskCreate();
     25c:	0e 94 db 02 	call	0x5b6	; 0x5b6 <MytaskCreate>
	vTaskStartScheduler();
     260:	0e 94 9d 11 	call	0x233a	; 0x233a <vTaskStartScheduler>
     264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x3e>

00000266 <ADC_Init>:
	OCR0A=80;
	OCR0B=OCR0A/2;
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM0B1);
	sei(); //Enable global interrupts
     266:	f8 94       	cli
     268:	e4 e6       	ldi	r30, 0x64	; 100
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8e 7f       	andi	r24, 0xFE	; 254
     270:	80 83       	st	Z, r24
     272:	ac e7       	ldi	r26, 0x7C	; 124
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	8c 91       	ld	r24, X
     278:	80 64       	ori	r24, 0x40	; 64
     27a:	8c 93       	st	X, r24
     27c:	8c 91       	ld	r24, X
     27e:	8f 77       	andi	r24, 0x7F	; 127
     280:	8c 93       	st	X, r24
     282:	ea e7       	ldi	r30, 0x7A	; 122
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	84 60       	ori	r24, 0x04	; 4
     28a:	80 83       	st	Z, r24
     28c:	80 81       	ld	r24, Z
     28e:	82 60       	ori	r24, 0x02	; 2
     290:	80 83       	st	Z, r24
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	8c 91       	ld	r24, X
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	8c 93       	st	X, r24
     29e:	8c 91       	ld	r24, X
     2a0:	8d 7f       	andi	r24, 0xFD	; 253
     2a2:	8c 93       	st	X, r24
     2a4:	8c 91       	ld	r24, X
     2a6:	8b 7f       	andi	r24, 0xFB	; 251
     2a8:	8c 93       	st	X, r24
     2aa:	8c 91       	ld	r24, X
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	8c 93       	st	X, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	80 62       	ori	r24, 0x20	; 32
     2b4:	80 83       	st	Z, r24
     2b6:	ab e7       	ldi	r26, 0x7B	; 123
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	8e 7f       	andi	r24, 0xFE	; 254
     2be:	8c 93       	st	X, r24
     2c0:	8c 91       	ld	r24, X
     2c2:	8e 7f       	andi	r24, 0xFE	; 254
     2c4:	8c 93       	st	X, r24
     2c6:	8c 91       	ld	r24, X
     2c8:	8e 7f       	andi	r24, 0xFE	; 254
     2ca:	8c 93       	st	X, r24
     2cc:	ae e7       	ldi	r26, 0x7E	; 126
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	8c 91       	ld	r24, X
     2d2:	81 60       	ori	r24, 0x01	; 1
     2d4:	8c 93       	st	X, r24
     2d6:	80 81       	ld	r24, Z
     2d8:	80 68       	ori	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
     2dc:	80 81       	ld	r24, Z
     2de:	80 64       	ori	r24, 0x40	; 64
     2e0:	80 83       	st	Z, r24
     2e2:	78 94       	sei
     2e4:	08 95       	ret

000002e6 <deg_to_servo1>:
}


//servo1 is on PB1
void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
     2e6:	bc 01       	movw	r22, r24
     2e8:	99 0f       	add	r25, r25
     2ea:	88 0b       	sbc	r24, r24
     2ec:	99 0b       	sbc	r25, r25
     2ee:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
     2f2:	2a e7       	ldi	r18, 0x7A	; 122
     2f4:	37 ec       	ldi	r19, 0xC7	; 199
     2f6:	41 e3       	ldi	r20, 0x31	; 49
     2f8:	50 e4       	ldi	r21, 0x40	; 64
     2fa:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	4a ef       	ldi	r20, 0xFA	; 250
     304:	52 e4       	ldi	r21, 0x42	; 66
     306:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     30a:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__fixunssfsi>
     30e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     312:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     316:	08 95       	ret

00000318 <deg_to_servo2>:
}
//servo2 is on PB2
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
     318:	bc 01       	movw	r22, r24
     31a:	99 0f       	add	r25, r25
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
     324:	2a e7       	ldi	r18, 0x7A	; 122
     326:	37 ec       	ldi	r19, 0xC7	; 199
     328:	41 e3       	ldi	r20, 0x31	; 49
     32a:	50 e4       	ldi	r21, 0x40	; 64
     32c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a ef       	ldi	r20, 0xFA	; 250
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     33c:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__fixunssfsi>
     340:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     344:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     348:	08 95       	ret

0000034a <initialize_pwm_2servos>:
}
void initialize_pwm_2servos (){
	cli();
     34a:	f8 94       	cli
	DDRB |= (1<<DDB1)|(1<<DDB2);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     34c:	84 b1       	in	r24, 0x04	; 4
     34e:	86 60       	ori	r24, 0x06	; 6
     350:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0;		/* Set timer1 count zero */
     352:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     356:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	ICR1 = 4999;		/* Set TOP count for timer1 in ICR1 register */
     35a:	87 e8       	ldi	r24, 0x87	; 135
     35c:	93 e1       	ldi	r25, 0x13	; 19
     35e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     362:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	//TCCR1A = (1<<WGM11)|(1<<COM1A1);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	//clear OC1A/OC1B on compare match
	//for servo1
	TCCR1A |= (1<<COM1A1);
     366:	e0 e8       	ldi	r30, 0x80	; 128
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);
     370:	80 81       	ld	r24, Z
     372:	8f 7b       	andi	r24, 0xBF	; 191
     374:	80 83       	st	Z, r24
	//for servo2
	TCCR1A |= (1<<COM1B1);
     376:	80 81       	ld	r24, Z
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     37c:	80 81       	ld	r24, Z
     37e:	8f 7e       	andi	r24, 0xEF	; 239
     380:	80 83       	st	Z, r24
	//Fast PWM Mode
	TCCR1A &= ~(1<<WGM10);
     382:	80 81       	ld	r24, Z
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11);
     388:	80 81       	ld	r24, Z
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
     38e:	e1 e8       	ldi	r30, 0x81	; 129
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	88 60       	ori	r24, 0x08	; 8
     396:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13);
     398:	80 81       	ld	r24, Z
     39a:	80 61       	ori	r24, 0x10	; 16
     39c:	80 83       	st	Z, r24
	//Configure timer pre-scaler (011) /64
	TCCR1B |= (1<<CS10);
     39e:	80 81       	ld	r24, Z
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
     3a4:	80 81       	ld	r24, Z
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
     3aa:	80 81       	ld	r24, Z
     3ac:	8b 7f       	andi	r24, 0xFB	; 251
     3ae:	80 83       	st	Z, r24
	sei();
     3b0:	78 94       	sei
     3b2:	08 95       	ret

000003b4 <initialize_pwm_joyservo>:
}
void initialize_pwm_joyservo (){
	cli();//disable all interrupts
     3b4:	f8 94       	cli
	DDRD |= (1<<DDD5);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     3b6:	55 9a       	sbi	0x0a, 5	; 10
	//Use Timer 0 for joystick to servo
	//prescale of 1024 (101)
	TCCR0B |= (1<<CS02);
     3b8:	85 b5       	in	r24, 0x25	; 37
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     3be:	85 b5       	in	r24, 0x25	; 37
     3c0:	8d 7f       	andi	r24, 0xFD	; 253
     3c2:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
     3c4:	85 b5       	in	r24, 0x25	; 37
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	85 bd       	out	0x25, r24	; 37
	
	//Fast PWM mode
	TCCR0A |= (1<<WGM00);
     3ca:	84 b5       	in	r24, 0x24	; 36
     3cc:	81 60       	ori	r24, 0x01	; 1
     3ce:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
     3d0:	84 b5       	in	r24, 0x24	; 36
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
     3d6:	85 b5       	in	r24, 0x25	; 37
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A sets frequency
	//OCR0B sets duty cycle
	OCR0A=255;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	87 bd       	out	0x27, r24	; 39
	OCR0B=OCR0A/2;
     3e0:	87 b5       	in	r24, 0x27	; 39
     3e2:	86 95       	lsr	r24
     3e4:	88 bd       	out	0x28, r24	; 40
	
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM1B1);
     3e6:	84 b5       	in	r24, 0x24	; 36
     3e8:	80 62       	ori	r24, 0x20	; 32
     3ea:	84 bd       	out	0x24, r24	; 36
	sei(); //Enable global interrupts
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <vADCTaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vADCTaskFunction( void *pvParameters )
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <vADCTaskFunction+0x6>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeADC;
		const TickType_t xPeriodFrequencyADC = 1;// 15ms per tick  15ms*93 = 1395
		
		xLastWakeTimeADC = xTaskGetTickCount();
     3fa:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <xTaskGetTickCount>
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
			//ADC
			ADC_Value = ADC;
     402:	08 e7       	ldi	r16, 0x78	; 120
     404:	10 e0       	ldi	r17, 0x00	; 0
			}
			else if (OCR0B<=10){
				OCR0B=11;
			}
			else if (OCR0B>=40){
				OCR0B=39;
     406:	0f 2e       	mov	r0, r31
     408:	f7 e2       	ldi	r31, 0x27	; 39
     40a:	ef 2e       	mov	r14, r31
     40c:	f0 2d       	mov	r31, r0
					OCR0B++;

				}
			}
			else if (OCR0B<=10){
				OCR0B=11;
     40e:	0f 2e       	mov	r0, r31
     410:	fb e0       	ldi	r31, 0x0B	; 11
     412:	ff 2e       	mov	r15, r31
     414:	f0 2d       	mov	r31, r0
		
		xLastWakeTimeADC = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
     416:	61 e0       	ldi	r22, 0x01	; 1
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	ce 01       	movw	r24, r28
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	0e 94 1d 13 	call	0x263a	; 0x263a <vTaskDelayUntil>
			//ADC
			ADC_Value = ADC;
     422:	f8 01       	movw	r30, r16
     424:	60 81       	ld	r22, Z
     426:	71 81       	ldd	r23, Z+1	; 0x01
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	0e 94 88 19 	call	0x3310	; 0x3310 <__floatunsisf>
     430:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <ADC_Value>
     434:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <ADC_Value+0x1>
     438:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <ADC_Value+0x2>
     43c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <ADC_Value+0x3>
			if(OCR0B>10&&OCR0B<40){
     440:	28 b5       	in	r18, 0x28	; 40
     442:	2b 30       	cpi	r18, 0x0B	; 11
     444:	50 f1       	brcs	.+84     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     446:	28 b5       	in	r18, 0x28	; 40
     448:	28 32       	cpi	r18, 0x28	; 40
     44a:	38 f5       	brcc	.+78     	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
				if ((ADC_Value*5/1024)==0){
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	40 ea       	ldi	r20, 0xA0	; 160
     452:	50 e4       	ldi	r21, 0x40	; 64
     454:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     458:	20 e0       	ldi	r18, 0x00	; 0
     45a:	30 e0       	ldi	r19, 0x00	; 0
     45c:	40 e8       	ldi	r20, 0x80	; 128
     45e:	5a e3       	ldi	r21, 0x3A	; 58
     460:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     464:	4b 01       	movw	r8, r22
     466:	5c 01       	movw	r10, r24
     468:	20 e0       	ldi	r18, 0x00	; 0
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	a9 01       	movw	r20, r18
     46e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__cmpsf2>
     472:	81 11       	cpse	r24, r1
     474:	04 c0       	rjmp	.+8      	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
					OCR0B--;
     476:	88 b5       	in	r24, 0x28	; 40
     478:	81 50       	subi	r24, 0x01	; 1
     47a:	88 bd       	out	0x28, r24	; 40
     47c:	cc cf       	rjmp	.-104    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				}
				else if ((ADC_Value*5/1024)==4){
     47e:	20 e0       	ldi	r18, 0x00	; 0
     480:	30 e0       	ldi	r19, 0x00	; 0
     482:	40 e8       	ldi	r20, 0x80	; 128
     484:	50 e4       	ldi	r21, 0x40	; 64
     486:	c5 01       	movw	r24, r10
     488:	b4 01       	movw	r22, r8
     48a:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__cmpsf2>
     48e:	81 11       	cpse	r24, r1
     490:	c2 cf       	rjmp	.-124    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
					OCR0B++;
     492:	88 b5       	in	r24, 0x28	; 40
     494:	8f 5f       	subi	r24, 0xFF	; 255
     496:	88 bd       	out	0x28, r24	; 40
     498:	be cf       	rjmp	.-132    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

				}
			}
			else if (OCR0B<=10){
     49a:	88 b5       	in	r24, 0x28	; 40
     49c:	8b 30       	cpi	r24, 0x0B	; 11
     49e:	10 f4       	brcc	.+4      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
				OCR0B=11;
     4a0:	f8 bc       	out	0x28, r15	; 40
     4a2:	b9 cf       	rjmp	.-142    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
			}
			else if (OCR0B>=40){
     4a4:	88 b5       	in	r24, 0x28	; 40
     4a6:	88 32       	cpi	r24, 0x28	; 40
     4a8:	08 f4       	brcc	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4aa:	b5 cf       	rjmp	.-150    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
				OCR0B=39;
     4ac:	e8 bc       	out	0x28, r14	; 40
     4ae:	b3 cf       	rjmp	.-154    	; 0x416 <__LOCK_REGION_LENGTH__+0x16>

000004b0 <vMahonyTaskFunction>:
float ADC_Value;
// static TickType_t time1;
// static TickType_t time2;
// static int period;
void vMahonyTaskFunction( void *pvParameters )
{
     4b0:	cf 93       	push	r28
     4b2:	df 93       	push	r29
     4b4:	00 d0       	rcall	.+0      	; 0x4b6 <vMahonyTaskFunction+0x6>
     4b6:	cd b7       	in	r28, 0x3d	; 61
     4b8:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMahony;
		const TickType_t xPeriodFrequencyMahony = 1;// 15ms per tick

		xLastWakeTimeMahony = xTaskGetTickCount();
     4ba:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <xTaskGetTickCount>
     4be:	9a 83       	std	Y+2, r25	; 0x02
     4c0:	89 83       	std	Y+1, r24	; 0x01
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     4c2:	0f 2e       	mov	r0, r31
     4c4:	f6 e1       	ldi	r31, 0x16	; 22
     4c6:	8f 2e       	mov	r8, r31
     4c8:	f1 e0       	ldi	r31, 0x01	; 1
     4ca:	9f 2e       	mov	r9, r31
     4cc:	f0 2d       	mov	r31, r0
     4ce:	0f 2e       	mov	r0, r31
     4d0:	fa e0       	ldi	r31, 0x0A	; 10
     4d2:	6f 2e       	mov	r6, r31
     4d4:	f1 e0       	ldi	r31, 0x01	; 1
     4d6:	7f 2e       	mov	r7, r31
     4d8:	f0 2d       	mov	r31, r0

		xLastWakeTimeMahony = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
     4da:	61 e0       	ldi	r22, 0x01	; 1
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	ce 01       	movw	r24, r28
     4e0:	01 96       	adiw	r24, 0x01	; 1
     4e2:	0e 94 1d 13 	call	0x263a	; 0x263a <vTaskDelayUntil>
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     4e6:	d4 01       	movw	r26, r8
     4e8:	ad 90       	ld	r10, X+
     4ea:	bd 90       	ld	r11, X+
     4ec:	cd 90       	ld	r12, X+
     4ee:	dc 90       	ld	r13, X
     4f0:	13 97       	sbiw	r26, 0x03	; 3
     4f2:	f3 01       	movw	r30, r6
     4f4:	e0 84       	ldd	r14, Z+8	; 0x08
     4f6:	f1 84       	ldd	r15, Z+9	; 0x09
     4f8:	02 85       	ldd	r16, Z+10	; 0x0a
     4fa:	13 85       	ldd	r17, Z+11	; 0x0b
     4fc:	24 81       	ldd	r18, Z+4	; 0x04
     4fe:	35 81       	ldd	r19, Z+5	; 0x05
     500:	46 81       	ldd	r20, Z+6	; 0x06
     502:	57 81       	ldd	r21, Z+7	; 0x07
     504:	60 81       	ld	r22, Z
     506:	71 81       	ldd	r23, Z+1	; 0x01
     508:	82 81       	ldd	r24, Z+2	; 0x02
     50a:	93 81       	ldd	r25, Z+3	; 0x03
     50c:	1b 96       	adiw	r26, 0x0b	; 11
     50e:	ec 91       	ld	r30, X
     510:	1b 97       	sbiw	r26, 0x0b	; 11
     512:	ef 93       	push	r30
     514:	1a 96       	adiw	r26, 0x0a	; 10
     516:	ec 91       	ld	r30, X
     518:	1a 97       	sbiw	r26, 0x0a	; 10
     51a:	ef 93       	push	r30
     51c:	19 96       	adiw	r26, 0x09	; 9
     51e:	ec 91       	ld	r30, X
     520:	19 97       	sbiw	r26, 0x09	; 9
     522:	ef 93       	push	r30
     524:	18 96       	adiw	r26, 0x08	; 8
     526:	ec 91       	ld	r30, X
     528:	18 97       	sbiw	r26, 0x08	; 8
     52a:	ef 93       	push	r30
     52c:	17 96       	adiw	r26, 0x07	; 7
     52e:	ec 91       	ld	r30, X
     530:	17 97       	sbiw	r26, 0x07	; 7
     532:	ef 93       	push	r30
     534:	16 96       	adiw	r26, 0x06	; 6
     536:	ec 91       	ld	r30, X
     538:	16 97       	sbiw	r26, 0x06	; 6
     53a:	ef 93       	push	r30
     53c:	15 96       	adiw	r26, 0x05	; 5
     53e:	ec 91       	ld	r30, X
     540:	15 97       	sbiw	r26, 0x05	; 5
     542:	ef 93       	push	r30
     544:	14 96       	adiw	r26, 0x04	; 4
     546:	ec 91       	ld	r30, X
     548:	ef 93       	push	r30
     54a:	0e 94 60 04 	call	0x8c0	; 0x8c0 <MahonyAHRSupdateIMU>
			q2Angle(Angle);
     54e:	8d e2       	ldi	r24, 0x2D	; 45
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	0e 94 a4 07 	call	0xf48	; 0xf48 <q2Angle>
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	bc cf       	rjmp	.-136    	; 0x4da <vMahonyTaskFunction+0x2a>

00000562 <vMPU6050TaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vMPU6050TaskFunction( void *pvParameters )
{
     562:	cf 93       	push	r28
     564:	df 93       	push	r29
     566:	00 d0       	rcall	.+0      	; 0x568 <vMPU6050TaskFunction+0x6>
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMPU;
		const TickType_t xPeriodFrequencyMPU = 1;// 15ms per tick
		
		xLastWakeTimeMPU = xTaskGetTickCount();
     56c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <xTaskGetTickCount>
     570:	9a 83       	std	Y+2, r25	; 0x02
     572:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMPU, xPeriodFrequencyMPU );
     574:	61 e0       	ldi	r22, 0x01	; 1
     576:	70 e0       	ldi	r23, 0x00	; 0
     578:	ce 01       	movw	r24, r28
     57a:	01 96       	adiw	r24, 0x01	; 1
     57c:	0e 94 1d 13 	call	0x263a	; 0x263a <vTaskDelayUntil>
//			TickType_t time1 = xTaskGetTickCount();
			MPU_read(AccData,GyroData);
     580:	6a e0       	ldi	r22, 0x0A	; 10
     582:	71 e0       	ldi	r23, 0x01	; 1
     584:	86 e1       	ldi	r24, 0x16	; 22
     586:	91 e0       	ldi	r25, 0x01	; 1
     588:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <MPU_read>
     58c:	f3 cf       	rjmp	.-26     	; 0x574 <vMPU6050TaskFunction+0x12>

0000058e <vControlTaskFunction>:
	vTaskDelete( NULL );
}

// Task C for control
void vControlTaskFunction( void *pvParameters )
{
     58e:	cf 93       	push	r28
     590:	df 93       	push	r29
     592:	00 d0       	rcall	.+0      	; 0x594 <vControlTaskFunction+0x6>
     594:	cd b7       	in	r28, 0x3d	; 61
     596:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeControl;
		const TickType_t xPeriodFrequencyControl = 1;// 15ms per tick  15ms*93 = 1395
		
		xLastWakeTimeControl = xTaskGetTickCount();
     598:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <xTaskGetTickCount>
     59c:	9a 83       	std	Y+2, r25	; 0x02
     59e:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeControl, xPeriodFrequencyControl );
     5a0:	61 e0       	ldi	r22, 0x01	; 1
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	ce 01       	movw	r24, r28
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	0e 94 1d 13 	call	0x263a	; 0x263a <vTaskDelayUntil>
			BalanceControl(Angle);
     5ac:	8d e2       	ldi	r24, 0x2D	; 45
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	0e 94 a9 03 	call	0x752	; 0x752 <BalanceControl>
     5b4:	f5 cf       	rjmp	.-22     	; 0x5a0 <vControlTaskFunction+0x12>

000005b6 <MytaskCreate>:
	}
	vTaskDelete( NULL );
}
//
void MytaskCreate(void)
{
     5b6:	ef 92       	push	r14
     5b8:	ff 92       	push	r15
     5ba:	0f 93       	push	r16
	/* Create tasks and make some magic*/

	xTaskCreate( vMahonyTaskFunction,"TASKA",256,NULL,3,NULL);
     5bc:	e1 2c       	mov	r14, r1
     5be:	f1 2c       	mov	r15, r1
     5c0:	03 e0       	ldi	r16, 0x03	; 3
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	51 e0       	ldi	r21, 0x01	; 1
     5ca:	6a e2       	ldi	r22, 0x2A	; 42
     5cc:	71 e0       	ldi	r23, 0x01	; 1
     5ce:	88 e5       	ldi	r24, 0x58	; 88
     5d0:	92 e0       	ldi	r25, 0x02	; 2
     5d2:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskCreate>
	xTaskCreate( vMPU6050TaskFunction,"TASKB",256,NULL, 2,NULL);
     5d6:	02 e0       	ldi	r16, 0x02	; 2
     5d8:	20 e0       	ldi	r18, 0x00	; 0
     5da:	30 e0       	ldi	r19, 0x00	; 0
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	51 e0       	ldi	r21, 0x01	; 1
     5e0:	60 e3       	ldi	r22, 0x30	; 48
     5e2:	71 e0       	ldi	r23, 0x01	; 1
     5e4:	81 eb       	ldi	r24, 0xB1	; 177
     5e6:	92 e0       	ldi	r25, 0x02	; 2
     5e8:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskCreate>
	xTaskCreate( vControlTaskFunction,"TASKC",256,NULL,1,NULL);
     5ec:	01 e0       	ldi	r16, 0x01	; 1
     5ee:	20 e0       	ldi	r18, 0x00	; 0
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	40 e0       	ldi	r20, 0x00	; 0
     5f4:	51 e0       	ldi	r21, 0x01	; 1
     5f6:	66 e3       	ldi	r22, 0x36	; 54
     5f8:	71 e0       	ldi	r23, 0x01	; 1
     5fa:	87 ec       	ldi	r24, 0xC7	; 199
     5fc:	92 e0       	ldi	r25, 0x02	; 2
     5fe:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskCreate>
	xTaskCreate( vADCTaskFunction,"TASKD",256,NULL,4,NULL);
     602:	04 e0       	ldi	r16, 0x04	; 4
     604:	20 e0       	ldi	r18, 0x00	; 0
     606:	30 e0       	ldi	r19, 0x00	; 0
     608:	40 e0       	ldi	r20, 0x00	; 0
     60a:	51 e0       	ldi	r21, 0x01	; 1
     60c:	6c e3       	ldi	r22, 0x3C	; 60
     60e:	71 e0       	ldi	r23, 0x01	; 1
     610:	88 ef       	ldi	r24, 0xF8	; 248
     612:	91 e0       	ldi	r25, 0x01	; 1
     614:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskCreate>
	
}
     618:	0f 91       	pop	r16
     61a:	ff 90       	pop	r15
     61c:	ef 90       	pop	r14
     61e:	08 95       	ret

00000620 <PID>:
struct PID_Para PIDParaY={0,0};
float last_error;
float increment_error;

float PID(float error, int frequency, struct PID_Para Parameter)
{
     620:	8f 92       	push	r8
     622:	9f 92       	push	r9
     624:	af 92       	push	r10
     626:	bf 92       	push	r11
     628:	cf 92       	push	r12
     62a:	df 92       	push	r13
     62c:	ef 92       	push	r14
     62e:	ff 92       	push	r15
     630:	0f 93       	push	r16
     632:	1f 93       	push	r17
     634:	cf 93       	push	r28
     636:	df 93       	push	r29
     638:	cd b7       	in	r28, 0x3d	; 61
     63a:	de b7       	in	r29, 0x3e	; 62
     63c:	28 97       	sbiw	r28, 0x08	; 8
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	de bf       	out	0x3e, r29	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	cd bf       	out	0x3d, r28	; 61
     648:	4b 01       	movw	r8, r22
     64a:	5c 01       	movw	r10, r24
     64c:	c9 82       	std	Y+1, r12	; 0x01
     64e:	da 82       	std	Y+2, r13	; 0x02
     650:	eb 82       	std	Y+3, r14	; 0x03
     652:	fc 82       	std	Y+4, r15	; 0x04
     654:	0d 83       	std	Y+5, r16	; 0x05
     656:	1e 83       	std	Y+6, r17	; 0x06
     658:	2f 83       	std	Y+7, r18	; 0x07
     65a:	38 87       	std	Y+8, r19	; 0x08
	float output;
	output = error*Kp+Parameter.increment_error*Ki+(error-Parameter.last_error)*Kd;
     65c:	2f e6       	ldi	r18, 0x6F	; 111
     65e:	32 e1       	ldi	r19, 0x12	; 18
     660:	43 e8       	ldi	r20, 0x83	; 131
     662:	5a e3       	ldi	r21, 0x3A	; 58
     664:	6d 81       	ldd	r22, Y+5	; 0x05
     666:	7e 81       	ldd	r23, Y+6	; 0x06
     668:	8f 81       	ldd	r24, Y+7	; 0x07
     66a:	98 85       	ldd	r25, Y+8	; 0x08
     66c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     670:	26 e6       	ldi	r18, 0x66	; 102
     672:	36 e6       	ldi	r19, 0x66	; 102
     674:	45 e8       	ldi	r20, 0x85	; 133
     676:	52 e4       	ldi	r21, 0x42	; 66
     678:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <__divsf3>
     67c:	6b 01       	movw	r12, r22
     67e:	7c 01       	movw	r14, r24
     680:	20 e0       	ldi	r18, 0x00	; 0
     682:	30 e0       	ldi	r19, 0x00	; 0
     684:	40 e0       	ldi	r20, 0x00	; 0
     686:	5f e3       	ldi	r21, 0x3F	; 63
     688:	c5 01       	movw	r24, r10
     68a:	b4 01       	movw	r22, r8
     68c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     690:	9b 01       	movw	r18, r22
     692:	ac 01       	movw	r20, r24
     694:	c7 01       	movw	r24, r14
     696:	b6 01       	movw	r22, r12
     698:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     69c:	6b 01       	movw	r12, r22
     69e:	7c 01       	movw	r14, r24
     6a0:	29 81       	ldd	r18, Y+1	; 0x01
     6a2:	3a 81       	ldd	r19, Y+2	; 0x02
     6a4:	4b 81       	ldd	r20, Y+3	; 0x03
     6a6:	5c 81       	ldd	r21, Y+4	; 0x04
     6a8:	c5 01       	movw	r24, r10
     6aa:	b4 01       	movw	r22, r8
     6ac:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	a9 01       	movw	r20, r18
     6b6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     6ba:	26 e6       	ldi	r18, 0x66	; 102
     6bc:	36 e6       	ldi	r19, 0x66	; 102
     6be:	45 e8       	ldi	r20, 0x85	; 133
     6c0:	52 e4       	ldi	r21, 0x42	; 66
     6c2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     6c6:	9b 01       	movw	r18, r22
     6c8:	ac 01       	movw	r20, r24
     6ca:	c7 01       	movw	r24, r14
     6cc:	b6 01       	movw	r22, r12
     6ce:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     6d2:	6b 01       	movw	r12, r22
     6d4:	7c 01       	movw	r14, r24
	Parameter.last_error = error;
	Parameter.increment_error += error;
	if (output>90)
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	44 eb       	ldi	r20, 0xB4	; 180
     6dc:	52 e4       	ldi	r21, 0x42	; 66
     6de:	0e 94 95 1a 	call	0x352a	; 0x352a <__gesf2>
     6e2:	18 16       	cp	r1, r24
     6e4:	9c f0       	brlt	.+38     	; 0x70c <PID+0xec>
	{
		output = 90;
	}
	if (output<-90)
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	44 eb       	ldi	r20, 0xB4	; 180
     6ec:	52 ec       	ldi	r21, 0xC2	; 194
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__cmpsf2>
     6f6:	88 23       	and	r24, r24
     6f8:	8c f4       	brge	.+34     	; 0x71c <PID+0xfc>
	{
		output = -90;
     6fa:	0f 2e       	mov	r0, r31
     6fc:	c1 2c       	mov	r12, r1
     6fe:	d1 2c       	mov	r13, r1
     700:	f4 eb       	ldi	r31, 0xB4	; 180
     702:	ef 2e       	mov	r14, r31
     704:	f2 ec       	ldi	r31, 0xC2	; 194
     706:	ff 2e       	mov	r15, r31
     708:	f0 2d       	mov	r31, r0
     70a:	08 c0       	rjmp	.+16     	; 0x71c <PID+0xfc>
	output = error*Kp+Parameter.increment_error*Ki+(error-Parameter.last_error)*Kd;
	Parameter.last_error = error;
	Parameter.increment_error += error;
	if (output>90)
	{
		output = 90;
     70c:	0f 2e       	mov	r0, r31
     70e:	c1 2c       	mov	r12, r1
     710:	d1 2c       	mov	r13, r1
     712:	f4 eb       	ldi	r31, 0xB4	; 180
     714:	ef 2e       	mov	r14, r31
     716:	f2 e4       	ldi	r31, 0x42	; 66
     718:	ff 2e       	mov	r15, r31
     71a:	f0 2d       	mov	r31, r0
	if (output<-90)
	{
		output = -90;
	}
	output += 90;
	return output;
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	44 eb       	ldi	r20, 0xB4	; 180
     722:	52 e4       	ldi	r21, 0x42	; 66
     724:	c7 01       	movw	r24, r14
     726:	b6 01       	movw	r22, r12
     728:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
}
     72c:	28 96       	adiw	r28, 0x08	; 8
     72e:	0f b6       	in	r0, 0x3f	; 63
     730:	f8 94       	cli
     732:	de bf       	out	0x3e, r29	; 62
     734:	0f be       	out	0x3f, r0	; 63
     736:	cd bf       	out	0x3d, r28	; 61
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	1f 91       	pop	r17
     73e:	0f 91       	pop	r16
     740:	ff 90       	pop	r15
     742:	ef 90       	pop	r14
     744:	df 90       	pop	r13
     746:	cf 90       	pop	r12
     748:	bf 90       	pop	r11
     74a:	af 90       	pop	r10
     74c:	9f 90       	pop	r9
     74e:	8f 90       	pop	r8
     750:	08 95       	ret

00000752 <BalanceControl>:

void BalanceControl(float pAngle[3])
{
     752:	8f 92       	push	r8
     754:	9f 92       	push	r9
     756:	af 92       	push	r10
     758:	bf 92       	push	r11
     75a:	cf 92       	push	r12
     75c:	df 92       	push	r13
     75e:	ef 92       	push	r14
     760:	ff 92       	push	r15
     762:	0f 93       	push	r16
     764:	1f 93       	push	r17
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	4c 01       	movw	r8, r24
	float x_error = pAngle[0] - 0;
	float y_error = pAngle[1] - 0;
	float DEG1 = PID(x_error,PID_Freq,PIDParaX);
     76c:	fc 01       	movw	r30, r24
     76e:	60 81       	ld	r22, Z
     770:	71 81       	ldd	r23, Z+1	; 0x01
     772:	82 81       	ldd	r24, Z+2	; 0x02
     774:	93 81       	ldd	r25, Z+3	; 0x03
     776:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <PIDParaX>
     77a:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <PIDParaX+0x1>
     77e:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <PIDParaX+0x2>
     782:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <PIDParaX+0x3>
     786:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <PIDParaX+0x4>
     78a:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <PIDParaX+0x5>
     78e:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <PIDParaX+0x6>
     792:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <PIDParaX+0x7>
     796:	42 e4       	ldi	r20, 0x42	; 66
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	0e 94 10 03 	call	0x620	; 0x620 <PID>
     79e:	a6 2e       	mov	r10, r22
     7a0:	b7 2e       	mov	r11, r23
     7a2:	d8 2f       	mov	r29, r24
     7a4:	c9 2f       	mov	r28, r25
	float DEG2 = PID(y_error,PID_Freq,PIDParaY);
     7a6:	f4 01       	movw	r30, r8
     7a8:	64 81       	ldd	r22, Z+4	; 0x04
     7aa:	75 81       	ldd	r23, Z+5	; 0x05
     7ac:	86 81       	ldd	r24, Z+6	; 0x06
     7ae:	97 81       	ldd	r25, Z+7	; 0x07
     7b0:	c0 90 5c 01 	lds	r12, 0x015C	; 0x80015c <__data_end>
     7b4:	d0 90 5d 01 	lds	r13, 0x015D	; 0x80015d <__data_end+0x1>
     7b8:	e0 90 5e 01 	lds	r14, 0x015E	; 0x80015e <__data_end+0x2>
     7bc:	f0 90 5f 01 	lds	r15, 0x015F	; 0x80015f <__data_end+0x3>
     7c0:	00 91 60 01 	lds	r16, 0x0160	; 0x800160 <__data_end+0x4>
     7c4:	10 91 61 01 	lds	r17, 0x0161	; 0x800161 <__data_end+0x5>
     7c8:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end+0x6>
     7cc:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x7>
     7d0:	42 e4       	ldi	r20, 0x42	; 66
     7d2:	50 e0       	ldi	r21, 0x00	; 0
     7d4:	0e 94 10 03 	call	0x620	; 0x620 <PID>
     7d8:	6b 01       	movw	r12, r22
     7da:	7c 01       	movw	r14, r24
	sprintf(MyString,"X error %f\n",DEG1);
     7dc:	cf 93       	push	r28
     7de:	df 93       	push	r29
     7e0:	bf 92       	push	r11
     7e2:	af 92       	push	r10
     7e4:	82 e4       	ldi	r24, 0x42	; 66
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	9f 93       	push	r25
     7ea:	8f 93       	push	r24
     7ec:	8f e1       	ldi	r24, 0x1F	; 31
     7ee:	92 e0       	ldi	r25, 0x02	; 2
     7f0:	9f 93       	push	r25
     7f2:	8f 93       	push	r24
     7f4:	0e 94 83 21 	call	0x4306	; 0x4306 <sprintf>
	UART_putstring(MyString);
     7f8:	8f e1       	ldi	r24, 0x1F	; 31
     7fa:	92 e0       	ldi	r25, 0x02	; 2
     7fc:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <UART_putstring>
	deg_to_servo1(DEG1);
     800:	6a 2d       	mov	r22, r10
     802:	7b 2d       	mov	r23, r11
     804:	8d 2f       	mov	r24, r29
     806:	9c 2f       	mov	r25, r28
     808:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__fixsfsi>
     80c:	cb 01       	movw	r24, r22
     80e:	0e 94 73 01 	call	0x2e6	; 0x2e6 <deg_to_servo1>
	deg_to_servo2(DEG2);	
     812:	c7 01       	movw	r24, r14
     814:	b6 01       	movw	r22, r12
     816:	0e 94 52 19 	call	0x32a4	; 0x32a4 <__fixsfsi>
     81a:	cb 01       	movw	r24, r22
     81c:	0e 94 8c 01 	call	0x318	; 0x318 <deg_to_servo2>
	
     820:	8d b7       	in	r24, 0x3d	; 61
     822:	9e b7       	in	r25, 0x3e	; 62
     824:	08 96       	adiw	r24, 0x08	; 8
     826:	0f b6       	in	r0, 0x3f	; 63
     828:	f8 94       	cli
     82a:	9e bf       	out	0x3e, r25	; 62
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	8d bf       	out	0x3d, r24	; 61
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	bf 90       	pop	r11
     842:	af 90       	pop	r10
     844:	9f 90       	pop	r9
     846:	8f 90       	pop	r8
     848:	08 95       	ret

0000084a <invSqrt>:
float integralFBx = 0;
float integralFBy = 0;
float integralFBz = 0;

float invSqrt( float number )
{
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17

	x2 = number * 0.5F;
	y  = number;
	i  = * ( long * ) &y;                       
	i  = 0x5f3759df - ( i >> 1 );               
	y  = * ( float * ) &i;
     856:	8b 01       	movw	r16, r22
     858:	9c 01       	movw	r18, r24
     85a:	35 95       	asr	r19
     85c:	27 95       	ror	r18
     85e:	17 95       	ror	r17
     860:	07 95       	ror	r16
     862:	0f 2e       	mov	r0, r31
     864:	ff ed       	ldi	r31, 0xDF	; 223
     866:	cf 2e       	mov	r12, r31
     868:	f9 e5       	ldi	r31, 0x59	; 89
     86a:	df 2e       	mov	r13, r31
     86c:	f7 e3       	ldi	r31, 0x37	; 55
     86e:	ef 2e       	mov	r14, r31
     870:	ff e5       	ldi	r31, 0x5F	; 95
     872:	ff 2e       	mov	r15, r31
     874:	f0 2d       	mov	r31, r0
     876:	c0 1a       	sub	r12, r16
     878:	d1 0a       	sbc	r13, r17
     87a:	e2 0a       	sbc	r14, r18
     87c:	f3 0a       	sbc	r15, r19
	y  = y * ( threehalfs - ( x2 * y * y ) );   

	return y;
     87e:	20 e0       	ldi	r18, 0x00	; 0
     880:	30 e0       	ldi	r19, 0x00	; 0
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	5f e3       	ldi	r21, 0x3F	; 63
     886:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     88a:	a7 01       	movw	r20, r14
     88c:	96 01       	movw	r18, r12
     88e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     892:	a7 01       	movw	r20, r14
     894:	96 01       	movw	r18, r12
     896:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     89a:	9b 01       	movw	r18, r22
     89c:	ac 01       	movw	r20, r24
     89e:	60 e0       	ldi	r22, 0x00	; 0
     8a0:	70 e0       	ldi	r23, 0x00	; 0
     8a2:	80 ec       	ldi	r24, 0xC0	; 192
     8a4:	9f e3       	ldi	r25, 0x3F	; 63
     8a6:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     8aa:	a7 01       	movw	r20, r14
     8ac:	96 01       	movw	r18, r12
     8ae:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
}
     8b2:	1f 91       	pop	r17
     8b4:	0f 91       	pop	r16
     8b6:	ff 90       	pop	r15
     8b8:	ef 90       	pop	r14
     8ba:	df 90       	pop	r13
     8bc:	cf 90       	pop	r12
     8be:	08 95       	ret

000008c0 <MahonyAHRSupdateIMU>:

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) 
{
     8c0:	4f 92       	push	r4
     8c2:	5f 92       	push	r5
     8c4:	6f 92       	push	r6
     8c6:	7f 92       	push	r7
     8c8:	8f 92       	push	r8
     8ca:	9f 92       	push	r9
     8cc:	af 92       	push	r10
     8ce:	bf 92       	push	r11
     8d0:	cf 92       	push	r12
     8d2:	df 92       	push	r13
     8d4:	ef 92       	push	r14
     8d6:	ff 92       	push	r15
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
     8e0:	cd b7       	in	r28, 0x3d	; 61
     8e2:	de b7       	in	r29, 0x3e	; 62
     8e4:	a0 97       	sbiw	r28, 0x20	; 32
     8e6:	0f b6       	in	r0, 0x3f	; 63
     8e8:	f8 94       	cli
     8ea:	de bf       	out	0x3e, r29	; 62
     8ec:	0f be       	out	0x3f, r0	; 63
     8ee:	cd bf       	out	0x3d, r28	; 61
     8f0:	69 87       	std	Y+9, r22	; 0x09
     8f2:	7a 87       	std	Y+10, r23	; 0x0a
     8f4:	8b 87       	std	Y+11, r24	; 0x0b
     8f6:	9c 87       	std	Y+12, r25	; 0x0c
     8f8:	2d 87       	std	Y+13, r18	; 0x0d
     8fa:	3e 87       	std	Y+14, r19	; 0x0e
     8fc:	4f 87       	std	Y+15, r20	; 0x0f
     8fe:	58 8b       	std	Y+16, r21	; 0x10
     900:	e9 8a       	std	Y+17, r14	; 0x11
     902:	fa 8a       	std	Y+18, r15	; 0x12
     904:	0b 8b       	std	Y+19, r16	; 0x13
     906:	1c 8b       	std	Y+20, r17	; 0x14

	float qa, qb, qc;
	
	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)

	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     908:	20 e0       	ldi	r18, 0x00	; 0
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	a9 01       	movw	r20, r18
     90e:	c6 01       	movw	r24, r12
     910:	b5 01       	movw	r22, r10
     912:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__cmpsf2>
     916:	81 11       	cpse	r24, r1
     918:	17 c0       	rjmp	.+46     	; 0x948 <__stack+0x49>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	a9 01       	movw	r20, r18
     920:	6b a9       	ldd	r22, Y+51	; 0x33
     922:	7c a9       	ldd	r23, Y+52	; 0x34
     924:	8d a9       	ldd	r24, Y+53	; 0x35
     926:	9e a9       	ldd	r25, Y+54	; 0x36
     928:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__cmpsf2>
     92c:	81 11       	cpse	r24, r1
     92e:	0c c0       	rjmp	.+24     	; 0x948 <__stack+0x49>
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	a9 01       	movw	r20, r18
     936:	6f a9       	ldd	r22, Y+55	; 0x37
     938:	78 ad       	ldd	r23, Y+56	; 0x38
     93a:	89 ad       	ldd	r24, Y+57	; 0x39
     93c:	9a ad       	ldd	r25, Y+58	; 0x3a
     93e:	0e 94 db 18 	call	0x31b6	; 0x31b6 <__cmpsf2>
     942:	88 23       	and	r24, r24
     944:	09 f4       	brne	.+2      	; 0x948 <__stack+0x49>
     946:	50 c1       	rjmp	.+672    	; 0xbe8 <__stack+0x2e9>

		// Normalise accelerometer measurement

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     948:	a6 01       	movw	r20, r12
     94a:	95 01       	movw	r18, r10
     94c:	c6 01       	movw	r24, r12
     94e:	b5 01       	movw	r22, r10
     950:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     954:	2b 01       	movw	r4, r22
     956:	3c 01       	movw	r6, r24
     958:	2b a9       	ldd	r18, Y+51	; 0x33
     95a:	3c a9       	ldd	r19, Y+52	; 0x34
     95c:	4d a9       	ldd	r20, Y+53	; 0x35
     95e:	5e a9       	ldd	r21, Y+54	; 0x36
     960:	ca 01       	movw	r24, r20
     962:	b9 01       	movw	r22, r18
     964:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     968:	9b 01       	movw	r18, r22
     96a:	ac 01       	movw	r20, r24
     96c:	c3 01       	movw	r24, r6
     96e:	b2 01       	movw	r22, r4
     970:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     974:	2b 01       	movw	r4, r22
     976:	3c 01       	movw	r6, r24
     978:	2f a9       	ldd	r18, Y+55	; 0x37
     97a:	38 ad       	ldd	r19, Y+56	; 0x38
     97c:	49 ad       	ldd	r20, Y+57	; 0x39
     97e:	5a ad       	ldd	r21, Y+58	; 0x3a
     980:	ca 01       	movw	r24, r20
     982:	b9 01       	movw	r22, r18
     984:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     988:	9b 01       	movw	r18, r22
     98a:	ac 01       	movw	r20, r24
     98c:	c3 01       	movw	r24, r6
     98e:	b2 01       	movw	r22, r4
     990:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     994:	0e 94 25 04 	call	0x84a	; 0x84a <invSqrt>
     998:	2b 01       	movw	r4, r22
     99a:	3c 01       	movw	r6, r24

		ax *= recipNorm;
     99c:	9b 01       	movw	r18, r22
     99e:	ac 01       	movw	r20, r24
     9a0:	c6 01       	movw	r24, r12
     9a2:	b5 01       	movw	r22, r10
     9a4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     9a8:	69 8f       	std	Y+25, r22	; 0x19
     9aa:	7a 8f       	std	Y+26, r23	; 0x1a
     9ac:	8b 8f       	std	Y+27, r24	; 0x1b
     9ae:	9c 8f       	std	Y+28, r25	; 0x1c

		ay *= recipNorm;
     9b0:	a3 01       	movw	r20, r6
     9b2:	92 01       	movw	r18, r4
     9b4:	6b a9       	ldd	r22, Y+51	; 0x33
     9b6:	7c a9       	ldd	r23, Y+52	; 0x34
     9b8:	8d a9       	ldd	r24, Y+53	; 0x35
     9ba:	9e a9       	ldd	r25, Y+54	; 0x36
     9bc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     9c0:	6d 8f       	std	Y+29, r22	; 0x1d
     9c2:	7e 8f       	std	Y+30, r23	; 0x1e
     9c4:	8f 8f       	std	Y+31, r24	; 0x1f
     9c6:	98 a3       	std	Y+32, r25	; 0x20

		az *= recipNorm;
     9c8:	a3 01       	movw	r20, r6
     9ca:	92 01       	movw	r18, r4
     9cc:	6f a9       	ldd	r22, Y+55	; 0x37
     9ce:	78 ad       	ldd	r23, Y+56	; 0x38
     9d0:	89 ad       	ldd	r24, Y+57	; 0x39
     9d2:	9a ad       	ldd	r25, Y+58	; 0x3a
     9d4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     9d8:	6d 83       	std	Y+5, r22	; 0x05
     9da:	7e 83       	std	Y+6, r23	; 0x06
     9dc:	8f 83       	std	Y+7, r24	; 0x07
     9de:	98 87       	std	Y+8, r25	; 0x08

		// Estimated direction of gravity and vector perpendicular to magnetic flux

		halfvx = q1 * q3 - q0 * q2;
     9e0:	80 90 80 01 	lds	r8, 0x0180	; 0x800180 <q1>
     9e4:	90 90 81 01 	lds	r9, 0x0181	; 0x800181 <q1+0x1>
     9e8:	a0 90 82 01 	lds	r10, 0x0182	; 0x800182 <q1+0x2>
     9ec:	b0 90 83 01 	lds	r11, 0x0183	; 0x800183 <q1+0x3>
     9f0:	40 90 78 01 	lds	r4, 0x0178	; 0x800178 <q3>
     9f4:	50 90 79 01 	lds	r5, 0x0179	; 0x800179 <q3+0x1>
     9f8:	60 90 7a 01 	lds	r6, 0x017A	; 0x80017a <q3+0x2>
     9fc:	70 90 7b 01 	lds	r7, 0x017B	; 0x80017b <q3+0x3>
     a00:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <q0>
     a04:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <q0+0x1>
     a08:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <q0+0x2>
     a0c:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <q0+0x3>
     a10:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <q2>
     a14:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <q2+0x1>
     a18:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <q2+0x2>
     a1c:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <q2+0x3>
     a20:	89 83       	std	Y+1, r24	; 0x01
     a22:	9a 83       	std	Y+2, r25	; 0x02
     a24:	ab 83       	std	Y+3, r26	; 0x03
     a26:	bc 83       	std	Y+4, r27	; 0x04
     a28:	a3 01       	movw	r20, r6
     a2a:	92 01       	movw	r18, r4
     a2c:	c5 01       	movw	r24, r10
     a2e:	b4 01       	movw	r22, r8
     a30:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     a34:	6d 8b       	std	Y+21, r22	; 0x15
     a36:	7e 8b       	std	Y+22, r23	; 0x16
     a38:	8f 8b       	std	Y+23, r24	; 0x17
     a3a:	98 8f       	std	Y+24, r25	; 0x18
     a3c:	29 81       	ldd	r18, Y+1	; 0x01
     a3e:	3a 81       	ldd	r19, Y+2	; 0x02
     a40:	4b 81       	ldd	r20, Y+3	; 0x03
     a42:	5c 81       	ldd	r21, Y+4	; 0x04
     a44:	c7 01       	movw	r24, r14
     a46:	b6 01       	movw	r22, r12
     a48:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	6d 89       	ldd	r22, Y+21	; 0x15
     a52:	7e 89       	ldd	r23, Y+22	; 0x16
     a54:	8f 89       	ldd	r24, Y+23	; 0x17
     a56:	98 8d       	ldd	r25, Y+24	; 0x18
     a58:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     a5c:	6d 8b       	std	Y+21, r22	; 0x15
     a5e:	7e 8b       	std	Y+22, r23	; 0x16
     a60:	8f 8b       	std	Y+23, r24	; 0x17
     a62:	98 8f       	std	Y+24, r25	; 0x18

		halfvy = q0 * q1 + q2 * q3;
     a64:	a7 01       	movw	r20, r14
     a66:	96 01       	movw	r18, r12
     a68:	c5 01       	movw	r24, r10
     a6a:	b4 01       	movw	r22, r8
     a6c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     a70:	4b 01       	movw	r8, r22
     a72:	5c 01       	movw	r10, r24
     a74:	29 81       	ldd	r18, Y+1	; 0x01
     a76:	3a 81       	ldd	r19, Y+2	; 0x02
     a78:	4b 81       	ldd	r20, Y+3	; 0x03
     a7a:	5c 81       	ldd	r21, Y+4	; 0x04
     a7c:	c3 01       	movw	r24, r6
     a7e:	b2 01       	movw	r22, r4
     a80:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     a84:	9b 01       	movw	r18, r22
     a86:	ac 01       	movw	r20, r24
     a88:	c5 01       	movw	r24, r10
     a8a:	b4 01       	movw	r22, r8
     a8c:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     a90:	69 83       	std	Y+1, r22	; 0x01
     a92:	7a 83       	std	Y+2, r23	; 0x02
     a94:	8b 83       	std	Y+3, r24	; 0x03
     a96:	9c 83       	std	Y+4, r25	; 0x04

		halfvz = q0 * q0 - 0.5f + q3 * q3;
     a98:	a7 01       	movw	r20, r14
     a9a:	96 01       	movw	r18, r12
     a9c:	c7 01       	movw	r24, r14
     a9e:	b6 01       	movw	r22, r12
     aa0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	5f e3       	ldi	r21, 0x3F	; 63
     aac:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     ab0:	6b 01       	movw	r12, r22
     ab2:	7c 01       	movw	r14, r24
     ab4:	a3 01       	movw	r20, r6
     ab6:	92 01       	movw	r18, r4
     ab8:	c3 01       	movw	r24, r6
     aba:	b2 01       	movw	r22, r4
     abc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     ac0:	9b 01       	movw	r18, r22
     ac2:	ac 01       	movw	r20, r24
     ac4:	c7 01       	movw	r24, r14
     ac6:	b6 01       	movw	r22, r12
     ac8:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     acc:	6b 01       	movw	r12, r22
     ace:	7c 01       	movw	r14, r24

		}

		else {

			integralFBx = 0.0f; // prevent integral windup
     ad0:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <integralFBx>
     ad4:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <integralFBx+0x1>
     ad8:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <integralFBx+0x2>
     adc:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <integralFBx+0x3>

			integralFBy = 0.0f;
     ae0:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <integralFBy>
     ae4:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <integralFBy+0x1>
     ae8:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <integralFBy+0x2>
     aec:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <integralFBy+0x3>

			integralFBz = 0.0f;
     af0:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <integralFBz>
     af4:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <integralFBz+0x1>
     af8:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <integralFBz+0x2>
     afc:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <integralFBz+0x3>

		}

		// Apply proportional feedback

		gx += twoKp * halfex;
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b06:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b08:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b0a:	98 a1       	ldd	r25, Y+32	; 0x20
     b0c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     b10:	4b 01       	movw	r8, r22
     b12:	5c 01       	movw	r10, r24
     b14:	29 81       	ldd	r18, Y+1	; 0x01
     b16:	3a 81       	ldd	r19, Y+2	; 0x02
     b18:	4b 81       	ldd	r20, Y+3	; 0x03
     b1a:	5c 81       	ldd	r21, Y+4	; 0x04
     b1c:	6d 81       	ldd	r22, Y+5	; 0x05
     b1e:	7e 81       	ldd	r23, Y+6	; 0x06
     b20:	8f 81       	ldd	r24, Y+7	; 0x07
     b22:	98 85       	ldd	r25, Y+8	; 0x08
     b24:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     b28:	9b 01       	movw	r18, r22
     b2a:	ac 01       	movw	r20, r24
     b2c:	c5 01       	movw	r24, r10
     b2e:	b4 01       	movw	r22, r8
     b30:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     b34:	9b 01       	movw	r18, r22
     b36:	ac 01       	movw	r20, r24
     b38:	69 85       	ldd	r22, Y+9	; 0x09
     b3a:	7a 85       	ldd	r23, Y+10	; 0x0a
     b3c:	8b 85       	ldd	r24, Y+11	; 0x0b
     b3e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b40:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     b44:	69 87       	std	Y+9, r22	; 0x09
     b46:	7a 87       	std	Y+10, r23	; 0x0a
     b48:	8b 87       	std	Y+11, r24	; 0x0b
     b4a:	9c 87       	std	Y+12, r25	; 0x0c

		gy += twoKp * halfey;
     b4c:	2d 89       	ldd	r18, Y+21	; 0x15
     b4e:	3e 89       	ldd	r19, Y+22	; 0x16
     b50:	4f 89       	ldd	r20, Y+23	; 0x17
     b52:	58 8d       	ldd	r21, Y+24	; 0x18
     b54:	6d 81       	ldd	r22, Y+5	; 0x05
     b56:	7e 81       	ldd	r23, Y+6	; 0x06
     b58:	8f 81       	ldd	r24, Y+7	; 0x07
     b5a:	98 85       	ldd	r25, Y+8	; 0x08
     b5c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     b60:	4b 01       	movw	r8, r22
     b62:	5c 01       	movw	r10, r24
     b64:	a7 01       	movw	r20, r14
     b66:	96 01       	movw	r18, r12
     b68:	69 8d       	ldd	r22, Y+25	; 0x19
     b6a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b6c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b6e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b70:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     b74:	9b 01       	movw	r18, r22
     b76:	ac 01       	movw	r20, r24
     b78:	c5 01       	movw	r24, r10
     b7a:	b4 01       	movw	r22, r8
     b7c:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     b80:	9b 01       	movw	r18, r22
     b82:	ac 01       	movw	r20, r24
     b84:	6d 85       	ldd	r22, Y+13	; 0x0d
     b86:	7e 85       	ldd	r23, Y+14	; 0x0e
     b88:	8f 85       	ldd	r24, Y+15	; 0x0f
     b8a:	98 89       	ldd	r25, Y+16	; 0x10
     b8c:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     b90:	6d 87       	std	Y+13, r22	; 0x0d
     b92:	7e 87       	std	Y+14, r23	; 0x0e
     b94:	8f 87       	std	Y+15, r24	; 0x0f
     b96:	98 8b       	std	Y+16, r25	; 0x10

		gz += twoKp * halfez;
     b98:	29 81       	ldd	r18, Y+1	; 0x01
     b9a:	3a 81       	ldd	r19, Y+2	; 0x02
     b9c:	4b 81       	ldd	r20, Y+3	; 0x03
     b9e:	5c 81       	ldd	r21, Y+4	; 0x04
     ba0:	69 8d       	ldd	r22, Y+25	; 0x19
     ba2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ba4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ba6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ba8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     bac:	6b 01       	movw	r12, r22
     bae:	7c 01       	movw	r14, r24
     bb0:	2d 89       	ldd	r18, Y+21	; 0x15
     bb2:	3e 89       	ldd	r19, Y+22	; 0x16
     bb4:	4f 89       	ldd	r20, Y+23	; 0x17
     bb6:	58 8d       	ldd	r21, Y+24	; 0x18
     bb8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     bba:	7e 8d       	ldd	r23, Y+30	; 0x1e
     bbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bbe:	98 a1       	ldd	r25, Y+32	; 0x20
     bc0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	c7 01       	movw	r24, r14
     bca:	b6 01       	movw	r22, r12
     bcc:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     bd0:	9b 01       	movw	r18, r22
     bd2:	ac 01       	movw	r20, r24
     bd4:	69 89       	ldd	r22, Y+17	; 0x11
     bd6:	7a 89       	ldd	r23, Y+18	; 0x12
     bd8:	8b 89       	ldd	r24, Y+19	; 0x13
     bda:	9c 89       	ldd	r25, Y+20	; 0x14
     bdc:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     be0:	69 8b       	std	Y+17, r22	; 0x11
     be2:	7a 8b       	std	Y+18, r23	; 0x12
     be4:	8b 8b       	std	Y+19, r24	; 0x13
     be6:	9c 8b       	std	Y+20, r25	; 0x14

	}

	// Integrate rate of change of quaternion

	gx *= (0.5f * (1.0f / sampleFreq)); // pre-multiply common factors
     be8:	2f e1       	ldi	r18, 0x1F	; 31
     bea:	33 ea       	ldi	r19, 0xA3	; 163
     bec:	45 ef       	ldi	r20, 0xF5	; 245
     bee:	5b e3       	ldi	r21, 0x3B	; 59
     bf0:	69 85       	ldd	r22, Y+9	; 0x09
     bf2:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf4:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf6:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     bfc:	69 87       	std	Y+9, r22	; 0x09
     bfe:	7a 87       	std	Y+10, r23	; 0x0a
     c00:	8b 87       	std	Y+11, r24	; 0x0b
     c02:	9c 87       	std	Y+12, r25	; 0x0c

	gy *= (0.5f * (1.0f / sampleFreq));
     c04:	2f e1       	ldi	r18, 0x1F	; 31
     c06:	33 ea       	ldi	r19, 0xA3	; 163
     c08:	45 ef       	ldi	r20, 0xF5	; 245
     c0a:	5b e3       	ldi	r21, 0x3B	; 59
     c0c:	6d 85       	ldd	r22, Y+13	; 0x0d
     c0e:	7e 85       	ldd	r23, Y+14	; 0x0e
     c10:	8f 85       	ldd	r24, Y+15	; 0x0f
     c12:	98 89       	ldd	r25, Y+16	; 0x10
     c14:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     c18:	6d 87       	std	Y+13, r22	; 0x0d
     c1a:	7e 87       	std	Y+14, r23	; 0x0e
     c1c:	8f 87       	std	Y+15, r24	; 0x0f
     c1e:	98 8b       	std	Y+16, r25	; 0x10

	gz *= (0.5f * (1.0f / sampleFreq));
     c20:	2f e1       	ldi	r18, 0x1F	; 31
     c22:	33 ea       	ldi	r19, 0xA3	; 163
     c24:	45 ef       	ldi	r20, 0xF5	; 245
     c26:	5b e3       	ldi	r21, 0x3B	; 59
     c28:	69 89       	ldd	r22, Y+17	; 0x11
     c2a:	7a 89       	ldd	r23, Y+18	; 0x12
     c2c:	8b 89       	ldd	r24, Y+19	; 0x13
     c2e:	9c 89       	ldd	r25, Y+20	; 0x14
     c30:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     c34:	69 8b       	std	Y+17, r22	; 0x11
     c36:	7a 8b       	std	Y+18, r23	; 0x12
     c38:	8b 8b       	std	Y+19, r24	; 0x13
     c3a:	9c 8b       	std	Y+20, r25	; 0x14

	qa = q0;
     c3c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <q0>
     c40:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <q0+0x1>
     c44:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <q0+0x2>
     c48:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <q0+0x3>
     c4c:	89 83       	std	Y+1, r24	; 0x01
     c4e:	9a 83       	std	Y+2, r25	; 0x02
     c50:	ab 83       	std	Y+3, r26	; 0x03
     c52:	bc 83       	std	Y+4, r27	; 0x04

	qb = q1;
     c54:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <q1>
     c58:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <q1+0x1>
     c5c:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <q1+0x2>
     c60:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <q1+0x3>

	qc = q2;
     c64:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <q2>
     c68:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <q2+0x1>
     c6c:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <q2+0x2>
     c70:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <q2+0x3>
     c74:	8d 83       	std	Y+5, r24	; 0x05
     c76:	9e 83       	std	Y+6, r25	; 0x06
     c78:	af 83       	std	Y+7, r26	; 0x07
     c7a:	b8 87       	std	Y+8, r27	; 0x08

	//update

	q0 += (-qb * gx - qc * gy - q3 * gz);
     c7c:	40 90 78 01 	lds	r4, 0x0178	; 0x800178 <q3>
     c80:	50 90 79 01 	lds	r5, 0x0179	; 0x800179 <q3+0x1>
     c84:	60 90 7a 01 	lds	r6, 0x017A	; 0x80017a <q3+0x2>
     c88:	70 90 7b 01 	lds	r7, 0x017B	; 0x80017b <q3+0x3>
     c8c:	c7 01       	movw	r24, r14
     c8e:	b6 01       	movw	r22, r12
     c90:	90 58       	subi	r25, 0x80	; 128
     c92:	29 85       	ldd	r18, Y+9	; 0x09
     c94:	3a 85       	ldd	r19, Y+10	; 0x0a
     c96:	4b 85       	ldd	r20, Y+11	; 0x0b
     c98:	5c 85       	ldd	r21, Y+12	; 0x0c
     c9a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     c9e:	4b 01       	movw	r8, r22
     ca0:	5c 01       	movw	r10, r24
     ca2:	2d 81       	ldd	r18, Y+5	; 0x05
     ca4:	3e 81       	ldd	r19, Y+6	; 0x06
     ca6:	4f 81       	ldd	r20, Y+7	; 0x07
     ca8:	58 85       	ldd	r21, Y+8	; 0x08
     caa:	6d 85       	ldd	r22, Y+13	; 0x0d
     cac:	7e 85       	ldd	r23, Y+14	; 0x0e
     cae:	8f 85       	ldd	r24, Y+15	; 0x0f
     cb0:	98 89       	ldd	r25, Y+16	; 0x10
     cb2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     cb6:	9b 01       	movw	r18, r22
     cb8:	ac 01       	movw	r20, r24
     cba:	c5 01       	movw	r24, r10
     cbc:	b4 01       	movw	r22, r8
     cbe:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     cc2:	4b 01       	movw	r8, r22
     cc4:	5c 01       	movw	r10, r24
     cc6:	a3 01       	movw	r20, r6
     cc8:	92 01       	movw	r18, r4
     cca:	69 89       	ldd	r22, Y+17	; 0x11
     ccc:	7a 89       	ldd	r23, Y+18	; 0x12
     cce:	8b 89       	ldd	r24, Y+19	; 0x13
     cd0:	9c 89       	ldd	r25, Y+20	; 0x14
     cd2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     cd6:	9b 01       	movw	r18, r22
     cd8:	ac 01       	movw	r20, r24
     cda:	c5 01       	movw	r24, r10
     cdc:	b4 01       	movw	r22, r8
     cde:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     ce2:	29 81       	ldd	r18, Y+1	; 0x01
     ce4:	3a 81       	ldd	r19, Y+2	; 0x02
     ce6:	4b 81       	ldd	r20, Y+3	; 0x03
     ce8:	5c 81       	ldd	r21, Y+4	; 0x04
     cea:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     cee:	69 8f       	std	Y+25, r22	; 0x19
     cf0:	7a 8f       	std	Y+26, r23	; 0x1a
     cf2:	8b 8f       	std	Y+27, r24	; 0x1b
     cf4:	9c 8f       	std	Y+28, r25	; 0x1c

	q1 += (qa * gx + qc * gz - q3 * gy);
     cf6:	29 81       	ldd	r18, Y+1	; 0x01
     cf8:	3a 81       	ldd	r19, Y+2	; 0x02
     cfa:	4b 81       	ldd	r20, Y+3	; 0x03
     cfc:	5c 81       	ldd	r21, Y+4	; 0x04
     cfe:	69 85       	ldd	r22, Y+9	; 0x09
     d00:	7a 85       	ldd	r23, Y+10	; 0x0a
     d02:	8b 85       	ldd	r24, Y+11	; 0x0b
     d04:	9c 85       	ldd	r25, Y+12	; 0x0c
     d06:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     d0a:	4b 01       	movw	r8, r22
     d0c:	5c 01       	movw	r10, r24
     d0e:	2d 81       	ldd	r18, Y+5	; 0x05
     d10:	3e 81       	ldd	r19, Y+6	; 0x06
     d12:	4f 81       	ldd	r20, Y+7	; 0x07
     d14:	58 85       	ldd	r21, Y+8	; 0x08
     d16:	69 89       	ldd	r22, Y+17	; 0x11
     d18:	7a 89       	ldd	r23, Y+18	; 0x12
     d1a:	8b 89       	ldd	r24, Y+19	; 0x13
     d1c:	9c 89       	ldd	r25, Y+20	; 0x14
     d1e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     d22:	9b 01       	movw	r18, r22
     d24:	ac 01       	movw	r20, r24
     d26:	c5 01       	movw	r24, r10
     d28:	b4 01       	movw	r22, r8
     d2a:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     d2e:	4b 01       	movw	r8, r22
     d30:	5c 01       	movw	r10, r24
     d32:	a3 01       	movw	r20, r6
     d34:	92 01       	movw	r18, r4
     d36:	6d 85       	ldd	r22, Y+13	; 0x0d
     d38:	7e 85       	ldd	r23, Y+14	; 0x0e
     d3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d3c:	98 89       	ldd	r25, Y+16	; 0x10
     d3e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     d42:	9b 01       	movw	r18, r22
     d44:	ac 01       	movw	r20, r24
     d46:	c5 01       	movw	r24, r10
     d48:	b4 01       	movw	r22, r8
     d4a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     d4e:	a7 01       	movw	r20, r14
     d50:	96 01       	movw	r18, r12
     d52:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     d56:	6d 8f       	std	Y+29, r22	; 0x1d
     d58:	7e 8f       	std	Y+30, r23	; 0x1e
     d5a:	8f 8f       	std	Y+31, r24	; 0x1f
     d5c:	98 a3       	std	Y+32, r25	; 0x20

	q2 += (qa * gy - qb * gz + q3 * gx);
     d5e:	29 81       	ldd	r18, Y+1	; 0x01
     d60:	3a 81       	ldd	r19, Y+2	; 0x02
     d62:	4b 81       	ldd	r20, Y+3	; 0x03
     d64:	5c 81       	ldd	r21, Y+4	; 0x04
     d66:	6d 85       	ldd	r22, Y+13	; 0x0d
     d68:	7e 85       	ldd	r23, Y+14	; 0x0e
     d6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d6c:	98 89       	ldd	r25, Y+16	; 0x10
     d6e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     d72:	4b 01       	movw	r8, r22
     d74:	5c 01       	movw	r10, r24
     d76:	a7 01       	movw	r20, r14
     d78:	96 01       	movw	r18, r12
     d7a:	69 89       	ldd	r22, Y+17	; 0x11
     d7c:	7a 89       	ldd	r23, Y+18	; 0x12
     d7e:	8b 89       	ldd	r24, Y+19	; 0x13
     d80:	9c 89       	ldd	r25, Y+20	; 0x14
     d82:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     d86:	9b 01       	movw	r18, r22
     d88:	ac 01       	movw	r20, r24
     d8a:	c5 01       	movw	r24, r10
     d8c:	b4 01       	movw	r22, r8
     d8e:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     d92:	4b 01       	movw	r8, r22
     d94:	5c 01       	movw	r10, r24
     d96:	a3 01       	movw	r20, r6
     d98:	92 01       	movw	r18, r4
     d9a:	69 85       	ldd	r22, Y+9	; 0x09
     d9c:	7a 85       	ldd	r23, Y+10	; 0x0a
     d9e:	8b 85       	ldd	r24, Y+11	; 0x0b
     da0:	9c 85       	ldd	r25, Y+12	; 0x0c
     da2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
     daa:	c5 01       	movw	r24, r10
     dac:	b4 01       	movw	r22, r8
     dae:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     db2:	2d 81       	ldd	r18, Y+5	; 0x05
     db4:	3e 81       	ldd	r19, Y+6	; 0x06
     db6:	4f 81       	ldd	r20, Y+7	; 0x07
     db8:	58 85       	ldd	r21, Y+8	; 0x08
     dba:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     dbe:	6d 8b       	std	Y+21, r22	; 0x15
     dc0:	7e 8b       	std	Y+22, r23	; 0x16
     dc2:	8f 8b       	std	Y+23, r24	; 0x17
     dc4:	98 8f       	std	Y+24, r25	; 0x18

	q3 += (qa * gz + qb * gy - qc * gx);
     dc6:	29 81       	ldd	r18, Y+1	; 0x01
     dc8:	3a 81       	ldd	r19, Y+2	; 0x02
     dca:	4b 81       	ldd	r20, Y+3	; 0x03
     dcc:	5c 81       	ldd	r21, Y+4	; 0x04
     dce:	69 89       	ldd	r22, Y+17	; 0x11
     dd0:	7a 89       	ldd	r23, Y+18	; 0x12
     dd2:	8b 89       	ldd	r24, Y+19	; 0x13
     dd4:	9c 89       	ldd	r25, Y+20	; 0x14
     dd6:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     dda:	4b 01       	movw	r8, r22
     ddc:	5c 01       	movw	r10, r24
     dde:	a7 01       	movw	r20, r14
     de0:	96 01       	movw	r18, r12
     de2:	6d 85       	ldd	r22, Y+13	; 0x0d
     de4:	7e 85       	ldd	r23, Y+14	; 0x0e
     de6:	8f 85       	ldd	r24, Y+15	; 0x0f
     de8:	98 89       	ldd	r25, Y+16	; 0x10
     dea:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     dee:	9b 01       	movw	r18, r22
     df0:	ac 01       	movw	r20, r24
     df2:	c5 01       	movw	r24, r10
     df4:	b4 01       	movw	r22, r8
     df6:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     dfa:	6b 01       	movw	r12, r22
     dfc:	7c 01       	movw	r14, r24
     dfe:	2d 81       	ldd	r18, Y+5	; 0x05
     e00:	3e 81       	ldd	r19, Y+6	; 0x06
     e02:	4f 81       	ldd	r20, Y+7	; 0x07
     e04:	58 85       	ldd	r21, Y+8	; 0x08
     e06:	69 85       	ldd	r22, Y+9	; 0x09
     e08:	7a 85       	ldd	r23, Y+10	; 0x0a
     e0a:	8b 85       	ldd	r24, Y+11	; 0x0b
     e0c:	9c 85       	ldd	r25, Y+12	; 0x0c
     e0e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	c7 01       	movw	r24, r14
     e18:	b6 01       	movw	r22, r12
     e1a:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
     e1e:	a3 01       	movw	r20, r6
     e20:	92 01       	movw	r18, r4
     e22:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     e26:	4b 01       	movw	r8, r22
     e28:	5c 01       	movw	r10, r24

	// Normalise quaternion

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     e2a:	29 8d       	ldd	r18, Y+25	; 0x19
     e2c:	3a 8d       	ldd	r19, Y+26	; 0x1a
     e2e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     e30:	5c 8d       	ldd	r21, Y+28	; 0x1c
     e32:	ca 01       	movw	r24, r20
     e34:	b9 01       	movw	r22, r18
     e36:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     e3a:	6b 01       	movw	r12, r22
     e3c:	7c 01       	movw	r14, r24
     e3e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e40:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e42:	4f 8d       	ldd	r20, Y+31	; 0x1f
     e44:	58 a1       	ldd	r21, Y+32	; 0x20
     e46:	ca 01       	movw	r24, r20
     e48:	b9 01       	movw	r22, r18
     e4a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     e4e:	9b 01       	movw	r18, r22
     e50:	ac 01       	movw	r20, r24
     e52:	c7 01       	movw	r24, r14
     e54:	b6 01       	movw	r22, r12
     e56:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     e5a:	6b 01       	movw	r12, r22
     e5c:	7c 01       	movw	r14, r24
     e5e:	2d 89       	ldd	r18, Y+21	; 0x15
     e60:	3e 89       	ldd	r19, Y+22	; 0x16
     e62:	4f 89       	ldd	r20, Y+23	; 0x17
     e64:	58 8d       	ldd	r21, Y+24	; 0x18
     e66:	ca 01       	movw	r24, r20
     e68:	b9 01       	movw	r22, r18
     e6a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     e6e:	9b 01       	movw	r18, r22
     e70:	ac 01       	movw	r20, r24
     e72:	c7 01       	movw	r24, r14
     e74:	b6 01       	movw	r22, r12
     e76:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     e7a:	6b 01       	movw	r12, r22
     e7c:	7c 01       	movw	r14, r24
     e7e:	a5 01       	movw	r20, r10
     e80:	94 01       	movw	r18, r8
     e82:	c5 01       	movw	r24, r10
     e84:	b4 01       	movw	r22, r8
     e86:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     e8a:	9b 01       	movw	r18, r22
     e8c:	ac 01       	movw	r20, r24
     e8e:	c7 01       	movw	r24, r14
     e90:	b6 01       	movw	r22, r12
     e92:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     e96:	0e 94 25 04 	call	0x84a	; 0x84a <invSqrt>
     e9a:	6b 01       	movw	r12, r22
     e9c:	7c 01       	movw	r14, r24

	q0 *= recipNorm;
     e9e:	9b 01       	movw	r18, r22
     ea0:	ac 01       	movw	r20, r24
     ea2:	69 8d       	ldd	r22, Y+25	; 0x19
     ea4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     ea6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     ea8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eaa:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     eae:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <q0>
     eb2:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <q0+0x1>
     eb6:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <q0+0x2>
     eba:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <q0+0x3>

	q1 *= recipNorm;
     ebe:	a7 01       	movw	r20, r14
     ec0:	96 01       	movw	r18, r12
     ec2:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ec4:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ec6:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ec8:	98 a1       	ldd	r25, Y+32	; 0x20
     eca:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     ece:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <q1>
     ed2:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <q1+0x1>
     ed6:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <q1+0x2>
     eda:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <q1+0x3>

	q2 *= recipNorm;
     ede:	a7 01       	movw	r20, r14
     ee0:	96 01       	movw	r18, r12
     ee2:	6d 89       	ldd	r22, Y+21	; 0x15
     ee4:	7e 89       	ldd	r23, Y+22	; 0x16
     ee6:	8f 89       	ldd	r24, Y+23	; 0x17
     ee8:	98 8d       	ldd	r25, Y+24	; 0x18
     eea:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     eee:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <q2>
     ef2:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <q2+0x1>
     ef6:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <q2+0x2>
     efa:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <q2+0x3>

	q3 *= recipNorm;
     efe:	a7 01       	movw	r20, r14
     f00:	96 01       	movw	r18, r12
     f02:	c5 01       	movw	r24, r10
     f04:	b4 01       	movw	r22, r8
     f06:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     f0a:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <q3>
     f0e:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <q3+0x1>
     f12:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <q3+0x2>
     f16:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <q3+0x3>

}
     f1a:	a0 96       	adiw	r28, 0x20	; 32
     f1c:	0f b6       	in	r0, 0x3f	; 63
     f1e:	f8 94       	cli
     f20:	de bf       	out	0x3e, r29	; 62
     f22:	0f be       	out	0x3f, r0	; 63
     f24:	cd bf       	out	0x3d, r28	; 61
     f26:	df 91       	pop	r29
     f28:	cf 91       	pop	r28
     f2a:	1f 91       	pop	r17
     f2c:	0f 91       	pop	r16
     f2e:	ff 90       	pop	r15
     f30:	ef 90       	pop	r14
     f32:	df 90       	pop	r13
     f34:	cf 90       	pop	r12
     f36:	bf 90       	pop	r11
     f38:	af 90       	pop	r10
     f3a:	9f 90       	pop	r9
     f3c:	8f 90       	pop	r8
     f3e:	7f 90       	pop	r7
     f40:	6f 90       	pop	r6
     f42:	5f 90       	pop	r5
     f44:	4f 90       	pop	r4
     f46:	08 95       	ret

00000f48 <q2Angle>:

void q2Angle(float angle[3])
{
     f48:	4f 92       	push	r4
     f4a:	5f 92       	push	r5
     f4c:	6f 92       	push	r6
     f4e:	7f 92       	push	r7
     f50:	8f 92       	push	r8
     f52:	9f 92       	push	r9
     f54:	af 92       	push	r10
     f56:	bf 92       	push	r11
     f58:	cf 92       	push	r12
     f5a:	df 92       	push	r13
     f5c:	ef 92       	push	r14
     f5e:	ff 92       	push	r15
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	2e 97       	sbiw	r28, 0x0e	; 14
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	9e 87       	std	Y+14, r25	; 0x0e
     f76:	8d 87       	std	Y+13, r24	; 0x0d
	angle[2] = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2*q2 - 2 * q3* q3 + 1)* 57.3; // yaw
     f78:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <q2>
     f7c:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <q2+0x1>
     f80:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <q2+0x2>
     f84:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <q2+0x3>
     f88:	80 90 78 01 	lds	r8, 0x0178	; 0x800178 <q3>
     f8c:	90 90 79 01 	lds	r9, 0x0179	; 0x800179 <q3+0x1>
     f90:	a0 90 7a 01 	lds	r10, 0x017A	; 0x80017a <q3+0x2>
     f94:	b0 90 7b 01 	lds	r11, 0x017B	; 0x80017b <q3+0x3>
     f98:	40 90 80 01 	lds	r4, 0x0180	; 0x800180 <q1>
     f9c:	50 90 81 01 	lds	r5, 0x0181	; 0x800181 <q1+0x1>
     fa0:	60 90 82 01 	lds	r6, 0x0182	; 0x800182 <q1+0x2>
     fa4:	70 90 83 01 	lds	r7, 0x0183	; 0x800183 <q1+0x3>
     fa8:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <q0>
     fac:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <q0+0x1>
     fb0:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <q0+0x2>
     fb4:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <q0+0x3>
     fb8:	9b 01       	movw	r18, r22
     fba:	ac 01       	movw	r20, r24
     fbc:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     fc0:	69 87       	std	Y+9, r22	; 0x09
     fc2:	7a 87       	std	Y+10, r23	; 0x0a
     fc4:	8b 87       	std	Y+11, r24	; 0x0b
     fc6:	9c 87       	std	Y+12, r25	; 0x0c
     fc8:	20 e0       	ldi	r18, 0x00	; 0
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	40 e0       	ldi	r20, 0x00	; 0
     fce:	50 ec       	ldi	r21, 0xC0	; 192
     fd0:	c7 01       	movw	r24, r14
     fd2:	b6 01       	movw	r22, r12
     fd4:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     fd8:	a7 01       	movw	r20, r14
     fda:	96 01       	movw	r18, r12
     fdc:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     fe0:	69 83       	std	Y+1, r22	; 0x01
     fe2:	7a 83       	std	Y+2, r23	; 0x02
     fe4:	8b 83       	std	Y+3, r24	; 0x03
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	a5 01       	movw	r20, r10
     fea:	94 01       	movw	r18, r8
     fec:	c5 01       	movw	r24, r10
     fee:	b4 01       	movw	r22, r8
     ff0:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
     ff4:	a5 01       	movw	r20, r10
     ff6:	94 01       	movw	r18, r8
     ff8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
     ffc:	9b 01       	movw	r18, r22
     ffe:	ac 01       	movw	r20, r24
    1000:	69 81       	ldd	r22, Y+1	; 0x01
    1002:	7a 81       	ldd	r23, Y+2	; 0x02
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
    100c:	20 e0       	ldi	r18, 0x00	; 0
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	40 e8       	ldi	r20, 0x80	; 128
    1012:	5f e3       	ldi	r21, 0x3F	; 63
    1014:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    1018:	69 83       	std	Y+1, r22	; 0x01
    101a:	7a 83       	std	Y+2, r23	; 0x02
    101c:	8b 83       	std	Y+3, r24	; 0x03
    101e:	9c 83       	std	Y+4, r25	; 0x04
    1020:	a3 01       	movw	r20, r6
    1022:	92 01       	movw	r18, r4
    1024:	c3 01       	movw	r24, r6
    1026:	b2 01       	movw	r22, r4
    1028:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    102c:	a7 01       	movw	r20, r14
    102e:	96 01       	movw	r18, r12
    1030:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1034:	6d 83       	std	Y+5, r22	; 0x05
    1036:	7e 83       	std	Y+6, r23	; 0x06
    1038:	8f 83       	std	Y+7, r24	; 0x07
    103a:	98 87       	std	Y+8, r25	; 0x08
    103c:	29 85       	ldd	r18, Y+9	; 0x09
    103e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1040:	4b 85       	ldd	r20, Y+11	; 0x0b
    1042:	5c 85       	ldd	r21, Y+12	; 0x0c
    1044:	c5 01       	movw	r24, r10
    1046:	b4 01       	movw	r22, r8
    1048:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
    1050:	6d 81       	ldd	r22, Y+5	; 0x05
    1052:	7e 81       	ldd	r23, Y+6	; 0x06
    1054:	8f 81       	ldd	r24, Y+7	; 0x07
    1056:	98 85       	ldd	r25, Y+8	; 0x08
    1058:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    105c:	29 81       	ldd	r18, Y+1	; 0x01
    105e:	3a 81       	ldd	r19, Y+2	; 0x02
    1060:	4b 81       	ldd	r20, Y+3	; 0x03
    1062:	5c 81       	ldd	r21, Y+4	; 0x04
    1064:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <atan2>
    1068:	23 e3       	ldi	r18, 0x33	; 51
    106a:	33 e3       	ldi	r19, 0x33	; 51
    106c:	45 e6       	ldi	r20, 0x65	; 101
    106e:	52 e4       	ldi	r21, 0x42	; 66
    1070:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1074:	ed 85       	ldd	r30, Y+13	; 0x0d
    1076:	fe 85       	ldd	r31, Y+14	; 0x0e
    1078:	60 87       	std	Z+8, r22	; 0x08
    107a:	71 87       	std	Z+9, r23	; 0x09
    107c:	82 87       	std	Z+10, r24	; 0x0a
    107e:	93 87       	std	Z+11, r25	; 0x0b

	angle[1] = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; // pitch
    1080:	20 e0       	ldi	r18, 0x00	; 0
    1082:	30 e0       	ldi	r19, 0x00	; 0
    1084:	40 e0       	ldi	r20, 0x00	; 0
    1086:	50 ec       	ldi	r21, 0xC0	; 192
    1088:	c3 01       	movw	r24, r6
    108a:	b2 01       	movw	r22, r4
    108c:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1090:	69 83       	std	Y+1, r22	; 0x01
    1092:	7a 83       	std	Y+2, r23	; 0x02
    1094:	8b 83       	std	Y+3, r24	; 0x03
    1096:	9c 83       	std	Y+4, r25	; 0x04
    1098:	9b 01       	movw	r18, r22
    109a:	ac 01       	movw	r20, r24
    109c:	c5 01       	movw	r24, r10
    109e:	b4 01       	movw	r22, r8
    10a0:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    10a4:	6d 83       	std	Y+5, r22	; 0x05
    10a6:	7e 83       	std	Y+6, r23	; 0x06
    10a8:	8f 83       	std	Y+7, r24	; 0x07
    10aa:	98 87       	std	Y+8, r25	; 0x08
    10ac:	29 85       	ldd	r18, Y+9	; 0x09
    10ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b0:	4b 85       	ldd	r20, Y+11	; 0x0b
    10b2:	5c 85       	ldd	r21, Y+12	; 0x0c
    10b4:	c7 01       	movw	r24, r14
    10b6:	b6 01       	movw	r22, r12
    10b8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    10bc:	9b 01       	movw	r18, r22
    10be:	ac 01       	movw	r20, r24
    10c0:	6d 81       	ldd	r22, Y+5	; 0x05
    10c2:	7e 81       	ldd	r23, Y+6	; 0x06
    10c4:	8f 81       	ldd	r24, Y+7	; 0x07
    10c6:	98 85       	ldd	r25, Y+8	; 0x08
    10c8:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    10cc:	0e 94 4e 18 	call	0x309c	; 0x309c <asin>
    10d0:	23 e3       	ldi	r18, 0x33	; 51
    10d2:	33 e3       	ldi	r19, 0x33	; 51
    10d4:	45 e6       	ldi	r20, 0x65	; 101
    10d6:	52 e4       	ldi	r21, 0x42	; 66
    10d8:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    10dc:	ed 85       	ldd	r30, Y+13	; 0x0d
    10de:	fe 85       	ldd	r31, Y+14	; 0x0e
    10e0:	64 83       	std	Z+4, r22	; 0x04
    10e2:	75 83       	std	Z+5, r23	; 0x05
    10e4:	86 83       	std	Z+6, r24	; 0x06
    10e6:	97 83       	std	Z+7, r25	; 0x07

	angle[0] = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
    10e8:	a7 01       	movw	r20, r14
    10ea:	96 01       	movw	r18, r12
    10ec:	c7 01       	movw	r24, r14
    10ee:	b6 01       	movw	r22, r12
    10f0:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    10f4:	6d 83       	std	Y+5, r22	; 0x05
    10f6:	7e 83       	std	Y+6, r23	; 0x06
    10f8:	8f 83       	std	Y+7, r24	; 0x07
    10fa:	98 87       	std	Y+8, r25	; 0x08
    10fc:	29 81       	ldd	r18, Y+1	; 0x01
    10fe:	3a 81       	ldd	r19, Y+2	; 0x02
    1100:	4b 81       	ldd	r20, Y+3	; 0x03
    1102:	5c 81       	ldd	r21, Y+4	; 0x04
    1104:	c3 01       	movw	r24, r6
    1106:	b2 01       	movw	r22, r4
    1108:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    110c:	69 83       	std	Y+1, r22	; 0x01
    110e:	7a 83       	std	Y+2, r23	; 0x02
    1110:	8b 83       	std	Y+3, r24	; 0x03
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	2d 81       	ldd	r18, Y+5	; 0x05
    1116:	3e 81       	ldd	r19, Y+6	; 0x06
    1118:	4f 81       	ldd	r20, Y+7	; 0x07
    111a:	58 85       	ldd	r21, Y+8	; 0x08
    111c:	c7 01       	movw	r24, r14
    111e:	b6 01       	movw	r22, r12
    1120:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1124:	9b 01       	movw	r18, r22
    1126:	ac 01       	movw	r20, r24
    1128:	69 81       	ldd	r22, Y+1	; 0x01
    112a:	7a 81       	ldd	r23, Y+2	; 0x02
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
    1134:	20 e0       	ldi	r18, 0x00	; 0
    1136:	30 e0       	ldi	r19, 0x00	; 0
    1138:	40 e8       	ldi	r20, 0x80	; 128
    113a:	5f e3       	ldi	r21, 0x3F	; 63
    113c:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    1140:	6b 01       	movw	r12, r22
    1142:	7c 01       	movw	r14, r24
    1144:	2d 81       	ldd	r18, Y+5	; 0x05
    1146:	3e 81       	ldd	r19, Y+6	; 0x06
    1148:	4f 81       	ldd	r20, Y+7	; 0x07
    114a:	58 85       	ldd	r21, Y+8	; 0x08
    114c:	c5 01       	movw	r24, r10
    114e:	b4 01       	movw	r22, r8
    1150:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1154:	4b 01       	movw	r8, r22
    1156:	5c 01       	movw	r10, r24
    1158:	29 85       	ldd	r18, Y+9	; 0x09
    115a:	3a 85       	ldd	r19, Y+10	; 0x0a
    115c:	4b 85       	ldd	r20, Y+11	; 0x0b
    115e:	5c 85       	ldd	r21, Y+12	; 0x0c
    1160:	c3 01       	movw	r24, r6
    1162:	b2 01       	movw	r22, r4
    1164:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1168:	9b 01       	movw	r18, r22
    116a:	ac 01       	movw	r20, r24
    116c:	c5 01       	movw	r24, r10
    116e:	b4 01       	movw	r22, r8
    1170:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    1174:	a7 01       	movw	r20, r14
    1176:	96 01       	movw	r18, r12
    1178:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <atan2>
    117c:	23 e3       	ldi	r18, 0x33	; 51
    117e:	33 e3       	ldi	r19, 0x33	; 51
    1180:	45 e6       	ldi	r20, 0x65	; 101
    1182:	52 e4       	ldi	r21, 0x42	; 66
    1184:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1188:	ed 85       	ldd	r30, Y+13	; 0x0d
    118a:	fe 85       	ldd	r31, Y+14	; 0x0e
    118c:	60 83       	st	Z, r22
    118e:	71 83       	std	Z+1, r23	; 0x01
    1190:	82 83       	std	Z+2, r24	; 0x02
    1192:	93 83       	std	Z+3, r25	; 0x03
    1194:	2e 96       	adiw	r28, 0x0e	; 14
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	ff 90       	pop	r15
    11a6:	ef 90       	pop	r14
    11a8:	df 90       	pop	r13
    11aa:	cf 90       	pop	r12
    11ac:	bf 90       	pop	r11
    11ae:	af 90       	pop	r10
    11b0:	9f 90       	pop	r9
    11b2:	8f 90       	pop	r8
    11b4:	7f 90       	pop	r7
    11b6:	6f 90       	pop	r6
    11b8:	5f 90       	pop	r5
    11ba:	4f 90       	pop	r4
    11bc:	08 95       	ret

000011be <MPU_Start_Loc>:
	MPU_Calib(AccData,GyroData);
}

void MPU_Start_Loc(void)
{
	I2C_Start_Wait(MPU6050_addr);								/* I2C start with device write address */
    11be:	80 ed       	ldi	r24, 0xD0	; 208
    11c0:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <I2C_Start_Wait>
	I2C_Write(0x3B);							/* Write start location address from where to read */
    11c4:	8b e3       	ldi	r24, 0x3B	; 59
    11c6:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
    11ca:	81 ed       	ldi	r24, 0xD1	; 209
    11cc:	0e 94 23 17 	call	0x2e46	; 0x2e46 <I2C_Repeated_Start>
    11d0:	08 95       	ret

000011d2 <MPU_read>:
}
void MPU_read(float Acc[3], float Gyro[3])
{
    11d2:	4f 92       	push	r4
    11d4:	5f 92       	push	r5
    11d6:	6f 92       	push	r6
    11d8:	7f 92       	push	r7
    11da:	af 92       	push	r10
    11dc:	bf 92       	push	r11
    11de:	cf 92       	push	r12
    11e0:	df 92       	push	r13
    11e2:	ef 92       	push	r14
    11e4:	ff 92       	push	r15
    11e6:	0f 93       	push	r16
    11e8:	1f 93       	push	r17
    11ea:	cf 93       	push	r28
    11ec:	df 93       	push	r29
    11ee:	8c 01       	movw	r16, r24
    11f0:	eb 01       	movw	r28, r22
	MPU_Start_Loc();									/* Read Gyro values */
    11f2:	0e 94 df 08 	call	0x11be	; 0x11be <MPU_Start_Loc>
	Acc[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    11f6:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    11fa:	f8 2e       	mov	r15, r24
    11fc:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    1200:	6f 2d       	mov	r22, r15
    1202:	70 e0       	ldi	r23, 0x00	; 0
    1204:	76 2f       	mov	r23, r22
    1206:	66 27       	eor	r22, r22
    1208:	68 2b       	or	r22, r24
    120a:	07 2e       	mov	r0, r23
    120c:	00 0c       	add	r0, r0
    120e:	88 0b       	sbc	r24, r24
    1210:	99 0b       	sbc	r25, r25
    1212:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
    1216:	f8 01       	movw	r30, r16
    1218:	60 83       	st	Z, r22
    121a:	71 83       	std	Z+1, r23	; 0x01
    121c:	82 83       	std	Z+2, r24	; 0x02
    121e:	93 83       	std	Z+3, r25	; 0x03
	Acc[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1220:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    1224:	f8 2e       	mov	r15, r24
    1226:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    122a:	6f 2d       	mov	r22, r15
    122c:	70 e0       	ldi	r23, 0x00	; 0
    122e:	76 2f       	mov	r23, r22
    1230:	66 27       	eor	r22, r22
    1232:	68 2b       	or	r22, r24
    1234:	07 2e       	mov	r0, r23
    1236:	00 0c       	add	r0, r0
    1238:	88 0b       	sbc	r24, r24
    123a:	99 0b       	sbc	r25, r25
    123c:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
    1240:	f8 01       	movw	r30, r16
    1242:	64 83       	std	Z+4, r22	; 0x04
    1244:	75 83       	std	Z+5, r23	; 0x05
    1246:	86 83       	std	Z+6, r24	; 0x06
    1248:	97 83       	std	Z+7, r25	; 0x07
	Acc[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    124a:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    124e:	f8 2e       	mov	r15, r24
    1250:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    1254:	6f 2d       	mov	r22, r15
    1256:	70 e0       	ldi	r23, 0x00	; 0
    1258:	76 2f       	mov	r23, r22
    125a:	66 27       	eor	r22, r22
    125c:	68 2b       	or	r22, r24
    125e:	07 2e       	mov	r0, r23
    1260:	00 0c       	add	r0, r0
    1262:	88 0b       	sbc	r24, r24
    1264:	99 0b       	sbc	r25, r25
    1266:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
    126a:	f8 01       	movw	r30, r16
    126c:	60 87       	std	Z+8, r22	; 0x08
    126e:	71 87       	std	Z+9, r23	; 0x09
    1270:	82 87       	std	Z+10, r24	; 0x0a
    1272:	93 87       	std	Z+11, r25	; 0x0b
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1274:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    1278:	f8 2e       	mov	r15, r24
    127a:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    127e:	6f 2d       	mov	r22, r15
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	76 2f       	mov	r23, r22
    1284:	66 27       	eor	r22, r22
    1286:	68 2b       	or	r22, r24
    1288:	07 2e       	mov	r0, r23
    128a:	00 0c       	add	r0, r0
    128c:	88 0b       	sbc	r24, r24
    128e:	99 0b       	sbc	r25, r25
    1290:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
    1294:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <Temperature>
    1298:	70 93 3a 02 	sts	0x023A, r23	; 0x80023a <Temperature+0x1>
    129c:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <Temperature+0x2>
    12a0:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <Temperature+0x3>
	Gyro[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    12a4:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    12a8:	f8 2e       	mov	r15, r24
    12aa:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    12ae:	6f 2d       	mov	r22, r15
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	76 2f       	mov	r23, r22
    12b4:	66 27       	eor	r22, r22
    12b6:	68 2b       	or	r22, r24
    12b8:	07 2e       	mov	r0, r23
    12ba:	00 0c       	add	r0, r0
    12bc:	88 0b       	sbc	r24, r24
    12be:	99 0b       	sbc	r25, r25
    12c0:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
    12c4:	68 83       	st	Y, r22
    12c6:	79 83       	std	Y+1, r23	; 0x01
    12c8:	8a 83       	std	Y+2, r24	; 0x02
    12ca:	9b 83       	std	Y+3, r25	; 0x03
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    12cc:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    12d0:	f8 2e       	mov	r15, r24
    12d2:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    12d6:	6f 2d       	mov	r22, r15
    12d8:	70 e0       	ldi	r23, 0x00	; 0
    12da:	76 2f       	mov	r23, r22
    12dc:	66 27       	eor	r22, r22
    12de:	68 2b       	or	r22, r24
    12e0:	07 2e       	mov	r0, r23
    12e2:	00 0c       	add	r0, r0
    12e4:	88 0b       	sbc	r24, r24
    12e6:	99 0b       	sbc	r25, r25
    12e8:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
    12ec:	6c 83       	std	Y+4, r22	; 0x04
    12ee:	7d 83       	std	Y+5, r23	; 0x05
    12f0:	8e 83       	std	Y+6, r24	; 0x06
    12f2:	9f 83       	std	Y+7, r25	; 0x07
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
    12f4:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <I2C_Read_Ack>
    12f8:	f8 2e       	mov	r15, r24
    12fa:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <I2C_Read_Nack>
    12fe:	6f 2d       	mov	r22, r15
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	76 2f       	mov	r23, r22
    1304:	66 27       	eor	r22, r22
    1306:	68 2b       	or	r22, r24
    1308:	07 2e       	mov	r0, r23
    130a:	00 0c       	add	r0, r0
    130c:	88 0b       	sbc	r24, r24
    130e:	99 0b       	sbc	r25, r25
    1310:	0e 94 8a 19 	call	0x3314	; 0x3314 <__floatsisf>
    1314:	68 87       	std	Y+8, r22	; 0x08
    1316:	79 87       	std	Y+9, r23	; 0x09
    1318:	8a 87       	std	Y+10, r24	; 0x0a
    131a:	9b 87       	std	Y+11, r25	; 0x0b
	I2C_Stop();
    131c:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_Stop>
    1320:	0f 2e       	mov	r0, r31
    1322:	fd e3       	ldi	r31, 0x3D	; 61
    1324:	ef 2e       	mov	r14, r31
    1326:	f2 e0       	ldi	r31, 0x02	; 2
    1328:	ff 2e       	mov	r15, r31
    132a:	f0 2d       	mov	r31, r0
    132c:	0f 2e       	mov	r0, r31
    132e:	f9 e4       	ldi	r31, 0x49	; 73
    1330:	cf 2e       	mov	r12, r31
    1332:	f2 e0       	ldi	r31, 0x02	; 2
    1334:	df 2e       	mov	r13, r31
    1336:	f0 2d       	mov	r31, r0
    1338:	0f 2e       	mov	r0, r31
    133a:	f9 e4       	ldi	r31, 0x49	; 73
    133c:	af 2e       	mov	r10, r31
    133e:	f2 e0       	ldi	r31, 0x02	; 2
    1340:	bf 2e       	mov	r11, r31
    1342:	f0 2d       	mov	r31, r0
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
    1344:	f7 01       	movw	r30, r14
    1346:	41 90       	ld	r4, Z+
    1348:	51 90       	ld	r5, Z+
    134a:	61 90       	ld	r6, Z+
    134c:	71 90       	ld	r7, Z+
    134e:	7f 01       	movw	r14, r30
    1350:	20 e0       	ldi	r18, 0x00	; 0
    1352:	30 e0       	ldi	r19, 0x00	; 0
    1354:	40 e0       	ldi	r20, 0x00	; 0
    1356:	51 e4       	ldi	r21, 0x41	; 65
    1358:	f8 01       	movw	r30, r16
    135a:	60 81       	ld	r22, Z
    135c:	71 81       	ldd	r23, Z+1	; 0x01
    135e:	82 81       	ldd	r24, Z+2	; 0x02
    1360:	93 81       	ldd	r25, Z+3	; 0x03
    1362:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1366:	2d ec       	ldi	r18, 0xCD	; 205
    1368:	3c ec       	ldi	r19, 0xCC	; 204
    136a:	4c e1       	ldi	r20, 0x1C	; 28
    136c:	51 e4       	ldi	r21, 0x41	; 65
    136e:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	40 e0       	ldi	r20, 0x00	; 0
    1378:	58 e3       	ldi	r21, 0x38	; 56
    137a:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    137e:	a3 01       	movw	r20, r6
    1380:	92 01       	movw	r18, r4
    1382:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
    1386:	f8 01       	movw	r30, r16
    1388:	61 93       	st	Z+, r22
    138a:	71 93       	st	Z+, r23
    138c:	81 93       	st	Z+, r24
    138e:	91 93       	st	Z+, r25
    1390:	8f 01       	movw	r16, r30
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
    1392:	f6 01       	movw	r30, r12
    1394:	41 90       	ld	r4, Z+
    1396:	51 90       	ld	r5, Z+
    1398:	61 90       	ld	r6, Z+
    139a:	71 90       	ld	r7, Z+
    139c:	6f 01       	movw	r12, r30
    139e:	20 e0       	ldi	r18, 0x00	; 0
    13a0:	30 e0       	ldi	r19, 0x00	; 0
    13a2:	4a e7       	ldi	r20, 0x7A	; 122
    13a4:	54 e4       	ldi	r21, 0x44	; 68
    13a6:	68 81       	ld	r22, Y
    13a8:	79 81       	ldd	r23, Y+1	; 0x01
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	9b 81       	ldd	r25, Y+3	; 0x03
    13ae:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    13b2:	20 e0       	ldi	r18, 0x00	; 0
    13b4:	30 e0       	ldi	r19, 0x00	; 0
    13b6:	40 e0       	ldi	r20, 0x00	; 0
    13b8:	58 e3       	ldi	r21, 0x38	; 56
    13ba:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	44 e3       	ldi	r20, 0x34	; 52
    13c4:	53 e4       	ldi	r21, 0x43	; 67
    13c6:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <__divsf3>
    13ca:	23 ec       	ldi	r18, 0xC3	; 195
    13cc:	35 ef       	ldi	r19, 0xF5	; 245
    13ce:	48 e4       	ldi	r20, 0x48	; 72
    13d0:	50 e4       	ldi	r21, 0x40	; 64
    13d2:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    13d6:	a3 01       	movw	r20, r6
    13d8:	92 01       	movw	r18, r4
    13da:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
    13de:	69 93       	st	Y+, r22
    13e0:	79 93       	st	Y+, r23
    13e2:	89 93       	st	Y+, r24
    13e4:	99 93       	st	Y+, r25
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
    13e6:	ea 14       	cp	r14, r10
    13e8:	fb 04       	cpc	r15, r11
    13ea:	09 f0       	breq	.+2      	; 0x13ee <MPU_read+0x21c>
    13ec:	ab cf       	rjmp	.-170    	; 0x1344 <MPU_read+0x172>
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
	}
}
    13ee:	df 91       	pop	r29
    13f0:	cf 91       	pop	r28
    13f2:	1f 91       	pop	r17
    13f4:	0f 91       	pop	r16
    13f6:	ff 90       	pop	r15
    13f8:	ef 90       	pop	r14
    13fa:	df 90       	pop	r13
    13fc:	cf 90       	pop	r12
    13fe:	bf 90       	pop	r11
    1400:	af 90       	pop	r10
    1402:	7f 90       	pop	r7
    1404:	6f 90       	pop	r6
    1406:	5f 90       	pop	r5
    1408:	4f 90       	pop	r4
    140a:	08 95       	ret

0000140c <MPU_Calib>:

void MPU_Calib(float Acc[3], float Gyro[3])
{
    140c:	2f 92       	push	r2
    140e:	3f 92       	push	r3
    1410:	4f 92       	push	r4
    1412:	5f 92       	push	r5
    1414:	6f 92       	push	r6
    1416:	7f 92       	push	r7
    1418:	8f 92       	push	r8
    141a:	9f 92       	push	r9
    141c:	af 92       	push	r10
    141e:	bf 92       	push	r11
    1420:	cf 92       	push	r12
    1422:	df 92       	push	r13
    1424:	ef 92       	push	r14
    1426:	ff 92       	push	r15
    1428:	0f 93       	push	r16
    142a:	1f 93       	push	r17
    142c:	cf 93       	push	r28
    142e:	df 93       	push	r29
    1430:	00 d0       	rcall	.+0      	; 0x1432 <MPU_Calib+0x26>
    1432:	00 d0       	rcall	.+0      	; 0x1434 <MPU_Calib+0x28>
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62
    1438:	1c 01       	movw	r2, r24
    143a:	69 83       	std	Y+1, r22	; 0x01
    143c:	7a 83       	std	Y+2, r23	; 0x02
    143e:	81 2c       	mov	r8, r1
    1440:	91 2c       	mov	r9, r1
    1442:	5c 01       	movw	r10, r24
    1444:	8c e0       	ldi	r24, 0x0C	; 12
    1446:	a8 0e       	add	r10, r24
    1448:	b1 1c       	adc	r11, r1
	static float calib_loops = 100;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
    144a:	69 81       	ldd	r22, Y+1	; 0x01
    144c:	7a 81       	ldd	r23, Y+2	; 0x02
    144e:	c1 01       	movw	r24, r2
    1450:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <MPU_read>
    1454:	71 01       	movw	r14, r2
    1456:	0f 2e       	mov	r0, r31
    1458:	f0 e9       	ldi	r31, 0x90	; 144
    145a:	6f 2e       	mov	r6, r31
    145c:	f1 e0       	ldi	r31, 0x01	; 1
    145e:	7f 2e       	mov	r7, r31
    1460:	f0 2d       	mov	r31, r0
    1462:	c9 80       	ldd	r12, Y+1	; 0x01
    1464:	da 80       	ldd	r13, Y+2	; 0x02
    1466:	0f 2e       	mov	r0, r31
    1468:	f4 e8       	ldi	r31, 0x84	; 132
    146a:	4f 2e       	mov	r4, r31
    146c:	f1 e0       	ldi	r31, 0x01	; 1
    146e:	5f 2e       	mov	r5, r31
    1470:	f0 2d       	mov	r31, r0
    1472:	82 01       	movw	r16, r4
    1474:	7c 82       	std	Y+4, r7	; 0x04
    1476:	6b 82       	std	Y+3, r6	; 0x03
		for (int j=0;j<3;j++)
		{
			sum_acc_cal_sum[j] += Acc[j];
    1478:	f7 01       	movw	r30, r14
    147a:	21 91       	ld	r18, Z+
    147c:	31 91       	ld	r19, Z+
    147e:	41 91       	ld	r20, Z+
    1480:	51 91       	ld	r21, Z+
    1482:	7f 01       	movw	r14, r30
    1484:	eb 81       	ldd	r30, Y+3	; 0x03
    1486:	fc 81       	ldd	r31, Y+4	; 0x04
    1488:	60 81       	ld	r22, Z
    148a:	71 81       	ldd	r23, Z+1	; 0x01
    148c:	82 81       	ldd	r24, Z+2	; 0x02
    148e:	93 81       	ldd	r25, Z+3	; 0x03
    1490:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    1494:	eb 81       	ldd	r30, Y+3	; 0x03
    1496:	fc 81       	ldd	r31, Y+4	; 0x04
    1498:	61 93       	st	Z+, r22
    149a:	71 93       	st	Z+, r23
    149c:	81 93       	st	Z+, r24
    149e:	91 93       	st	Z+, r25
    14a0:	fc 83       	std	Y+4, r31	; 0x04
    14a2:	eb 83       	std	Y+3, r30	; 0x03
			sum_gyro_cal_sum[j] += Gyro[j];
    14a4:	f6 01       	movw	r30, r12
    14a6:	21 91       	ld	r18, Z+
    14a8:	31 91       	ld	r19, Z+
    14aa:	41 91       	ld	r20, Z+
    14ac:	51 91       	ld	r21, Z+
    14ae:	6f 01       	movw	r12, r30
    14b0:	f8 01       	movw	r30, r16
    14b2:	60 81       	ld	r22, Z
    14b4:	71 81       	ldd	r23, Z+1	; 0x01
    14b6:	82 81       	ldd	r24, Z+2	; 0x02
    14b8:	93 81       	ldd	r25, Z+3	; 0x03
    14ba:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <__addsf3>
    14be:	f8 01       	movw	r30, r16
    14c0:	61 93       	st	Z+, r22
    14c2:	71 93       	st	Z+, r23
    14c4:	81 93       	st	Z+, r24
    14c6:	91 93       	st	Z+, r25
    14c8:	8f 01       	movw	r16, r30
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
		for (int j=0;j<3;j++)
    14ca:	ea 14       	cp	r14, r10
    14cc:	fb 04       	cpc	r15, r11
    14ce:	a1 f6       	brne	.-88     	; 0x1478 <MPU_Calib+0x6c>
void MPU_Calib(float Acc[3], float Gyro[3])
{
	static float calib_loops = 100;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
    14d0:	ff ef       	ldi	r31, 0xFF	; 255
    14d2:	8f 1a       	sub	r8, r31
    14d4:	9f 0a       	sbc	r9, r31
    14d6:	84 e6       	ldi	r24, 0x64	; 100
    14d8:	88 16       	cp	r8, r24
    14da:	91 04       	cpc	r9, r1
    14dc:	09 f0       	breq	.+2      	; 0x14e0 <MPU_Calib+0xd4>
    14de:	b5 cf       	rjmp	.-150    	; 0x144a <MPU_Calib+0x3e>
    14e0:	0d e3       	ldi	r16, 0x3D	; 61
    14e2:	12 e0       	ldi	r17, 0x02	; 2
    14e4:	e9 e4       	ldi	r30, 0x49	; 73
    14e6:	f2 e0       	ldi	r31, 0x02	; 2
    14e8:	fc 83       	std	Y+4, r31	; 0x04
    14ea:	eb 83       	std	Y+3, r30	; 0x03
    14ec:	0f 2e       	mov	r0, r31
    14ee:	fc e9       	ldi	r31, 0x9C	; 156
    14f0:	ef 2e       	mov	r14, r31
    14f2:	f1 e0       	ldi	r31, 0x01	; 1
    14f4:	ff 2e       	mov	r15, r31
    14f6:	f0 2d       	mov	r31, r0
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
    14f8:	f3 01       	movw	r30, r6
    14fa:	61 91       	ld	r22, Z+
    14fc:	71 91       	ld	r23, Z+
    14fe:	81 91       	ld	r24, Z+
    1500:	91 91       	ld	r25, Z+
    1502:	3f 01       	movw	r6, r30
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	48 ec       	ldi	r20, 0xC8	; 200
    150a:	52 e4       	ldi	r21, 0x42	; 66
    150c:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <__divsf3>
    1510:	f8 01       	movw	r30, r16
    1512:	61 93       	st	Z+, r22
    1514:	71 93       	st	Z+, r23
    1516:	81 93       	st	Z+, r24
    1518:	91 93       	st	Z+, r25
    151a:	8f 01       	movw	r16, r30
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
    151c:	f2 01       	movw	r30, r4
    151e:	61 91       	ld	r22, Z+
    1520:	71 91       	ld	r23, Z+
    1522:	81 91       	ld	r24, Z+
    1524:	91 91       	ld	r25, Z+
    1526:	2f 01       	movw	r4, r30
    1528:	20 e0       	ldi	r18, 0x00	; 0
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	48 ec       	ldi	r20, 0xC8	; 200
    152e:	52 e4       	ldi	r21, 0x42	; 66
    1530:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <__divsf3>
    1534:	eb 81       	ldd	r30, Y+3	; 0x03
    1536:	fc 81       	ldd	r31, Y+4	; 0x04
    1538:	61 93       	st	Z+, r22
    153a:	71 93       	st	Z+, r23
    153c:	81 93       	st	Z+, r24
    153e:	91 93       	st	Z+, r25
    1540:	fc 83       	std	Y+4, r31	; 0x04
    1542:	eb 83       	std	Y+3, r30	; 0x03
		{
			sum_acc_cal_sum[j] += Acc[j];
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
    1544:	6e 14       	cp	r6, r14
    1546:	7f 04       	cpc	r7, r15
    1548:	b9 f6       	brne	.-82     	; 0x14f8 <MPU_Calib+0xec>
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
	}
	acc_calib[2] -= 10;
    154a:	20 e0       	ldi	r18, 0x00	; 0
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	40 e2       	ldi	r20, 0x20	; 32
    1550:	51 e4       	ldi	r21, 0x41	; 65
    1552:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <acc_calib+0x8>
    1556:	70 91 46 02 	lds	r23, 0x0246	; 0x800246 <acc_calib+0x9>
    155a:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <acc_calib+0xa>
    155e:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <acc_calib+0xb>
    1562:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
    1566:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <acc_calib+0x8>
    156a:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <acc_calib+0x9>
    156e:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <acc_calib+0xa>
    1572:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <acc_calib+0xb>
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	ff 90       	pop	r15
    1588:	ef 90       	pop	r14
    158a:	df 90       	pop	r13
    158c:	cf 90       	pop	r12
    158e:	bf 90       	pop	r11
    1590:	af 90       	pop	r10
    1592:	9f 90       	pop	r9
    1594:	8f 90       	pop	r8
    1596:	7f 90       	pop	r7
    1598:	6f 90       	pop	r6
    159a:	5f 90       	pop	r5
    159c:	4f 90       	pop	r4
    159e:	3f 90       	pop	r3
    15a0:	2f 90       	pop	r2
    15a2:	08 95       	ret

000015a4 <MPU_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    15a4:	8b e7       	ldi	r24, 0x7B	; 123
    15a6:	92 e9       	ldi	r25, 0x92	; 146
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <MPU_Init+0x4>
    15ac:	00 c0       	rjmp	.+0      	; 0x15ae <MPU_Init+0xa>
    15ae:	00 00       	nop
void MPU_Init(void)
{
	//
	_delay_ms(150);										/* Power up time >100ms */
	//0x68
	I2C_Start_Wait(MPU6050_addr);
    15b0:	80 ed       	ldi	r24, 0xD0	; 208
    15b2:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <I2C_Start_Wait>
	I2C_Write(0x6B);								/* Write to power management register */
    15b6:	8b e6       	ldi	r24, 0x6B	; 107
    15b8:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Write(0x01);									//select the clock X-axis 
    15bc:	81 e0       	ldi	r24, 0x01	; 1
    15be:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Stop();
    15c2:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_Stop>

	I2C_Start_Wait(MPU6050_addr);
    15c6:	80 ed       	ldi	r24, 0xD0	; 208
    15c8:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <I2C_Start_Wait>
	I2C_Write(0x1A);								//Low pass digital filter
    15cc:	8a e1       	ldi	r24, 0x1A	; 26
    15ce:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Write(0x05);									
    15d2:	85 e0       	ldi	r24, 0x05	; 5
    15d4:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Stop();
    15d8:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_Stop>
	00	+- 250 degrees/s
	01	+- 500 degrees/s
	10	+- 1000 degrees/s
	11	+- 2000 degrees/s
	*/
	I2C_Start_Wait(MPU6050_addr);
    15dc:	80 ed       	ldi	r24, 0xD0	; 208
    15de:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <I2C_Start_Wait>
	I2C_Write(0x1B);			
    15e2:	8b e1       	ldi	r24, 0x1B	; 27
    15e4:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Write(0x08);
    15e8:	88 e0       	ldi	r24, 0x08	; 8
    15ea:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Stop();
    15ee:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_Stop>
	00	+- 2 g
	01	+- 4 g
	10	+- 8 g
	11	+- 16 g
	*/
	I2C_Start_Wait(MPU6050_addr);
    15f2:	80 ed       	ldi	r24, 0xD0	; 208
    15f4:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <I2C_Start_Wait>
	I2C_Write(0x1C);
    15f8:	8c e1       	ldi	r24, 0x1C	; 28
    15fa:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Write(0x10);
    15fe:	80 e1       	ldi	r24, 0x10	; 16
    1600:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Stop();
    1604:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_Stop>
	//disable INT 
	I2C_Start_Wait(MPU6050_addr);
    1608:	80 ed       	ldi	r24, 0xD0	; 208
    160a:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <I2C_Start_Wait>
	I2C_Write(0x38);								/* Write to interrupt enable register */
    160e:	88 e3       	ldi	r24, 0x38	; 56
    1610:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Write(0x01);
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Stop();
    161a:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_Stop>
	//
	I2C_Start_Wait(0xD0);								/* Start with device write address */
    161e:	80 ed       	ldi	r24, 0xD0	; 208
    1620:	0e 94 52 17 	call	0x2ea4	; 0x2ea4 <I2C_Start_Wait>
	I2C_Write(0x19);								/* Write to sample rate register */
    1624:	89 e1       	ldi	r24, 0x19	; 25
    1626:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
    162a:	87 e0       	ldi	r24, 0x07	; 7
    162c:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <I2C_Write>
	I2C_Stop();
    1630:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_Stop>
	
	MPU_Calib(AccData,GyroData);
    1634:	6a e0       	ldi	r22, 0x0A	; 10
    1636:	71 e0       	ldi	r23, 0x01	; 1
    1638:	86 e1       	ldi	r24, 0x16	; 22
    163a:	91 e0       	ldi	r25, 0x01	; 1
    163c:	0e 94 06 0a 	call	0x140c	; 0x140c <MPU_Calib>
    1640:	08 95       	ret

00001642 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1642:	cf 93       	push	r28
    1644:	df 93       	push	r29
    1646:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    1648:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    164c:	ce 01       	movw	r24, r28
    164e:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <malloc>
    1652:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    1654:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    1658:	20 97       	sbiw	r28, 0x00	; 0
    165a:	11 f4       	brne	.+4      	; 0x1660 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    165c:	0e 94 5f 0b 	call	0x16be	; 0x16be <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    1660:	ce 01       	movw	r24, r28
    1662:	df 91       	pop	r29
    1664:	cf 91       	pop	r28
    1666:	08 95       	ret

00001668 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1668:	cf 93       	push	r28
    166a:	df 93       	push	r29
    if( pv )
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	41 f0       	breq	.+16     	; 0x1680 <vPortFree+0x18>
    1670:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    1672:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSuspendAll>
        {
            free( pv );
    1676:	ce 01       	movw	r24, r28
    1678:	0e 94 c0 1f 	call	0x3f80	; 0x3f80 <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    167c:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    }
}
    1680:	df 91       	pop	r29
    1682:	cf 91       	pop	r28
    1684:	08 95       	ret

00001686 <vApplicationIdleHook>:

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // with 1284p
    DIDR0 = 0xFF;

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino with 328p
    DIDR0 = 0x3F;
    1686:	8f e3       	ldi	r24, 0x3F	; 63
    1688:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
    // When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
    // This bit can be set at any time to turn off the Analogue Comparator.
    // This will Yellowuce power consumption in Active and Idle mode.
    // When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
    // Otherwise an interrupt can occur when the ACD bit is changed.
    ACSR &= ~_BV(ACIE);
    168c:	80 b7       	in	r24, 0x30	; 48
    168e:	87 7f       	andi	r24, 0xF7	; 247
    1690:	80 bf       	out	0x30, r24	; 48
    ACSR |=  _BV(ACD);
    1692:	80 b7       	in	r24, 0x30	; 48
    1694:	80 68       	ori	r24, 0x80	; 128
    1696:	80 bf       	out	0x30, r24	; 48
    // SLEEP_MODE_PWR_DOWN     _BV(SM1)
    // SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
    // SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
    // SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

    set_sleep_mode( SLEEP_MODE_IDLE );
    1698:	83 b7       	in	r24, 0x33	; 51
    169a:	81 7f       	andi	r24, 0xF1	; 241
    169c:	83 bf       	out	0x33, r24	; 51

    portENTER_CRITICAL();
    169e:	0f b6       	in	r0, 0x3f	; 63
    16a0:	f8 94       	cli
    16a2:	0f 92       	push	r0
    sleep_enable();
    16a4:	83 b7       	in	r24, 0x33	; 51
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
    sleep_bod_disable();
    16aa:	85 b7       	in	r24, 0x35	; 53
    16ac:	80 66       	ori	r24, 0x60	; 96
    16ae:	85 bf       	out	0x35, r24	; 53
    16b0:	8f 7d       	andi	r24, 0xDF	; 223
    16b2:	85 bf       	out	0x35, r24	; 53
#endif

    portEXIT_CRITICAL();
    16b4:	0f 90       	pop	r0
    16b6:	0f be       	out	0x3f, r0	; 63
    sleep_cpu();            // good night.
    16b8:	88 95       	sleep

    sleep_reset();          // reset the sleep_mode() faster than sleep_disable();
    16ba:	13 be       	out	0x33, r1	; 51
    16bc:	08 95       	ret

000016be <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    16be:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    16c0:	2d 9a       	sbi	0x05, 5	; 5
    16c2:	83 ed       	ldi	r24, 0xD3	; 211
    16c4:	90 e3       	ldi	r25, 0x30	; 48
    16c6:	01 97       	sbiw	r24, 0x01	; 1
    16c8:	f1 f7       	brne	.-4      	; 0x16c6 <vApplicationMallocFailedHook+0x8>
    16ca:	00 c0       	rjmp	.+0      	; 0x16cc <vApplicationMallocFailedHook+0xe>
    16cc:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED fast blink.
    16ce:	1d 9a       	sbi	0x03, 5	; 3
    16d0:	f8 cf       	rjmp	.-16     	; 0x16c2 <vApplicationMallocFailedHook+0x4>

000016d2 <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    16d2:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    16d4:	2d 9a       	sbi	0x05, 5	; 5
    16d6:	2f e7       	ldi	r18, 0x7F	; 127
    16d8:	8a e1       	ldi	r24, 0x1A	; 26
    16da:	96 e0       	ldi	r25, 0x06	; 6
    16dc:	21 50       	subi	r18, 0x01	; 1
    16de:	80 40       	sbci	r24, 0x00	; 0
    16e0:	90 40       	sbci	r25, 0x00	; 0
    16e2:	e1 f7       	brne	.-8      	; 0x16dc <vApplicationStackOverflowHook+0xa>
    16e4:	00 c0       	rjmp	.+0      	; 0x16e6 <vApplicationStackOverflowHook+0x14>
    16e6:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED slow blink.
    16e8:	1d 9a       	sbi	0x03, 5	; 3
    16ea:	f5 cf       	rjmp	.-22     	; 0x16d6 <vApplicationStackOverflowHook+0x4>

000016ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    16ec:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16ee:	03 96       	adiw	r24, 0x03	; 3
    16f0:	92 83       	std	Z+2, r25	; 0x02
    16f2:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    16f4:	2f ef       	ldi	r18, 0xFF	; 255
    16f6:	3f ef       	ldi	r19, 0xFF	; 255
    16f8:	34 83       	std	Z+4, r19	; 0x04
    16fa:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16fc:	96 83       	std	Z+6, r25	; 0x06
    16fe:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1700:	90 87       	std	Z+8, r25	; 0x08
    1702:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    1704:	10 82       	st	Z, r1
    1706:	08 95       	ret

00001708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    1708:	fc 01       	movw	r30, r24
    170a:	11 86       	std	Z+9, r1	; 0x09
    170c:	10 86       	std	Z+8, r1	; 0x08
    170e:	08 95       	ret

00001710 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1710:	cf 93       	push	r28
    1712:	df 93       	push	r29
    1714:	9c 01       	movw	r18, r24
    1716:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    1718:	dc 01       	movw	r26, r24
    171a:	11 96       	adiw	r26, 0x01	; 1
    171c:	cd 91       	ld	r28, X+
    171e:	dc 91       	ld	r29, X
    1720:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1722:	d3 83       	std	Z+3, r29	; 0x03
    1724:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1726:	8c 81       	ldd	r24, Y+4	; 0x04
    1728:	9d 81       	ldd	r25, Y+5	; 0x05
    172a:	95 83       	std	Z+5, r25	; 0x05
    172c:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    172e:	8c 81       	ldd	r24, Y+4	; 0x04
    1730:	9d 81       	ldd	r25, Y+5	; 0x05
    1732:	dc 01       	movw	r26, r24
    1734:	13 96       	adiw	r26, 0x03	; 3
    1736:	7c 93       	st	X, r23
    1738:	6e 93       	st	-X, r22
    173a:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    173c:	7d 83       	std	Y+5, r23	; 0x05
    173e:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1740:	31 87       	std	Z+9, r19	; 0x09
    1742:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    1744:	f9 01       	movw	r30, r18
    1746:	80 81       	ld	r24, Z
    1748:	8f 5f       	subi	r24, 0xFF	; 255
    174a:	80 83       	st	Z, r24
}
    174c:	df 91       	pop	r29
    174e:	cf 91       	pop	r28
    1750:	08 95       	ret

00001752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1752:	cf 93       	push	r28
    1754:	df 93       	push	r29
    1756:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1758:	48 81       	ld	r20, Y
    175a:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stoYellow in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    175c:	4f 3f       	cpi	r20, 0xFF	; 255
    175e:	2f ef       	ldi	r18, 0xFF	; 255
    1760:	52 07       	cpc	r21, r18
    1762:	21 f4       	brne	.+8      	; 0x176c <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    1764:	fc 01       	movw	r30, r24
    1766:	a7 81       	ldd	r26, Z+7	; 0x07
    1768:	b0 85       	ldd	r27, Z+8	; 0x08
    176a:	0d c0       	rjmp	.+26     	; 0x1786 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    176c:	dc 01       	movw	r26, r24
    176e:	13 96       	adiw	r26, 0x03	; 3
    1770:	01 c0       	rjmp	.+2      	; 0x1774 <vListInsert+0x22>
    1772:	df 01       	movw	r26, r30
    1774:	12 96       	adiw	r26, 0x02	; 2
    1776:	ed 91       	ld	r30, X+
    1778:	fc 91       	ld	r31, X
    177a:	13 97       	sbiw	r26, 0x03	; 3
    177c:	20 81       	ld	r18, Z
    177e:	31 81       	ldd	r19, Z+1	; 0x01
    1780:	42 17       	cp	r20, r18
    1782:	53 07       	cpc	r21, r19
    1784:	b0 f7       	brcc	.-20     	; 0x1772 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1786:	12 96       	adiw	r26, 0x02	; 2
    1788:	ed 91       	ld	r30, X+
    178a:	fc 91       	ld	r31, X
    178c:	13 97       	sbiw	r26, 0x03	; 3
    178e:	fb 83       	std	Y+3, r31	; 0x03
    1790:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1792:	d5 83       	std	Z+5, r29	; 0x05
    1794:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1796:	bd 83       	std	Y+5, r27	; 0x05
    1798:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    179a:	13 96       	adiw	r26, 0x03	; 3
    179c:	dc 93       	st	X, r29
    179e:	ce 93       	st	-X, r28
    17a0:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    17a2:	99 87       	std	Y+9, r25	; 0x09
    17a4:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    17a6:	fc 01       	movw	r30, r24
    17a8:	20 81       	ld	r18, Z
    17aa:	2f 5f       	subi	r18, 0xFF	; 255
    17ac:	20 83       	st	Z, r18
}
    17ae:	df 91       	pop	r29
    17b0:	cf 91       	pop	r28
    17b2:	08 95       	ret

000017b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    17ba:	a0 85       	ldd	r26, Z+8	; 0x08
    17bc:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    17be:	c2 81       	ldd	r28, Z+2	; 0x02
    17c0:	d3 81       	ldd	r29, Z+3	; 0x03
    17c2:	84 81       	ldd	r24, Z+4	; 0x04
    17c4:	95 81       	ldd	r25, Z+5	; 0x05
    17c6:	9d 83       	std	Y+5, r25	; 0x05
    17c8:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    17ca:	c4 81       	ldd	r28, Z+4	; 0x04
    17cc:	d5 81       	ldd	r29, Z+5	; 0x05
    17ce:	82 81       	ldd	r24, Z+2	; 0x02
    17d0:	93 81       	ldd	r25, Z+3	; 0x03
    17d2:	9b 83       	std	Y+3, r25	; 0x03
    17d4:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    17d6:	11 96       	adiw	r26, 0x01	; 1
    17d8:	8d 91       	ld	r24, X+
    17da:	9c 91       	ld	r25, X
    17dc:	12 97       	sbiw	r26, 0x02	; 2
    17de:	e8 17       	cp	r30, r24
    17e0:	f9 07       	cpc	r31, r25
    17e2:	31 f4       	brne	.+12     	; 0x17f0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    17e4:	84 81       	ldd	r24, Z+4	; 0x04
    17e6:	95 81       	ldd	r25, Z+5	; 0x05
    17e8:	12 96       	adiw	r26, 0x02	; 2
    17ea:	9c 93       	st	X, r25
    17ec:	8e 93       	st	-X, r24
    17ee:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    17f0:	11 86       	std	Z+9, r1	; 0x09
    17f2:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    17f4:	8c 91       	ld	r24, X
    17f6:	81 50       	subi	r24, 0x01	; 1
    17f8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    17fa:	8c 91       	ld	r24, X
}
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	08 95       	ret

00001802 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    1802:	fc 01       	movw	r30, r24
    1804:	60 83       	st	Z, r22
    1806:	31 97       	sbiw	r30, 0x01	; 1
    1808:	70 83       	st	Z, r23
    180a:	31 97       	sbiw	r30, 0x01	; 1
    180c:	10 82       	st	Z, r1
    180e:	31 97       	sbiw	r30, 0x01	; 1
    1810:	20 e8       	ldi	r18, 0x80	; 128
    1812:	20 83       	st	Z, r18
    1814:	31 97       	sbiw	r30, 0x01	; 1
    1816:	10 82       	st	Z, r1
    1818:	77 97       	sbiw	r30, 0x17	; 23
    181a:	40 83       	st	Z, r20
    181c:	31 97       	sbiw	r30, 0x01	; 1
    181e:	50 83       	st	Z, r21
    1820:	83 97       	sbiw	r24, 0x23	; 35
    1822:	08 95       	ret

00001824 <xPortStartScheduler>:
    1824:	a8 95       	wdr
    1826:	90 ec       	ldi	r25, 0xC0	; 192
    1828:	88 e1       	ldi	r24, 0x18	; 24
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	a8 95       	wdr
    1830:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    1834:	0f be       	out	0x3f, r0	; 63
    1836:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    183a:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    183e:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    1842:	cd 91       	ld	r28, X+
    1844:	cd bf       	out	0x3d, r28	; 61
    1846:	dd 91       	ld	r29, X+
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	ff 91       	pop	r31
    184c:	ef 91       	pop	r30
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	bf 91       	pop	r27
    1854:	af 91       	pop	r26
    1856:	9f 91       	pop	r25
    1858:	8f 91       	pop	r24
    185a:	7f 91       	pop	r23
    185c:	6f 91       	pop	r22
    185e:	5f 91       	pop	r21
    1860:	4f 91       	pop	r20
    1862:	3f 91       	pop	r19
    1864:	2f 91       	pop	r18
    1866:	1f 91       	pop	r17
    1868:	0f 91       	pop	r16
    186a:	ff 90       	pop	r15
    186c:	ef 90       	pop	r14
    186e:	df 90       	pop	r13
    1870:	cf 90       	pop	r12
    1872:	bf 90       	pop	r11
    1874:	af 90       	pop	r10
    1876:	9f 90       	pop	r9
    1878:	8f 90       	pop	r8
    187a:	7f 90       	pop	r7
    187c:	6f 90       	pop	r6
    187e:	5f 90       	pop	r5
    1880:	4f 90       	pop	r4
    1882:	3f 90       	pop	r3
    1884:	2f 90       	pop	r2
    1886:	1f 90       	pop	r1
    1888:	0f 90       	pop	r0
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	0f 90       	pop	r0
    188e:	08 95       	ret
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	08 95       	ret

00001894 <vPortYield>:
    1894:	0f 92       	push	r0
    1896:	0f b6       	in	r0, 0x3f	; 63
    1898:	f8 94       	cli
    189a:	0f 92       	push	r0
    189c:	1f 92       	push	r1
    189e:	11 24       	eor	r1, r1
    18a0:	2f 92       	push	r2
    18a2:	3f 92       	push	r3
    18a4:	4f 92       	push	r4
    18a6:	5f 92       	push	r5
    18a8:	6f 92       	push	r6
    18aa:	7f 92       	push	r7
    18ac:	8f 92       	push	r8
    18ae:	9f 92       	push	r9
    18b0:	af 92       	push	r10
    18b2:	bf 92       	push	r11
    18b4:	cf 92       	push	r12
    18b6:	df 92       	push	r13
    18b8:	ef 92       	push	r14
    18ba:	ff 92       	push	r15
    18bc:	0f 93       	push	r16
    18be:	1f 93       	push	r17
    18c0:	2f 93       	push	r18
    18c2:	3f 93       	push	r19
    18c4:	4f 93       	push	r20
    18c6:	5f 93       	push	r21
    18c8:	6f 93       	push	r22
    18ca:	7f 93       	push	r23
    18cc:	8f 93       	push	r24
    18ce:	9f 93       	push	r25
    18d0:	af 93       	push	r26
    18d2:	bf 93       	push	r27
    18d4:	cf 93       	push	r28
    18d6:	df 93       	push	r29
    18d8:	ef 93       	push	r30
    18da:	ff 93       	push	r31
    18dc:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    18e0:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    18e4:	0d b6       	in	r0, 0x3d	; 61
    18e6:	0d 92       	st	X+, r0
    18e8:	0e b6       	in	r0, 0x3e	; 62
    18ea:	0d 92       	st	X+, r0
    18ec:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <vTaskSwitchContext>
    18f0:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    18f4:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    18f8:	cd 91       	ld	r28, X+
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	dd 91       	ld	r29, X+
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	ff 91       	pop	r31
    1902:	ef 91       	pop	r30
    1904:	df 91       	pop	r29
    1906:	cf 91       	pop	r28
    1908:	bf 91       	pop	r27
    190a:	af 91       	pop	r26
    190c:	9f 91       	pop	r25
    190e:	8f 91       	pop	r24
    1910:	7f 91       	pop	r23
    1912:	6f 91       	pop	r22
    1914:	5f 91       	pop	r21
    1916:	4f 91       	pop	r20
    1918:	3f 91       	pop	r19
    191a:	2f 91       	pop	r18
    191c:	1f 91       	pop	r17
    191e:	0f 91       	pop	r16
    1920:	ff 90       	pop	r15
    1922:	ef 90       	pop	r14
    1924:	df 90       	pop	r13
    1926:	cf 90       	pop	r12
    1928:	bf 90       	pop	r11
    192a:	af 90       	pop	r10
    192c:	9f 90       	pop	r9
    192e:	8f 90       	pop	r8
    1930:	7f 90       	pop	r7
    1932:	6f 90       	pop	r6
    1934:	5f 90       	pop	r5
    1936:	4f 90       	pop	r4
    1938:	3f 90       	pop	r3
    193a:	2f 90       	pop	r2
    193c:	1f 90       	pop	r1
    193e:	0f 90       	pop	r0
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	0f 90       	pop	r0
    1944:	08 95       	ret

00001946 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1946:	0f 92       	push	r0
    1948:	0f b6       	in	r0, 0x3f	; 63
    194a:	f8 94       	cli
    194c:	0f 92       	push	r0
    194e:	1f 92       	push	r1
    1950:	11 24       	eor	r1, r1
    1952:	2f 92       	push	r2
    1954:	3f 92       	push	r3
    1956:	4f 92       	push	r4
    1958:	5f 92       	push	r5
    195a:	6f 92       	push	r6
    195c:	7f 92       	push	r7
    195e:	8f 92       	push	r8
    1960:	9f 92       	push	r9
    1962:	af 92       	push	r10
    1964:	bf 92       	push	r11
    1966:	cf 92       	push	r12
    1968:	df 92       	push	r13
    196a:	ef 92       	push	r14
    196c:	ff 92       	push	r15
    196e:	0f 93       	push	r16
    1970:	1f 93       	push	r17
    1972:	2f 93       	push	r18
    1974:	3f 93       	push	r19
    1976:	4f 93       	push	r20
    1978:	5f 93       	push	r21
    197a:	6f 93       	push	r22
    197c:	7f 93       	push	r23
    197e:	8f 93       	push	r24
    1980:	9f 93       	push	r25
    1982:	af 93       	push	r26
    1984:	bf 93       	push	r27
    1986:	cf 93       	push	r28
    1988:	df 93       	push	r29
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
    198e:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    1992:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    1996:	0d b6       	in	r0, 0x3d	; 61
    1998:	0d 92       	st	X+, r0
    199a:	0e b6       	in	r0, 0x3e	; 62
    199c:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    199e:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    19a0:	0e 94 db 11 	call	0x23b6	; 0x23b6 <xTaskIncrementTick>
    19a4:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    19a6:	0e 94 5b 13 	call	0x26b6	; 0x26b6 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    19aa:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    19ae:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    19b2:	cd 91       	ld	r28, X+
    19b4:	cd bf       	out	0x3d, r28	; 61
    19b6:	dd 91       	ld	r29, X+
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	ff 91       	pop	r31
    19bc:	ef 91       	pop	r30
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	bf 91       	pop	r27
    19c4:	af 91       	pop	r26
    19c6:	9f 91       	pop	r25
    19c8:	8f 91       	pop	r24
    19ca:	7f 91       	pop	r23
    19cc:	6f 91       	pop	r22
    19ce:	5f 91       	pop	r21
    19d0:	4f 91       	pop	r20
    19d2:	3f 91       	pop	r19
    19d4:	2f 91       	pop	r18
    19d6:	1f 91       	pop	r17
    19d8:	0f 91       	pop	r16
    19da:	ff 90       	pop	r15
    19dc:	ef 90       	pop	r14
    19de:	df 90       	pop	r13
    19e0:	cf 90       	pop	r12
    19e2:	bf 90       	pop	r11
    19e4:	af 90       	pop	r10
    19e6:	9f 90       	pop	r9
    19e8:	8f 90       	pop	r8
    19ea:	7f 90       	pop	r7
    19ec:	6f 90       	pop	r6
    19ee:	5f 90       	pop	r5
    19f0:	4f 90       	pop	r4
    19f2:	3f 90       	pop	r3
    19f4:	2f 90       	pop	r2
    19f6:	1f 90       	pop	r1
    19f8:	0f 90       	pop	r0
    19fa:	0f be       	out	0x3f, r0	; 63
    19fc:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    19fe:	08 95       	ret

00001a00 <__vector_6>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    1a00:	0e 94 a3 0c 	call	0x1946	; 0x1946 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    1a04:	18 95       	reti

00001a06 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1a06:	0f b6       	in	r0, 0x3f	; 63
    1a08:	f8 94       	cli
    1a0a:	0f 92       	push	r0
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a10:	0f 90       	pop	r0
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	91 11       	cpse	r25, r1
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	08 95       	ret

00001a1c <prvCopyDataToQueue>:
    1a1c:	0f 93       	push	r16
    1a1e:	1f 93       	push	r17
    1a20:	cf 93       	push	r28
    1a22:	df 93       	push	r29
    1a24:	ec 01       	movw	r28, r24
    1a26:	04 2f       	mov	r16, r20
    1a28:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1a2a:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1a2c:	41 11       	cpse	r20, r1
    1a2e:	0c c0       	rjmp	.+24     	; 0x1a48 <prvCopyDataToQueue+0x2c>
    1a30:	88 81       	ld	r24, Y
    1a32:	99 81       	ldd	r25, Y+1	; 0x01
    1a34:	89 2b       	or	r24, r25
    1a36:	09 f0       	breq	.+2      	; 0x1a3a <prvCopyDataToQueue+0x1e>
    1a38:	42 c0       	rjmp	.+132    	; 0x1abe <prvCopyDataToQueue+0xa2>
    1a3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a3c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a3e:	0e 94 a2 14 	call	0x2944	; 0x2944 <xTaskPriorityDisinherit>
    1a42:	1d 82       	std	Y+5, r1	; 0x05
    1a44:	1c 82       	std	Y+4, r1	; 0x04
    1a46:	42 c0       	rjmp	.+132    	; 0x1acc <prvCopyDataToQueue+0xb0>
    1a48:	01 11       	cpse	r16, r1
    1a4a:	17 c0       	rjmp	.+46     	; 0x1a7a <prvCopyDataToQueue+0x5e>
    1a4c:	50 e0       	ldi	r21, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	9b 81       	ldd	r25, Y+3	; 0x03
    1a52:	0e 94 2c 21 	call	0x4258	; 0x4258 <memcpy>
    1a56:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a5c:	82 0f       	add	r24, r18
    1a5e:	91 1d       	adc	r25, r1
    1a60:	9b 83       	std	Y+3, r25	; 0x03
    1a62:	8a 83       	std	Y+2, r24	; 0x02
    1a64:	2c 81       	ldd	r18, Y+4	; 0x04
    1a66:	3d 81       	ldd	r19, Y+5	; 0x05
    1a68:	82 17       	cp	r24, r18
    1a6a:	93 07       	cpc	r25, r19
    1a6c:	50 f1       	brcs	.+84     	; 0x1ac2 <prvCopyDataToQueue+0xa6>
    1a6e:	88 81       	ld	r24, Y
    1a70:	99 81       	ldd	r25, Y+1	; 0x01
    1a72:	9b 83       	std	Y+3, r25	; 0x03
    1a74:	8a 83       	std	Y+2, r24	; 0x02
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	29 c0       	rjmp	.+82     	; 0x1acc <prvCopyDataToQueue+0xb0>
    1a7a:	50 e0       	ldi	r21, 0x00	; 0
    1a7c:	8e 81       	ldd	r24, Y+6	; 0x06
    1a7e:	9f 81       	ldd	r25, Y+7	; 0x07
    1a80:	0e 94 2c 21 	call	0x4258	; 0x4258 <memcpy>
    1a84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	91 95       	neg	r25
    1a8a:	81 95       	neg	r24
    1a8c:	91 09       	sbc	r25, r1
    1a8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1a90:	3f 81       	ldd	r19, Y+7	; 0x07
    1a92:	28 0f       	add	r18, r24
    1a94:	39 1f       	adc	r19, r25
    1a96:	3f 83       	std	Y+7, r19	; 0x07
    1a98:	2e 83       	std	Y+6, r18	; 0x06
    1a9a:	48 81       	ld	r20, Y
    1a9c:	59 81       	ldd	r21, Y+1	; 0x01
    1a9e:	24 17       	cp	r18, r20
    1aa0:	35 07       	cpc	r19, r21
    1aa2:	30 f4       	brcc	.+12     	; 0x1ab0 <prvCopyDataToQueue+0x94>
    1aa4:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa6:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa8:	82 0f       	add	r24, r18
    1aaa:	93 1f       	adc	r25, r19
    1aac:	9f 83       	std	Y+7, r25	; 0x07
    1aae:	8e 83       	std	Y+6, r24	; 0x06
    1ab0:	02 30       	cpi	r16, 0x02	; 2
    1ab2:	49 f4       	brne	.+18     	; 0x1ac6 <prvCopyDataToQueue+0xaa>
    1ab4:	11 23       	and	r17, r17
    1ab6:	49 f0       	breq	.+18     	; 0x1aca <prvCopyDataToQueue+0xae>
    1ab8:	11 50       	subi	r17, 0x01	; 1
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	07 c0       	rjmp	.+14     	; 0x1acc <prvCopyDataToQueue+0xb0>
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <prvCopyDataToQueue+0xb0>
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	03 c0       	rjmp	.+6      	; 0x1acc <prvCopyDataToQueue+0xb0>
    1ac6:	80 e0       	ldi	r24, 0x00	; 0
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <prvCopyDataToQueue+0xb0>
    1aca:	80 e0       	ldi	r24, 0x00	; 0
    1acc:	1f 5f       	subi	r17, 0xFF	; 255
    1ace:	1a 8f       	std	Y+26, r17	; 0x1a
    1ad0:	df 91       	pop	r29
    1ad2:	cf 91       	pop	r28
    1ad4:	1f 91       	pop	r17
    1ad6:	0f 91       	pop	r16
    1ad8:	08 95       	ret

00001ada <prvCopyDataFromQueue>:
    1ada:	fc 01       	movw	r30, r24
    1adc:	44 8d       	ldd	r20, Z+28	; 0x1c
    1ade:	44 23       	and	r20, r20
    1ae0:	a9 f0       	breq	.+42     	; 0x1b0c <prvCopyDataFromQueue+0x32>
    1ae2:	50 e0       	ldi	r21, 0x00	; 0
    1ae4:	26 81       	ldd	r18, Z+6	; 0x06
    1ae6:	37 81       	ldd	r19, Z+7	; 0x07
    1ae8:	24 0f       	add	r18, r20
    1aea:	35 1f       	adc	r19, r21
    1aec:	37 83       	std	Z+7, r19	; 0x07
    1aee:	26 83       	std	Z+6, r18	; 0x06
    1af0:	84 81       	ldd	r24, Z+4	; 0x04
    1af2:	95 81       	ldd	r25, Z+5	; 0x05
    1af4:	28 17       	cp	r18, r24
    1af6:	39 07       	cpc	r19, r25
    1af8:	20 f0       	brcs	.+8      	; 0x1b02 <prvCopyDataFromQueue+0x28>
    1afa:	80 81       	ld	r24, Z
    1afc:	91 81       	ldd	r25, Z+1	; 0x01
    1afe:	97 83       	std	Z+7, r25	; 0x07
    1b00:	86 83       	std	Z+6, r24	; 0x06
    1b02:	cb 01       	movw	r24, r22
    1b04:	66 81       	ldd	r22, Z+6	; 0x06
    1b06:	77 81       	ldd	r23, Z+7	; 0x07
    1b08:	0e 94 2c 21 	call	0x4258	; 0x4258 <memcpy>
    1b0c:	08 95       	ret

00001b0e <prvUnlockQueue>:
    1b0e:	ef 92       	push	r14
    1b10:	ff 92       	push	r15
    1b12:	0f 93       	push	r16
    1b14:	1f 93       	push	r17
    1b16:	cf 93       	push	r28
    1b18:	8c 01       	movw	r16, r24
    1b1a:	0f b6       	in	r0, 0x3f	; 63
    1b1c:	f8 94       	cli
    1b1e:	0f 92       	push	r0
    1b20:	fc 01       	movw	r30, r24
    1b22:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1b24:	1c 16       	cp	r1, r28
    1b26:	ac f4       	brge	.+42     	; 0x1b52 <prvUnlockQueue+0x44>
    1b28:	81 89       	ldd	r24, Z+17	; 0x11
    1b2a:	81 11       	cpse	r24, r1
    1b2c:	06 c0       	rjmp	.+12     	; 0x1b3a <prvUnlockQueue+0x2c>
    1b2e:	11 c0       	rjmp	.+34     	; 0x1b52 <prvUnlockQueue+0x44>
    1b30:	f8 01       	movw	r30, r16
    1b32:	81 89       	ldd	r24, Z+17	; 0x11
    1b34:	81 11       	cpse	r24, r1
    1b36:	05 c0       	rjmp	.+10     	; 0x1b42 <prvUnlockQueue+0x34>
    1b38:	0c c0       	rjmp	.+24     	; 0x1b52 <prvUnlockQueue+0x44>
    1b3a:	78 01       	movw	r14, r16
    1b3c:	f1 e1       	ldi	r31, 0x11	; 17
    1b3e:	ef 0e       	add	r14, r31
    1b40:	f1 1c       	adc	r15, r1
    1b42:	c7 01       	movw	r24, r14
    1b44:	0e 94 07 14 	call	0x280e	; 0x280e <xTaskRemoveFromEventList>
    1b48:	81 11       	cpse	r24, r1
    1b4a:	0e 94 90 14 	call	0x2920	; 0x2920 <vTaskMissedYield>
    1b4e:	c1 50       	subi	r28, 0x01	; 1
    1b50:	79 f7       	brne	.-34     	; 0x1b30 <prvUnlockQueue+0x22>
    1b52:	8f ef       	ldi	r24, 0xFF	; 255
    1b54:	f8 01       	movw	r30, r16
    1b56:	86 8f       	std	Z+30, r24	; 0x1e
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	0f b6       	in	r0, 0x3f	; 63
    1b5e:	f8 94       	cli
    1b60:	0f 92       	push	r0
    1b62:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1b64:	1c 16       	cp	r1, r28
    1b66:	ac f4       	brge	.+42     	; 0x1b92 <prvUnlockQueue+0x84>
    1b68:	80 85       	ldd	r24, Z+8	; 0x08
    1b6a:	81 11       	cpse	r24, r1
    1b6c:	06 c0       	rjmp	.+12     	; 0x1b7a <prvUnlockQueue+0x6c>
    1b6e:	11 c0       	rjmp	.+34     	; 0x1b92 <prvUnlockQueue+0x84>
    1b70:	f8 01       	movw	r30, r16
    1b72:	80 85       	ldd	r24, Z+8	; 0x08
    1b74:	81 11       	cpse	r24, r1
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <prvUnlockQueue+0x74>
    1b78:	0c c0       	rjmp	.+24     	; 0x1b92 <prvUnlockQueue+0x84>
    1b7a:	78 01       	movw	r14, r16
    1b7c:	f8 e0       	ldi	r31, 0x08	; 8
    1b7e:	ef 0e       	add	r14, r31
    1b80:	f1 1c       	adc	r15, r1
    1b82:	c7 01       	movw	r24, r14
    1b84:	0e 94 07 14 	call	0x280e	; 0x280e <xTaskRemoveFromEventList>
    1b88:	81 11       	cpse	r24, r1
    1b8a:	0e 94 90 14 	call	0x2920	; 0x2920 <vTaskMissedYield>
    1b8e:	c1 50       	subi	r28, 0x01	; 1
    1b90:	79 f7       	brne	.-34     	; 0x1b70 <prvUnlockQueue+0x62>
    1b92:	8f ef       	ldi	r24, 0xFF	; 255
    1b94:	f8 01       	movw	r30, r16
    1b96:	85 8f       	std	Z+29, r24	; 0x1d
    1b98:	0f 90       	pop	r0
    1b9a:	0f be       	out	0x3f, r0	; 63
    1b9c:	cf 91       	pop	r28
    1b9e:	1f 91       	pop	r17
    1ba0:	0f 91       	pop	r16
    1ba2:	ff 90       	pop	r15
    1ba4:	ef 90       	pop	r14
    1ba6:	08 95       	ret

00001ba8 <xQueueGenericReset>:
    1ba8:	cf 93       	push	r28
    1baa:	df 93       	push	r29
    1bac:	ec 01       	movw	r28, r24
    1bae:	0f b6       	in	r0, 0x3f	; 63
    1bb0:	f8 94       	cli
    1bb2:	0f 92       	push	r0
    1bb4:	e8 81       	ld	r30, Y
    1bb6:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bba:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	82 9f       	mul	r24, r18
    1bc2:	a0 01       	movw	r20, r0
    1bc4:	83 9f       	mul	r24, r19
    1bc6:	50 0d       	add	r21, r0
    1bc8:	92 9f       	mul	r25, r18
    1bca:	50 0d       	add	r21, r0
    1bcc:	11 24       	eor	r1, r1
    1bce:	4e 0f       	add	r20, r30
    1bd0:	5f 1f       	adc	r21, r31
    1bd2:	5d 83       	std	Y+5, r21	; 0x05
    1bd4:	4c 83       	std	Y+4, r20	; 0x04
    1bd6:	1a 8e       	std	Y+26, r1	; 0x1a
    1bd8:	fb 83       	std	Y+3, r31	; 0x03
    1bda:	ea 83       	std	Y+2, r30	; 0x02
    1bdc:	01 97       	sbiw	r24, 0x01	; 1
    1bde:	82 9f       	mul	r24, r18
    1be0:	a0 01       	movw	r20, r0
    1be2:	83 9f       	mul	r24, r19
    1be4:	50 0d       	add	r21, r0
    1be6:	92 9f       	mul	r25, r18
    1be8:	50 0d       	add	r21, r0
    1bea:	11 24       	eor	r1, r1
    1bec:	cf 01       	movw	r24, r30
    1bee:	84 0f       	add	r24, r20
    1bf0:	95 1f       	adc	r25, r21
    1bf2:	9f 83       	std	Y+7, r25	; 0x07
    1bf4:	8e 83       	std	Y+6, r24	; 0x06
    1bf6:	8f ef       	ldi	r24, 0xFF	; 255
    1bf8:	8d 8f       	std	Y+29, r24	; 0x1d
    1bfa:	8e 8f       	std	Y+30, r24	; 0x1e
    1bfc:	61 11       	cpse	r22, r1
    1bfe:	0c c0       	rjmp	.+24     	; 0x1c18 <xQueueGenericReset+0x70>
    1c00:	88 85       	ldd	r24, Y+8	; 0x08
    1c02:	88 23       	and	r24, r24
    1c04:	89 f0       	breq	.+34     	; 0x1c28 <xQueueGenericReset+0x80>
    1c06:	ce 01       	movw	r24, r28
    1c08:	08 96       	adiw	r24, 0x08	; 8
    1c0a:	0e 94 07 14 	call	0x280e	; 0x280e <xTaskRemoveFromEventList>
    1c0e:	88 23       	and	r24, r24
    1c10:	59 f0       	breq	.+22     	; 0x1c28 <xQueueGenericReset+0x80>
    1c12:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    1c16:	08 c0       	rjmp	.+16     	; 0x1c28 <xQueueGenericReset+0x80>
    1c18:	ce 01       	movw	r24, r28
    1c1a:	08 96       	adiw	r24, 0x08	; 8
    1c1c:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    1c20:	ce 01       	movw	r24, r28
    1c22:	41 96       	adiw	r24, 0x11	; 17
    1c24:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    1c28:	0f 90       	pop	r0
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	81 e0       	ldi	r24, 0x01	; 1
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <xQueueGenericCreate>:
    1c34:	0f 93       	push	r16
    1c36:	1f 93       	push	r17
    1c38:	cf 93       	push	r28
    1c3a:	df 93       	push	r29
    1c3c:	08 2f       	mov	r16, r24
    1c3e:	16 2f       	mov	r17, r22
    1c40:	86 9f       	mul	r24, r22
    1c42:	c0 01       	movw	r24, r0
    1c44:	11 24       	eor	r1, r1
    1c46:	4f 96       	adiw	r24, 0x1f	; 31
    1c48:	0e 94 21 0b 	call	0x1642	; 0x1642 <pvPortMalloc>
    1c4c:	ec 01       	movw	r28, r24
    1c4e:	00 97       	sbiw	r24, 0x00	; 0
    1c50:	71 f0       	breq	.+28     	; 0x1c6e <xQueueGenericCreate+0x3a>
    1c52:	11 11       	cpse	r17, r1
    1c54:	03 c0       	rjmp	.+6      	; 0x1c5c <xQueueGenericCreate+0x28>
    1c56:	99 83       	std	Y+1, r25	; 0x01
    1c58:	88 83       	st	Y, r24
    1c5a:	03 c0       	rjmp	.+6      	; 0x1c62 <xQueueGenericCreate+0x2e>
    1c5c:	4f 96       	adiw	r24, 0x1f	; 31
    1c5e:	99 83       	std	Y+1, r25	; 0x01
    1c60:	88 83       	st	Y, r24
    1c62:	0b 8f       	std	Y+27, r16	; 0x1b
    1c64:	1c 8f       	std	Y+28, r17	; 0x1c
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	ce 01       	movw	r24, r28
    1c6a:	0e 94 d4 0d 	call	0x1ba8	; 0x1ba8 <xQueueGenericReset>
    1c6e:	ce 01       	movw	r24, r28
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <xQueueGenericSend>:
    1c7a:	9f 92       	push	r9
    1c7c:	af 92       	push	r10
    1c7e:	bf 92       	push	r11
    1c80:	cf 92       	push	r12
    1c82:	df 92       	push	r13
    1c84:	ef 92       	push	r14
    1c86:	ff 92       	push	r15
    1c88:	0f 93       	push	r16
    1c8a:	1f 93       	push	r17
    1c8c:	cf 93       	push	r28
    1c8e:	df 93       	push	r29
    1c90:	00 d0       	rcall	.+0      	; 0x1c92 <xQueueGenericSend+0x18>
    1c92:	00 d0       	rcall	.+0      	; 0x1c94 <xQueueGenericSend+0x1a>
    1c94:	1f 92       	push	r1
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	8c 01       	movw	r16, r24
    1c9c:	6b 01       	movw	r12, r22
    1c9e:	5d 83       	std	Y+5, r21	; 0x05
    1ca0:	4c 83       	std	Y+4, r20	; 0x04
    1ca2:	a2 2e       	mov	r10, r18
    1ca4:	b1 2c       	mov	r11, r1
    1ca6:	99 24       	eor	r9, r9
    1ca8:	93 94       	inc	r9
    1caa:	7c 01       	movw	r14, r24
    1cac:	88 e0       	ldi	r24, 0x08	; 8
    1cae:	e8 0e       	add	r14, r24
    1cb0:	f1 1c       	adc	r15, r1
    1cb2:	0f b6       	in	r0, 0x3f	; 63
    1cb4:	f8 94       	cli
    1cb6:	0f 92       	push	r0
    1cb8:	f8 01       	movw	r30, r16
    1cba:	92 8d       	ldd	r25, Z+26	; 0x1a
    1cbc:	83 8d       	ldd	r24, Z+27	; 0x1b
    1cbe:	98 17       	cp	r25, r24
    1cc0:	18 f0       	brcs	.+6      	; 0x1cc8 <xQueueGenericSend+0x4e>
    1cc2:	f2 e0       	ldi	r31, 0x02	; 2
    1cc4:	af 12       	cpse	r10, r31
    1cc6:	19 c0       	rjmp	.+50     	; 0x1cfa <xQueueGenericSend+0x80>
    1cc8:	4a 2d       	mov	r20, r10
    1cca:	b6 01       	movw	r22, r12
    1ccc:	c8 01       	movw	r24, r16
    1cce:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <prvCopyDataToQueue>
    1cd2:	f8 01       	movw	r30, r16
    1cd4:	91 89       	ldd	r25, Z+17	; 0x11
    1cd6:	99 23       	and	r25, r25
    1cd8:	49 f0       	breq	.+18     	; 0x1cec <xQueueGenericSend+0x72>
    1cda:	c8 01       	movw	r24, r16
    1cdc:	41 96       	adiw	r24, 0x11	; 17
    1cde:	0e 94 07 14 	call	0x280e	; 0x280e <xTaskRemoveFromEventList>
    1ce2:	88 23       	and	r24, r24
    1ce4:	31 f0       	breq	.+12     	; 0x1cf2 <xQueueGenericSend+0x78>
    1ce6:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    1cea:	03 c0       	rjmp	.+6      	; 0x1cf2 <xQueueGenericSend+0x78>
    1cec:	81 11       	cpse	r24, r1
    1cee:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    1cf2:	0f 90       	pop	r0
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	50 c0       	rjmp	.+160    	; 0x1d9a <xQueueGenericSend+0x120>
    1cfa:	8c 81       	ldd	r24, Y+4	; 0x04
    1cfc:	9d 81       	ldd	r25, Y+5	; 0x05
    1cfe:	89 2b       	or	r24, r25
    1d00:	21 f4       	brne	.+8      	; 0x1d0a <xQueueGenericSend+0x90>
    1d02:	0f 90       	pop	r0
    1d04:	0f be       	out	0x3f, r0	; 63
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	48 c0       	rjmp	.+144    	; 0x1d9a <xQueueGenericSend+0x120>
    1d0a:	b1 10       	cpse	r11, r1
    1d0c:	05 c0       	rjmp	.+10     	; 0x1d18 <xQueueGenericSend+0x9e>
    1d0e:	ce 01       	movw	r24, r28
    1d10:	01 96       	adiw	r24, 0x01	; 1
    1d12:	0e 94 4f 14 	call	0x289e	; 0x289e <vTaskInternalSetTimeOutState>
    1d16:	b9 2c       	mov	r11, r9
    1d18:	0f 90       	pop	r0
    1d1a:	0f be       	out	0x3f, r0	; 63
    1d1c:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSuspendAll>
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	0f 92       	push	r0
    1d26:	f8 01       	movw	r30, r16
    1d28:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <xQueueGenericSend+0xb6>
    1d2e:	15 8e       	std	Z+29, r1	; 0x1d
    1d30:	f8 01       	movw	r30, r16
    1d32:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d34:	8f 3f       	cpi	r24, 0xFF	; 255
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <xQueueGenericSend+0xc0>
    1d38:	16 8e       	std	Z+30, r1	; 0x1e
    1d3a:	0f 90       	pop	r0
    1d3c:	0f be       	out	0x3f, r0	; 63
    1d3e:	be 01       	movw	r22, r28
    1d40:	6c 5f       	subi	r22, 0xFC	; 252
    1d42:	7f 4f       	sbci	r23, 0xFF	; 255
    1d44:	ce 01       	movw	r24, r28
    1d46:	01 96       	adiw	r24, 0x01	; 1
    1d48:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <xTaskCheckForTimeOut>
    1d4c:	81 11       	cpse	r24, r1
    1d4e:	1f c0       	rjmp	.+62     	; 0x1d8e <xQueueGenericSend+0x114>
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	0f 92       	push	r0
    1d56:	f8 01       	movw	r30, r16
    1d58:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d5a:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d5c:	0f 90       	pop	r0
    1d5e:	0f be       	out	0x3f, r0	; 63
    1d60:	98 13       	cpse	r25, r24
    1d62:	0f c0       	rjmp	.+30     	; 0x1d82 <xQueueGenericSend+0x108>
    1d64:	6c 81       	ldd	r22, Y+4	; 0x04
    1d66:	7d 81       	ldd	r23, Y+5	; 0x05
    1d68:	c7 01       	movw	r24, r14
    1d6a:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <vTaskPlaceOnEventList>
    1d6e:	c8 01       	movw	r24, r16
    1d70:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <prvUnlockQueue>
    1d74:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    1d78:	81 11       	cpse	r24, r1
    1d7a:	9b cf       	rjmp	.-202    	; 0x1cb2 <xQueueGenericSend+0x38>
    1d7c:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    1d80:	98 cf       	rjmp	.-208    	; 0x1cb2 <xQueueGenericSend+0x38>
    1d82:	c8 01       	movw	r24, r16
    1d84:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <prvUnlockQueue>
    1d88:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    1d8c:	92 cf       	rjmp	.-220    	; 0x1cb2 <xQueueGenericSend+0x38>
    1d8e:	c8 01       	movw	r24, r16
    1d90:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <prvUnlockQueue>
    1d94:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    1d98:	80 e0       	ldi	r24, 0x00	; 0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	0f 90       	pop	r0
    1da0:	0f 90       	pop	r0
    1da2:	0f 90       	pop	r0
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	08 95       	ret

00001dbc <xQueueGenericSendFromISR>:
    1dbc:	ef 92       	push	r14
    1dbe:	ff 92       	push	r15
    1dc0:	0f 93       	push	r16
    1dc2:	1f 93       	push	r17
    1dc4:	cf 93       	push	r28
    1dc6:	df 93       	push	r29
    1dc8:	8a 01       	movw	r16, r20
    1dca:	fc 01       	movw	r30, r24
    1dcc:	52 8d       	ldd	r21, Z+26	; 0x1a
    1dce:	33 8d       	ldd	r19, Z+27	; 0x1b
    1dd0:	53 17       	cp	r21, r19
    1dd2:	10 f0       	brcs	.+4      	; 0x1dd8 <xQueueGenericSendFromISR+0x1c>
    1dd4:	22 30       	cpi	r18, 0x02	; 2
    1dd6:	01 f5       	brne	.+64     	; 0x1e18 <xQueueGenericSendFromISR+0x5c>
    1dd8:	42 2f       	mov	r20, r18
    1dda:	78 01       	movw	r14, r16
    1ddc:	ec 01       	movw	r28, r24
    1dde:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1de0:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1de2:	ce 01       	movw	r24, r28
    1de4:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <prvCopyDataToQueue>
    1de8:	1f 3f       	cpi	r17, 0xFF	; 255
    1dea:	81 f4       	brne	.+32     	; 0x1e0c <xQueueGenericSendFromISR+0x50>
    1dec:	89 89       	ldd	r24, Y+17	; 0x11
    1dee:	88 23       	and	r24, r24
    1df0:	a9 f0       	breq	.+42     	; 0x1e1c <xQueueGenericSendFromISR+0x60>
    1df2:	ce 01       	movw	r24, r28
    1df4:	41 96       	adiw	r24, 0x11	; 17
    1df6:	0e 94 07 14 	call	0x280e	; 0x280e <xTaskRemoveFromEventList>
    1dfa:	88 23       	and	r24, r24
    1dfc:	89 f0       	breq	.+34     	; 0x1e20 <xQueueGenericSendFromISR+0x64>
    1dfe:	e1 14       	cp	r14, r1
    1e00:	f1 04       	cpc	r15, r1
    1e02:	81 f0       	breq	.+32     	; 0x1e24 <xQueueGenericSendFromISR+0x68>
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	f7 01       	movw	r30, r14
    1e08:	80 83       	st	Z, r24
    1e0a:	0d c0       	rjmp	.+26     	; 0x1e26 <xQueueGenericSendFromISR+0x6a>
    1e0c:	ff 24       	eor	r15, r15
    1e0e:	f3 94       	inc	r15
    1e10:	f1 0e       	add	r15, r17
    1e12:	fe 8e       	std	Y+30, r15	; 0x1e
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	07 c0       	rjmp	.+14     	; 0x1e26 <xQueueGenericSendFromISR+0x6a>
    1e18:	80 e0       	ldi	r24, 0x00	; 0
    1e1a:	05 c0       	rjmp	.+10     	; 0x1e26 <xQueueGenericSendFromISR+0x6a>
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	03 c0       	rjmp	.+6      	; 0x1e26 <xQueueGenericSendFromISR+0x6a>
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	01 c0       	rjmp	.+2      	; 0x1e26 <xQueueGenericSendFromISR+0x6a>
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	df 91       	pop	r29
    1e28:	cf 91       	pop	r28
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	08 95       	ret

00001e34 <xQueueReceive>:
    1e34:	9f 92       	push	r9
    1e36:	af 92       	push	r10
    1e38:	bf 92       	push	r11
    1e3a:	cf 92       	push	r12
    1e3c:	df 92       	push	r13
    1e3e:	ef 92       	push	r14
    1e40:	ff 92       	push	r15
    1e42:	0f 93       	push	r16
    1e44:	1f 93       	push	r17
    1e46:	cf 93       	push	r28
    1e48:	df 93       	push	r29
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <xQueueReceive+0x18>
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <xQueueReceive+0x1a>
    1e4e:	1f 92       	push	r1
    1e50:	cd b7       	in	r28, 0x3d	; 61
    1e52:	de b7       	in	r29, 0x3e	; 62
    1e54:	8c 01       	movw	r16, r24
    1e56:	5b 01       	movw	r10, r22
    1e58:	5d 83       	std	Y+5, r21	; 0x05
    1e5a:	4c 83       	std	Y+4, r20	; 0x04
    1e5c:	e1 2c       	mov	r14, r1
    1e5e:	99 24       	eor	r9, r9
    1e60:	93 94       	inc	r9
    1e62:	6c 01       	movw	r12, r24
    1e64:	81 e1       	ldi	r24, 0x11	; 17
    1e66:	c8 0e       	add	r12, r24
    1e68:	d1 1c       	adc	r13, r1
    1e6a:	0f b6       	in	r0, 0x3f	; 63
    1e6c:	f8 94       	cli
    1e6e:	0f 92       	push	r0
    1e70:	f8 01       	movw	r30, r16
    1e72:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1e74:	ff 20       	and	r15, r15
    1e76:	a9 f0       	breq	.+42     	; 0x1ea2 <xQueueReceive+0x6e>
    1e78:	b5 01       	movw	r22, r10
    1e7a:	c8 01       	movw	r24, r16
    1e7c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <prvCopyDataFromQueue>
    1e80:	fa 94       	dec	r15
    1e82:	f8 01       	movw	r30, r16
    1e84:	f2 8e       	std	Z+26, r15	; 0x1a
    1e86:	80 85       	ldd	r24, Z+8	; 0x08
    1e88:	88 23       	and	r24, r24
    1e8a:	39 f0       	breq	.+14     	; 0x1e9a <xQueueReceive+0x66>
    1e8c:	c8 01       	movw	r24, r16
    1e8e:	08 96       	adiw	r24, 0x08	; 8
    1e90:	0e 94 07 14 	call	0x280e	; 0x280e <xTaskRemoveFromEventList>
    1e94:	81 11       	cpse	r24, r1
    1e96:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	51 c0       	rjmp	.+162    	; 0x1f44 <xQueueReceive+0x110>
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	89 2b       	or	r24, r25
    1ea8:	21 f4       	brne	.+8      	; 0x1eb2 <xQueueReceive+0x7e>
    1eaa:	0f 90       	pop	r0
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	80 e0       	ldi	r24, 0x00	; 0
    1eb0:	49 c0       	rjmp	.+146    	; 0x1f44 <xQueueReceive+0x110>
    1eb2:	e1 10       	cpse	r14, r1
    1eb4:	05 c0       	rjmp	.+10     	; 0x1ec0 <xQueueReceive+0x8c>
    1eb6:	ce 01       	movw	r24, r28
    1eb8:	01 96       	adiw	r24, 0x01	; 1
    1eba:	0e 94 4f 14 	call	0x289e	; 0x289e <vTaskInternalSetTimeOutState>
    1ebe:	e9 2c       	mov	r14, r9
    1ec0:	0f 90       	pop	r0
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSuspendAll>
    1ec8:	0f b6       	in	r0, 0x3f	; 63
    1eca:	f8 94       	cli
    1ecc:	0f 92       	push	r0
    1ece:	f8 01       	movw	r30, r16
    1ed0:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ed2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <xQueueReceive+0xa4>
    1ed6:	15 8e       	std	Z+29, r1	; 0x1d
    1ed8:	f8 01       	movw	r30, r16
    1eda:	86 8d       	ldd	r24, Z+30	; 0x1e
    1edc:	8f 3f       	cpi	r24, 0xFF	; 255
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <xQueueReceive+0xae>
    1ee0:	16 8e       	std	Z+30, r1	; 0x1e
    1ee2:	0f 90       	pop	r0
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	be 01       	movw	r22, r28
    1ee8:	6c 5f       	subi	r22, 0xFC	; 252
    1eea:	7f 4f       	sbci	r23, 0xFF	; 255
    1eec:	ce 01       	movw	r24, r28
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <xTaskCheckForTimeOut>
    1ef4:	81 11       	cpse	r24, r1
    1ef6:	1a c0       	rjmp	.+52     	; 0x1f2c <xQueueReceive+0xf8>
    1ef8:	c8 01       	movw	r24, r16
    1efa:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvIsQueueEmpty>
    1efe:	88 23       	and	r24, r24
    1f00:	79 f0       	breq	.+30     	; 0x1f20 <xQueueReceive+0xec>
    1f02:	6c 81       	ldd	r22, Y+4	; 0x04
    1f04:	7d 81       	ldd	r23, Y+5	; 0x05
    1f06:	c6 01       	movw	r24, r12
    1f08:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <vTaskPlaceOnEventList>
    1f0c:	c8 01       	movw	r24, r16
    1f0e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <prvUnlockQueue>
    1f12:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    1f16:	81 11       	cpse	r24, r1
    1f18:	a8 cf       	rjmp	.-176    	; 0x1e6a <xQueueReceive+0x36>
    1f1a:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    1f1e:	a5 cf       	rjmp	.-182    	; 0x1e6a <xQueueReceive+0x36>
    1f20:	c8 01       	movw	r24, r16
    1f22:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <prvUnlockQueue>
    1f26:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    1f2a:	9f cf       	rjmp	.-194    	; 0x1e6a <xQueueReceive+0x36>
    1f2c:	c8 01       	movw	r24, r16
    1f2e:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <prvUnlockQueue>
    1f32:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    1f36:	c8 01       	movw	r24, r16
    1f38:	0e 94 03 0d 	call	0x1a06	; 0x1a06 <prvIsQueueEmpty>
    1f3c:	88 23       	and	r24, r24
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <xQueueReceive+0x10e>
    1f40:	94 cf       	rjmp	.-216    	; 0x1e6a <xQueueReceive+0x36>
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
    1f4c:	0f 90       	pop	r0
    1f4e:	df 91       	pop	r29
    1f50:	cf 91       	pop	r28
    1f52:	1f 91       	pop	r17
    1f54:	0f 91       	pop	r16
    1f56:	ff 90       	pop	r15
    1f58:	ef 90       	pop	r14
    1f5a:	df 90       	pop	r13
    1f5c:	cf 90       	pop	r12
    1f5e:	bf 90       	pop	r11
    1f60:	af 90       	pop	r10
    1f62:	9f 90       	pop	r9
    1f64:	08 95       	ret

00001f66 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	0f 92       	push	r0
    1f72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f74:	8f 3f       	cpi	r24, 0xFF	; 255
    1f76:	09 f4       	brne	.+2      	; 0x1f7a <vQueueWaitForMessageRestricted+0x14>
    1f78:	1d 8e       	std	Y+29, r1	; 0x1d
    1f7a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f7c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f7e:	09 f4       	brne	.+2      	; 0x1f82 <vQueueWaitForMessageRestricted+0x1c>
    1f80:	1e 8e       	std	Y+30, r1	; 0x1e
    1f82:	0f 90       	pop	r0
    1f84:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f86:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f88:	81 11       	cpse	r24, r1
    1f8a:	04 c0       	rjmp	.+8      	; 0x1f94 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1f8c:	ce 01       	movw	r24, r28
    1f8e:	41 96       	adiw	r24, 0x11	; 17
    1f90:	0e 94 ee 13 	call	0x27dc	; 0x27dc <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1f94:	ce 01       	movw	r24, r28
    1f96:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <prvUnlockQueue>
    }
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	08 95       	ret

00001fa0 <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1fa0:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    1fa4:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    1fa8:	80 81       	ld	r24, Z
    1faa:	81 11       	cpse	r24, r1
    1fac:	07 c0       	rjmp	.+14     	; 0x1fbc <prvResetNextTaskUnblockTime+0x1c>
    1fae:	8f ef       	ldi	r24, 0xFF	; 255
    1fb0:	9f ef       	ldi	r25, 0xFF	; 255
    1fb2:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    1fb6:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    1fba:	08 95       	ret
    1fbc:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    1fc0:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    1fc4:	05 80       	ldd	r0, Z+5	; 0x05
    1fc6:	f6 81       	ldd	r31, Z+6	; 0x06
    1fc8:	e0 2d       	mov	r30, r0
    1fca:	06 80       	ldd	r0, Z+6	; 0x06
    1fcc:	f7 81       	ldd	r31, Z+7	; 0x07
    1fce:	e0 2d       	mov	r30, r0
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    1fd8:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    1fdc:	08 95       	ret

00001fde <prvAddCurrentTaskToDelayedList>:
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	ec 01       	movw	r28, r24
    1fea:	f6 2e       	mov	r15, r22
    1fec:	00 91 a8 01 	lds	r16, 0x01A8	; 0x8001a8 <xTickCount>
    1ff0:	10 91 a9 01 	lds	r17, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    1ff4:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pxCurrentTCB>
    1ff8:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    1ffc:	02 96       	adiw	r24, 0x02	; 2
    1ffe:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    2002:	cf 3f       	cpi	r28, 0xFF	; 255
    2004:	8f ef       	ldi	r24, 0xFF	; 255
    2006:	d8 07       	cpc	r29, r24
    2008:	69 f4       	brne	.+26     	; 0x2024 <prvAddCurrentTaskToDelayedList+0x46>
    200a:	ff 20       	and	r15, r15
    200c:	59 f0       	breq	.+22     	; 0x2024 <prvAddCurrentTaskToDelayedList+0x46>
    200e:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    2012:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2016:	6e 5f       	subi	r22, 0xFE	; 254
    2018:	7f 4f       	sbci	r23, 0xFF	; 255
    201a:	8b ea       	ldi	r24, 0xAB	; 171
    201c:	91 e0       	ldi	r25, 0x01	; 1
    201e:	0e 94 88 0b 	call	0x1710	; 0x1710 <vListInsertEnd>
    2022:	2f c0       	rjmp	.+94     	; 0x2082 <prvAddCurrentTaskToDelayedList+0xa4>
    2024:	c0 0f       	add	r28, r16
    2026:	d1 1f       	adc	r29, r17
    2028:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    202c:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2030:	d3 83       	std	Z+3, r29	; 0x03
    2032:	c2 83       	std	Z+2, r28	; 0x02
    2034:	c0 17       	cp	r28, r16
    2036:	d1 07       	cpc	r29, r17
    2038:	68 f4       	brcc	.+26     	; 0x2054 <prvAddCurrentTaskToDelayedList+0x76>
    203a:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    203e:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2042:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pxOverflowDelayedTaskList>
    2046:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <pxOverflowDelayedTaskList+0x1>
    204a:	6e 5f       	subi	r22, 0xFE	; 254
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	0e 94 a9 0b 	call	0x1752	; 0x1752 <vListInsert>
    2052:	17 c0       	rjmp	.+46     	; 0x2082 <prvAddCurrentTaskToDelayedList+0xa4>
    2054:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    2058:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    205c:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    2060:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    2064:	6e 5f       	subi	r22, 0xFE	; 254
    2066:	7f 4f       	sbci	r23, 0xFF	; 255
    2068:	0e 94 a9 0b 	call	0x1752	; 0x1752 <vListInsert>
    206c:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <xNextTaskUnblockTime>
    2070:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    2074:	c8 17       	cp	r28, r24
    2076:	d9 07       	cpc	r29, r25
    2078:	20 f4       	brcc	.+8      	; 0x2082 <prvAddCurrentTaskToDelayedList+0xa4>
    207a:	d0 93 a0 01 	sts	0x01A0, r29	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    207e:	c0 93 9f 01 	sts	0x019F, r28	; 0x80019f <xNextTaskUnblockTime>
    2082:	df 91       	pop	r29
    2084:	cf 91       	pop	r28
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	08 95       	ret

0000208e <prvIdleTask>:
    208e:	05 eb       	ldi	r16, 0xB5	; 181
    2090:	11 e0       	ldi	r17, 0x01	; 1
    2092:	0f 2e       	mov	r0, r31
    2094:	fd ed       	ldi	r31, 0xDD	; 221
    2096:	ef 2e       	mov	r14, r31
    2098:	f1 e0       	ldi	r31, 0x01	; 1
    209a:	ff 2e       	mov	r15, r31
    209c:	f0 2d       	mov	r31, r0
    209e:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <uxDeletedTasksWaitingCleanUp>
    20a2:	88 23       	and	r24, r24
    20a4:	29 f1       	breq	.+74     	; 0x20f0 <prvIdleTask+0x62>
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	0f 92       	push	r0
    20ac:	d8 01       	movw	r26, r16
    20ae:	15 96       	adiw	r26, 0x05	; 5
    20b0:	ed 91       	ld	r30, X+
    20b2:	fc 91       	ld	r31, X
    20b4:	16 97       	sbiw	r26, 0x06	; 6
    20b6:	c6 81       	ldd	r28, Z+6	; 0x06
    20b8:	d7 81       	ldd	r29, Z+7	; 0x07
    20ba:	ce 01       	movw	r24, r28
    20bc:	02 96       	adiw	r24, 0x02	; 2
    20be:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    20c2:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <uxCurrentNumberOfTasks>
    20c6:	81 50       	subi	r24, 0x01	; 1
    20c8:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <uxCurrentNumberOfTasks>
    20cc:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <uxDeletedTasksWaitingCleanUp>
    20d0:	81 50       	subi	r24, 0x01	; 1
    20d2:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <uxDeletedTasksWaitingCleanUp>
    20d6:	0f 90       	pop	r0
    20d8:	0f be       	out	0x3f, r0	; 63
    20da:	8f 89       	ldd	r24, Y+23	; 0x17
    20dc:	98 8d       	ldd	r25, Y+24	; 0x18
    20de:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortFree>
    20e2:	ce 01       	movw	r24, r28
    20e4:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortFree>
    20e8:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <uxDeletedTasksWaitingCleanUp>
    20ec:	81 11       	cpse	r24, r1
    20ee:	db cf       	rjmp	.-74     	; 0x20a6 <prvIdleTask+0x18>
    20f0:	f7 01       	movw	r30, r14
    20f2:	80 81       	ld	r24, Z
    20f4:	82 30       	cpi	r24, 0x02	; 2
    20f6:	10 f0       	brcs	.+4      	; 0x20fc <prvIdleTask+0x6e>
    20f8:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    20fc:	0e 94 43 0b 	call	0x1686	; 0x1686 <vApplicationIdleHook>
    2100:	ce cf       	rjmp	.-100    	; 0x209e <prvIdleTask+0x10>

00002102 <xTaskCreate>:
    2102:	4f 92       	push	r4
    2104:	5f 92       	push	r5
    2106:	6f 92       	push	r6
    2108:	7f 92       	push	r7
    210a:	8f 92       	push	r8
    210c:	9f 92       	push	r9
    210e:	af 92       	push	r10
    2110:	bf 92       	push	r11
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	cf 93       	push	r28
    211e:	df 93       	push	r29
    2120:	4c 01       	movw	r8, r24
    2122:	6b 01       	movw	r12, r22
    2124:	5a 01       	movw	r10, r20
    2126:	29 01       	movw	r4, r18
    2128:	ca 01       	movw	r24, r20
    212a:	0e 94 21 0b 	call	0x1642	; 0x1642 <pvPortMalloc>
    212e:	3c 01       	movw	r6, r24
    2130:	89 2b       	or	r24, r25
    2132:	09 f4       	brne	.+2      	; 0x2136 <xTaskCreate+0x34>
    2134:	f1 c0       	rjmp	.+482    	; 0x2318 <xTaskCreate+0x216>
    2136:	88 e2       	ldi	r24, 0x28	; 40
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	0e 94 21 0b 	call	0x1642	; 0x1642 <pvPortMalloc>
    213e:	ec 01       	movw	r28, r24
    2140:	89 2b       	or	r24, r25
    2142:	99 f0       	breq	.+38     	; 0x216a <xTaskCreate+0x68>
    2144:	78 8e       	std	Y+24, r7	; 0x18
    2146:	6f 8a       	std	Y+23, r6	; 0x17
    2148:	a5 01       	movw	r20, r10
    214a:	65 ea       	ldi	r22, 0xA5	; 165
    214c:	70 e0       	ldi	r23, 0x00	; 0
    214e:	c3 01       	movw	r24, r6
    2150:	0e 94 35 21 	call	0x426a	; 0x426a <memset>
    2154:	81 e0       	ldi	r24, 0x01	; 1
    2156:	a8 1a       	sub	r10, r24
    2158:	b1 08       	sbc	r11, r1
    215a:	8f 89       	ldd	r24, Y+23	; 0x17
    215c:	98 8d       	ldd	r25, Y+24	; 0x18
    215e:	a8 0e       	add	r10, r24
    2160:	b9 1e       	adc	r11, r25
    2162:	c1 14       	cp	r12, r1
    2164:	d1 04       	cpc	r13, r1
    2166:	29 f4       	brne	.+10     	; 0x2172 <xTaskCreate+0x70>
    2168:	20 c0       	rjmp	.+64     	; 0x21aa <xTaskCreate+0xa8>
    216a:	c3 01       	movw	r24, r6
    216c:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortFree>
    2170:	d3 c0       	rjmp	.+422    	; 0x2318 <xTaskCreate+0x216>
    2172:	d6 01       	movw	r26, r12
    2174:	8c 91       	ld	r24, X
    2176:	89 8f       	std	Y+25, r24	; 0x19
    2178:	8c 91       	ld	r24, X
    217a:	88 23       	and	r24, r24
    217c:	a1 f0       	breq	.+40     	; 0x21a6 <xTaskCreate+0xa4>
    217e:	ae 01       	movw	r20, r28
    2180:	46 5e       	subi	r20, 0xE6	; 230
    2182:	5f 4f       	sbci	r21, 0xFF	; 255
    2184:	f6 01       	movw	r30, r12
    2186:	31 96       	adiw	r30, 0x01	; 1
    2188:	b8 e0       	ldi	r27, 0x08	; 8
    218a:	cb 0e       	add	r12, r27
    218c:	d1 1c       	adc	r13, r1
    218e:	cf 01       	movw	r24, r30
    2190:	21 91       	ld	r18, Z+
    2192:	da 01       	movw	r26, r20
    2194:	2d 93       	st	X+, r18
    2196:	ad 01       	movw	r20, r26
    2198:	dc 01       	movw	r26, r24
    219a:	8c 91       	ld	r24, X
    219c:	88 23       	and	r24, r24
    219e:	19 f0       	breq	.+6      	; 0x21a6 <xTaskCreate+0xa4>
    21a0:	ec 15       	cp	r30, r12
    21a2:	fd 05       	cpc	r31, r13
    21a4:	a1 f7       	brne	.-24     	; 0x218e <xTaskCreate+0x8c>
    21a6:	18 a2       	std	Y+32, r1	; 0x20
    21a8:	01 c0       	rjmp	.+2      	; 0x21ac <xTaskCreate+0xaa>
    21aa:	19 8e       	std	Y+25, r1	; 0x19
    21ac:	04 30       	cpi	r16, 0x04	; 4
    21ae:	08 f0       	brcs	.+2      	; 0x21b2 <xTaskCreate+0xb0>
    21b0:	03 e0       	ldi	r16, 0x03	; 3
    21b2:	0e 8b       	std	Y+22, r16	; 0x16
    21b4:	09 a3       	std	Y+33, r16	; 0x21
    21b6:	1a a2       	std	Y+34, r1	; 0x22
    21b8:	6e 01       	movw	r12, r28
    21ba:	b2 e0       	ldi	r27, 0x02	; 2
    21bc:	cb 0e       	add	r12, r27
    21be:	d1 1c       	adc	r13, r1
    21c0:	c6 01       	movw	r24, r12
    21c2:	0e 94 84 0b 	call	0x1708	; 0x1708 <vListInitialiseItem>
    21c6:	ce 01       	movw	r24, r28
    21c8:	0c 96       	adiw	r24, 0x0c	; 12
    21ca:	0e 94 84 0b 	call	0x1708	; 0x1708 <vListInitialiseItem>
    21ce:	d9 87       	std	Y+9, r29	; 0x09
    21d0:	c8 87       	std	Y+8, r28	; 0x08
    21d2:	84 e0       	ldi	r24, 0x04	; 4
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	80 1b       	sub	r24, r16
    21d8:	91 09       	sbc	r25, r1
    21da:	9d 87       	std	Y+13, r25	; 0x0d
    21dc:	8c 87       	std	Y+12, r24	; 0x0c
    21de:	db 8b       	std	Y+19, r29	; 0x13
    21e0:	ca 8b       	std	Y+18, r28	; 0x12
    21e2:	1b a2       	std	Y+35, r1	; 0x23
    21e4:	1c a2       	std	Y+36, r1	; 0x24
    21e6:	1d a2       	std	Y+37, r1	; 0x25
    21e8:	1e a2       	std	Y+38, r1	; 0x26
    21ea:	1f a2       	std	Y+39, r1	; 0x27
    21ec:	a2 01       	movw	r20, r4
    21ee:	b4 01       	movw	r22, r8
    21f0:	c5 01       	movw	r24, r10
    21f2:	0e 94 01 0c 	call	0x1802	; 0x1802 <pxPortInitialiseStack>
    21f6:	99 83       	std	Y+1, r25	; 0x01
    21f8:	88 83       	st	Y, r24
    21fa:	e1 14       	cp	r14, r1
    21fc:	f1 04       	cpc	r15, r1
    21fe:	19 f0       	breq	.+6      	; 0x2206 <xTaskCreate+0x104>
    2200:	f7 01       	movw	r30, r14
    2202:	d1 83       	std	Z+1, r29	; 0x01
    2204:	c0 83       	st	Z, r28
    2206:	0f b6       	in	r0, 0x3f	; 63
    2208:	f8 94       	cli
    220a:	0f 92       	push	r0
    220c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <uxCurrentNumberOfTasks>
    2210:	8f 5f       	subi	r24, 0xFF	; 255
    2212:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <uxCurrentNumberOfTasks>
    2216:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pxCurrentTCB>
    221a:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    221e:	89 2b       	or	r24, r25
    2220:	d1 f5       	brne	.+116    	; 0x2296 <xTaskCreate+0x194>
    2222:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <pxCurrentTCB+0x1>
    2226:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pxCurrentTCB>
    222a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <uxCurrentNumberOfTasks>
    222e:	81 30       	cpi	r24, 0x01	; 1
    2230:	09 f0       	breq	.+2      	; 0x2234 <xTaskCreate+0x132>
    2232:	41 c0       	rjmp	.+130    	; 0x22b6 <xTaskCreate+0x1b4>
    2234:	8d ed       	ldi	r24, 0xDD	; 221
    2236:	91 e0       	ldi	r25, 0x01	; 1
    2238:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    223c:	86 ee       	ldi	r24, 0xE6	; 230
    223e:	91 e0       	ldi	r25, 0x01	; 1
    2240:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    2244:	8f ee       	ldi	r24, 0xEF	; 239
    2246:	91 e0       	ldi	r25, 0x01	; 1
    2248:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    224c:	88 ef       	ldi	r24, 0xF8	; 248
    224e:	91 e0       	ldi	r25, 0x01	; 1
    2250:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    2254:	84 ed       	ldi	r24, 0xD4	; 212
    2256:	91 e0       	ldi	r25, 0x01	; 1
    2258:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    225c:	8b ec       	ldi	r24, 0xCB	; 203
    225e:	91 e0       	ldi	r25, 0x01	; 1
    2260:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    2264:	8e eb       	ldi	r24, 0xBE	; 190
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    226c:	85 eb       	ldi	r24, 0xB5	; 181
    226e:	91 e0       	ldi	r25, 0x01	; 1
    2270:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    2274:	8b ea       	ldi	r24, 0xAB	; 171
    2276:	91 e0       	ldi	r25, 0x01	; 1
    2278:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    227c:	84 ed       	ldi	r24, 0xD4	; 212
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <pxDelayedTaskList+0x1>
    2284:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <pxDelayedTaskList>
    2288:	8b ec       	ldi	r24, 0xCB	; 203
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <pxOverflowDelayedTaskList+0x1>
    2290:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pxOverflowDelayedTaskList>
    2294:	10 c0       	rjmp	.+32     	; 0x22b6 <xTaskCreate+0x1b4>
    2296:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <xSchedulerRunning>
    229a:	81 11       	cpse	r24, r1
    229c:	0c c0       	rjmp	.+24     	; 0x22b6 <xTaskCreate+0x1b4>
    229e:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    22a2:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    22a6:	96 89       	ldd	r25, Z+22	; 0x16
    22a8:	8e 89       	ldd	r24, Y+22	; 0x16
    22aa:	89 17       	cp	r24, r25
    22ac:	20 f0       	brcs	.+8      	; 0x22b6 <xTaskCreate+0x1b4>
    22ae:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <pxCurrentTCB+0x1>
    22b2:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pxCurrentTCB>
    22b6:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <uxTaskNumber>
    22ba:	8f 5f       	subi	r24, 0xFF	; 255
    22bc:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <uxTaskNumber>
    22c0:	8e 89       	ldd	r24, Y+22	; 0x16
    22c2:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    22c6:	98 17       	cp	r25, r24
    22c8:	10 f4       	brcc	.+4      	; 0x22ce <xTaskCreate+0x1cc>
    22ca:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	9c 01       	movw	r18, r24
    22d2:	22 0f       	add	r18, r18
    22d4:	33 1f       	adc	r19, r19
    22d6:	22 0f       	add	r18, r18
    22d8:	33 1f       	adc	r19, r19
    22da:	22 0f       	add	r18, r18
    22dc:	33 1f       	adc	r19, r19
    22de:	82 0f       	add	r24, r18
    22e0:	93 1f       	adc	r25, r19
    22e2:	b6 01       	movw	r22, r12
    22e4:	83 52       	subi	r24, 0x23	; 35
    22e6:	9e 4f       	sbci	r25, 0xFE	; 254
    22e8:	0e 94 88 0b 	call	0x1710	; 0x1710 <vListInsertEnd>
    22ec:	0f 90       	pop	r0
    22ee:	0f be       	out	0x3f, r0	; 63
    22f0:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <xSchedulerRunning>
    22f4:	88 23       	and	r24, r24
    22f6:	61 f0       	breq	.+24     	; 0x2310 <xTaskCreate+0x20e>
    22f8:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    22fc:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2300:	96 89       	ldd	r25, Z+22	; 0x16
    2302:	8e 89       	ldd	r24, Y+22	; 0x16
    2304:	98 17       	cp	r25, r24
    2306:	30 f4       	brcc	.+12     	; 0x2314 <xTaskCreate+0x212>
    2308:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    230c:	81 e0       	ldi	r24, 0x01	; 1
    230e:	05 c0       	rjmp	.+10     	; 0x231a <xTaskCreate+0x218>
    2310:	81 e0       	ldi	r24, 0x01	; 1
    2312:	03 c0       	rjmp	.+6      	; 0x231a <xTaskCreate+0x218>
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	01 c0       	rjmp	.+2      	; 0x231a <xTaskCreate+0x218>
    2318:	8f ef       	ldi	r24, 0xFF	; 255
    231a:	df 91       	pop	r29
    231c:	cf 91       	pop	r28
    231e:	0f 91       	pop	r16
    2320:	ff 90       	pop	r15
    2322:	ef 90       	pop	r14
    2324:	df 90       	pop	r13
    2326:	cf 90       	pop	r12
    2328:	bf 90       	pop	r11
    232a:	af 90       	pop	r10
    232c:	9f 90       	pop	r9
    232e:	8f 90       	pop	r8
    2330:	7f 90       	pop	r7
    2332:	6f 90       	pop	r6
    2334:	5f 90       	pop	r5
    2336:	4f 90       	pop	r4
    2338:	08 95       	ret

0000233a <vTaskStartScheduler>:
    233a:	ef 92       	push	r14
    233c:	ff 92       	push	r15
    233e:	0f 93       	push	r16
    2340:	0f 2e       	mov	r0, r31
    2342:	fd e9       	ldi	r31, 0x9D	; 157
    2344:	ef 2e       	mov	r14, r31
    2346:	f1 e0       	ldi	r31, 0x01	; 1
    2348:	ff 2e       	mov	r15, r31
    234a:	f0 2d       	mov	r31, r0
    234c:	00 e0       	ldi	r16, 0x00	; 0
    234e:	20 e0       	ldi	r18, 0x00	; 0
    2350:	30 e0       	ldi	r19, 0x00	; 0
    2352:	45 e5       	ldi	r20, 0x55	; 85
    2354:	50 e0       	ldi	r21, 0x00	; 0
    2356:	6e e4       	ldi	r22, 0x4E	; 78
    2358:	71 e0       	ldi	r23, 0x01	; 1
    235a:	87 e4       	ldi	r24, 0x47	; 71
    235c:	90 e1       	ldi	r25, 0x10	; 16
    235e:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskCreate>
    2362:	81 30       	cpi	r24, 0x01	; 1
    2364:	a1 f4       	brne	.+40     	; 0x238e <vTaskStartScheduler+0x54>
    2366:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <xTimerCreateTimerTask>
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	81 f4       	brne	.+32     	; 0x238e <vTaskStartScheduler+0x54>
    236e:	f8 94       	cli
    2370:	8f ef       	ldi	r24, 0xFF	; 255
    2372:	9f ef       	ldi	r25, 0xFF	; 255
    2374:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    2378:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    237c:	81 e0       	ldi	r24, 0x01	; 1
    237e:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <xSchedulerRunning>
    2382:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <xTickCount+0x1>
    2386:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <xTickCount>
    238a:	0e 94 12 0c 	call	0x1824	; 0x1824 <xPortStartScheduler>
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	08 95       	ret

00002396 <vTaskSuspendAll>:
    2396:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    239a:	8f 5f       	subi	r24, 0xFF	; 255
    239c:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <uxSchedulerSuspended>
    23a0:	08 95       	ret

000023a2 <xTaskGetTickCount>:
    23a2:	0f b6       	in	r0, 0x3f	; 63
    23a4:	f8 94       	cli
    23a6:	0f 92       	push	r0
    23a8:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <xTickCount>
    23ac:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    23b0:	0f 90       	pop	r0
    23b2:	0f be       	out	0x3f, r0	; 63
    23b4:	08 95       	ret

000023b6 <xTaskIncrementTick>:
    23b6:	cf 92       	push	r12
    23b8:	df 92       	push	r13
    23ba:	ef 92       	push	r14
    23bc:	ff 92       	push	r15
    23be:	0f 93       	push	r16
    23c0:	1f 93       	push	r17
    23c2:	cf 93       	push	r28
    23c4:	df 93       	push	r29
    23c6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    23ca:	81 11       	cpse	r24, r1
    23cc:	9f c0       	rjmp	.+318    	; 0x250c <xTaskIncrementTick+0x156>
    23ce:	e0 90 a8 01 	lds	r14, 0x01A8	; 0x8001a8 <xTickCount>
    23d2:	f0 90 a9 01 	lds	r15, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	e8 1a       	sub	r14, r24
    23da:	f8 0a       	sbc	r15, r24
    23dc:	f0 92 a9 01 	sts	0x01A9, r15	; 0x8001a9 <xTickCount+0x1>
    23e0:	e0 92 a8 01 	sts	0x01A8, r14	; 0x8001a8 <xTickCount>
    23e4:	e1 14       	cp	r14, r1
    23e6:	f1 04       	cpc	r15, r1
    23e8:	b9 f4       	brne	.+46     	; 0x2418 <xTaskIncrementTick+0x62>
    23ea:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    23ee:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    23f2:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <pxOverflowDelayedTaskList>
    23f6:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <pxOverflowDelayedTaskList+0x1>
    23fa:	30 93 ca 01 	sts	0x01CA, r19	; 0x8001ca <pxDelayedTaskList+0x1>
    23fe:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <pxDelayedTaskList>
    2402:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <pxOverflowDelayedTaskList+0x1>
    2406:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pxOverflowDelayedTaskList>
    240a:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <xNumOfOverflows>
    240e:	8f 5f       	subi	r24, 0xFF	; 255
    2410:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <xNumOfOverflows>
    2414:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <prvResetNextTaskUnblockTime>
    2418:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <xNextTaskUnblockTime>
    241c:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    2420:	e8 16       	cp	r14, r24
    2422:	f9 06       	cpc	r15, r25
    2424:	10 f4       	brcc	.+4      	; 0x242a <xTaskIncrementTick+0x74>
    2426:	d1 2c       	mov	r13, r1
    2428:	53 c0       	rjmp	.+166    	; 0x24d0 <xTaskIncrementTick+0x11a>
    242a:	d1 2c       	mov	r13, r1
    242c:	cc 24       	eor	r12, r12
    242e:	c3 94       	inc	r12
    2430:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    2434:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    2438:	80 81       	ld	r24, Z
    243a:	81 11       	cpse	r24, r1
    243c:	07 c0       	rjmp	.+14     	; 0x244c <xTaskIncrementTick+0x96>
    243e:	8f ef       	ldi	r24, 0xFF	; 255
    2440:	9f ef       	ldi	r25, 0xFF	; 255
    2442:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    2446:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    244a:	42 c0       	rjmp	.+132    	; 0x24d0 <xTaskIncrementTick+0x11a>
    244c:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    2450:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    2454:	05 80       	ldd	r0, Z+5	; 0x05
    2456:	f6 81       	ldd	r31, Z+6	; 0x06
    2458:	e0 2d       	mov	r30, r0
    245a:	c6 81       	ldd	r28, Z+6	; 0x06
    245c:	d7 81       	ldd	r29, Z+7	; 0x07
    245e:	8a 81       	ldd	r24, Y+2	; 0x02
    2460:	9b 81       	ldd	r25, Y+3	; 0x03
    2462:	e8 16       	cp	r14, r24
    2464:	f9 06       	cpc	r15, r25
    2466:	28 f4       	brcc	.+10     	; 0x2472 <xTaskIncrementTick+0xbc>
    2468:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    246c:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    2470:	2f c0       	rjmp	.+94     	; 0x24d0 <xTaskIncrementTick+0x11a>
    2472:	8e 01       	movw	r16, r28
    2474:	0e 5f       	subi	r16, 0xFE	; 254
    2476:	1f 4f       	sbci	r17, 0xFF	; 255
    2478:	c8 01       	movw	r24, r16
    247a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    247e:	8c 89       	ldd	r24, Y+20	; 0x14
    2480:	9d 89       	ldd	r25, Y+21	; 0x15
    2482:	89 2b       	or	r24, r25
    2484:	21 f0       	breq	.+8      	; 0x248e <xTaskIncrementTick+0xd8>
    2486:	ce 01       	movw	r24, r28
    2488:	0c 96       	adiw	r24, 0x0c	; 12
    248a:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    248e:	8e 89       	ldd	r24, Y+22	; 0x16
    2490:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    2494:	98 17       	cp	r25, r24
    2496:	10 f4       	brcc	.+4      	; 0x249c <xTaskIncrementTick+0xe6>
    2498:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    249c:	90 e0       	ldi	r25, 0x00	; 0
    249e:	9c 01       	movw	r18, r24
    24a0:	22 0f       	add	r18, r18
    24a2:	33 1f       	adc	r19, r19
    24a4:	22 0f       	add	r18, r18
    24a6:	33 1f       	adc	r19, r19
    24a8:	22 0f       	add	r18, r18
    24aa:	33 1f       	adc	r19, r19
    24ac:	82 0f       	add	r24, r18
    24ae:	93 1f       	adc	r25, r19
    24b0:	b8 01       	movw	r22, r16
    24b2:	83 52       	subi	r24, 0x23	; 35
    24b4:	9e 4f       	sbci	r25, 0xFE	; 254
    24b6:	0e 94 88 0b 	call	0x1710	; 0x1710 <vListInsertEnd>
    24ba:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    24be:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    24c2:	9e 89       	ldd	r25, Y+22	; 0x16
    24c4:	86 89       	ldd	r24, Z+22	; 0x16
    24c6:	98 17       	cp	r25, r24
    24c8:	08 f4       	brcc	.+2      	; 0x24cc <xTaskIncrementTick+0x116>
    24ca:	b2 cf       	rjmp	.-156    	; 0x2430 <xTaskIncrementTick+0x7a>
    24cc:	dc 2c       	mov	r13, r12
    24ce:	b0 cf       	rjmp	.-160    	; 0x2430 <xTaskIncrementTick+0x7a>
    24d0:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    24d4:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    24d8:	86 89       	ldd	r24, Z+22	; 0x16
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	fc 01       	movw	r30, r24
    24de:	ee 0f       	add	r30, r30
    24e0:	ff 1f       	adc	r31, r31
    24e2:	ee 0f       	add	r30, r30
    24e4:	ff 1f       	adc	r31, r31
    24e6:	ee 0f       	add	r30, r30
    24e8:	ff 1f       	adc	r31, r31
    24ea:	8e 0f       	add	r24, r30
    24ec:	9f 1f       	adc	r25, r31
    24ee:	fc 01       	movw	r30, r24
    24f0:	e3 52       	subi	r30, 0x23	; 35
    24f2:	fe 4f       	sbci	r31, 0xFE	; 254
    24f4:	80 81       	ld	r24, Z
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	10 f0       	brcs	.+4      	; 0x24fe <xTaskIncrementTick+0x148>
    24fa:	dd 24       	eor	r13, r13
    24fc:	d3 94       	inc	r13
    24fe:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <xYieldPending>
    2502:	88 23       	and	r24, r24
    2504:	69 f0       	breq	.+26     	; 0x2520 <xTaskIncrementTick+0x16a>
    2506:	dd 24       	eor	r13, r13
    2508:	d3 94       	inc	r13
    250a:	0a c0       	rjmp	.+20     	; 0x2520 <xTaskIncrementTick+0x16a>
    250c:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <xPendedTicks>
    2510:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <xPendedTicks+0x1>
    2514:	01 96       	adiw	r24, 0x01	; 1
    2516:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <xPendedTicks+0x1>
    251a:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <xPendedTicks>
    251e:	d1 2c       	mov	r13, r1
    2520:	8d 2d       	mov	r24, r13
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	ff 90       	pop	r15
    252c:	ef 90       	pop	r14
    252e:	df 90       	pop	r13
    2530:	cf 90       	pop	r12
    2532:	08 95       	ret

00002534 <xTaskResumeAll>:
    2534:	df 92       	push	r13
    2536:	ef 92       	push	r14
    2538:	ff 92       	push	r15
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	0f 92       	push	r0
    2548:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    254c:	81 50       	subi	r24, 0x01	; 1
    254e:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <uxSchedulerSuspended>
    2552:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    2556:	81 11       	cpse	r24, r1
    2558:	63 c0       	rjmp	.+198    	; 0x2620 <xTaskResumeAll+0xec>
    255a:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <uxCurrentNumberOfTasks>
    255e:	81 11       	cpse	r24, r1
    2560:	33 c0       	rjmp	.+102    	; 0x25c8 <xTaskResumeAll+0x94>
    2562:	61 c0       	rjmp	.+194    	; 0x2626 <xTaskResumeAll+0xf2>
    2564:	d7 01       	movw	r26, r14
    2566:	15 96       	adiw	r26, 0x05	; 5
    2568:	ed 91       	ld	r30, X+
    256a:	fc 91       	ld	r31, X
    256c:	16 97       	sbiw	r26, 0x06	; 6
    256e:	c6 81       	ldd	r28, Z+6	; 0x06
    2570:	d7 81       	ldd	r29, Z+7	; 0x07
    2572:	ce 01       	movw	r24, r28
    2574:	0c 96       	adiw	r24, 0x0c	; 12
    2576:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    257a:	8e 01       	movw	r16, r28
    257c:	0e 5f       	subi	r16, 0xFE	; 254
    257e:	1f 4f       	sbci	r17, 0xFF	; 255
    2580:	c8 01       	movw	r24, r16
    2582:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    2586:	8e 89       	ldd	r24, Y+22	; 0x16
    2588:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    258c:	98 17       	cp	r25, r24
    258e:	10 f4       	brcc	.+4      	; 0x2594 <xTaskResumeAll+0x60>
    2590:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	9c 01       	movw	r18, r24
    2598:	22 0f       	add	r18, r18
    259a:	33 1f       	adc	r19, r19
    259c:	22 0f       	add	r18, r18
    259e:	33 1f       	adc	r19, r19
    25a0:	22 0f       	add	r18, r18
    25a2:	33 1f       	adc	r19, r19
    25a4:	82 0f       	add	r24, r18
    25a6:	93 1f       	adc	r25, r19
    25a8:	b8 01       	movw	r22, r16
    25aa:	83 52       	subi	r24, 0x23	; 35
    25ac:	9e 4f       	sbci	r25, 0xFE	; 254
    25ae:	0e 94 88 0b 	call	0x1710	; 0x1710 <vListInsertEnd>
    25b2:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    25b6:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    25ba:	9e 89       	ldd	r25, Y+22	; 0x16
    25bc:	86 89       	ldd	r24, Z+22	; 0x16
    25be:	98 17       	cp	r25, r24
    25c0:	68 f0       	brcs	.+26     	; 0x25dc <xTaskResumeAll+0xa8>
    25c2:	d0 92 a3 01 	sts	0x01A3, r13	; 0x8001a3 <xYieldPending>
    25c6:	0a c0       	rjmp	.+20     	; 0x25dc <xTaskResumeAll+0xa8>
    25c8:	c0 e0       	ldi	r28, 0x00	; 0
    25ca:	d0 e0       	ldi	r29, 0x00	; 0
    25cc:	0f 2e       	mov	r0, r31
    25ce:	fe eb       	ldi	r31, 0xBE	; 190
    25d0:	ef 2e       	mov	r14, r31
    25d2:	f1 e0       	ldi	r31, 0x01	; 1
    25d4:	ff 2e       	mov	r15, r31
    25d6:	f0 2d       	mov	r31, r0
    25d8:	dd 24       	eor	r13, r13
    25da:	d3 94       	inc	r13
    25dc:	f7 01       	movw	r30, r14
    25de:	80 81       	ld	r24, Z
    25e0:	81 11       	cpse	r24, r1
    25e2:	c0 cf       	rjmp	.-128    	; 0x2564 <xTaskResumeAll+0x30>
    25e4:	cd 2b       	or	r28, r29
    25e6:	11 f0       	breq	.+4      	; 0x25ec <xTaskResumeAll+0xb8>
    25e8:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <prvResetNextTaskUnblockTime>
    25ec:	c0 91 a4 01 	lds	r28, 0x01A4	; 0x8001a4 <xPendedTicks>
    25f0:	d0 91 a5 01 	lds	r29, 0x01A5	; 0x8001a5 <xPendedTicks+0x1>
    25f4:	20 97       	sbiw	r28, 0x00	; 0
    25f6:	61 f0       	breq	.+24     	; 0x2610 <xTaskResumeAll+0xdc>
    25f8:	11 e0       	ldi	r17, 0x01	; 1
    25fa:	0e 94 db 11 	call	0x23b6	; 0x23b6 <xTaskIncrementTick>
    25fe:	81 11       	cpse	r24, r1
    2600:	10 93 a3 01 	sts	0x01A3, r17	; 0x8001a3 <xYieldPending>
    2604:	21 97       	sbiw	r28, 0x01	; 1
    2606:	c9 f7       	brne	.-14     	; 0x25fa <xTaskResumeAll+0xc6>
    2608:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <xPendedTicks+0x1>
    260c:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <xPendedTicks>
    2610:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <xYieldPending>
    2614:	88 23       	and	r24, r24
    2616:	31 f0       	breq	.+12     	; 0x2624 <xTaskResumeAll+0xf0>
    2618:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	03 c0       	rjmp	.+6      	; 0x2626 <xTaskResumeAll+0xf2>
    2620:	80 e0       	ldi	r24, 0x00	; 0
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <xTaskResumeAll+0xf2>
    2624:	80 e0       	ldi	r24, 0x00	; 0
    2626:	0f 90       	pop	r0
    2628:	0f be       	out	0x3f, r0	; 63
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	df 90       	pop	r13
    2638:	08 95       	ret

0000263a <vTaskDelayUntil>:
    263a:	0f 93       	push	r16
    263c:	1f 93       	push	r17
    263e:	cf 93       	push	r28
    2640:	df 93       	push	r29
    2642:	8c 01       	movw	r16, r24
    2644:	eb 01       	movw	r28, r22
    2646:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSuspendAll>
    264a:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <xTickCount>
    264e:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    2652:	f8 01       	movw	r30, r16
    2654:	20 81       	ld	r18, Z
    2656:	31 81       	ldd	r19, Z+1	; 0x01
    2658:	c9 01       	movw	r24, r18
    265a:	8c 0f       	add	r24, r28
    265c:	9d 1f       	adc	r25, r29
    265e:	42 17       	cp	r20, r18
    2660:	53 07       	cpc	r21, r19
    2662:	48 f4       	brcc	.+18     	; 0x2676 <vTaskDelayUntil+0x3c>
    2664:	82 17       	cp	r24, r18
    2666:	93 07       	cpc	r25, r19
    2668:	e8 f4       	brcc	.+58     	; 0x26a4 <vTaskDelayUntil+0x6a>
    266a:	91 83       	std	Z+1, r25	; 0x01
    266c:	80 83       	st	Z, r24
    266e:	48 17       	cp	r20, r24
    2670:	59 07       	cpc	r21, r25
    2672:	68 f4       	brcc	.+26     	; 0x268e <vTaskDelayUntil+0x54>
    2674:	07 c0       	rjmp	.+14     	; 0x2684 <vTaskDelayUntil+0x4a>
    2676:	82 17       	cp	r24, r18
    2678:	93 07       	cpc	r25, r19
    267a:	80 f0       	brcs	.+32     	; 0x269c <vTaskDelayUntil+0x62>
    267c:	48 17       	cp	r20, r24
    267e:	59 07       	cpc	r21, r25
    2680:	68 f0       	brcs	.+26     	; 0x269c <vTaskDelayUntil+0x62>
    2682:	10 c0       	rjmp	.+32     	; 0x26a4 <vTaskDelayUntil+0x6a>
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	84 1b       	sub	r24, r20
    2688:	95 0b       	sbc	r25, r21
    268a:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <prvAddCurrentTaskToDelayedList>
    268e:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    2692:	81 11       	cpse	r24, r1
    2694:	0b c0       	rjmp	.+22     	; 0x26ac <vTaskDelayUntil+0x72>
    2696:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    269a:	08 c0       	rjmp	.+16     	; 0x26ac <vTaskDelayUntil+0x72>
    269c:	f8 01       	movw	r30, r16
    269e:	91 83       	std	Z+1, r25	; 0x01
    26a0:	80 83       	st	Z, r24
    26a2:	f0 cf       	rjmp	.-32     	; 0x2684 <vTaskDelayUntil+0x4a>
    26a4:	f8 01       	movw	r30, r16
    26a6:	91 83       	std	Z+1, r25	; 0x01
    26a8:	80 83       	st	Z, r24
    26aa:	f1 cf       	rjmp	.-30     	; 0x268e <vTaskDelayUntil+0x54>
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	1f 91       	pop	r17
    26b2:	0f 91       	pop	r16
    26b4:	08 95       	ret

000026b6 <vTaskSwitchContext>:
    26b6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    26ba:	88 23       	and	r24, r24
    26bc:	21 f0       	breq	.+8      	; 0x26c6 <vTaskSwitchContext+0x10>
    26be:	81 e0       	ldi	r24, 0x01	; 1
    26c0:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <xYieldPending>
    26c4:	08 95       	ret
    26c6:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <xYieldPending>
    26ca:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    26ce:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    26d2:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    26d6:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    26da:	2d 91       	ld	r18, X+
    26dc:	3c 91       	ld	r19, X
    26de:	87 89       	ldd	r24, Z+23	; 0x17
    26e0:	90 8d       	ldd	r25, Z+24	; 0x18
    26e2:	82 17       	cp	r24, r18
    26e4:	93 07       	cpc	r25, r19
    26e6:	60 f0       	brcs	.+24     	; 0x2700 <vTaskSwitchContext+0x4a>
    26e8:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    26ec:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    26f0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pxCurrentTCB>
    26f4:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    26f8:	67 5e       	subi	r22, 0xE7	; 231
    26fa:	7f 4f       	sbci	r23, 0xFF	; 255
    26fc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vApplicationStackOverflowHook>
    2700:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    2704:	82 2f       	mov	r24, r18
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	fc 01       	movw	r30, r24
    270a:	ee 0f       	add	r30, r30
    270c:	ff 1f       	adc	r31, r31
    270e:	ee 0f       	add	r30, r30
    2710:	ff 1f       	adc	r31, r31
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	e8 0f       	add	r30, r24
    2718:	f9 1f       	adc	r31, r25
    271a:	e3 52       	subi	r30, 0x23	; 35
    271c:	fe 4f       	sbci	r31, 0xFE	; 254
    271e:	30 81       	ld	r19, Z
    2720:	31 11       	cpse	r19, r1
    2722:	11 c0       	rjmp	.+34     	; 0x2746 <vTaskSwitchContext+0x90>
    2724:	21 50       	subi	r18, 0x01	; 1
    2726:	82 2f       	mov	r24, r18
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	fc 01       	movw	r30, r24
    272c:	ee 0f       	add	r30, r30
    272e:	ff 1f       	adc	r31, r31
    2730:	ee 0f       	add	r30, r30
    2732:	ff 1f       	adc	r31, r31
    2734:	ee 0f       	add	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	e8 0f       	add	r30, r24
    273a:	f9 1f       	adc	r31, r25
    273c:	e3 52       	subi	r30, 0x23	; 35
    273e:	fe 4f       	sbci	r31, 0xFE	; 254
    2740:	30 81       	ld	r19, Z
    2742:	33 23       	and	r19, r19
    2744:	79 f3       	breq	.-34     	; 0x2724 <vTaskSwitchContext+0x6e>
    2746:	ac 01       	movw	r20, r24
    2748:	44 0f       	add	r20, r20
    274a:	55 1f       	adc	r21, r21
    274c:	44 0f       	add	r20, r20
    274e:	55 1f       	adc	r21, r21
    2750:	44 0f       	add	r20, r20
    2752:	55 1f       	adc	r21, r21
    2754:	48 0f       	add	r20, r24
    2756:	59 1f       	adc	r21, r25
    2758:	da 01       	movw	r26, r20
    275a:	a3 52       	subi	r26, 0x23	; 35
    275c:	be 4f       	sbci	r27, 0xFE	; 254
    275e:	11 96       	adiw	r26, 0x01	; 1
    2760:	ed 91       	ld	r30, X+
    2762:	fc 91       	ld	r31, X
    2764:	12 97       	sbiw	r26, 0x02	; 2
    2766:	02 80       	ldd	r0, Z+2	; 0x02
    2768:	f3 81       	ldd	r31, Z+3	; 0x03
    276a:	e0 2d       	mov	r30, r0
    276c:	12 96       	adiw	r26, 0x02	; 2
    276e:	fc 93       	st	X, r31
    2770:	ee 93       	st	-X, r30
    2772:	11 97       	sbiw	r26, 0x01	; 1
    2774:	40 52       	subi	r20, 0x20	; 32
    2776:	5e 4f       	sbci	r21, 0xFE	; 254
    2778:	e4 17       	cp	r30, r20
    277a:	f5 07       	cpc	r31, r21
    277c:	29 f4       	brne	.+10     	; 0x2788 <vTaskSwitchContext+0xd2>
    277e:	42 81       	ldd	r20, Z+2	; 0x02
    2780:	53 81       	ldd	r21, Z+3	; 0x03
    2782:	fd 01       	movw	r30, r26
    2784:	52 83       	std	Z+2, r21	; 0x02
    2786:	41 83       	std	Z+1, r20	; 0x01
    2788:	fc 01       	movw	r30, r24
    278a:	ee 0f       	add	r30, r30
    278c:	ff 1f       	adc	r31, r31
    278e:	ee 0f       	add	r30, r30
    2790:	ff 1f       	adc	r31, r31
    2792:	ee 0f       	add	r30, r30
    2794:	ff 1f       	adc	r31, r31
    2796:	8e 0f       	add	r24, r30
    2798:	9f 1f       	adc	r25, r31
    279a:	fc 01       	movw	r30, r24
    279c:	e3 52       	subi	r30, 0x23	; 35
    279e:	fe 4f       	sbci	r31, 0xFE	; 254
    27a0:	01 80       	ldd	r0, Z+1	; 0x01
    27a2:	f2 81       	ldd	r31, Z+2	; 0x02
    27a4:	e0 2d       	mov	r30, r0
    27a6:	86 81       	ldd	r24, Z+6	; 0x06
    27a8:	97 81       	ldd	r25, Z+7	; 0x07
    27aa:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <pxCurrentTCB+0x1>
    27ae:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <pxCurrentTCB>
    27b2:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <uxTopReadyPriority>
    27b6:	08 95       	ret

000027b8 <vTaskPlaceOnEventList>:
    27b8:	cf 93       	push	r28
    27ba:	df 93       	push	r29
    27bc:	eb 01       	movw	r28, r22
    27be:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    27c2:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    27c6:	64 5f       	subi	r22, 0xF4	; 244
    27c8:	7f 4f       	sbci	r23, 0xFF	; 255
    27ca:	0e 94 a9 0b 	call	0x1752	; 0x1752 <vListInsert>
    27ce:	61 e0       	ldi	r22, 0x01	; 1
    27d0:	ce 01       	movw	r24, r28
    27d2:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <prvAddCurrentTaskToDelayedList>
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	08 95       	ret

000027dc <vTaskPlaceOnEventListRestricted>:
    27dc:	0f 93       	push	r16
    27de:	1f 93       	push	r17
    27e0:	cf 93       	push	r28
    27e2:	8b 01       	movw	r16, r22
    27e4:	c4 2f       	mov	r28, r20
    27e6:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    27ea:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    27ee:	64 5f       	subi	r22, 0xF4	; 244
    27f0:	7f 4f       	sbci	r23, 0xFF	; 255
    27f2:	0e 94 88 0b 	call	0x1710	; 0x1710 <vListInsertEnd>
    27f6:	cc 23       	and	r28, r28
    27f8:	11 f0       	breq	.+4      	; 0x27fe <vTaskPlaceOnEventListRestricted+0x22>
    27fa:	0f ef       	ldi	r16, 0xFF	; 255
    27fc:	1f ef       	ldi	r17, 0xFF	; 255
    27fe:	6c 2f       	mov	r22, r28
    2800:	c8 01       	movw	r24, r16
    2802:	0e 94 ef 0f 	call	0x1fde	; 0x1fde <prvAddCurrentTaskToDelayedList>
    2806:	cf 91       	pop	r28
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	08 95       	ret

0000280e <xTaskRemoveFromEventList>:
    280e:	0f 93       	push	r16
    2810:	1f 93       	push	r17
    2812:	cf 93       	push	r28
    2814:	df 93       	push	r29
    2816:	dc 01       	movw	r26, r24
    2818:	15 96       	adiw	r26, 0x05	; 5
    281a:	ed 91       	ld	r30, X+
    281c:	fc 91       	ld	r31, X
    281e:	16 97       	sbiw	r26, 0x06	; 6
    2820:	c6 81       	ldd	r28, Z+6	; 0x06
    2822:	d7 81       	ldd	r29, Z+7	; 0x07
    2824:	8e 01       	movw	r16, r28
    2826:	04 5f       	subi	r16, 0xF4	; 244
    2828:	1f 4f       	sbci	r17, 0xFF	; 255
    282a:	c8 01       	movw	r24, r16
    282c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    2830:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    2834:	81 11       	cpse	r24, r1
    2836:	1c c0       	rjmp	.+56     	; 0x2870 <xTaskRemoveFromEventList+0x62>
    2838:	0a 50       	subi	r16, 0x0A	; 10
    283a:	11 09       	sbc	r17, r1
    283c:	c8 01       	movw	r24, r16
    283e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    2842:	8e 89       	ldd	r24, Y+22	; 0x16
    2844:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    2848:	98 17       	cp	r25, r24
    284a:	10 f4       	brcc	.+4      	; 0x2850 <xTaskRemoveFromEventList+0x42>
    284c:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	9c 01       	movw	r18, r24
    2854:	22 0f       	add	r18, r18
    2856:	33 1f       	adc	r19, r19
    2858:	22 0f       	add	r18, r18
    285a:	33 1f       	adc	r19, r19
    285c:	22 0f       	add	r18, r18
    285e:	33 1f       	adc	r19, r19
    2860:	82 0f       	add	r24, r18
    2862:	93 1f       	adc	r25, r19
    2864:	b8 01       	movw	r22, r16
    2866:	83 52       	subi	r24, 0x23	; 35
    2868:	9e 4f       	sbci	r25, 0xFE	; 254
    286a:	0e 94 88 0b 	call	0x1710	; 0x1710 <vListInsertEnd>
    286e:	05 c0       	rjmp	.+10     	; 0x287a <xTaskRemoveFromEventList+0x6c>
    2870:	b8 01       	movw	r22, r16
    2872:	8e eb       	ldi	r24, 0xBE	; 190
    2874:	91 e0       	ldi	r25, 0x01	; 1
    2876:	0e 94 88 0b 	call	0x1710	; 0x1710 <vListInsertEnd>
    287a:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    287e:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2882:	9e 89       	ldd	r25, Y+22	; 0x16
    2884:	86 89       	ldd	r24, Z+22	; 0x16
    2886:	89 17       	cp	r24, r25
    2888:	20 f4       	brcc	.+8      	; 0x2892 <xTaskRemoveFromEventList+0x84>
    288a:	81 e0       	ldi	r24, 0x01	; 1
    288c:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <xYieldPending>
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <xTaskRemoveFromEventList+0x86>
    2892:	80 e0       	ldi	r24, 0x00	; 0
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	08 95       	ret

0000289e <vTaskInternalSetTimeOutState>:
    289e:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <xNumOfOverflows>
    28a2:	fc 01       	movw	r30, r24
    28a4:	20 83       	st	Z, r18
    28a6:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <xTickCount>
    28aa:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    28ae:	32 83       	std	Z+2, r19	; 0x02
    28b0:	21 83       	std	Z+1, r18	; 0x01
    28b2:	08 95       	ret

000028b4 <xTaskCheckForTimeOut>:
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	0f 92       	push	r0
    28be:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <xTickCount>
    28c2:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    28c6:	db 01       	movw	r26, r22
    28c8:	4d 91       	ld	r20, X+
    28ca:	5c 91       	ld	r21, X
    28cc:	4f 3f       	cpi	r20, 0xFF	; 255
    28ce:	bf ef       	ldi	r27, 0xFF	; 255
    28d0:	5b 07       	cpc	r21, r27
    28d2:	f1 f0       	breq	.+60     	; 0x2910 <xTaskCheckForTimeOut+0x5c>
    28d4:	ec 01       	movw	r28, r24
    28d6:	e9 81       	ldd	r30, Y+1	; 0x01
    28d8:	fa 81       	ldd	r31, Y+2	; 0x02
    28da:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <xNumOfOverflows>
    28de:	b8 81       	ld	r27, Y
    28e0:	ba 17       	cp	r27, r26
    28e2:	19 f0       	breq	.+6      	; 0x28ea <xTaskCheckForTimeOut+0x36>
    28e4:	2e 17       	cp	r18, r30
    28e6:	3f 07       	cpc	r19, r31
    28e8:	a8 f4       	brcc	.+42     	; 0x2914 <xTaskCheckForTimeOut+0x60>
    28ea:	2e 1b       	sub	r18, r30
    28ec:	3f 0b       	sbc	r19, r31
    28ee:	24 17       	cp	r18, r20
    28f0:	35 07       	cpc	r19, r21
    28f2:	48 f4       	brcc	.+18     	; 0x2906 <xTaskCheckForTimeOut+0x52>
    28f4:	fb 01       	movw	r30, r22
    28f6:	42 1b       	sub	r20, r18
    28f8:	53 0b       	sbc	r21, r19
    28fa:	51 83       	std	Z+1, r21	; 0x01
    28fc:	40 83       	st	Z, r20
    28fe:	0e 94 4f 14 	call	0x289e	; 0x289e <vTaskInternalSetTimeOutState>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	08 c0       	rjmp	.+16     	; 0x2916 <xTaskCheckForTimeOut+0x62>
    2906:	fb 01       	movw	r30, r22
    2908:	11 82       	std	Z+1, r1	; 0x01
    290a:	10 82       	st	Z, r1
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	03 c0       	rjmp	.+6      	; 0x2916 <xTaskCheckForTimeOut+0x62>
    2910:	80 e0       	ldi	r24, 0x00	; 0
    2912:	01 c0       	rjmp	.+2      	; 0x2916 <xTaskCheckForTimeOut+0x62>
    2914:	81 e0       	ldi	r24, 0x01	; 1
    2916:	0f 90       	pop	r0
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	df 91       	pop	r29
    291c:	cf 91       	pop	r28
    291e:	08 95       	ret

00002920 <vTaskMissedYield>:
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <xYieldPending>
    2926:	08 95       	ret

00002928 <xTaskGetSchedulerState>:
    2928:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <xSchedulerRunning>
    292c:	88 23       	and	r24, r24
    292e:	31 f0       	breq	.+12     	; 0x293c <xTaskGetSchedulerState+0x14>
    2930:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    2934:	88 23       	and	r24, r24
    2936:	21 f0       	breq	.+8      	; 0x2940 <xTaskGetSchedulerState+0x18>
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	08 95       	ret
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	08 95       	ret
    2940:	82 e0       	ldi	r24, 0x02	; 2
    2942:	08 95       	ret

00002944 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    294c:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    294e:	89 2b       	or	r24, r25
    2950:	79 f1       	breq	.+94     	; 0x29b0 <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2952:	82 a1       	ldd	r24, Z+34	; 0x22
    2954:	81 50       	subi	r24, 0x01	; 1
    2956:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2958:	26 89       	ldd	r18, Z+22	; 0x16
    295a:	91 a1       	ldd	r25, Z+33	; 0x21
    295c:	29 17       	cp	r18, r25
    295e:	51 f1       	breq	.+84     	; 0x29b4 <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2960:	81 11       	cpse	r24, r1
    2962:	2a c0       	rjmp	.+84     	; 0x29b8 <xTaskPriorityDisinherit+0x74>
    2964:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready/delayed list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2966:	8f 01       	movw	r16, r30
    2968:	0e 5f       	subi	r16, 0xFE	; 254
    296a:	1f 4f       	sbci	r17, 0xFF	; 255
    296c:	c8 01       	movw	r24, r16
    296e:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2972:	89 a1       	ldd	r24, Y+33	; 0x21
    2974:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only Yellowundant for some ports. */
    2976:	24 e0       	ldi	r18, 0x04	; 4
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	28 1b       	sub	r18, r24
    297c:	31 09       	sbc	r19, r1
    297e:	3d 87       	std	Y+13, r19	; 0x0d
    2980:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2982:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    2986:	98 17       	cp	r25, r24
    2988:	10 f4       	brcc	.+4      	; 0x298e <xTaskPriorityDisinherit+0x4a>
    298a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	9c 01       	movw	r18, r24
    2992:	22 0f       	add	r18, r18
    2994:	33 1f       	adc	r19, r19
    2996:	22 0f       	add	r18, r18
    2998:	33 1f       	adc	r19, r19
    299a:	22 0f       	add	r18, r18
    299c:	33 1f       	adc	r19, r19
    299e:	82 0f       	add	r24, r18
    29a0:	93 1f       	adc	r25, r19
    29a2:	b8 01       	movw	r22, r16
    29a4:	83 52       	subi	r24, 0x23	; 35
    29a6:	9e 4f       	sbci	r25, 0xFE	; 254
    29a8:	0e 94 88 0b 	call	0x1710	; 0x1710 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	05 c0       	rjmp	.+10     	; 0x29ba <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    29b0:	80 e0       	ldi	r24, 0x00	; 0
    29b2:	03 c0       	rjmp	.+6      	; 0x29ba <xTaskPriorityDisinherit+0x76>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	01 c0       	rjmp	.+2      	; 0x29ba <xTaskPriorityDisinherit+0x76>
    29b8:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	08 95       	ret

000029c4 <prvInsertTimerInActiveList>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    29c4:	fc 01       	movw	r30, r24
    29c6:	73 83       	std	Z+3, r23	; 0x03
    29c8:	62 83       	std	Z+2, r22	; 0x02
    29ca:	91 87       	std	Z+9, r25	; 0x09
    29cc:	80 87       	std	Z+8, r24	; 0x08
    29ce:	46 17       	cp	r20, r22
    29d0:	57 07       	cpc	r21, r23
    29d2:	90 f0       	brcs	.+36     	; 0x29f8 <prvInsertTimerInActiveList+0x34>
    29d4:	42 1b       	sub	r20, r18
    29d6:	53 0b       	sbc	r21, r19
    29d8:	84 85       	ldd	r24, Z+12	; 0x0c
    29da:	95 85       	ldd	r25, Z+13	; 0x0d
    29dc:	48 17       	cp	r20, r24
    29de:	59 07       	cpc	r21, r25
    29e0:	e0 f4       	brcc	.+56     	; 0x2a1a <prvInsertTimerInActiveList+0x56>
    29e2:	bf 01       	movw	r22, r30
    29e4:	6e 5f       	subi	r22, 0xFE	; 254
    29e6:	7f 4f       	sbci	r23, 0xFF	; 255
    29e8:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <pxOverflowTimerList>
    29ec:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <pxOverflowTimerList+0x1>
    29f0:	0e 94 a9 0b 	call	0x1752	; 0x1752 <vListInsert>
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	08 95       	ret
    29f8:	42 17       	cp	r20, r18
    29fa:	53 07       	cpc	r21, r19
    29fc:	18 f4       	brcc	.+6      	; 0x2a04 <prvInsertTimerInActiveList+0x40>
    29fe:	62 17       	cp	r22, r18
    2a00:	73 07       	cpc	r23, r19
    2a02:	68 f4       	brcc	.+26     	; 0x2a1e <prvInsertTimerInActiveList+0x5a>
    2a04:	bf 01       	movw	r22, r30
    2a06:	6e 5f       	subi	r22, 0xFE	; 254
    2a08:	7f 4f       	sbci	r23, 0xFF	; 255
    2a0a:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <pxCurrentTimerList>
    2a0e:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2a12:	0e 94 a9 0b 	call	0x1752	; 0x1752 <vListInsert>
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	08 95       	ret
    2a1a:	81 e0       	ldi	r24, 0x01	; 1
    2a1c:	08 95       	ret
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	08 95       	ret

00002a22 <prvCheckForValidListAndQueue>:
    2a22:	0f b6       	in	r0, 0x3f	; 63
    2a24:	f8 94       	cli
    2a26:	0f 92       	push	r0
    2a28:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2a2c:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2a30:	89 2b       	or	r24, r25
    2a32:	e9 f4       	brne	.+58     	; 0x2a6e <prvCheckForValidListAndQueue+0x4c>
    2a34:	86 e1       	ldi	r24, 0x16	; 22
    2a36:	92 e0       	ldi	r25, 0x02	; 2
    2a38:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    2a3c:	8d e0       	ldi	r24, 0x0D	; 13
    2a3e:	92 e0       	ldi	r25, 0x02	; 2
    2a40:	0e 94 76 0b 	call	0x16ec	; 0x16ec <vListInitialise>
    2a44:	86 e1       	ldi	r24, 0x16	; 22
    2a46:	92 e0       	ldi	r25, 0x02	; 2
    2a48:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <pxCurrentTimerList+0x1>
    2a4c:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <pxCurrentTimerList>
    2a50:	8d e0       	ldi	r24, 0x0D	; 13
    2a52:	92 e0       	ldi	r25, 0x02	; 2
    2a54:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <pxOverflowTimerList+0x1>
    2a58:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <pxOverflowTimerList>
    2a5c:	40 e0       	ldi	r20, 0x00	; 0
    2a5e:	65 e0       	ldi	r22, 0x05	; 5
    2a60:	8a e0       	ldi	r24, 0x0A	; 10
    2a62:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xQueueGenericCreate>
    2a66:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <xTimerQueue+0x1>
    2a6a:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <xTimerQueue>
    2a6e:	0f 90       	pop	r0
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	08 95       	ret

00002a74 <xTimerCreateTimerTask>:
    2a74:	ef 92       	push	r14
    2a76:	ff 92       	push	r15
    2a78:	0f 93       	push	r16
    2a7a:	0e 94 11 15 	call	0x2a22	; 0x2a22 <prvCheckForValidListAndQueue>
    2a7e:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2a82:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2a86:	89 2b       	or	r24, r25
    2a88:	91 f0       	breq	.+36     	; 0x2aae <xTimerCreateTimerTask+0x3a>
    2a8a:	0f 2e       	mov	r0, r31
    2a8c:	f5 e0       	ldi	r31, 0x05	; 5
    2a8e:	ef 2e       	mov	r14, r31
    2a90:	f2 e0       	ldi	r31, 0x02	; 2
    2a92:	ff 2e       	mov	r15, r31
    2a94:	f0 2d       	mov	r31, r0
    2a96:	03 e0       	ldi	r16, 0x03	; 3
    2a98:	20 e0       	ldi	r18, 0x00	; 0
    2a9a:	30 e0       	ldi	r19, 0x00	; 0
    2a9c:	45 e5       	ldi	r20, 0x55	; 85
    2a9e:	50 e0       	ldi	r21, 0x00	; 0
    2aa0:	63 e5       	ldi	r22, 0x53	; 83
    2aa2:	71 e0       	ldi	r23, 0x01	; 1
    2aa4:	84 e1       	ldi	r24, 0x14	; 20
    2aa6:	96 e1       	ldi	r25, 0x16	; 22
    2aa8:	0e 94 81 10 	call	0x2102	; 0x2102 <xTaskCreate>
    2aac:	01 c0       	rjmp	.+2      	; 0x2ab0 <xTimerCreateTimerTask+0x3c>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	0f 91       	pop	r16
    2ab2:	ff 90       	pop	r15
    2ab4:	ef 90       	pop	r14
    2ab6:	08 95       	ret

00002ab8 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2ab8:	0f 93       	push	r16
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
    2ac0:	00 d0       	rcall	.+0      	; 0x2ac2 <xTimerGenericCommand+0xa>
    2ac2:	00 d0       	rcall	.+0      	; 0x2ac4 <xTimerGenericCommand+0xc>
    2ac4:	1f 92       	push	r1
    2ac6:	cd b7       	in	r28, 0x3d	; 61
    2ac8:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2aca:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <xTimerQueue>
    2ace:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2ad2:	30 97       	sbiw	r30, 0x00	; 0
    2ad4:	71 f1       	breq	.+92     	; 0x2b32 <xTimerGenericCommand+0x7a>
    2ad6:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2ad8:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2ada:	5b 83       	std	Y+3, r21	; 0x03
    2adc:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2ade:	9d 83       	std	Y+5, r25	; 0x05
    2ae0:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2ae2:	66 30       	cpi	r22, 0x06	; 6
    2ae4:	ec f4       	brge	.+58     	; 0x2b20 <xTimerGenericCommand+0x68>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2ae6:	0e 94 94 14 	call	0x2928	; 0x2928 <xTaskGetSchedulerState>
    2aea:	82 30       	cpi	r24, 0x02	; 2
    2aec:	61 f4       	brne	.+24     	; 0x2b06 <xTimerGenericCommand+0x4e>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2aee:	20 e0       	ldi	r18, 0x00	; 0
    2af0:	a8 01       	movw	r20, r16
    2af2:	be 01       	movw	r22, r28
    2af4:	6f 5f       	subi	r22, 0xFF	; 255
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2afc:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2b00:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <xQueueGenericSend>
    2b04:	17 c0       	rjmp	.+46     	; 0x2b34 <xTimerGenericCommand+0x7c>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	40 e0       	ldi	r20, 0x00	; 0
    2b0a:	50 e0       	ldi	r21, 0x00	; 0
    2b0c:	be 01       	movw	r22, r28
    2b0e:	6f 5f       	subi	r22, 0xFF	; 255
    2b10:	7f 4f       	sbci	r23, 0xFF	; 255
    2b12:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2b16:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2b1a:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <xQueueGenericSend>
    2b1e:	0a c0       	rjmp	.+20     	; 0x2b34 <xTimerGenericCommand+0x7c>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	ad 01       	movw	r20, r26
    2b24:	be 01       	movw	r22, r28
    2b26:	6f 5f       	subi	r22, 0xFF	; 255
    2b28:	7f 4f       	sbci	r23, 0xFF	; 255
    2b2a:	cf 01       	movw	r24, r30
    2b2c:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <xQueueGenericSendFromISR>
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2b32:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	0f 90       	pop	r0
    2b3e:	df 91       	pop	r29
    2b40:	cf 91       	pop	r28
    2b42:	1f 91       	pop	r17
    2b44:	0f 91       	pop	r16
    2b46:	08 95       	ret

00002b48 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2b48:	af 92       	push	r10
    2b4a:	bf 92       	push	r11
    2b4c:	cf 92       	push	r12
    2b4e:	df 92       	push	r13
    2b50:	ef 92       	push	r14
    2b52:	ff 92       	push	r15
    2b54:	0f 93       	push	r16
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2b5e:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <xTaskGetTickCount>
    2b62:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2b64:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xLastTime.2416>
    2b68:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <xLastTime.2416+0x1>
    2b6c:	e8 16       	cp	r14, r24
    2b6e:	f9 06       	cpc	r15, r25
    2b70:	08 f0       	brcs	.+2      	; 0x2b74 <prvSampleTimeNow+0x2c>
    2b72:	48 c0       	rjmp	.+144    	; 0x2c04 <prvSampleTimeNow+0xbc>
    2b74:	30 c0       	rjmp	.+96     	; 0x2bd6 <prvSampleTimeNow+0x8e>
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b76:	05 80       	ldd	r0, Z+5	; 0x05
    2b78:	f6 81       	ldd	r31, Z+6	; 0x06
    2b7a:	e0 2d       	mov	r30, r0
    2b7c:	a0 80       	ld	r10, Z
    2b7e:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2b80:	c6 81       	ldd	r28, Z+6	; 0x06
    2b82:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b84:	8e 01       	movw	r16, r28
    2b86:	0e 5f       	subi	r16, 0xFE	; 254
    2b88:	1f 4f       	sbci	r17, 0xFF	; 255
    2b8a:	c8 01       	movw	r24, r16
    2b8c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
        traceTIMER_EXPIYellow( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b90:	e8 89       	ldd	r30, Y+16	; 0x10
    2b92:	f9 89       	ldd	r31, Y+17	; 0x11
    2b94:	ce 01       	movw	r24, r28
    2b96:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b98:	8a 89       	ldd	r24, Y+18	; 0x12
    2b9a:	82 ff       	sbrs	r24, 2
    2b9c:	1c c0       	rjmp	.+56     	; 0x2bd6 <prvSampleTimeNow+0x8e>
            the timer going into the same timer list then it has already expiYellow
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ba0:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ba2:	8a 0d       	add	r24, r10
    2ba4:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2ba6:	a8 16       	cp	r10, r24
    2ba8:	b9 06       	cpc	r11, r25
    2baa:	60 f4       	brcc	.+24     	; 0x2bc4 <prvSampleTimeNow+0x7c>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2bac:	9b 83       	std	Y+3, r25	; 0x03
    2bae:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2bb0:	d9 87       	std	Y+9, r29	; 0x09
    2bb2:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2bb4:	b8 01       	movw	r22, r16
    2bb6:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <pxCurrentTimerList>
    2bba:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2bbe:	0e 94 a9 0b 	call	0x1752	; 0x1752 <vListInsert>
    2bc2:	09 c0       	rjmp	.+18     	; 0x2bd6 <prvSampleTimeNow+0x8e>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2bc4:	00 e0       	ldi	r16, 0x00	; 0
    2bc6:	10 e0       	ldi	r17, 0x00	; 0
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	a5 01       	movw	r20, r10
    2bce:	60 e0       	ldi	r22, 0x00	; 0
    2bd0:	ce 01       	movw	r24, r28
    2bd2:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2bd6:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <pxCurrentTimerList>
    2bda:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2bde:	80 81       	ld	r24, Z
    2be0:	81 11       	cpse	r24, r1
    2be2:	c9 cf       	rjmp	.-110    	; 0x2b76 <prvSampleTimeNow+0x2e>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2be4:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <pxOverflowTimerList>
    2be8:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <pxOverflowTimerList+0x1>
    2bec:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <pxCurrentTimerList+0x1>
    2bf0:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2bf4:	f0 93 0a 02 	sts	0x020A, r31	; 0x80020a <pxOverflowTimerList+0x1>
    2bf8:	e0 93 09 02 	sts	0x0209, r30	; 0x800209 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2bfc:	81 e0       	ldi	r24, 0x01	; 1
    2bfe:	f6 01       	movw	r30, r12
    2c00:	80 83       	st	Z, r24
    2c02:	02 c0       	rjmp	.+4      	; 0x2c08 <prvSampleTimeNow+0xc0>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2c04:	f6 01       	movw	r30, r12
    2c06:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2c08:	f0 92 04 02 	sts	0x0204, r15	; 0x800204 <xLastTime.2416+0x1>
    2c0c:	e0 92 03 02 	sts	0x0203, r14	; 0x800203 <xLastTime.2416>

    return xTimeNow;
}
    2c10:	c7 01       	movw	r24, r14
    2c12:	df 91       	pop	r29
    2c14:	cf 91       	pop	r28
    2c16:	1f 91       	pop	r17
    2c18:	0f 91       	pop	r16
    2c1a:	ff 90       	pop	r15
    2c1c:	ef 90       	pop	r14
    2c1e:	df 90       	pop	r13
    2c20:	cf 90       	pop	r12
    2c22:	bf 90       	pop	r11
    2c24:	af 90       	pop	r10
    2c26:	08 95       	ret

00002c28 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
    2c2c:	00 d0       	rcall	.+0      	; 0x2c2e <prvTimerTask+0x6>
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <prvTimerTask+0x8>
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <prvTimerTask+0xa>
    2c32:	cd b7       	in	r28, 0x3d	; 61
    2c34:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c36:	ce 01       	movw	r24, r28
    2c38:	01 96       	adiw	r24, 0x01	; 1
    2c3a:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2c3c:	44 24       	eor	r4, r4
    2c3e:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2c40:	e1 2c       	mov	r14, r1
    2c42:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2c44:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2c46:	c8 2e       	mov	r12, r24
    2c48:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2c4a:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <pxCurrentTimerList>
    2c4e:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2c52:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    2c54:	88 23       	and	r24, r24
    2c56:	09 f4       	brne	.+2      	; 0x2c5a <prvTimerTask+0x32>
    2c58:	dc c0       	rjmp	.+440    	; 0x2e12 <prvTimerTask+0x1ea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c5a:	05 80       	ldd	r0, Z+5	; 0x05
    2c5c:	f6 81       	ldd	r31, Z+6	; 0x06
    2c5e:	e0 2d       	mov	r30, r0
    2c60:	a0 80       	ld	r10, Z
    2c62:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2c64:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c68:	c4 01       	movw	r24, r8
    2c6a:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <prvSampleTimeNow>
    2c6e:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	81 11       	cpse	r24, r1
    2c74:	4b c0       	rjmp	.+150    	; 0x2d0c <prvTimerTask+0xe4>
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2c76:	0a 15       	cp	r16, r10
    2c78:	1b 05       	cpc	r17, r11
    2c7a:	b8 f1       	brcs	.+110    	; 0x2cea <prvTimerTask+0xc2>
            {
                ( void ) xTaskResumeAll();
    2c7c:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiYellowTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2c80:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <pxCurrentTimerList>
    2c84:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2c88:	05 80       	ldd	r0, Z+5	; 0x05
    2c8a:	f6 81       	ldd	r31, Z+6	; 0x06
    2c8c:	e0 2d       	mov	r30, r0
    2c8e:	66 80       	ldd	r6, Z+6	; 0x06
    2c90:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c92:	c3 01       	movw	r24, r6
    2c94:	02 96       	adiw	r24, 0x02	; 2
    2c96:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
    traceTIMER_EXPIYellow( pxTimer );

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c9a:	d3 01       	movw	r26, r6
    2c9c:	52 96       	adiw	r26, 0x12	; 18
    2c9e:	8c 91       	ld	r24, X
    2ca0:	52 97       	sbiw	r26, 0x12	; 18
    2ca2:	82 ff       	sbrs	r24, 2
    2ca4:	17 c0       	rjmp	.+46     	; 0x2cd4 <prvTimerTask+0xac>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2ca6:	1c 96       	adiw	r26, 0x0c	; 12
    2ca8:	6d 91       	ld	r22, X+
    2caa:	7c 91       	ld	r23, X
    2cac:	1d 97       	sbiw	r26, 0x0d	; 13
    2cae:	6a 0d       	add	r22, r10
    2cb0:	7b 1d       	adc	r23, r11
    2cb2:	95 01       	movw	r18, r10
    2cb4:	a8 01       	movw	r20, r16
    2cb6:	c3 01       	movw	r24, r6
    2cb8:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <prvInsertTimerInActiveList>
    2cbc:	88 23       	and	r24, r24
    2cbe:	69 f0       	breq	.+26     	; 0x2cda <prvTimerTask+0xb2>
        {
            /* The timer expiYellow before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2cc0:	0e 2d       	mov	r16, r14
    2cc2:	1f 2d       	mov	r17, r15
    2cc4:	2e 2d       	mov	r18, r14
    2cc6:	3f 2d       	mov	r19, r15
    2cc8:	a5 01       	movw	r20, r10
    2cca:	65 2d       	mov	r22, r5
    2ccc:	c3 01       	movw	r24, r6
    2cce:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <xTimerGenericCommand>
    2cd2:	03 c0       	rjmp	.+6      	; 0x2cda <prvTimerTask+0xb2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2cd4:	8e 7f       	andi	r24, 0xFE	; 254
    2cd6:	f3 01       	movw	r30, r6
    2cd8:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cda:	d3 01       	movw	r26, r6
    2cdc:	50 96       	adiw	r26, 0x10	; 16
    2cde:	ed 91       	ld	r30, X+
    2ce0:	fc 91       	ld	r31, X
    2ce2:	51 97       	sbiw	r26, 0x11	; 17
    2ce4:	c3 01       	movw	r24, r6
    2ce6:	09 95       	icall
    2ce8:	87 c0       	rjmp	.+270    	; 0x2df8 <prvTimerTask+0x1d0>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2cea:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2cec:	b5 01       	movw	r22, r10
    2cee:	60 1b       	sub	r22, r16
    2cf0:	71 0b       	sbc	r23, r17
    2cf2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2cf6:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2cfa:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    2cfe:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    2d02:	81 11       	cpse	r24, r1
    2d04:	79 c0       	rjmp	.+242    	; 0x2df8 <prvTimerTask+0x1d0>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2d06:	0e 94 4a 0c 	call	0x1894	; 0x1894 <vPortYield>
    2d0a:	76 c0       	rjmp	.+236    	; 0x2df8 <prvTimerTask+0x1d0>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2d0c:	0e 94 9a 12 	call	0x2534	; 0x2534 <xTaskResumeAll>
    2d10:	73 c0       	rjmp	.+230    	; 0x2df8 <prvTimerTask+0x1d0>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	88 23       	and	r24, r24
    2d16:	0c f4       	brge	.+2      	; 0x2d1a <prvTimerTask+0xf2>
    2d18:	6f c0       	rjmp	.+222    	; 0x2df8 <prvTimerTask+0x1d0>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2d1a:	ac 80       	ldd	r10, Y+4	; 0x04
    2d1c:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only Yellowundant when NULL is passed into the macro. */
    2d1e:	f5 01       	movw	r30, r10
    2d20:	82 85       	ldd	r24, Z+10	; 0x0a
    2d22:	93 85       	ldd	r25, Z+11	; 0x0b
    2d24:	89 2b       	or	r24, r25
    2d26:	21 f0       	breq	.+8      	; 0x2d30 <prvTimerTask+0x108>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d28:	c5 01       	movw	r24, r10
    2d2a:	02 96       	adiw	r24, 0x02	; 2
    2d2c:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d30:	ce 01       	movw	r24, r28
    2d32:	06 96       	adiw	r24, 0x06	; 6
    2d34:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <prvSampleTimeNow>

            switch( xMessage.xMessageID )
    2d38:	e9 81       	ldd	r30, Y+1	; 0x01
    2d3a:	0e 2e       	mov	r0, r30
    2d3c:	00 0c       	add	r0, r0
    2d3e:	ff 0b       	sbc	r31, r31
    2d40:	ea 30       	cpi	r30, 0x0A	; 10
    2d42:	f1 05       	cpc	r31, r1
    2d44:	08 f0       	brcs	.+2      	; 0x2d48 <prvTimerTask+0x120>
    2d46:	58 c0       	rjmp	.+176    	; 0x2df8 <prvTimerTask+0x1d0>
    2d48:	ec 5c       	subi	r30, 0xCC	; 204
    2d4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d4c:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d50:	d5 01       	movw	r26, r10
    2d52:	52 96       	adiw	r26, 0x12	; 18
    2d54:	2c 91       	ld	r18, X
    2d56:	52 97       	sbiw	r26, 0x12	; 18
    2d58:	21 60       	ori	r18, 0x01	; 1
    2d5a:	52 96       	adiw	r26, 0x12	; 18
    2d5c:	2c 93       	st	X, r18
    2d5e:	52 97       	sbiw	r26, 0x12	; 18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2d60:	2a 81       	ldd	r18, Y+2	; 0x02
    2d62:	3b 81       	ldd	r19, Y+3	; 0x03
    2d64:	1c 96       	adiw	r26, 0x0c	; 12
    2d66:	6d 91       	ld	r22, X+
    2d68:	7c 91       	ld	r23, X
    2d6a:	1d 97       	sbiw	r26, 0x0d	; 13
    2d6c:	62 0f       	add	r22, r18
    2d6e:	73 1f       	adc	r23, r19
    2d70:	ac 01       	movw	r20, r24
    2d72:	c5 01       	movw	r24, r10
    2d74:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <prvInsertTimerInActiveList>
    2d78:	88 23       	and	r24, r24
    2d7a:	f1 f1       	breq	.+124    	; 0x2df8 <prvTimerTask+0x1d0>
                    {
                        /* The timer expiYellow before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d7c:	d5 01       	movw	r26, r10
    2d7e:	50 96       	adiw	r26, 0x10	; 16
    2d80:	ed 91       	ld	r30, X+
    2d82:	fc 91       	ld	r31, X
    2d84:	51 97       	sbiw	r26, 0x11	; 17
    2d86:	c5 01       	movw	r24, r10
    2d88:	09 95       	icall
                        traceTIMER_EXPIYellow( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d8a:	f5 01       	movw	r30, r10
    2d8c:	82 89       	ldd	r24, Z+18	; 0x12
    2d8e:	82 ff       	sbrs	r24, 2
    2d90:	33 c0       	rjmp	.+102    	; 0x2df8 <prvTimerTask+0x1d0>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2d92:	4a 81       	ldd	r20, Y+2	; 0x02
    2d94:	5b 81       	ldd	r21, Y+3	; 0x03
    2d96:	84 85       	ldd	r24, Z+12	; 0x0c
    2d98:	95 85       	ldd	r25, Z+13	; 0x0d
    2d9a:	48 0f       	add	r20, r24
    2d9c:	59 1f       	adc	r21, r25
    2d9e:	0e 2d       	mov	r16, r14
    2da0:	1f 2d       	mov	r17, r15
    2da2:	2e 2d       	mov	r18, r14
    2da4:	3f 2d       	mov	r19, r15
    2da6:	65 2d       	mov	r22, r5
    2da8:	c5 01       	movw	r24, r10
    2daa:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <xTimerGenericCommand>
    2dae:	24 c0       	rjmp	.+72     	; 0x2df8 <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2db0:	d5 01       	movw	r26, r10
    2db2:	52 96       	adiw	r26, 0x12	; 18
    2db4:	8c 91       	ld	r24, X
    2db6:	52 97       	sbiw	r26, 0x12	; 18
    2db8:	8e 7f       	andi	r24, 0xFE	; 254
    2dba:	52 96       	adiw	r26, 0x12	; 18
    2dbc:	8c 93       	st	X, r24
    2dbe:	1c c0       	rjmp	.+56     	; 0x2df8 <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2dc0:	f5 01       	movw	r30, r10
    2dc2:	22 89       	ldd	r18, Z+18	; 0x12
    2dc4:	21 60       	ori	r18, 0x01	; 1
    2dc6:	22 8b       	std	Z+18, r18	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2dc8:	6a 81       	ldd	r22, Y+2	; 0x02
    2dca:	7b 81       	ldd	r23, Y+3	; 0x03
    2dcc:	75 87       	std	Z+13, r23	; 0x0d
    2dce:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2dd0:	68 0f       	add	r22, r24
    2dd2:	79 1f       	adc	r23, r25
    2dd4:	9c 01       	movw	r18, r24
    2dd6:	ac 01       	movw	r20, r24
    2dd8:	c5 01       	movw	r24, r10
    2dda:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <prvInsertTimerInActiveList>
    2dde:	0c c0       	rjmp	.+24     	; 0x2df8 <prvTimerTask+0x1d0>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2de0:	d5 01       	movw	r26, r10
    2de2:	52 96       	adiw	r26, 0x12	; 18
    2de4:	8c 91       	ld	r24, X
    2de6:	81 fd       	sbrc	r24, 1
    2de8:	04 c0       	rjmp	.+8      	; 0x2df2 <prvTimerTask+0x1ca>
                        {
                            vPortFree( pxTimer );
    2dea:	c5 01       	movw	r24, r10
    2dec:	0e 94 34 0b 	call	0x1668	; 0x1668 <vPortFree>
    2df0:	03 c0       	rjmp	.+6      	; 0x2df8 <prvTimerTask+0x1d0>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2df2:	8e 7f       	andi	r24, 0xFE	; 254
    2df4:	f5 01       	movw	r30, r10
    2df6:	82 8b       	std	Z+18, r24	; 0x12
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2df8:	4e 2d       	mov	r20, r14
    2dfa:	5f 2d       	mov	r21, r15
    2dfc:	6c 2d       	mov	r22, r12
    2dfe:	7d 2d       	mov	r23, r13
    2e00:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2e04:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2e08:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <xQueueReceive>
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	81 cf       	rjmp	.-254    	; 0x2d12 <prvTimerTask+0xea>
    2e10:	1c cf       	rjmp	.-456    	; 0x2c4a <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2e12:	0e 94 cb 11 	call	0x2396	; 0x2396 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2e16:	c4 01       	movw	r24, r8
    2e18:	0e 94 a4 15 	call	0x2b48	; 0x2b48 <prvSampleTimeNow>
    2e1c:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2e1e:	89 81       	ldd	r24, Y+1	; 0x01
    2e20:	81 11       	cpse	r24, r1
    2e22:	74 cf       	rjmp	.-280    	; 0x2d0c <prvTimerTask+0xe4>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2e24:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxOverflowTimerList>
    2e28:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxOverflowTimerList+0x1>
    2e2c:	80 81       	ld	r24, Z
    2e2e:	44 2d       	mov	r20, r4
    2e30:	81 11       	cpse	r24, r1
    2e32:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2e34:	ae 2c       	mov	r10, r14
    2e36:	bf 2c       	mov	r11, r15
    2e38:	59 cf       	rjmp	.-334    	; 0x2cec <prvTimerTask+0xc4>

00002e3a <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2e3a:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2e3e:	88 e4       	ldi	r24, 0x48	; 72
    2e40:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2e44:	08 95       	ret

00002e46 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    2e46:	94 ea       	ldi	r25, 0xA4	; 164
    2e48:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    2e4c:	ec eb       	ldi	r30, 0xBC	; 188
    2e4e:	f0 e0       	ldi	r31, 0x00	; 0
    2e50:	90 81       	ld	r25, Z
    2e52:	99 23       	and	r25, r25
    2e54:	ec f7       	brge	.-6      	; 0x2e50 <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2e56:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
    2e5a:	98 7f       	andi	r25, 0xF8	; 248
    2e5c:	90 31       	cpi	r25, 0x10	; 16
    2e5e:	99 f4       	brne	.+38     	; 0x2e86 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
    2e60:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    2e64:	84 e8       	ldi	r24, 0x84	; 132
    2e66:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    2e6a:	ec eb       	ldi	r30, 0xBC	; 188
    2e6c:	f0 e0       	ldi	r31, 0x00	; 0
    2e6e:	80 81       	ld	r24, Z
    2e70:	88 23       	and	r24, r24
    2e72:	ec f7       	brge	.-6      	; 0x2e6e <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2e74:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2e78:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
    2e7a:	80 34       	cpi	r24, 0x40	; 64
    2e7c:	31 f0       	breq	.+12     	; 0x2e8a <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
    2e7e:	80 32       	cpi	r24, 0x20	; 32
    2e80:	31 f0       	breq	.+12     	; 0x2e8e <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    2e82:	83 e0       	ldi	r24, 0x03	; 3
    2e84:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
    2e86:	80 e0       	ldi	r24, 0x00	; 0
    2e88:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    2e8e:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2e90:	08 95       	ret

00002e92 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    2e92:	84 e9       	ldi	r24, 0x94	; 148
    2e94:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
    2e98:	ec eb       	ldi	r30, 0xBC	; 188
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	84 fd       	sbrc	r24, 4
    2ea0:	fd cf       	rjmp	.-6      	; 0x2e9c <I2C_Stop+0xa>
}
    2ea2:	08 95       	ret

00002ea4 <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
    2ea4:	bf 92       	push	r11
    2ea6:	cf 92       	push	r12
    2ea8:	df 92       	push	r13
    2eaa:	ef 92       	push	r14
    2eac:	ff 92       	push	r15
    2eae:	0f 93       	push	r16
    2eb0:	1f 93       	push	r17
    2eb2:	cf 93       	push	r28
    2eb4:	df 93       	push	r29
    2eb6:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2eb8:	cc eb       	ldi	r28, 0xBC	; 188
    2eba:	d0 e0       	ldi	r29, 0x00	; 0
    2ebc:	0f 2e       	mov	r0, r31
    2ebe:	f4 ea       	ldi	r31, 0xA4	; 164
    2ec0:	df 2e       	mov	r13, r31
    2ec2:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2ec4:	09 eb       	ldi	r16, 0xB9	; 185
    2ec6:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2ec8:	0f 2e       	mov	r0, r31
    2eca:	fb eb       	ldi	r31, 0xBB	; 187
    2ecc:	ef 2e       	mov	r14, r31
    2ece:	f1 2c       	mov	r15, r1
    2ed0:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2ed2:	0f 2e       	mov	r0, r31
    2ed4:	f4 e8       	ldi	r31, 0x84	; 132
    2ed6:	cf 2e       	mov	r12, r31
    2ed8:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2eda:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    2edc:	88 81       	ld	r24, Y
    2ede:	88 23       	and	r24, r24
    2ee0:	ec f7       	brge	.-6      	; 0x2edc <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    2ee6:	88 7f       	andi	r24, 0xF8	; 248
    2ee8:	88 30       	cpi	r24, 0x08	; 8
    2eea:	b9 f7       	brne	.-18     	; 0x2eda <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2eec:	f7 01       	movw	r30, r14
    2eee:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2ef0:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    2ef2:	88 81       	ld	r24, Y
    2ef4:	88 23       	and	r24, r24
    2ef6:	ec f7       	brge	.-6      	; 0x2ef2 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2ef8:	f8 01       	movw	r30, r16
    2efa:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
    2efc:	88 7f       	andi	r24, 0xF8	; 248
    2efe:	88 31       	cpi	r24, 0x18	; 24
    2f00:	19 f0       	breq	.+6      	; 0x2f08 <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
    2f02:	0e 94 49 17 	call	0x2e92	; 0x2e92 <I2C_Stop>
			continue;										/* continue with start loop again */
    2f06:	e9 cf       	rjmp	.-46     	; 0x2eda <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
    2f08:	df 91       	pop	r29
    2f0a:	cf 91       	pop	r28
    2f0c:	1f 91       	pop	r17
    2f0e:	0f 91       	pop	r16
    2f10:	ff 90       	pop	r15
    2f12:	ef 90       	pop	r14
    2f14:	df 90       	pop	r13
    2f16:	cf 90       	pop	r12
    2f18:	bf 90       	pop	r11
    2f1a:	08 95       	ret

00002f1c <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
    2f1c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    2f20:	84 e8       	ldi	r24, 0x84	; 132
    2f22:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    2f26:	ec eb       	ldi	r30, 0xBC	; 188
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	88 23       	and	r24, r24
    2f2e:	ec f7       	brge	.-6      	; 0x2f2a <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2f30:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2f34:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
    2f36:	88 32       	cpi	r24, 0x28	; 40
    2f38:	21 f0       	breq	.+8      	; 0x2f42 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
    2f3a:	80 33       	cpi	r24, 0x30	; 48
    2f3c:	21 f0       	breq	.+8      	; 0x2f46 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
    2f3e:	82 e0       	ldi	r24, 0x02	; 2
    2f40:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
    2f42:	80 e0       	ldi	r24, 0x00	; 0
    2f44:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
    2f46:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
    2f48:	08 95       	ret

00002f4a <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
    2f4a:	84 ec       	ldi	r24, 0xC4	; 196
    2f4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    2f50:	ec eb       	ldi	r30, 0xBC	; 188
    2f52:	f0 e0       	ldi	r31, 0x00	; 0
    2f54:	80 81       	ld	r24, Z
    2f56:	88 23       	and	r24, r24
    2f58:	ec f7       	brge	.-6      	; 0x2f54 <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
    2f5a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    2f5e:	08 95       	ret

00002f60 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
    2f60:	84 e8       	ldi	r24, 0x84	; 132
    2f62:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    2f66:	ec eb       	ldi	r30, 0xBC	; 188
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	80 81       	ld	r24, Z
    2f6c:	88 23       	and	r24, r24
    2f6e:	ec f7       	brge	.-6      	; 0x2f6a <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
    2f70:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    2f74:	08 95       	ret

00002f76 <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
    2f76:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
    2f7a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2f7e:	88 e1       	ldi	r24, 0x18	; 24
    2f80:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C |= (1<<USBS0); // 2 stop bits
    2f84:	e2 ec       	ldi	r30, 0xC2	; 194
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	80 81       	ld	r24, Z
    2f8a:	88 60       	ori	r24, 0x08	; 8
    2f8c:	80 83       	st	Z, r24
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
    2f8e:	86 e0       	ldi	r24, 0x06	; 6
    2f90:	80 83       	st	Z, r24
    2f92:	08 95       	ret

00002f94 <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
    2f94:	e0 ec       	ldi	r30, 0xC0	; 192
    2f96:	f0 e0       	ldi	r31, 0x00	; 0
    2f98:	90 81       	ld	r25, Z
    2f9a:	95 ff       	sbrs	r25, 5
    2f9c:	fd cf       	rjmp	.-6      	; 0x2f98 <UART_send+0x4>
  // Put data into buffer and send data
  UDR0 = data;
    2f9e:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    2fa2:	08 95       	ret

00002fa4 <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
    2fa4:	cf 93       	push	r28
    2fa6:	df 93       	push	r29
    2fa8:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
    2faa:	88 81       	ld	r24, Y
    2fac:	88 23       	and	r24, r24
    2fae:	31 f0       	breq	.+12     	; 0x2fbc <UART_putstring+0x18>
    2fb0:	21 96       	adiw	r28, 0x01	; 1
  {
    UART_send(*StringPtr);
    2fb2:	0e 94 ca 17 	call	0x2f94	; 0x2f94 <UART_send>
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
    2fb6:	89 91       	ld	r24, Y+
    2fb8:	81 11       	cpse	r24, r1
    2fba:	fb cf       	rjmp	.-10     	; 0x2fb2 <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	08 95       	ret

00002fc2 <__subsf3>:
    2fc2:	50 58       	subi	r21, 0x80	; 128

00002fc4 <__addsf3>:
    2fc4:	bb 27       	eor	r27, r27
    2fc6:	aa 27       	eor	r26, r26
    2fc8:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__addsf3x>
    2fcc:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__fp_round>
    2fd0:	0e 94 4d 1a 	call	0x349a	; 0x349a <__fp_pscA>
    2fd4:	38 f0       	brcs	.+14     	; 0x2fe4 <__addsf3+0x20>
    2fd6:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_pscB>
    2fda:	20 f0       	brcs	.+8      	; 0x2fe4 <__addsf3+0x20>
    2fdc:	39 f4       	brne	.+14     	; 0x2fec <__addsf3+0x28>
    2fde:	9f 3f       	cpi	r25, 0xFF	; 255
    2fe0:	19 f4       	brne	.+6      	; 0x2fe8 <__addsf3+0x24>
    2fe2:	26 f4       	brtc	.+8      	; 0x2fec <__addsf3+0x28>
    2fe4:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_nan>
    2fe8:	0e f4       	brtc	.+2      	; 0x2fec <__addsf3+0x28>
    2fea:	e0 95       	com	r30
    2fec:	e7 fb       	bst	r30, 7
    2fee:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_inf>

00002ff2 <__addsf3x>:
    2ff2:	e9 2f       	mov	r30, r25
    2ff4:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__fp_split3>
    2ff8:	58 f3       	brcs	.-42     	; 0x2fd0 <__addsf3+0xc>
    2ffa:	ba 17       	cp	r27, r26
    2ffc:	62 07       	cpc	r22, r18
    2ffe:	73 07       	cpc	r23, r19
    3000:	84 07       	cpc	r24, r20
    3002:	95 07       	cpc	r25, r21
    3004:	20 f0       	brcs	.+8      	; 0x300e <__addsf3x+0x1c>
    3006:	79 f4       	brne	.+30     	; 0x3026 <__addsf3x+0x34>
    3008:	a6 f5       	brtc	.+104    	; 0x3072 <__addsf3x+0x80>
    300a:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_zero>
    300e:	0e f4       	brtc	.+2      	; 0x3012 <__addsf3x+0x20>
    3010:	e0 95       	com	r30
    3012:	0b 2e       	mov	r0, r27
    3014:	ba 2f       	mov	r27, r26
    3016:	a0 2d       	mov	r26, r0
    3018:	0b 01       	movw	r0, r22
    301a:	b9 01       	movw	r22, r18
    301c:	90 01       	movw	r18, r0
    301e:	0c 01       	movw	r0, r24
    3020:	ca 01       	movw	r24, r20
    3022:	a0 01       	movw	r20, r0
    3024:	11 24       	eor	r1, r1
    3026:	ff 27       	eor	r31, r31
    3028:	59 1b       	sub	r21, r25
    302a:	99 f0       	breq	.+38     	; 0x3052 <__addsf3x+0x60>
    302c:	59 3f       	cpi	r21, 0xF9	; 249
    302e:	50 f4       	brcc	.+20     	; 0x3044 <__addsf3x+0x52>
    3030:	50 3e       	cpi	r21, 0xE0	; 224
    3032:	68 f1       	brcs	.+90     	; 0x308e <__addsf3x+0x9c>
    3034:	1a 16       	cp	r1, r26
    3036:	f0 40       	sbci	r31, 0x00	; 0
    3038:	a2 2f       	mov	r26, r18
    303a:	23 2f       	mov	r18, r19
    303c:	34 2f       	mov	r19, r20
    303e:	44 27       	eor	r20, r20
    3040:	58 5f       	subi	r21, 0xF8	; 248
    3042:	f3 cf       	rjmp	.-26     	; 0x302a <__addsf3x+0x38>
    3044:	46 95       	lsr	r20
    3046:	37 95       	ror	r19
    3048:	27 95       	ror	r18
    304a:	a7 95       	ror	r26
    304c:	f0 40       	sbci	r31, 0x00	; 0
    304e:	53 95       	inc	r21
    3050:	c9 f7       	brne	.-14     	; 0x3044 <__addsf3x+0x52>
    3052:	7e f4       	brtc	.+30     	; 0x3072 <__addsf3x+0x80>
    3054:	1f 16       	cp	r1, r31
    3056:	ba 0b       	sbc	r27, r26
    3058:	62 0b       	sbc	r22, r18
    305a:	73 0b       	sbc	r23, r19
    305c:	84 0b       	sbc	r24, r20
    305e:	ba f0       	brmi	.+46     	; 0x308e <__addsf3x+0x9c>
    3060:	91 50       	subi	r25, 0x01	; 1
    3062:	a1 f0       	breq	.+40     	; 0x308c <__addsf3x+0x9a>
    3064:	ff 0f       	add	r31, r31
    3066:	bb 1f       	adc	r27, r27
    3068:	66 1f       	adc	r22, r22
    306a:	77 1f       	adc	r23, r23
    306c:	88 1f       	adc	r24, r24
    306e:	c2 f7       	brpl	.-16     	; 0x3060 <__addsf3x+0x6e>
    3070:	0e c0       	rjmp	.+28     	; 0x308e <__addsf3x+0x9c>
    3072:	ba 0f       	add	r27, r26
    3074:	62 1f       	adc	r22, r18
    3076:	73 1f       	adc	r23, r19
    3078:	84 1f       	adc	r24, r20
    307a:	48 f4       	brcc	.+18     	; 0x308e <__addsf3x+0x9c>
    307c:	87 95       	ror	r24
    307e:	77 95       	ror	r23
    3080:	67 95       	ror	r22
    3082:	b7 95       	ror	r27
    3084:	f7 95       	ror	r31
    3086:	9e 3f       	cpi	r25, 0xFE	; 254
    3088:	08 f0       	brcs	.+2      	; 0x308c <__addsf3x+0x9a>
    308a:	b0 cf       	rjmp	.-160    	; 0x2fec <__addsf3+0x28>
    308c:	93 95       	inc	r25
    308e:	88 0f       	add	r24, r24
    3090:	08 f0       	brcs	.+2      	; 0x3094 <__addsf3x+0xa2>
    3092:	99 27       	eor	r25, r25
    3094:	ee 0f       	add	r30, r30
    3096:	97 95       	ror	r25
    3098:	87 95       	ror	r24
    309a:	08 95       	ret

0000309c <asin>:
    309c:	9f 93       	push	r25
    309e:	9f 77       	andi	r25, 0x7F	; 127
    30a0:	ee e3       	ldi	r30, 0x3E	; 62
    30a2:	89 37       	cpi	r24, 0x79	; 121
    30a4:	9e 07       	cpc	r25, r30
    30a6:	28 f4       	brcc	.+10     	; 0x30b2 <asin+0x16>
    30a8:	ec e7       	ldi	r30, 0x7C	; 124
    30aa:	f0 e0       	ldi	r31, 0x00	; 0
    30ac:	0e 94 39 1a 	call	0x3472	; 0x3472 <__fp_powsodd>
    30b0:	0c c0       	rjmp	.+24     	; 0x30ca <asin+0x2e>
    30b2:	0e 94 c5 19 	call	0x338a	; 0x338a <__fp_arccos>
    30b6:	90 58       	subi	r25, 0x80	; 128
    30b8:	a2 ea       	ldi	r26, 0xA2	; 162
    30ba:	2a ed       	ldi	r18, 0xDA	; 218
    30bc:	3f e0       	ldi	r19, 0x0F	; 15
    30be:	49 ec       	ldi	r20, 0xC9	; 201
    30c0:	5f e3       	ldi	r21, 0x3F	; 63
    30c2:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__addsf3x>
    30c6:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__fp_round>
    30ca:	0f 90       	pop	r0
    30cc:	07 fc       	sbrc	r0, 7
    30ce:	90 58       	subi	r25, 0x80	; 128
    30d0:	08 95       	ret
    30d2:	0e 94 4d 1a 	call	0x349a	; 0x349a <__fp_pscA>
    30d6:	60 f0       	brcs	.+24     	; 0x30f0 <asin+0x54>
    30d8:	80 e8       	ldi	r24, 0x80	; 128
    30da:	91 e0       	ldi	r25, 0x01	; 1
    30dc:	09 f4       	brne	.+2      	; 0x30e0 <asin+0x44>
    30de:	9e ef       	ldi	r25, 0xFE	; 254
    30e0:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_pscB>
    30e4:	28 f0       	brcs	.+10     	; 0x30f0 <asin+0x54>
    30e6:	40 e8       	ldi	r20, 0x80	; 128
    30e8:	51 e0       	ldi	r21, 0x01	; 1
    30ea:	71 f4       	brne	.+28     	; 0x3108 <atan2+0x10>
    30ec:	5e ef       	ldi	r21, 0xFE	; 254
    30ee:	0c c0       	rjmp	.+24     	; 0x3108 <atan2+0x10>
    30f0:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_nan>
    30f4:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_zero>

000030f8 <atan2>:
    30f8:	e9 2f       	mov	r30, r25
    30fa:	e0 78       	andi	r30, 0x80	; 128
    30fc:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__fp_split3>
    3100:	40 f3       	brcs	.-48     	; 0x30d2 <asin+0x36>
    3102:	09 2e       	mov	r0, r25
    3104:	05 2a       	or	r0, r21
    3106:	b1 f3       	breq	.-20     	; 0x30f4 <asin+0x58>
    3108:	26 17       	cp	r18, r22
    310a:	37 07       	cpc	r19, r23
    310c:	48 07       	cpc	r20, r24
    310e:	59 07       	cpc	r21, r25
    3110:	38 f0       	brcs	.+14     	; 0x3120 <atan2+0x28>
    3112:	0e 2e       	mov	r0, r30
    3114:	07 f8       	bld	r0, 7
    3116:	e0 25       	eor	r30, r0
    3118:	69 f0       	breq	.+26     	; 0x3134 <atan2+0x3c>
    311a:	e0 25       	eor	r30, r0
    311c:	e0 64       	ori	r30, 0x40	; 64
    311e:	0a c0       	rjmp	.+20     	; 0x3134 <atan2+0x3c>
    3120:	ef 63       	ori	r30, 0x3F	; 63
    3122:	07 f8       	bld	r0, 7
    3124:	00 94       	com	r0
    3126:	07 fa       	bst	r0, 7
    3128:	db 01       	movw	r26, r22
    312a:	b9 01       	movw	r22, r18
    312c:	9d 01       	movw	r18, r26
    312e:	dc 01       	movw	r26, r24
    3130:	ca 01       	movw	r24, r20
    3132:	ad 01       	movw	r20, r26
    3134:	ef 93       	push	r30
    3136:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__divsf3_pse>
    313a:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__fp_round>
    313e:	0e 94 ac 18 	call	0x3158	; 0x3158 <atan>
    3142:	5f 91       	pop	r21
    3144:	55 23       	and	r21, r21
    3146:	39 f0       	breq	.+14     	; 0x3156 <atan2+0x5e>
    3148:	2b ed       	ldi	r18, 0xDB	; 219
    314a:	3f e0       	ldi	r19, 0x0F	; 15
    314c:	49 e4       	ldi	r20, 0x49	; 73
    314e:	50 fd       	sbrc	r21, 0
    3150:	49 ec       	ldi	r20, 0xC9	; 201
    3152:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__addsf3>
    3156:	08 95       	ret

00003158 <atan>:
    3158:	df 93       	push	r29
    315a:	dd 27       	eor	r29, r29
    315c:	b9 2f       	mov	r27, r25
    315e:	bf 77       	andi	r27, 0x7F	; 127
    3160:	40 e8       	ldi	r20, 0x80	; 128
    3162:	5f e3       	ldi	r21, 0x3F	; 63
    3164:	16 16       	cp	r1, r22
    3166:	17 06       	cpc	r1, r23
    3168:	48 07       	cpc	r20, r24
    316a:	5b 07       	cpc	r21, r27
    316c:	18 f4       	brcc	.+6      	; 0x3174 <atan+0x1c>
    316e:	d9 2f       	mov	r29, r25
    3170:	0e 94 9a 1a 	call	0x3534	; 0x3534 <inverse>
    3174:	9f 93       	push	r25
    3176:	8f 93       	push	r24
    3178:	7f 93       	push	r23
    317a:	6f 93       	push	r22
    317c:	0e 94 55 1b 	call	0x36aa	; 0x36aa <square>
    3180:	e0 e9       	ldi	r30, 0x90	; 144
    3182:	f0 e0       	ldi	r31, 0x00	; 0
    3184:	0e 94 12 1a 	call	0x3424	; 0x3424 <__fp_powser>
    3188:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__fp_round>
    318c:	2f 91       	pop	r18
    318e:	3f 91       	pop	r19
    3190:	4f 91       	pop	r20
    3192:	5f 91       	pop	r21
    3194:	0e 94 b5 1a 	call	0x356a	; 0x356a <__mulsf3x>
    3198:	dd 23       	and	r29, r29
    319a:	51 f0       	breq	.+20     	; 0x31b0 <atan+0x58>
    319c:	90 58       	subi	r25, 0x80	; 128
    319e:	a2 ea       	ldi	r26, 0xA2	; 162
    31a0:	2a ed       	ldi	r18, 0xDA	; 218
    31a2:	3f e0       	ldi	r19, 0x0F	; 15
    31a4:	49 ec       	ldi	r20, 0xC9	; 201
    31a6:	5f e3       	ldi	r21, 0x3F	; 63
    31a8:	d0 78       	andi	r29, 0x80	; 128
    31aa:	5d 27       	eor	r21, r29
    31ac:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__addsf3x>
    31b0:	df 91       	pop	r29
    31b2:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__fp_round>

000031b6 <__cmpsf2>:
    31b6:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fp_cmp>
    31ba:	08 f4       	brcc	.+2      	; 0x31be <__cmpsf2+0x8>
    31bc:	81 e0       	ldi	r24, 0x01	; 1
    31be:	08 95       	ret

000031c0 <__divsf3>:
    31c0:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <__divsf3x>
    31c4:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__fp_round>
    31c8:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_pscB>
    31cc:	58 f0       	brcs	.+22     	; 0x31e4 <__divsf3+0x24>
    31ce:	0e 94 4d 1a 	call	0x349a	; 0x349a <__fp_pscA>
    31d2:	40 f0       	brcs	.+16     	; 0x31e4 <__divsf3+0x24>
    31d4:	29 f4       	brne	.+10     	; 0x31e0 <__divsf3+0x20>
    31d6:	5f 3f       	cpi	r21, 0xFF	; 255
    31d8:	29 f0       	breq	.+10     	; 0x31e4 <__divsf3+0x24>
    31da:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_inf>
    31de:	51 11       	cpse	r21, r1
    31e0:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_szero>
    31e4:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_nan>

000031e8 <__divsf3x>:
    31e8:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__fp_split3>
    31ec:	68 f3       	brcs	.-38     	; 0x31c8 <__divsf3+0x8>

000031ee <__divsf3_pse>:
    31ee:	99 23       	and	r25, r25
    31f0:	b1 f3       	breq	.-20     	; 0x31de <__divsf3+0x1e>
    31f2:	55 23       	and	r21, r21
    31f4:	91 f3       	breq	.-28     	; 0x31da <__divsf3+0x1a>
    31f6:	95 1b       	sub	r25, r21
    31f8:	55 0b       	sbc	r21, r21
    31fa:	bb 27       	eor	r27, r27
    31fc:	aa 27       	eor	r26, r26
    31fe:	62 17       	cp	r22, r18
    3200:	73 07       	cpc	r23, r19
    3202:	84 07       	cpc	r24, r20
    3204:	38 f0       	brcs	.+14     	; 0x3214 <__divsf3_pse+0x26>
    3206:	9f 5f       	subi	r25, 0xFF	; 255
    3208:	5f 4f       	sbci	r21, 0xFF	; 255
    320a:	22 0f       	add	r18, r18
    320c:	33 1f       	adc	r19, r19
    320e:	44 1f       	adc	r20, r20
    3210:	aa 1f       	adc	r26, r26
    3212:	a9 f3       	breq	.-22     	; 0x31fe <__divsf3_pse+0x10>
    3214:	35 d0       	rcall	.+106    	; 0x3280 <__divsf3_pse+0x92>
    3216:	0e 2e       	mov	r0, r30
    3218:	3a f0       	brmi	.+14     	; 0x3228 <__divsf3_pse+0x3a>
    321a:	e0 e8       	ldi	r30, 0x80	; 128
    321c:	32 d0       	rcall	.+100    	; 0x3282 <__divsf3_pse+0x94>
    321e:	91 50       	subi	r25, 0x01	; 1
    3220:	50 40       	sbci	r21, 0x00	; 0
    3222:	e6 95       	lsr	r30
    3224:	00 1c       	adc	r0, r0
    3226:	ca f7       	brpl	.-14     	; 0x321a <__divsf3_pse+0x2c>
    3228:	2b d0       	rcall	.+86     	; 0x3280 <__divsf3_pse+0x92>
    322a:	fe 2f       	mov	r31, r30
    322c:	29 d0       	rcall	.+82     	; 0x3280 <__divsf3_pse+0x92>
    322e:	66 0f       	add	r22, r22
    3230:	77 1f       	adc	r23, r23
    3232:	88 1f       	adc	r24, r24
    3234:	bb 1f       	adc	r27, r27
    3236:	26 17       	cp	r18, r22
    3238:	37 07       	cpc	r19, r23
    323a:	48 07       	cpc	r20, r24
    323c:	ab 07       	cpc	r26, r27
    323e:	b0 e8       	ldi	r27, 0x80	; 128
    3240:	09 f0       	breq	.+2      	; 0x3244 <__divsf3_pse+0x56>
    3242:	bb 0b       	sbc	r27, r27
    3244:	80 2d       	mov	r24, r0
    3246:	bf 01       	movw	r22, r30
    3248:	ff 27       	eor	r31, r31
    324a:	93 58       	subi	r25, 0x83	; 131
    324c:	5f 4f       	sbci	r21, 0xFF	; 255
    324e:	3a f0       	brmi	.+14     	; 0x325e <__divsf3_pse+0x70>
    3250:	9e 3f       	cpi	r25, 0xFE	; 254
    3252:	51 05       	cpc	r21, r1
    3254:	78 f0       	brcs	.+30     	; 0x3274 <__divsf3_pse+0x86>
    3256:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_inf>
    325a:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_szero>
    325e:	5f 3f       	cpi	r21, 0xFF	; 255
    3260:	e4 f3       	brlt	.-8      	; 0x325a <__divsf3_pse+0x6c>
    3262:	98 3e       	cpi	r25, 0xE8	; 232
    3264:	d4 f3       	brlt	.-12     	; 0x325a <__divsf3_pse+0x6c>
    3266:	86 95       	lsr	r24
    3268:	77 95       	ror	r23
    326a:	67 95       	ror	r22
    326c:	b7 95       	ror	r27
    326e:	f7 95       	ror	r31
    3270:	9f 5f       	subi	r25, 0xFF	; 255
    3272:	c9 f7       	brne	.-14     	; 0x3266 <__divsf3_pse+0x78>
    3274:	88 0f       	add	r24, r24
    3276:	91 1d       	adc	r25, r1
    3278:	96 95       	lsr	r25
    327a:	87 95       	ror	r24
    327c:	97 f9       	bld	r25, 7
    327e:	08 95       	ret
    3280:	e1 e0       	ldi	r30, 0x01	; 1
    3282:	66 0f       	add	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	88 1f       	adc	r24, r24
    3288:	bb 1f       	adc	r27, r27
    328a:	62 17       	cp	r22, r18
    328c:	73 07       	cpc	r23, r19
    328e:	84 07       	cpc	r24, r20
    3290:	ba 07       	cpc	r27, r26
    3292:	20 f0       	brcs	.+8      	; 0x329c <__divsf3_pse+0xae>
    3294:	62 1b       	sub	r22, r18
    3296:	73 0b       	sbc	r23, r19
    3298:	84 0b       	sbc	r24, r20
    329a:	ba 0b       	sbc	r27, r26
    329c:	ee 1f       	adc	r30, r30
    329e:	88 f7       	brcc	.-30     	; 0x3282 <__divsf3_pse+0x94>
    32a0:	e0 95       	com	r30
    32a2:	08 95       	ret

000032a4 <__fixsfsi>:
    32a4:	0e 94 59 19 	call	0x32b2	; 0x32b2 <__fixunssfsi>
    32a8:	68 94       	set
    32aa:	b1 11       	cpse	r27, r1
    32ac:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_szero>
    32b0:	08 95       	ret

000032b2 <__fixunssfsi>:
    32b2:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__fp_splitA>
    32b6:	88 f0       	brcs	.+34     	; 0x32da <__fixunssfsi+0x28>
    32b8:	9f 57       	subi	r25, 0x7F	; 127
    32ba:	98 f0       	brcs	.+38     	; 0x32e2 <__fixunssfsi+0x30>
    32bc:	b9 2f       	mov	r27, r25
    32be:	99 27       	eor	r25, r25
    32c0:	b7 51       	subi	r27, 0x17	; 23
    32c2:	b0 f0       	brcs	.+44     	; 0x32f0 <__fixunssfsi+0x3e>
    32c4:	e1 f0       	breq	.+56     	; 0x32fe <__fixunssfsi+0x4c>
    32c6:	66 0f       	add	r22, r22
    32c8:	77 1f       	adc	r23, r23
    32ca:	88 1f       	adc	r24, r24
    32cc:	99 1f       	adc	r25, r25
    32ce:	1a f0       	brmi	.+6      	; 0x32d6 <__fixunssfsi+0x24>
    32d0:	ba 95       	dec	r27
    32d2:	c9 f7       	brne	.-14     	; 0x32c6 <__fixunssfsi+0x14>
    32d4:	14 c0       	rjmp	.+40     	; 0x32fe <__fixunssfsi+0x4c>
    32d6:	b1 30       	cpi	r27, 0x01	; 1
    32d8:	91 f0       	breq	.+36     	; 0x32fe <__fixunssfsi+0x4c>
    32da:	0e 94 8e 1a 	call	0x351c	; 0x351c <__fp_zero>
    32de:	b1 e0       	ldi	r27, 0x01	; 1
    32e0:	08 95       	ret
    32e2:	0c 94 8e 1a 	jmp	0x351c	; 0x351c <__fp_zero>
    32e6:	67 2f       	mov	r22, r23
    32e8:	78 2f       	mov	r23, r24
    32ea:	88 27       	eor	r24, r24
    32ec:	b8 5f       	subi	r27, 0xF8	; 248
    32ee:	39 f0       	breq	.+14     	; 0x32fe <__fixunssfsi+0x4c>
    32f0:	b9 3f       	cpi	r27, 0xF9	; 249
    32f2:	cc f3       	brlt	.-14     	; 0x32e6 <__fixunssfsi+0x34>
    32f4:	86 95       	lsr	r24
    32f6:	77 95       	ror	r23
    32f8:	67 95       	ror	r22
    32fa:	b3 95       	inc	r27
    32fc:	d9 f7       	brne	.-10     	; 0x32f4 <__fixunssfsi+0x42>
    32fe:	3e f4       	brtc	.+14     	; 0x330e <__fixunssfsi+0x5c>
    3300:	90 95       	com	r25
    3302:	80 95       	com	r24
    3304:	70 95       	com	r23
    3306:	61 95       	neg	r22
    3308:	7f 4f       	sbci	r23, 0xFF	; 255
    330a:	8f 4f       	sbci	r24, 0xFF	; 255
    330c:	9f 4f       	sbci	r25, 0xFF	; 255
    330e:	08 95       	ret

00003310 <__floatunsisf>:
    3310:	e8 94       	clt
    3312:	09 c0       	rjmp	.+18     	; 0x3326 <__floatsisf+0x12>

00003314 <__floatsisf>:
    3314:	97 fb       	bst	r25, 7
    3316:	3e f4       	brtc	.+14     	; 0x3326 <__floatsisf+0x12>
    3318:	90 95       	com	r25
    331a:	80 95       	com	r24
    331c:	70 95       	com	r23
    331e:	61 95       	neg	r22
    3320:	7f 4f       	sbci	r23, 0xFF	; 255
    3322:	8f 4f       	sbci	r24, 0xFF	; 255
    3324:	9f 4f       	sbci	r25, 0xFF	; 255
    3326:	99 23       	and	r25, r25
    3328:	a9 f0       	breq	.+42     	; 0x3354 <__floatsisf+0x40>
    332a:	f9 2f       	mov	r31, r25
    332c:	96 e9       	ldi	r25, 0x96	; 150
    332e:	bb 27       	eor	r27, r27
    3330:	93 95       	inc	r25
    3332:	f6 95       	lsr	r31
    3334:	87 95       	ror	r24
    3336:	77 95       	ror	r23
    3338:	67 95       	ror	r22
    333a:	b7 95       	ror	r27
    333c:	f1 11       	cpse	r31, r1
    333e:	f8 cf       	rjmp	.-16     	; 0x3330 <__floatsisf+0x1c>
    3340:	fa f4       	brpl	.+62     	; 0x3380 <__floatsisf+0x6c>
    3342:	bb 0f       	add	r27, r27
    3344:	11 f4       	brne	.+4      	; 0x334a <__floatsisf+0x36>
    3346:	60 ff       	sbrs	r22, 0
    3348:	1b c0       	rjmp	.+54     	; 0x3380 <__floatsisf+0x6c>
    334a:	6f 5f       	subi	r22, 0xFF	; 255
    334c:	7f 4f       	sbci	r23, 0xFF	; 255
    334e:	8f 4f       	sbci	r24, 0xFF	; 255
    3350:	9f 4f       	sbci	r25, 0xFF	; 255
    3352:	16 c0       	rjmp	.+44     	; 0x3380 <__floatsisf+0x6c>
    3354:	88 23       	and	r24, r24
    3356:	11 f0       	breq	.+4      	; 0x335c <__floatsisf+0x48>
    3358:	96 e9       	ldi	r25, 0x96	; 150
    335a:	11 c0       	rjmp	.+34     	; 0x337e <__floatsisf+0x6a>
    335c:	77 23       	and	r23, r23
    335e:	21 f0       	breq	.+8      	; 0x3368 <__floatsisf+0x54>
    3360:	9e e8       	ldi	r25, 0x8E	; 142
    3362:	87 2f       	mov	r24, r23
    3364:	76 2f       	mov	r23, r22
    3366:	05 c0       	rjmp	.+10     	; 0x3372 <__floatsisf+0x5e>
    3368:	66 23       	and	r22, r22
    336a:	71 f0       	breq	.+28     	; 0x3388 <__floatsisf+0x74>
    336c:	96 e8       	ldi	r25, 0x86	; 134
    336e:	86 2f       	mov	r24, r22
    3370:	70 e0       	ldi	r23, 0x00	; 0
    3372:	60 e0       	ldi	r22, 0x00	; 0
    3374:	2a f0       	brmi	.+10     	; 0x3380 <__floatsisf+0x6c>
    3376:	9a 95       	dec	r25
    3378:	66 0f       	add	r22, r22
    337a:	77 1f       	adc	r23, r23
    337c:	88 1f       	adc	r24, r24
    337e:	da f7       	brpl	.-10     	; 0x3376 <__floatsisf+0x62>
    3380:	88 0f       	add	r24, r24
    3382:	96 95       	lsr	r25
    3384:	87 95       	ror	r24
    3386:	97 f9       	bld	r25, 7
    3388:	08 95       	ret

0000338a <__fp_arccos>:
    338a:	df 93       	push	r29
    338c:	cf 93       	push	r28
    338e:	1f 93       	push	r17
    3390:	0f 93       	push	r16
    3392:	8b 01       	movw	r16, r22
    3394:	ec 01       	movw	r28, r24
    3396:	ed eb       	ldi	r30, 0xBD	; 189
    3398:	f0 e0       	ldi	r31, 0x00	; 0
    339a:	0e 94 12 1a 	call	0x3424	; 0x3424 <__fp_powser>
    339e:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <__fp_round>
    33a2:	98 01       	movw	r18, r16
    33a4:	ae 01       	movw	r20, r28
    33a6:	8b 01       	movw	r16, r22
    33a8:	ec 01       	movw	r28, r24
    33aa:	60 e0       	ldi	r22, 0x00	; 0
    33ac:	70 e0       	ldi	r23, 0x00	; 0
    33ae:	80 e8       	ldi	r24, 0x80	; 128
    33b0:	9f e3       	ldi	r25, 0x3F	; 63
    33b2:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <__subsf3>
    33b6:	0e 94 15 1b 	call	0x362a	; 0x362a <sqrt>
    33ba:	98 01       	movw	r18, r16
    33bc:	ae 01       	movw	r20, r28
    33be:	0f 91       	pop	r16
    33c0:	1f 91       	pop	r17
    33c2:	cf 91       	pop	r28
    33c4:	df 91       	pop	r29
    33c6:	0c 94 b5 1a 	jmp	0x356a	; 0x356a <__mulsf3x>

000033ca <__fp_cmp>:
    33ca:	99 0f       	add	r25, r25
    33cc:	00 08       	sbc	r0, r0
    33ce:	55 0f       	add	r21, r21
    33d0:	aa 0b       	sbc	r26, r26
    33d2:	e0 e8       	ldi	r30, 0x80	; 128
    33d4:	fe ef       	ldi	r31, 0xFE	; 254
    33d6:	16 16       	cp	r1, r22
    33d8:	17 06       	cpc	r1, r23
    33da:	e8 07       	cpc	r30, r24
    33dc:	f9 07       	cpc	r31, r25
    33de:	c0 f0       	brcs	.+48     	; 0x3410 <__fp_cmp+0x46>
    33e0:	12 16       	cp	r1, r18
    33e2:	13 06       	cpc	r1, r19
    33e4:	e4 07       	cpc	r30, r20
    33e6:	f5 07       	cpc	r31, r21
    33e8:	98 f0       	brcs	.+38     	; 0x3410 <__fp_cmp+0x46>
    33ea:	62 1b       	sub	r22, r18
    33ec:	73 0b       	sbc	r23, r19
    33ee:	84 0b       	sbc	r24, r20
    33f0:	95 0b       	sbc	r25, r21
    33f2:	39 f4       	brne	.+14     	; 0x3402 <__fp_cmp+0x38>
    33f4:	0a 26       	eor	r0, r26
    33f6:	61 f0       	breq	.+24     	; 0x3410 <__fp_cmp+0x46>
    33f8:	23 2b       	or	r18, r19
    33fa:	24 2b       	or	r18, r20
    33fc:	25 2b       	or	r18, r21
    33fe:	21 f4       	brne	.+8      	; 0x3408 <__fp_cmp+0x3e>
    3400:	08 95       	ret
    3402:	0a 26       	eor	r0, r26
    3404:	09 f4       	brne	.+2      	; 0x3408 <__fp_cmp+0x3e>
    3406:	a1 40       	sbci	r26, 0x01	; 1
    3408:	a6 95       	lsr	r26
    340a:	8f ef       	ldi	r24, 0xFF	; 255
    340c:	81 1d       	adc	r24, r1
    340e:	81 1d       	adc	r24, r1
    3410:	08 95       	ret

00003412 <__fp_inf>:
    3412:	97 f9       	bld	r25, 7
    3414:	9f 67       	ori	r25, 0x7F	; 127
    3416:	80 e8       	ldi	r24, 0x80	; 128
    3418:	70 e0       	ldi	r23, 0x00	; 0
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	08 95       	ret

0000341e <__fp_nan>:
    341e:	9f ef       	ldi	r25, 0xFF	; 255
    3420:	80 ec       	ldi	r24, 0xC0	; 192
    3422:	08 95       	ret

00003424 <__fp_powser>:
    3424:	df 93       	push	r29
    3426:	cf 93       	push	r28
    3428:	1f 93       	push	r17
    342a:	0f 93       	push	r16
    342c:	ff 92       	push	r15
    342e:	ef 92       	push	r14
    3430:	df 92       	push	r13
    3432:	7b 01       	movw	r14, r22
    3434:	8c 01       	movw	r16, r24
    3436:	68 94       	set
    3438:	06 c0       	rjmp	.+12     	; 0x3446 <__fp_powser+0x22>
    343a:	da 2e       	mov	r13, r26
    343c:	ef 01       	movw	r28, r30
    343e:	0e 94 b5 1a 	call	0x356a	; 0x356a <__mulsf3x>
    3442:	fe 01       	movw	r30, r28
    3444:	e8 94       	clt
    3446:	a5 91       	lpm	r26, Z+
    3448:	25 91       	lpm	r18, Z+
    344a:	35 91       	lpm	r19, Z+
    344c:	45 91       	lpm	r20, Z+
    344e:	55 91       	lpm	r21, Z+
    3450:	a6 f3       	brts	.-24     	; 0x343a <__fp_powser+0x16>
    3452:	ef 01       	movw	r28, r30
    3454:	0e 94 f9 17 	call	0x2ff2	; 0x2ff2 <__addsf3x>
    3458:	fe 01       	movw	r30, r28
    345a:	97 01       	movw	r18, r14
    345c:	a8 01       	movw	r20, r16
    345e:	da 94       	dec	r13
    3460:	69 f7       	brne	.-38     	; 0x343c <__fp_powser+0x18>
    3462:	df 90       	pop	r13
    3464:	ef 90       	pop	r14
    3466:	ff 90       	pop	r15
    3468:	0f 91       	pop	r16
    346a:	1f 91       	pop	r17
    346c:	cf 91       	pop	r28
    346e:	df 91       	pop	r29
    3470:	08 95       	ret

00003472 <__fp_powsodd>:
    3472:	9f 93       	push	r25
    3474:	8f 93       	push	r24
    3476:	7f 93       	push	r23
    3478:	6f 93       	push	r22
    347a:	ff 93       	push	r31
    347c:	ef 93       	push	r30
    347e:	9b 01       	movw	r18, r22
    3480:	ac 01       	movw	r20, r24
    3482:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__mulsf3>
    3486:	ef 91       	pop	r30
    3488:	ff 91       	pop	r31
    348a:	0e 94 12 1a 	call	0x3424	; 0x3424 <__fp_powser>
    348e:	2f 91       	pop	r18
    3490:	3f 91       	pop	r19
    3492:	4f 91       	pop	r20
    3494:	5f 91       	pop	r21
    3496:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__mulsf3>

0000349a <__fp_pscA>:
    349a:	00 24       	eor	r0, r0
    349c:	0a 94       	dec	r0
    349e:	16 16       	cp	r1, r22
    34a0:	17 06       	cpc	r1, r23
    34a2:	18 06       	cpc	r1, r24
    34a4:	09 06       	cpc	r0, r25
    34a6:	08 95       	ret

000034a8 <__fp_pscB>:
    34a8:	00 24       	eor	r0, r0
    34aa:	0a 94       	dec	r0
    34ac:	12 16       	cp	r1, r18
    34ae:	13 06       	cpc	r1, r19
    34b0:	14 06       	cpc	r1, r20
    34b2:	05 06       	cpc	r0, r21
    34b4:	08 95       	ret

000034b6 <__fp_round>:
    34b6:	09 2e       	mov	r0, r25
    34b8:	03 94       	inc	r0
    34ba:	00 0c       	add	r0, r0
    34bc:	11 f4       	brne	.+4      	; 0x34c2 <__fp_round+0xc>
    34be:	88 23       	and	r24, r24
    34c0:	52 f0       	brmi	.+20     	; 0x34d6 <__fp_round+0x20>
    34c2:	bb 0f       	add	r27, r27
    34c4:	40 f4       	brcc	.+16     	; 0x34d6 <__fp_round+0x20>
    34c6:	bf 2b       	or	r27, r31
    34c8:	11 f4       	brne	.+4      	; 0x34ce <__fp_round+0x18>
    34ca:	60 ff       	sbrs	r22, 0
    34cc:	04 c0       	rjmp	.+8      	; 0x34d6 <__fp_round+0x20>
    34ce:	6f 5f       	subi	r22, 0xFF	; 255
    34d0:	7f 4f       	sbci	r23, 0xFF	; 255
    34d2:	8f 4f       	sbci	r24, 0xFF	; 255
    34d4:	9f 4f       	sbci	r25, 0xFF	; 255
    34d6:	08 95       	ret

000034d8 <__fp_split3>:
    34d8:	57 fd       	sbrc	r21, 7
    34da:	90 58       	subi	r25, 0x80	; 128
    34dc:	44 0f       	add	r20, r20
    34de:	55 1f       	adc	r21, r21
    34e0:	59 f0       	breq	.+22     	; 0x34f8 <__fp_splitA+0x10>
    34e2:	5f 3f       	cpi	r21, 0xFF	; 255
    34e4:	71 f0       	breq	.+28     	; 0x3502 <__fp_splitA+0x1a>
    34e6:	47 95       	ror	r20

000034e8 <__fp_splitA>:
    34e8:	88 0f       	add	r24, r24
    34ea:	97 fb       	bst	r25, 7
    34ec:	99 1f       	adc	r25, r25
    34ee:	61 f0       	breq	.+24     	; 0x3508 <__fp_splitA+0x20>
    34f0:	9f 3f       	cpi	r25, 0xFF	; 255
    34f2:	79 f0       	breq	.+30     	; 0x3512 <__fp_splitA+0x2a>
    34f4:	87 95       	ror	r24
    34f6:	08 95       	ret
    34f8:	12 16       	cp	r1, r18
    34fa:	13 06       	cpc	r1, r19
    34fc:	14 06       	cpc	r1, r20
    34fe:	55 1f       	adc	r21, r21
    3500:	f2 cf       	rjmp	.-28     	; 0x34e6 <__fp_split3+0xe>
    3502:	46 95       	lsr	r20
    3504:	f1 df       	rcall	.-30     	; 0x34e8 <__fp_splitA>
    3506:	08 c0       	rjmp	.+16     	; 0x3518 <__fp_splitA+0x30>
    3508:	16 16       	cp	r1, r22
    350a:	17 06       	cpc	r1, r23
    350c:	18 06       	cpc	r1, r24
    350e:	99 1f       	adc	r25, r25
    3510:	f1 cf       	rjmp	.-30     	; 0x34f4 <__fp_splitA+0xc>
    3512:	86 95       	lsr	r24
    3514:	71 05       	cpc	r23, r1
    3516:	61 05       	cpc	r22, r1
    3518:	08 94       	sec
    351a:	08 95       	ret

0000351c <__fp_zero>:
    351c:	e8 94       	clt

0000351e <__fp_szero>:
    351e:	bb 27       	eor	r27, r27
    3520:	66 27       	eor	r22, r22
    3522:	77 27       	eor	r23, r23
    3524:	cb 01       	movw	r24, r22
    3526:	97 f9       	bld	r25, 7
    3528:	08 95       	ret

0000352a <__gesf2>:
    352a:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__fp_cmp>
    352e:	08 f4       	brcc	.+2      	; 0x3532 <__gesf2+0x8>
    3530:	8f ef       	ldi	r24, 0xFF	; 255
    3532:	08 95       	ret

00003534 <inverse>:
    3534:	9b 01       	movw	r18, r22
    3536:	ac 01       	movw	r20, r24
    3538:	60 e0       	ldi	r22, 0x00	; 0
    353a:	70 e0       	ldi	r23, 0x00	; 0
    353c:	80 e8       	ldi	r24, 0x80	; 128
    353e:	9f e3       	ldi	r25, 0x3F	; 63
    3540:	0c 94 e0 18 	jmp	0x31c0	; 0x31c0 <__divsf3>

00003544 <__mulsf3>:
    3544:	0e 94 b5 1a 	call	0x356a	; 0x356a <__mulsf3x>
    3548:	0c 94 5b 1a 	jmp	0x34b6	; 0x34b6 <__fp_round>
    354c:	0e 94 4d 1a 	call	0x349a	; 0x349a <__fp_pscA>
    3550:	38 f0       	brcs	.+14     	; 0x3560 <__mulsf3+0x1c>
    3552:	0e 94 54 1a 	call	0x34a8	; 0x34a8 <__fp_pscB>
    3556:	20 f0       	brcs	.+8      	; 0x3560 <__mulsf3+0x1c>
    3558:	95 23       	and	r25, r21
    355a:	11 f0       	breq	.+4      	; 0x3560 <__mulsf3+0x1c>
    355c:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_inf>
    3560:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_nan>
    3564:	11 24       	eor	r1, r1
    3566:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_szero>

0000356a <__mulsf3x>:
    356a:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <__fp_split3>
    356e:	70 f3       	brcs	.-36     	; 0x354c <__mulsf3+0x8>

00003570 <__mulsf3_pse>:
    3570:	95 9f       	mul	r25, r21
    3572:	c1 f3       	breq	.-16     	; 0x3564 <__mulsf3+0x20>
    3574:	95 0f       	add	r25, r21
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	55 1f       	adc	r21, r21
    357a:	62 9f       	mul	r22, r18
    357c:	f0 01       	movw	r30, r0
    357e:	72 9f       	mul	r23, r18
    3580:	bb 27       	eor	r27, r27
    3582:	f0 0d       	add	r31, r0
    3584:	b1 1d       	adc	r27, r1
    3586:	63 9f       	mul	r22, r19
    3588:	aa 27       	eor	r26, r26
    358a:	f0 0d       	add	r31, r0
    358c:	b1 1d       	adc	r27, r1
    358e:	aa 1f       	adc	r26, r26
    3590:	64 9f       	mul	r22, r20
    3592:	66 27       	eor	r22, r22
    3594:	b0 0d       	add	r27, r0
    3596:	a1 1d       	adc	r26, r1
    3598:	66 1f       	adc	r22, r22
    359a:	82 9f       	mul	r24, r18
    359c:	22 27       	eor	r18, r18
    359e:	b0 0d       	add	r27, r0
    35a0:	a1 1d       	adc	r26, r1
    35a2:	62 1f       	adc	r22, r18
    35a4:	73 9f       	mul	r23, r19
    35a6:	b0 0d       	add	r27, r0
    35a8:	a1 1d       	adc	r26, r1
    35aa:	62 1f       	adc	r22, r18
    35ac:	83 9f       	mul	r24, r19
    35ae:	a0 0d       	add	r26, r0
    35b0:	61 1d       	adc	r22, r1
    35b2:	22 1f       	adc	r18, r18
    35b4:	74 9f       	mul	r23, r20
    35b6:	33 27       	eor	r19, r19
    35b8:	a0 0d       	add	r26, r0
    35ba:	61 1d       	adc	r22, r1
    35bc:	23 1f       	adc	r18, r19
    35be:	84 9f       	mul	r24, r20
    35c0:	60 0d       	add	r22, r0
    35c2:	21 1d       	adc	r18, r1
    35c4:	82 2f       	mov	r24, r18
    35c6:	76 2f       	mov	r23, r22
    35c8:	6a 2f       	mov	r22, r26
    35ca:	11 24       	eor	r1, r1
    35cc:	9f 57       	subi	r25, 0x7F	; 127
    35ce:	50 40       	sbci	r21, 0x00	; 0
    35d0:	9a f0       	brmi	.+38     	; 0x35f8 <__mulsf3_pse+0x88>
    35d2:	f1 f0       	breq	.+60     	; 0x3610 <__mulsf3_pse+0xa0>
    35d4:	88 23       	and	r24, r24
    35d6:	4a f0       	brmi	.+18     	; 0x35ea <__mulsf3_pse+0x7a>
    35d8:	ee 0f       	add	r30, r30
    35da:	ff 1f       	adc	r31, r31
    35dc:	bb 1f       	adc	r27, r27
    35de:	66 1f       	adc	r22, r22
    35e0:	77 1f       	adc	r23, r23
    35e2:	88 1f       	adc	r24, r24
    35e4:	91 50       	subi	r25, 0x01	; 1
    35e6:	50 40       	sbci	r21, 0x00	; 0
    35e8:	a9 f7       	brne	.-22     	; 0x35d4 <__mulsf3_pse+0x64>
    35ea:	9e 3f       	cpi	r25, 0xFE	; 254
    35ec:	51 05       	cpc	r21, r1
    35ee:	80 f0       	brcs	.+32     	; 0x3610 <__mulsf3_pse+0xa0>
    35f0:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__fp_inf>
    35f4:	0c 94 8f 1a 	jmp	0x351e	; 0x351e <__fp_szero>
    35f8:	5f 3f       	cpi	r21, 0xFF	; 255
    35fa:	e4 f3       	brlt	.-8      	; 0x35f4 <__mulsf3_pse+0x84>
    35fc:	98 3e       	cpi	r25, 0xE8	; 232
    35fe:	d4 f3       	brlt	.-12     	; 0x35f4 <__mulsf3_pse+0x84>
    3600:	86 95       	lsr	r24
    3602:	77 95       	ror	r23
    3604:	67 95       	ror	r22
    3606:	b7 95       	ror	r27
    3608:	f7 95       	ror	r31
    360a:	e7 95       	ror	r30
    360c:	9f 5f       	subi	r25, 0xFF	; 255
    360e:	c1 f7       	brne	.-16     	; 0x3600 <__mulsf3_pse+0x90>
    3610:	fe 2b       	or	r31, r30
    3612:	88 0f       	add	r24, r24
    3614:	91 1d       	adc	r25, r1
    3616:	96 95       	lsr	r25
    3618:	87 95       	ror	r24
    361a:	97 f9       	bld	r25, 7
    361c:	08 95       	ret
    361e:	19 f4       	brne	.+6      	; 0x3626 <__mulsf3_pse+0xb6>
    3620:	16 f4       	brtc	.+4      	; 0x3626 <__mulsf3_pse+0xb6>
    3622:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__fp_nan>
    3626:	0c 94 59 1b 	jmp	0x36b2	; 0x36b2 <__fp_mpack>

0000362a <sqrt>:
    362a:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__fp_splitA>
    362e:	b8 f3       	brcs	.-18     	; 0x361e <__mulsf3_pse+0xae>
    3630:	99 23       	and	r25, r25
    3632:	c9 f3       	breq	.-14     	; 0x3626 <__mulsf3_pse+0xb6>
    3634:	b6 f3       	brts	.-20     	; 0x3622 <__mulsf3_pse+0xb2>
    3636:	9f 57       	subi	r25, 0x7F	; 127
    3638:	55 0b       	sbc	r21, r21
    363a:	87 ff       	sbrs	r24, 7
    363c:	0e 94 67 1b 	call	0x36ce	; 0x36ce <__fp_norm2>
    3640:	00 24       	eor	r0, r0
    3642:	a0 e6       	ldi	r26, 0x60	; 96
    3644:	40 ea       	ldi	r20, 0xA0	; 160
    3646:	90 01       	movw	r18, r0
    3648:	80 58       	subi	r24, 0x80	; 128
    364a:	56 95       	lsr	r21
    364c:	97 95       	ror	r25
    364e:	28 f4       	brcc	.+10     	; 0x365a <sqrt+0x30>
    3650:	80 5c       	subi	r24, 0xC0	; 192
    3652:	66 0f       	add	r22, r22
    3654:	77 1f       	adc	r23, r23
    3656:	88 1f       	adc	r24, r24
    3658:	20 f0       	brcs	.+8      	; 0x3662 <sqrt+0x38>
    365a:	26 17       	cp	r18, r22
    365c:	37 07       	cpc	r19, r23
    365e:	48 07       	cpc	r20, r24
    3660:	30 f4       	brcc	.+12     	; 0x366e <sqrt+0x44>
    3662:	62 1b       	sub	r22, r18
    3664:	73 0b       	sbc	r23, r19
    3666:	84 0b       	sbc	r24, r20
    3668:	20 29       	or	r18, r0
    366a:	31 29       	or	r19, r1
    366c:	4a 2b       	or	r20, r26
    366e:	a6 95       	lsr	r26
    3670:	17 94       	ror	r1
    3672:	07 94       	ror	r0
    3674:	20 25       	eor	r18, r0
    3676:	31 25       	eor	r19, r1
    3678:	4a 27       	eor	r20, r26
    367a:	58 f7       	brcc	.-42     	; 0x3652 <sqrt+0x28>
    367c:	66 0f       	add	r22, r22
    367e:	77 1f       	adc	r23, r23
    3680:	88 1f       	adc	r24, r24
    3682:	20 f0       	brcs	.+8      	; 0x368c <sqrt+0x62>
    3684:	26 17       	cp	r18, r22
    3686:	37 07       	cpc	r19, r23
    3688:	48 07       	cpc	r20, r24
    368a:	30 f4       	brcc	.+12     	; 0x3698 <sqrt+0x6e>
    368c:	62 0b       	sbc	r22, r18
    368e:	73 0b       	sbc	r23, r19
    3690:	84 0b       	sbc	r24, r20
    3692:	20 0d       	add	r18, r0
    3694:	31 1d       	adc	r19, r1
    3696:	41 1d       	adc	r20, r1
    3698:	a0 95       	com	r26
    369a:	81 f7       	brne	.-32     	; 0x367c <sqrt+0x52>
    369c:	b9 01       	movw	r22, r18
    369e:	84 2f       	mov	r24, r20
    36a0:	91 58       	subi	r25, 0x81	; 129
    36a2:	88 0f       	add	r24, r24
    36a4:	96 95       	lsr	r25
    36a6:	87 95       	ror	r24
    36a8:	08 95       	ret

000036aa <square>:
    36aa:	9b 01       	movw	r18, r22
    36ac:	ac 01       	movw	r20, r24
    36ae:	0c 94 a2 1a 	jmp	0x3544	; 0x3544 <__mulsf3>

000036b2 <__fp_mpack>:
    36b2:	9f 3f       	cpi	r25, 0xFF	; 255
    36b4:	31 f0       	breq	.+12     	; 0x36c2 <__fp_mpack_finite+0xc>

000036b6 <__fp_mpack_finite>:
    36b6:	91 50       	subi	r25, 0x01	; 1
    36b8:	20 f4       	brcc	.+8      	; 0x36c2 <__fp_mpack_finite+0xc>
    36ba:	87 95       	ror	r24
    36bc:	77 95       	ror	r23
    36be:	67 95       	ror	r22
    36c0:	b7 95       	ror	r27
    36c2:	88 0f       	add	r24, r24
    36c4:	91 1d       	adc	r25, r1
    36c6:	96 95       	lsr	r25
    36c8:	87 95       	ror	r24
    36ca:	97 f9       	bld	r25, 7
    36cc:	08 95       	ret

000036ce <__fp_norm2>:
    36ce:	91 50       	subi	r25, 0x01	; 1
    36d0:	50 40       	sbci	r21, 0x00	; 0
    36d2:	66 0f       	add	r22, r22
    36d4:	77 1f       	adc	r23, r23
    36d6:	88 1f       	adc	r24, r24
    36d8:	d2 f7       	brpl	.-12     	; 0x36ce <__fp_norm2>
    36da:	08 95       	ret

000036dc <vfprintf>:
    36dc:	a0 e1       	ldi	r26, 0x10	; 16
    36de:	b0 e0       	ldi	r27, 0x00	; 0
    36e0:	e4 e7       	ldi	r30, 0x74	; 116
    36e2:	fb e1       	ldi	r31, 0x1B	; 27
    36e4:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__prologue_saves__>
    36e8:	7c 01       	movw	r14, r24
    36ea:	1b 01       	movw	r2, r22
    36ec:	6a 01       	movw	r12, r20
    36ee:	fc 01       	movw	r30, r24
    36f0:	17 82       	std	Z+7, r1	; 0x07
    36f2:	16 82       	std	Z+6, r1	; 0x06
    36f4:	83 81       	ldd	r24, Z+3	; 0x03
    36f6:	81 ff       	sbrs	r24, 1
    36f8:	44 c3       	rjmp	.+1672   	; 0x3d82 <vfprintf+0x6a6>
    36fa:	9e 01       	movw	r18, r28
    36fc:	2f 5f       	subi	r18, 0xFF	; 255
    36fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3700:	39 01       	movw	r6, r18
    3702:	f7 01       	movw	r30, r14
    3704:	93 81       	ldd	r25, Z+3	; 0x03
    3706:	f1 01       	movw	r30, r2
    3708:	93 fd       	sbrc	r25, 3
    370a:	85 91       	lpm	r24, Z+
    370c:	93 ff       	sbrs	r25, 3
    370e:	81 91       	ld	r24, Z+
    3710:	1f 01       	movw	r2, r30
    3712:	88 23       	and	r24, r24
    3714:	09 f4       	brne	.+2      	; 0x3718 <vfprintf+0x3c>
    3716:	31 c3       	rjmp	.+1634   	; 0x3d7a <vfprintf+0x69e>
    3718:	85 32       	cpi	r24, 0x25	; 37
    371a:	39 f4       	brne	.+14     	; 0x372a <vfprintf+0x4e>
    371c:	93 fd       	sbrc	r25, 3
    371e:	85 91       	lpm	r24, Z+
    3720:	93 ff       	sbrs	r25, 3
    3722:	81 91       	ld	r24, Z+
    3724:	1f 01       	movw	r2, r30
    3726:	85 32       	cpi	r24, 0x25	; 37
    3728:	39 f4       	brne	.+14     	; 0x3738 <vfprintf+0x5c>
    372a:	b7 01       	movw	r22, r14
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3732:	56 01       	movw	r10, r12
    3734:	65 01       	movw	r12, r10
    3736:	e5 cf       	rjmp	.-54     	; 0x3702 <vfprintf+0x26>
    3738:	10 e0       	ldi	r17, 0x00	; 0
    373a:	51 2c       	mov	r5, r1
    373c:	91 2c       	mov	r9, r1
    373e:	ff e1       	ldi	r31, 0x1F	; 31
    3740:	f9 15       	cp	r31, r9
    3742:	d8 f0       	brcs	.+54     	; 0x377a <vfprintf+0x9e>
    3744:	8b 32       	cpi	r24, 0x2B	; 43
    3746:	79 f0       	breq	.+30     	; 0x3766 <vfprintf+0x8a>
    3748:	38 f4       	brcc	.+14     	; 0x3758 <vfprintf+0x7c>
    374a:	80 32       	cpi	r24, 0x20	; 32
    374c:	79 f0       	breq	.+30     	; 0x376c <vfprintf+0x90>
    374e:	83 32       	cpi	r24, 0x23	; 35
    3750:	a1 f4       	brne	.+40     	; 0x377a <vfprintf+0x9e>
    3752:	f9 2d       	mov	r31, r9
    3754:	f0 61       	ori	r31, 0x10	; 16
    3756:	2e c0       	rjmp	.+92     	; 0x37b4 <vfprintf+0xd8>
    3758:	8d 32       	cpi	r24, 0x2D	; 45
    375a:	61 f0       	breq	.+24     	; 0x3774 <vfprintf+0x98>
    375c:	80 33       	cpi	r24, 0x30	; 48
    375e:	69 f4       	brne	.+26     	; 0x377a <vfprintf+0x9e>
    3760:	29 2d       	mov	r18, r9
    3762:	21 60       	ori	r18, 0x01	; 1
    3764:	2d c0       	rjmp	.+90     	; 0x37c0 <vfprintf+0xe4>
    3766:	39 2d       	mov	r19, r9
    3768:	32 60       	ori	r19, 0x02	; 2
    376a:	93 2e       	mov	r9, r19
    376c:	89 2d       	mov	r24, r9
    376e:	84 60       	ori	r24, 0x04	; 4
    3770:	98 2e       	mov	r9, r24
    3772:	2a c0       	rjmp	.+84     	; 0x37c8 <vfprintf+0xec>
    3774:	e9 2d       	mov	r30, r9
    3776:	e8 60       	ori	r30, 0x08	; 8
    3778:	15 c0       	rjmp	.+42     	; 0x37a4 <vfprintf+0xc8>
    377a:	97 fc       	sbrc	r9, 7
    377c:	2d c0       	rjmp	.+90     	; 0x37d8 <vfprintf+0xfc>
    377e:	20 ed       	ldi	r18, 0xD0	; 208
    3780:	28 0f       	add	r18, r24
    3782:	2a 30       	cpi	r18, 0x0A	; 10
    3784:	88 f4       	brcc	.+34     	; 0x37a8 <vfprintf+0xcc>
    3786:	96 fe       	sbrs	r9, 6
    3788:	06 c0       	rjmp	.+12     	; 0x3796 <vfprintf+0xba>
    378a:	3a e0       	ldi	r19, 0x0A	; 10
    378c:	13 9f       	mul	r17, r19
    378e:	20 0d       	add	r18, r0
    3790:	11 24       	eor	r1, r1
    3792:	12 2f       	mov	r17, r18
    3794:	19 c0       	rjmp	.+50     	; 0x37c8 <vfprintf+0xec>
    3796:	8a e0       	ldi	r24, 0x0A	; 10
    3798:	58 9e       	mul	r5, r24
    379a:	20 0d       	add	r18, r0
    379c:	11 24       	eor	r1, r1
    379e:	52 2e       	mov	r5, r18
    37a0:	e9 2d       	mov	r30, r9
    37a2:	e0 62       	ori	r30, 0x20	; 32
    37a4:	9e 2e       	mov	r9, r30
    37a6:	10 c0       	rjmp	.+32     	; 0x37c8 <vfprintf+0xec>
    37a8:	8e 32       	cpi	r24, 0x2E	; 46
    37aa:	31 f4       	brne	.+12     	; 0x37b8 <vfprintf+0xdc>
    37ac:	96 fc       	sbrc	r9, 6
    37ae:	e5 c2       	rjmp	.+1482   	; 0x3d7a <vfprintf+0x69e>
    37b0:	f9 2d       	mov	r31, r9
    37b2:	f0 64       	ori	r31, 0x40	; 64
    37b4:	9f 2e       	mov	r9, r31
    37b6:	08 c0       	rjmp	.+16     	; 0x37c8 <vfprintf+0xec>
    37b8:	8c 36       	cpi	r24, 0x6C	; 108
    37ba:	21 f4       	brne	.+8      	; 0x37c4 <vfprintf+0xe8>
    37bc:	29 2d       	mov	r18, r9
    37be:	20 68       	ori	r18, 0x80	; 128
    37c0:	92 2e       	mov	r9, r18
    37c2:	02 c0       	rjmp	.+4      	; 0x37c8 <vfprintf+0xec>
    37c4:	88 36       	cpi	r24, 0x68	; 104
    37c6:	41 f4       	brne	.+16     	; 0x37d8 <vfprintf+0xfc>
    37c8:	f1 01       	movw	r30, r2
    37ca:	93 fd       	sbrc	r25, 3
    37cc:	85 91       	lpm	r24, Z+
    37ce:	93 ff       	sbrs	r25, 3
    37d0:	81 91       	ld	r24, Z+
    37d2:	1f 01       	movw	r2, r30
    37d4:	81 11       	cpse	r24, r1
    37d6:	b3 cf       	rjmp	.-154    	; 0x373e <vfprintf+0x62>
    37d8:	9b eb       	ldi	r25, 0xBB	; 187
    37da:	98 0f       	add	r25, r24
    37dc:	93 30       	cpi	r25, 0x03	; 3
    37de:	20 f4       	brcc	.+8      	; 0x37e8 <vfprintf+0x10c>
    37e0:	99 2d       	mov	r25, r9
    37e2:	90 61       	ori	r25, 0x10	; 16
    37e4:	80 5e       	subi	r24, 0xE0	; 224
    37e6:	07 c0       	rjmp	.+14     	; 0x37f6 <vfprintf+0x11a>
    37e8:	9b e9       	ldi	r25, 0x9B	; 155
    37ea:	98 0f       	add	r25, r24
    37ec:	93 30       	cpi	r25, 0x03	; 3
    37ee:	08 f0       	brcs	.+2      	; 0x37f2 <vfprintf+0x116>
    37f0:	66 c1       	rjmp	.+716    	; 0x3abe <vfprintf+0x3e2>
    37f2:	99 2d       	mov	r25, r9
    37f4:	9f 7e       	andi	r25, 0xEF	; 239
    37f6:	96 ff       	sbrs	r25, 6
    37f8:	16 e0       	ldi	r17, 0x06	; 6
    37fa:	9f 73       	andi	r25, 0x3F	; 63
    37fc:	99 2e       	mov	r9, r25
    37fe:	85 36       	cpi	r24, 0x65	; 101
    3800:	19 f4       	brne	.+6      	; 0x3808 <vfprintf+0x12c>
    3802:	90 64       	ori	r25, 0x40	; 64
    3804:	99 2e       	mov	r9, r25
    3806:	08 c0       	rjmp	.+16     	; 0x3818 <vfprintf+0x13c>
    3808:	86 36       	cpi	r24, 0x66	; 102
    380a:	21 f4       	brne	.+8      	; 0x3814 <vfprintf+0x138>
    380c:	39 2f       	mov	r19, r25
    380e:	30 68       	ori	r19, 0x80	; 128
    3810:	93 2e       	mov	r9, r19
    3812:	02 c0       	rjmp	.+4      	; 0x3818 <vfprintf+0x13c>
    3814:	11 11       	cpse	r17, r1
    3816:	11 50       	subi	r17, 0x01	; 1
    3818:	97 fe       	sbrs	r9, 7
    381a:	07 c0       	rjmp	.+14     	; 0x382a <vfprintf+0x14e>
    381c:	1c 33       	cpi	r17, 0x3C	; 60
    381e:	50 f4       	brcc	.+20     	; 0x3834 <vfprintf+0x158>
    3820:	44 24       	eor	r4, r4
    3822:	43 94       	inc	r4
    3824:	41 0e       	add	r4, r17
    3826:	27 e0       	ldi	r18, 0x07	; 7
    3828:	0b c0       	rjmp	.+22     	; 0x3840 <vfprintf+0x164>
    382a:	18 30       	cpi	r17, 0x08	; 8
    382c:	38 f0       	brcs	.+14     	; 0x383c <vfprintf+0x160>
    382e:	27 e0       	ldi	r18, 0x07	; 7
    3830:	17 e0       	ldi	r17, 0x07	; 7
    3832:	05 c0       	rjmp	.+10     	; 0x383e <vfprintf+0x162>
    3834:	27 e0       	ldi	r18, 0x07	; 7
    3836:	9c e3       	ldi	r25, 0x3C	; 60
    3838:	49 2e       	mov	r4, r25
    383a:	02 c0       	rjmp	.+4      	; 0x3840 <vfprintf+0x164>
    383c:	21 2f       	mov	r18, r17
    383e:	41 2c       	mov	r4, r1
    3840:	56 01       	movw	r10, r12
    3842:	84 e0       	ldi	r24, 0x04	; 4
    3844:	a8 0e       	add	r10, r24
    3846:	b1 1c       	adc	r11, r1
    3848:	f6 01       	movw	r30, r12
    384a:	60 81       	ld	r22, Z
    384c:	71 81       	ldd	r23, Z+1	; 0x01
    384e:	82 81       	ldd	r24, Z+2	; 0x02
    3850:	93 81       	ldd	r25, Z+3	; 0x03
    3852:	04 2d       	mov	r16, r4
    3854:	a3 01       	movw	r20, r6
    3856:	0e 94 49 20 	call	0x4092	; 0x4092 <__ftoa_engine>
    385a:	6c 01       	movw	r12, r24
    385c:	f9 81       	ldd	r31, Y+1	; 0x01
    385e:	fc 87       	std	Y+12, r31	; 0x0c
    3860:	f0 ff       	sbrs	r31, 0
    3862:	02 c0       	rjmp	.+4      	; 0x3868 <vfprintf+0x18c>
    3864:	f3 ff       	sbrs	r31, 3
    3866:	06 c0       	rjmp	.+12     	; 0x3874 <vfprintf+0x198>
    3868:	91 fc       	sbrc	r9, 1
    386a:	06 c0       	rjmp	.+12     	; 0x3878 <vfprintf+0x19c>
    386c:	92 fe       	sbrs	r9, 2
    386e:	06 c0       	rjmp	.+12     	; 0x387c <vfprintf+0x1a0>
    3870:	00 e2       	ldi	r16, 0x20	; 32
    3872:	05 c0       	rjmp	.+10     	; 0x387e <vfprintf+0x1a2>
    3874:	0d e2       	ldi	r16, 0x2D	; 45
    3876:	03 c0       	rjmp	.+6      	; 0x387e <vfprintf+0x1a2>
    3878:	0b e2       	ldi	r16, 0x2B	; 43
    387a:	01 c0       	rjmp	.+2      	; 0x387e <vfprintf+0x1a2>
    387c:	00 e0       	ldi	r16, 0x00	; 0
    387e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3880:	8c 70       	andi	r24, 0x0C	; 12
    3882:	19 f0       	breq	.+6      	; 0x388a <vfprintf+0x1ae>
    3884:	01 11       	cpse	r16, r1
    3886:	5a c2       	rjmp	.+1204   	; 0x3d3c <vfprintf+0x660>
    3888:	9b c2       	rjmp	.+1334   	; 0x3dc0 <vfprintf+0x6e4>
    388a:	97 fe       	sbrs	r9, 7
    388c:	10 c0       	rjmp	.+32     	; 0x38ae <vfprintf+0x1d2>
    388e:	4c 0c       	add	r4, r12
    3890:	fc 85       	ldd	r31, Y+12	; 0x0c
    3892:	f4 ff       	sbrs	r31, 4
    3894:	04 c0       	rjmp	.+8      	; 0x389e <vfprintf+0x1c2>
    3896:	8a 81       	ldd	r24, Y+2	; 0x02
    3898:	81 33       	cpi	r24, 0x31	; 49
    389a:	09 f4       	brne	.+2      	; 0x389e <vfprintf+0x1c2>
    389c:	4a 94       	dec	r4
    389e:	14 14       	cp	r1, r4
    38a0:	74 f5       	brge	.+92     	; 0x38fe <vfprintf+0x222>
    38a2:	28 e0       	ldi	r18, 0x08	; 8
    38a4:	24 15       	cp	r18, r4
    38a6:	78 f5       	brcc	.+94     	; 0x3906 <vfprintf+0x22a>
    38a8:	88 e0       	ldi	r24, 0x08	; 8
    38aa:	48 2e       	mov	r4, r24
    38ac:	2c c0       	rjmp	.+88     	; 0x3906 <vfprintf+0x22a>
    38ae:	96 fc       	sbrc	r9, 6
    38b0:	2a c0       	rjmp	.+84     	; 0x3906 <vfprintf+0x22a>
    38b2:	81 2f       	mov	r24, r17
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	8c 15       	cp	r24, r12
    38b8:	9d 05       	cpc	r25, r13
    38ba:	9c f0       	brlt	.+38     	; 0x38e2 <vfprintf+0x206>
    38bc:	3c ef       	ldi	r19, 0xFC	; 252
    38be:	c3 16       	cp	r12, r19
    38c0:	3f ef       	ldi	r19, 0xFF	; 255
    38c2:	d3 06       	cpc	r13, r19
    38c4:	74 f0       	brlt	.+28     	; 0x38e2 <vfprintf+0x206>
    38c6:	89 2d       	mov	r24, r9
    38c8:	80 68       	ori	r24, 0x80	; 128
    38ca:	98 2e       	mov	r9, r24
    38cc:	0a c0       	rjmp	.+20     	; 0x38e2 <vfprintf+0x206>
    38ce:	e2 e0       	ldi	r30, 0x02	; 2
    38d0:	f0 e0       	ldi	r31, 0x00	; 0
    38d2:	ec 0f       	add	r30, r28
    38d4:	fd 1f       	adc	r31, r29
    38d6:	e1 0f       	add	r30, r17
    38d8:	f1 1d       	adc	r31, r1
    38da:	80 81       	ld	r24, Z
    38dc:	80 33       	cpi	r24, 0x30	; 48
    38de:	19 f4       	brne	.+6      	; 0x38e6 <vfprintf+0x20a>
    38e0:	11 50       	subi	r17, 0x01	; 1
    38e2:	11 11       	cpse	r17, r1
    38e4:	f4 cf       	rjmp	.-24     	; 0x38ce <vfprintf+0x1f2>
    38e6:	97 fe       	sbrs	r9, 7
    38e8:	0e c0       	rjmp	.+28     	; 0x3906 <vfprintf+0x22a>
    38ea:	44 24       	eor	r4, r4
    38ec:	43 94       	inc	r4
    38ee:	41 0e       	add	r4, r17
    38f0:	81 2f       	mov	r24, r17
    38f2:	90 e0       	ldi	r25, 0x00	; 0
    38f4:	c8 16       	cp	r12, r24
    38f6:	d9 06       	cpc	r13, r25
    38f8:	2c f4       	brge	.+10     	; 0x3904 <vfprintf+0x228>
    38fa:	1c 19       	sub	r17, r12
    38fc:	04 c0       	rjmp	.+8      	; 0x3906 <vfprintf+0x22a>
    38fe:	44 24       	eor	r4, r4
    3900:	43 94       	inc	r4
    3902:	01 c0       	rjmp	.+2      	; 0x3906 <vfprintf+0x22a>
    3904:	10 e0       	ldi	r17, 0x00	; 0
    3906:	97 fe       	sbrs	r9, 7
    3908:	06 c0       	rjmp	.+12     	; 0x3916 <vfprintf+0x23a>
    390a:	1c 14       	cp	r1, r12
    390c:	1d 04       	cpc	r1, r13
    390e:	34 f4       	brge	.+12     	; 0x391c <vfprintf+0x240>
    3910:	c6 01       	movw	r24, r12
    3912:	01 96       	adiw	r24, 0x01	; 1
    3914:	05 c0       	rjmp	.+10     	; 0x3920 <vfprintf+0x244>
    3916:	85 e0       	ldi	r24, 0x05	; 5
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	02 c0       	rjmp	.+4      	; 0x3920 <vfprintf+0x244>
    391c:	81 e0       	ldi	r24, 0x01	; 1
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	01 11       	cpse	r16, r1
    3922:	01 96       	adiw	r24, 0x01	; 1
    3924:	11 23       	and	r17, r17
    3926:	31 f0       	breq	.+12     	; 0x3934 <vfprintf+0x258>
    3928:	21 2f       	mov	r18, r17
    392a:	30 e0       	ldi	r19, 0x00	; 0
    392c:	2f 5f       	subi	r18, 0xFF	; 255
    392e:	3f 4f       	sbci	r19, 0xFF	; 255
    3930:	82 0f       	add	r24, r18
    3932:	93 1f       	adc	r25, r19
    3934:	25 2d       	mov	r18, r5
    3936:	30 e0       	ldi	r19, 0x00	; 0
    3938:	82 17       	cp	r24, r18
    393a:	93 07       	cpc	r25, r19
    393c:	14 f4       	brge	.+4      	; 0x3942 <vfprintf+0x266>
    393e:	58 1a       	sub	r5, r24
    3940:	01 c0       	rjmp	.+2      	; 0x3944 <vfprintf+0x268>
    3942:	51 2c       	mov	r5, r1
    3944:	89 2d       	mov	r24, r9
    3946:	89 70       	andi	r24, 0x09	; 9
    3948:	49 f4       	brne	.+18     	; 0x395c <vfprintf+0x280>
    394a:	55 20       	and	r5, r5
    394c:	39 f0       	breq	.+14     	; 0x395c <vfprintf+0x280>
    394e:	b7 01       	movw	r22, r14
    3950:	80 e2       	ldi	r24, 0x20	; 32
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3958:	5a 94       	dec	r5
    395a:	f7 cf       	rjmp	.-18     	; 0x394a <vfprintf+0x26e>
    395c:	00 23       	and	r16, r16
    395e:	29 f0       	breq	.+10     	; 0x396a <vfprintf+0x28e>
    3960:	b7 01       	movw	r22, r14
    3962:	80 2f       	mov	r24, r16
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    396a:	93 fc       	sbrc	r9, 3
    396c:	09 c0       	rjmp	.+18     	; 0x3980 <vfprintf+0x2a4>
    396e:	55 20       	and	r5, r5
    3970:	39 f0       	breq	.+14     	; 0x3980 <vfprintf+0x2a4>
    3972:	b7 01       	movw	r22, r14
    3974:	80 e3       	ldi	r24, 0x30	; 48
    3976:	90 e0       	ldi	r25, 0x00	; 0
    3978:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    397c:	5a 94       	dec	r5
    397e:	f7 cf       	rjmp	.-18     	; 0x396e <vfprintf+0x292>
    3980:	97 fe       	sbrs	r9, 7
    3982:	4c c0       	rjmp	.+152    	; 0x3a1c <vfprintf+0x340>
    3984:	46 01       	movw	r8, r12
    3986:	d7 fe       	sbrs	r13, 7
    3988:	02 c0       	rjmp	.+4      	; 0x398e <vfprintf+0x2b2>
    398a:	81 2c       	mov	r8, r1
    398c:	91 2c       	mov	r9, r1
    398e:	c6 01       	movw	r24, r12
    3990:	88 19       	sub	r24, r8
    3992:	99 09       	sbc	r25, r9
    3994:	f3 01       	movw	r30, r6
    3996:	e8 0f       	add	r30, r24
    3998:	f9 1f       	adc	r31, r25
    399a:	fe 87       	std	Y+14, r31	; 0x0e
    399c:	ed 87       	std	Y+13, r30	; 0x0d
    399e:	96 01       	movw	r18, r12
    39a0:	24 19       	sub	r18, r4
    39a2:	31 09       	sbc	r19, r1
    39a4:	38 8b       	std	Y+16, r19	; 0x10
    39a6:	2f 87       	std	Y+15, r18	; 0x0f
    39a8:	01 2f       	mov	r16, r17
    39aa:	10 e0       	ldi	r17, 0x00	; 0
    39ac:	11 95       	neg	r17
    39ae:	01 95       	neg	r16
    39b0:	11 09       	sbc	r17, r1
    39b2:	3f ef       	ldi	r19, 0xFF	; 255
    39b4:	83 16       	cp	r8, r19
    39b6:	93 06       	cpc	r9, r19
    39b8:	29 f4       	brne	.+10     	; 0x39c4 <vfprintf+0x2e8>
    39ba:	b7 01       	movw	r22, r14
    39bc:	8e e2       	ldi	r24, 0x2E	; 46
    39be:	90 e0       	ldi	r25, 0x00	; 0
    39c0:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    39c4:	c8 14       	cp	r12, r8
    39c6:	d9 04       	cpc	r13, r9
    39c8:	4c f0       	brlt	.+18     	; 0x39dc <vfprintf+0x300>
    39ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    39cc:	98 89       	ldd	r25, Y+16	; 0x10
    39ce:	88 15       	cp	r24, r8
    39d0:	99 05       	cpc	r25, r9
    39d2:	24 f4       	brge	.+8      	; 0x39dc <vfprintf+0x300>
    39d4:	ed 85       	ldd	r30, Y+13	; 0x0d
    39d6:	fe 85       	ldd	r31, Y+14	; 0x0e
    39d8:	81 81       	ldd	r24, Z+1	; 0x01
    39da:	01 c0       	rjmp	.+2      	; 0x39de <vfprintf+0x302>
    39dc:	80 e3       	ldi	r24, 0x30	; 48
    39de:	f1 e0       	ldi	r31, 0x01	; 1
    39e0:	8f 1a       	sub	r8, r31
    39e2:	91 08       	sbc	r9, r1
    39e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    39e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    39e8:	2f 5f       	subi	r18, 0xFF	; 255
    39ea:	3f 4f       	sbci	r19, 0xFF	; 255
    39ec:	3e 87       	std	Y+14, r19	; 0x0e
    39ee:	2d 87       	std	Y+13, r18	; 0x0d
    39f0:	80 16       	cp	r8, r16
    39f2:	91 06       	cpc	r9, r17
    39f4:	2c f0       	brlt	.+10     	; 0x3a00 <vfprintf+0x324>
    39f6:	b7 01       	movw	r22, r14
    39f8:	90 e0       	ldi	r25, 0x00	; 0
    39fa:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    39fe:	d9 cf       	rjmp	.-78     	; 0x39b2 <vfprintf+0x2d6>
    3a00:	c8 14       	cp	r12, r8
    3a02:	d9 04       	cpc	r13, r9
    3a04:	41 f4       	brne	.+16     	; 0x3a16 <vfprintf+0x33a>
    3a06:	9a 81       	ldd	r25, Y+2	; 0x02
    3a08:	96 33       	cpi	r25, 0x36	; 54
    3a0a:	20 f4       	brcc	.+8      	; 0x3a14 <vfprintf+0x338>
    3a0c:	95 33       	cpi	r25, 0x35	; 53
    3a0e:	19 f4       	brne	.+6      	; 0x3a16 <vfprintf+0x33a>
    3a10:	3c 85       	ldd	r19, Y+12	; 0x0c
    3a12:	34 ff       	sbrs	r19, 4
    3a14:	81 e3       	ldi	r24, 0x31	; 49
    3a16:	b7 01       	movw	r22, r14
    3a18:	90 e0       	ldi	r25, 0x00	; 0
    3a1a:	4e c0       	rjmp	.+156    	; 0x3ab8 <vfprintf+0x3dc>
    3a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a1e:	81 33       	cpi	r24, 0x31	; 49
    3a20:	19 f0       	breq	.+6      	; 0x3a28 <vfprintf+0x34c>
    3a22:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a24:	9f 7e       	andi	r25, 0xEF	; 239
    3a26:	9c 87       	std	Y+12, r25	; 0x0c
    3a28:	b7 01       	movw	r22, r14
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3a30:	11 11       	cpse	r17, r1
    3a32:	05 c0       	rjmp	.+10     	; 0x3a3e <vfprintf+0x362>
    3a34:	94 fc       	sbrc	r9, 4
    3a36:	18 c0       	rjmp	.+48     	; 0x3a68 <vfprintf+0x38c>
    3a38:	85 e6       	ldi	r24, 0x65	; 101
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	17 c0       	rjmp	.+46     	; 0x3a6c <vfprintf+0x390>
    3a3e:	b7 01       	movw	r22, r14
    3a40:	8e e2       	ldi	r24, 0x2E	; 46
    3a42:	90 e0       	ldi	r25, 0x00	; 0
    3a44:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3a48:	1e 5f       	subi	r17, 0xFE	; 254
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	01 e0       	ldi	r16, 0x01	; 1
    3a4e:	08 0f       	add	r16, r24
    3a50:	f3 01       	movw	r30, r6
    3a52:	e8 0f       	add	r30, r24
    3a54:	f1 1d       	adc	r31, r1
    3a56:	80 81       	ld	r24, Z
    3a58:	b7 01       	movw	r22, r14
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3a60:	80 2f       	mov	r24, r16
    3a62:	01 13       	cpse	r16, r17
    3a64:	f3 cf       	rjmp	.-26     	; 0x3a4c <vfprintf+0x370>
    3a66:	e6 cf       	rjmp	.-52     	; 0x3a34 <vfprintf+0x358>
    3a68:	85 e4       	ldi	r24, 0x45	; 69
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	b7 01       	movw	r22, r14
    3a6e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3a72:	d7 fc       	sbrc	r13, 7
    3a74:	06 c0       	rjmp	.+12     	; 0x3a82 <vfprintf+0x3a6>
    3a76:	c1 14       	cp	r12, r1
    3a78:	d1 04       	cpc	r13, r1
    3a7a:	41 f4       	brne	.+16     	; 0x3a8c <vfprintf+0x3b0>
    3a7c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3a7e:	e4 ff       	sbrs	r30, 4
    3a80:	05 c0       	rjmp	.+10     	; 0x3a8c <vfprintf+0x3b0>
    3a82:	d1 94       	neg	r13
    3a84:	c1 94       	neg	r12
    3a86:	d1 08       	sbc	r13, r1
    3a88:	8d e2       	ldi	r24, 0x2D	; 45
    3a8a:	01 c0       	rjmp	.+2      	; 0x3a8e <vfprintf+0x3b2>
    3a8c:	8b e2       	ldi	r24, 0x2B	; 43
    3a8e:	b7 01       	movw	r22, r14
    3a90:	90 e0       	ldi	r25, 0x00	; 0
    3a92:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3a96:	80 e3       	ldi	r24, 0x30	; 48
    3a98:	2a e0       	ldi	r18, 0x0A	; 10
    3a9a:	c2 16       	cp	r12, r18
    3a9c:	d1 04       	cpc	r13, r1
    3a9e:	2c f0       	brlt	.+10     	; 0x3aaa <vfprintf+0x3ce>
    3aa0:	8f 5f       	subi	r24, 0xFF	; 255
    3aa2:	fa e0       	ldi	r31, 0x0A	; 10
    3aa4:	cf 1a       	sub	r12, r31
    3aa6:	d1 08       	sbc	r13, r1
    3aa8:	f7 cf       	rjmp	.-18     	; 0x3a98 <vfprintf+0x3bc>
    3aaa:	b7 01       	movw	r22, r14
    3aac:	90 e0       	ldi	r25, 0x00	; 0
    3aae:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3ab2:	b7 01       	movw	r22, r14
    3ab4:	c6 01       	movw	r24, r12
    3ab6:	c0 96       	adiw	r24, 0x30	; 48
    3ab8:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3abc:	54 c1       	rjmp	.+680    	; 0x3d66 <vfprintf+0x68a>
    3abe:	83 36       	cpi	r24, 0x63	; 99
    3ac0:	31 f0       	breq	.+12     	; 0x3ace <vfprintf+0x3f2>
    3ac2:	83 37       	cpi	r24, 0x73	; 115
    3ac4:	79 f0       	breq	.+30     	; 0x3ae4 <vfprintf+0x408>
    3ac6:	83 35       	cpi	r24, 0x53	; 83
    3ac8:	09 f0       	breq	.+2      	; 0x3acc <vfprintf+0x3f0>
    3aca:	56 c0       	rjmp	.+172    	; 0x3b78 <vfprintf+0x49c>
    3acc:	20 c0       	rjmp	.+64     	; 0x3b0e <vfprintf+0x432>
    3ace:	56 01       	movw	r10, r12
    3ad0:	32 e0       	ldi	r19, 0x02	; 2
    3ad2:	a3 0e       	add	r10, r19
    3ad4:	b1 1c       	adc	r11, r1
    3ad6:	f6 01       	movw	r30, r12
    3ad8:	80 81       	ld	r24, Z
    3ada:	89 83       	std	Y+1, r24	; 0x01
    3adc:	01 e0       	ldi	r16, 0x01	; 1
    3ade:	10 e0       	ldi	r17, 0x00	; 0
    3ae0:	63 01       	movw	r12, r6
    3ae2:	12 c0       	rjmp	.+36     	; 0x3b08 <vfprintf+0x42c>
    3ae4:	56 01       	movw	r10, r12
    3ae6:	f2 e0       	ldi	r31, 0x02	; 2
    3ae8:	af 0e       	add	r10, r31
    3aea:	b1 1c       	adc	r11, r1
    3aec:	f6 01       	movw	r30, r12
    3aee:	c0 80       	ld	r12, Z
    3af0:	d1 80       	ldd	r13, Z+1	; 0x01
    3af2:	96 fe       	sbrs	r9, 6
    3af4:	03 c0       	rjmp	.+6      	; 0x3afc <vfprintf+0x420>
    3af6:	61 2f       	mov	r22, r17
    3af8:	70 e0       	ldi	r23, 0x00	; 0
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <vfprintf+0x424>
    3afc:	6f ef       	ldi	r22, 0xFF	; 255
    3afe:	7f ef       	ldi	r23, 0xFF	; 255
    3b00:	c6 01       	movw	r24, r12
    3b02:	0e 94 3c 21 	call	0x4278	; 0x4278 <strnlen>
    3b06:	8c 01       	movw	r16, r24
    3b08:	f9 2d       	mov	r31, r9
    3b0a:	ff 77       	andi	r31, 0x7F	; 127
    3b0c:	14 c0       	rjmp	.+40     	; 0x3b36 <vfprintf+0x45a>
    3b0e:	56 01       	movw	r10, r12
    3b10:	22 e0       	ldi	r18, 0x02	; 2
    3b12:	a2 0e       	add	r10, r18
    3b14:	b1 1c       	adc	r11, r1
    3b16:	f6 01       	movw	r30, r12
    3b18:	c0 80       	ld	r12, Z
    3b1a:	d1 80       	ldd	r13, Z+1	; 0x01
    3b1c:	96 fe       	sbrs	r9, 6
    3b1e:	03 c0       	rjmp	.+6      	; 0x3b26 <vfprintf+0x44a>
    3b20:	61 2f       	mov	r22, r17
    3b22:	70 e0       	ldi	r23, 0x00	; 0
    3b24:	02 c0       	rjmp	.+4      	; 0x3b2a <vfprintf+0x44e>
    3b26:	6f ef       	ldi	r22, 0xFF	; 255
    3b28:	7f ef       	ldi	r23, 0xFF	; 255
    3b2a:	c6 01       	movw	r24, r12
    3b2c:	0e 94 21 21 	call	0x4242	; 0x4242 <strnlen_P>
    3b30:	8c 01       	movw	r16, r24
    3b32:	f9 2d       	mov	r31, r9
    3b34:	f0 68       	ori	r31, 0x80	; 128
    3b36:	9f 2e       	mov	r9, r31
    3b38:	f3 fd       	sbrc	r31, 3
    3b3a:	1a c0       	rjmp	.+52     	; 0x3b70 <vfprintf+0x494>
    3b3c:	85 2d       	mov	r24, r5
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	08 17       	cp	r16, r24
    3b42:	19 07       	cpc	r17, r25
    3b44:	a8 f4       	brcc	.+42     	; 0x3b70 <vfprintf+0x494>
    3b46:	b7 01       	movw	r22, r14
    3b48:	80 e2       	ldi	r24, 0x20	; 32
    3b4a:	90 e0       	ldi	r25, 0x00	; 0
    3b4c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3b50:	5a 94       	dec	r5
    3b52:	f4 cf       	rjmp	.-24     	; 0x3b3c <vfprintf+0x460>
    3b54:	f6 01       	movw	r30, r12
    3b56:	97 fc       	sbrc	r9, 7
    3b58:	85 91       	lpm	r24, Z+
    3b5a:	97 fe       	sbrs	r9, 7
    3b5c:	81 91       	ld	r24, Z+
    3b5e:	6f 01       	movw	r12, r30
    3b60:	b7 01       	movw	r22, r14
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3b68:	51 10       	cpse	r5, r1
    3b6a:	5a 94       	dec	r5
    3b6c:	01 50       	subi	r16, 0x01	; 1
    3b6e:	11 09       	sbc	r17, r1
    3b70:	01 15       	cp	r16, r1
    3b72:	11 05       	cpc	r17, r1
    3b74:	79 f7       	brne	.-34     	; 0x3b54 <vfprintf+0x478>
    3b76:	f7 c0       	rjmp	.+494    	; 0x3d66 <vfprintf+0x68a>
    3b78:	84 36       	cpi	r24, 0x64	; 100
    3b7a:	11 f0       	breq	.+4      	; 0x3b80 <vfprintf+0x4a4>
    3b7c:	89 36       	cpi	r24, 0x69	; 105
    3b7e:	61 f5       	brne	.+88     	; 0x3bd8 <vfprintf+0x4fc>
    3b80:	56 01       	movw	r10, r12
    3b82:	97 fe       	sbrs	r9, 7
    3b84:	09 c0       	rjmp	.+18     	; 0x3b98 <vfprintf+0x4bc>
    3b86:	24 e0       	ldi	r18, 0x04	; 4
    3b88:	a2 0e       	add	r10, r18
    3b8a:	b1 1c       	adc	r11, r1
    3b8c:	f6 01       	movw	r30, r12
    3b8e:	60 81       	ld	r22, Z
    3b90:	71 81       	ldd	r23, Z+1	; 0x01
    3b92:	82 81       	ldd	r24, Z+2	; 0x02
    3b94:	93 81       	ldd	r25, Z+3	; 0x03
    3b96:	0a c0       	rjmp	.+20     	; 0x3bac <vfprintf+0x4d0>
    3b98:	f2 e0       	ldi	r31, 0x02	; 2
    3b9a:	af 0e       	add	r10, r31
    3b9c:	b1 1c       	adc	r11, r1
    3b9e:	f6 01       	movw	r30, r12
    3ba0:	60 81       	ld	r22, Z
    3ba2:	71 81       	ldd	r23, Z+1	; 0x01
    3ba4:	07 2e       	mov	r0, r23
    3ba6:	00 0c       	add	r0, r0
    3ba8:	88 0b       	sbc	r24, r24
    3baa:	99 0b       	sbc	r25, r25
    3bac:	f9 2d       	mov	r31, r9
    3bae:	ff 76       	andi	r31, 0x6F	; 111
    3bb0:	9f 2e       	mov	r9, r31
    3bb2:	97 ff       	sbrs	r25, 7
    3bb4:	09 c0       	rjmp	.+18     	; 0x3bc8 <vfprintf+0x4ec>
    3bb6:	90 95       	com	r25
    3bb8:	80 95       	com	r24
    3bba:	70 95       	com	r23
    3bbc:	61 95       	neg	r22
    3bbe:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc0:	8f 4f       	sbci	r24, 0xFF	; 255
    3bc2:	9f 4f       	sbci	r25, 0xFF	; 255
    3bc4:	f0 68       	ori	r31, 0x80	; 128
    3bc6:	9f 2e       	mov	r9, r31
    3bc8:	2a e0       	ldi	r18, 0x0A	; 10
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	a3 01       	movw	r20, r6
    3bce:	0e 94 a5 21 	call	0x434a	; 0x434a <__ultoa_invert>
    3bd2:	c8 2e       	mov	r12, r24
    3bd4:	c6 18       	sub	r12, r6
    3bd6:	3f c0       	rjmp	.+126    	; 0x3c56 <vfprintf+0x57a>
    3bd8:	09 2d       	mov	r16, r9
    3bda:	85 37       	cpi	r24, 0x75	; 117
    3bdc:	21 f4       	brne	.+8      	; 0x3be6 <vfprintf+0x50a>
    3bde:	0f 7e       	andi	r16, 0xEF	; 239
    3be0:	2a e0       	ldi	r18, 0x0A	; 10
    3be2:	30 e0       	ldi	r19, 0x00	; 0
    3be4:	1d c0       	rjmp	.+58     	; 0x3c20 <vfprintf+0x544>
    3be6:	09 7f       	andi	r16, 0xF9	; 249
    3be8:	8f 36       	cpi	r24, 0x6F	; 111
    3bea:	91 f0       	breq	.+36     	; 0x3c10 <vfprintf+0x534>
    3bec:	18 f4       	brcc	.+6      	; 0x3bf4 <vfprintf+0x518>
    3bee:	88 35       	cpi	r24, 0x58	; 88
    3bf0:	59 f0       	breq	.+22     	; 0x3c08 <vfprintf+0x52c>
    3bf2:	c3 c0       	rjmp	.+390    	; 0x3d7a <vfprintf+0x69e>
    3bf4:	80 37       	cpi	r24, 0x70	; 112
    3bf6:	19 f0       	breq	.+6      	; 0x3bfe <vfprintf+0x522>
    3bf8:	88 37       	cpi	r24, 0x78	; 120
    3bfa:	11 f0       	breq	.+4      	; 0x3c00 <vfprintf+0x524>
    3bfc:	be c0       	rjmp	.+380    	; 0x3d7a <vfprintf+0x69e>
    3bfe:	00 61       	ori	r16, 0x10	; 16
    3c00:	04 ff       	sbrs	r16, 4
    3c02:	09 c0       	rjmp	.+18     	; 0x3c16 <vfprintf+0x53a>
    3c04:	04 60       	ori	r16, 0x04	; 4
    3c06:	07 c0       	rjmp	.+14     	; 0x3c16 <vfprintf+0x53a>
    3c08:	94 fe       	sbrs	r9, 4
    3c0a:	08 c0       	rjmp	.+16     	; 0x3c1c <vfprintf+0x540>
    3c0c:	06 60       	ori	r16, 0x06	; 6
    3c0e:	06 c0       	rjmp	.+12     	; 0x3c1c <vfprintf+0x540>
    3c10:	28 e0       	ldi	r18, 0x08	; 8
    3c12:	30 e0       	ldi	r19, 0x00	; 0
    3c14:	05 c0       	rjmp	.+10     	; 0x3c20 <vfprintf+0x544>
    3c16:	20 e1       	ldi	r18, 0x10	; 16
    3c18:	30 e0       	ldi	r19, 0x00	; 0
    3c1a:	02 c0       	rjmp	.+4      	; 0x3c20 <vfprintf+0x544>
    3c1c:	20 e1       	ldi	r18, 0x10	; 16
    3c1e:	32 e0       	ldi	r19, 0x02	; 2
    3c20:	56 01       	movw	r10, r12
    3c22:	07 ff       	sbrs	r16, 7
    3c24:	09 c0       	rjmp	.+18     	; 0x3c38 <vfprintf+0x55c>
    3c26:	84 e0       	ldi	r24, 0x04	; 4
    3c28:	a8 0e       	add	r10, r24
    3c2a:	b1 1c       	adc	r11, r1
    3c2c:	f6 01       	movw	r30, r12
    3c2e:	60 81       	ld	r22, Z
    3c30:	71 81       	ldd	r23, Z+1	; 0x01
    3c32:	82 81       	ldd	r24, Z+2	; 0x02
    3c34:	93 81       	ldd	r25, Z+3	; 0x03
    3c36:	08 c0       	rjmp	.+16     	; 0x3c48 <vfprintf+0x56c>
    3c38:	f2 e0       	ldi	r31, 0x02	; 2
    3c3a:	af 0e       	add	r10, r31
    3c3c:	b1 1c       	adc	r11, r1
    3c3e:	f6 01       	movw	r30, r12
    3c40:	60 81       	ld	r22, Z
    3c42:	71 81       	ldd	r23, Z+1	; 0x01
    3c44:	80 e0       	ldi	r24, 0x00	; 0
    3c46:	90 e0       	ldi	r25, 0x00	; 0
    3c48:	a3 01       	movw	r20, r6
    3c4a:	0e 94 a5 21 	call	0x434a	; 0x434a <__ultoa_invert>
    3c4e:	c8 2e       	mov	r12, r24
    3c50:	c6 18       	sub	r12, r6
    3c52:	0f 77       	andi	r16, 0x7F	; 127
    3c54:	90 2e       	mov	r9, r16
    3c56:	96 fe       	sbrs	r9, 6
    3c58:	0b c0       	rjmp	.+22     	; 0x3c70 <vfprintf+0x594>
    3c5a:	09 2d       	mov	r16, r9
    3c5c:	0e 7f       	andi	r16, 0xFE	; 254
    3c5e:	c1 16       	cp	r12, r17
    3c60:	50 f4       	brcc	.+20     	; 0x3c76 <vfprintf+0x59a>
    3c62:	94 fe       	sbrs	r9, 4
    3c64:	0a c0       	rjmp	.+20     	; 0x3c7a <vfprintf+0x59e>
    3c66:	92 fc       	sbrc	r9, 2
    3c68:	08 c0       	rjmp	.+16     	; 0x3c7a <vfprintf+0x59e>
    3c6a:	09 2d       	mov	r16, r9
    3c6c:	0e 7e       	andi	r16, 0xEE	; 238
    3c6e:	05 c0       	rjmp	.+10     	; 0x3c7a <vfprintf+0x59e>
    3c70:	dc 2c       	mov	r13, r12
    3c72:	09 2d       	mov	r16, r9
    3c74:	03 c0       	rjmp	.+6      	; 0x3c7c <vfprintf+0x5a0>
    3c76:	dc 2c       	mov	r13, r12
    3c78:	01 c0       	rjmp	.+2      	; 0x3c7c <vfprintf+0x5a0>
    3c7a:	d1 2e       	mov	r13, r17
    3c7c:	04 ff       	sbrs	r16, 4
    3c7e:	0d c0       	rjmp	.+26     	; 0x3c9a <vfprintf+0x5be>
    3c80:	fe 01       	movw	r30, r28
    3c82:	ec 0d       	add	r30, r12
    3c84:	f1 1d       	adc	r31, r1
    3c86:	80 81       	ld	r24, Z
    3c88:	80 33       	cpi	r24, 0x30	; 48
    3c8a:	11 f4       	brne	.+4      	; 0x3c90 <vfprintf+0x5b4>
    3c8c:	09 7e       	andi	r16, 0xE9	; 233
    3c8e:	09 c0       	rjmp	.+18     	; 0x3ca2 <vfprintf+0x5c6>
    3c90:	02 ff       	sbrs	r16, 2
    3c92:	06 c0       	rjmp	.+12     	; 0x3ca0 <vfprintf+0x5c4>
    3c94:	d3 94       	inc	r13
    3c96:	d3 94       	inc	r13
    3c98:	04 c0       	rjmp	.+8      	; 0x3ca2 <vfprintf+0x5c6>
    3c9a:	80 2f       	mov	r24, r16
    3c9c:	86 78       	andi	r24, 0x86	; 134
    3c9e:	09 f0       	breq	.+2      	; 0x3ca2 <vfprintf+0x5c6>
    3ca0:	d3 94       	inc	r13
    3ca2:	03 fd       	sbrc	r16, 3
    3ca4:	11 c0       	rjmp	.+34     	; 0x3cc8 <vfprintf+0x5ec>
    3ca6:	00 ff       	sbrs	r16, 0
    3ca8:	06 c0       	rjmp	.+12     	; 0x3cb6 <vfprintf+0x5da>
    3caa:	1c 2d       	mov	r17, r12
    3cac:	d5 14       	cp	r13, r5
    3cae:	80 f4       	brcc	.+32     	; 0x3cd0 <vfprintf+0x5f4>
    3cb0:	15 0d       	add	r17, r5
    3cb2:	1d 19       	sub	r17, r13
    3cb4:	0d c0       	rjmp	.+26     	; 0x3cd0 <vfprintf+0x5f4>
    3cb6:	d5 14       	cp	r13, r5
    3cb8:	58 f4       	brcc	.+22     	; 0x3cd0 <vfprintf+0x5f4>
    3cba:	b7 01       	movw	r22, r14
    3cbc:	80 e2       	ldi	r24, 0x20	; 32
    3cbe:	90 e0       	ldi	r25, 0x00	; 0
    3cc0:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3cc4:	d3 94       	inc	r13
    3cc6:	f7 cf       	rjmp	.-18     	; 0x3cb6 <vfprintf+0x5da>
    3cc8:	d5 14       	cp	r13, r5
    3cca:	10 f4       	brcc	.+4      	; 0x3cd0 <vfprintf+0x5f4>
    3ccc:	5d 18       	sub	r5, r13
    3cce:	01 c0       	rjmp	.+2      	; 0x3cd2 <vfprintf+0x5f6>
    3cd0:	51 2c       	mov	r5, r1
    3cd2:	04 ff       	sbrs	r16, 4
    3cd4:	10 c0       	rjmp	.+32     	; 0x3cf6 <vfprintf+0x61a>
    3cd6:	b7 01       	movw	r22, r14
    3cd8:	80 e3       	ldi	r24, 0x30	; 48
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3ce0:	02 ff       	sbrs	r16, 2
    3ce2:	17 c0       	rjmp	.+46     	; 0x3d12 <vfprintf+0x636>
    3ce4:	01 fd       	sbrc	r16, 1
    3ce6:	03 c0       	rjmp	.+6      	; 0x3cee <vfprintf+0x612>
    3ce8:	88 e7       	ldi	r24, 0x78	; 120
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	02 c0       	rjmp	.+4      	; 0x3cf2 <vfprintf+0x616>
    3cee:	88 e5       	ldi	r24, 0x58	; 88
    3cf0:	90 e0       	ldi	r25, 0x00	; 0
    3cf2:	b7 01       	movw	r22, r14
    3cf4:	0c c0       	rjmp	.+24     	; 0x3d0e <vfprintf+0x632>
    3cf6:	80 2f       	mov	r24, r16
    3cf8:	86 78       	andi	r24, 0x86	; 134
    3cfa:	59 f0       	breq	.+22     	; 0x3d12 <vfprintf+0x636>
    3cfc:	01 ff       	sbrs	r16, 1
    3cfe:	02 c0       	rjmp	.+4      	; 0x3d04 <vfprintf+0x628>
    3d00:	8b e2       	ldi	r24, 0x2B	; 43
    3d02:	01 c0       	rjmp	.+2      	; 0x3d06 <vfprintf+0x62a>
    3d04:	80 e2       	ldi	r24, 0x20	; 32
    3d06:	07 fd       	sbrc	r16, 7
    3d08:	8d e2       	ldi	r24, 0x2D	; 45
    3d0a:	b7 01       	movw	r22, r14
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3d12:	c1 16       	cp	r12, r17
    3d14:	38 f4       	brcc	.+14     	; 0x3d24 <vfprintf+0x648>
    3d16:	b7 01       	movw	r22, r14
    3d18:	80 e3       	ldi	r24, 0x30	; 48
    3d1a:	90 e0       	ldi	r25, 0x00	; 0
    3d1c:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3d20:	11 50       	subi	r17, 0x01	; 1
    3d22:	f7 cf       	rjmp	.-18     	; 0x3d12 <vfprintf+0x636>
    3d24:	ca 94       	dec	r12
    3d26:	f3 01       	movw	r30, r6
    3d28:	ec 0d       	add	r30, r12
    3d2a:	f1 1d       	adc	r31, r1
    3d2c:	80 81       	ld	r24, Z
    3d2e:	b7 01       	movw	r22, r14
    3d30:	90 e0       	ldi	r25, 0x00	; 0
    3d32:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3d36:	c1 10       	cpse	r12, r1
    3d38:	f5 cf       	rjmp	.-22     	; 0x3d24 <vfprintf+0x648>
    3d3a:	15 c0       	rjmp	.+42     	; 0x3d66 <vfprintf+0x68a>
    3d3c:	f4 e0       	ldi	r31, 0x04	; 4
    3d3e:	f5 15       	cp	r31, r5
    3d40:	60 f5       	brcc	.+88     	; 0x3d9a <vfprintf+0x6be>
    3d42:	84 e0       	ldi	r24, 0x04	; 4
    3d44:	58 1a       	sub	r5, r24
    3d46:	93 fe       	sbrs	r9, 3
    3d48:	1f c0       	rjmp	.+62     	; 0x3d88 <vfprintf+0x6ac>
    3d4a:	01 11       	cpse	r16, r1
    3d4c:	27 c0       	rjmp	.+78     	; 0x3d9c <vfprintf+0x6c0>
    3d4e:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d50:	23 ff       	sbrs	r18, 3
    3d52:	2a c0       	rjmp	.+84     	; 0x3da8 <vfprintf+0x6cc>
    3d54:	06 ee       	ldi	r16, 0xE6	; 230
    3d56:	10 e0       	ldi	r17, 0x00	; 0
    3d58:	39 2d       	mov	r19, r9
    3d5a:	30 71       	andi	r19, 0x10	; 16
    3d5c:	93 2e       	mov	r9, r19
    3d5e:	f8 01       	movw	r30, r16
    3d60:	84 91       	lpm	r24, Z
    3d62:	81 11       	cpse	r24, r1
    3d64:	24 c0       	rjmp	.+72     	; 0x3dae <vfprintf+0x6d2>
    3d66:	55 20       	and	r5, r5
    3d68:	09 f4       	brne	.+2      	; 0x3d6c <vfprintf+0x690>
    3d6a:	e4 cc       	rjmp	.-1592   	; 0x3734 <vfprintf+0x58>
    3d6c:	b7 01       	movw	r22, r14
    3d6e:	80 e2       	ldi	r24, 0x20	; 32
    3d70:	90 e0       	ldi	r25, 0x00	; 0
    3d72:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3d76:	5a 94       	dec	r5
    3d78:	f6 cf       	rjmp	.-20     	; 0x3d66 <vfprintf+0x68a>
    3d7a:	f7 01       	movw	r30, r14
    3d7c:	86 81       	ldd	r24, Z+6	; 0x06
    3d7e:	97 81       	ldd	r25, Z+7	; 0x07
    3d80:	26 c0       	rjmp	.+76     	; 0x3dce <vfprintf+0x6f2>
    3d82:	8f ef       	ldi	r24, 0xFF	; 255
    3d84:	9f ef       	ldi	r25, 0xFF	; 255
    3d86:	23 c0       	rjmp	.+70     	; 0x3dce <vfprintf+0x6f2>
    3d88:	b7 01       	movw	r22, r14
    3d8a:	80 e2       	ldi	r24, 0x20	; 32
    3d8c:	90 e0       	ldi	r25, 0x00	; 0
    3d8e:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3d92:	5a 94       	dec	r5
    3d94:	51 10       	cpse	r5, r1
    3d96:	f8 cf       	rjmp	.-16     	; 0x3d88 <vfprintf+0x6ac>
    3d98:	d8 cf       	rjmp	.-80     	; 0x3d4a <vfprintf+0x66e>
    3d9a:	51 2c       	mov	r5, r1
    3d9c:	b7 01       	movw	r22, r14
    3d9e:	80 2f       	mov	r24, r16
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3da6:	d3 cf       	rjmp	.-90     	; 0x3d4e <vfprintf+0x672>
    3da8:	0a ee       	ldi	r16, 0xEA	; 234
    3daa:	10 e0       	ldi	r17, 0x00	; 0
    3dac:	d5 cf       	rjmp	.-86     	; 0x3d58 <vfprintf+0x67c>
    3dae:	91 10       	cpse	r9, r1
    3db0:	80 52       	subi	r24, 0x20	; 32
    3db2:	b7 01       	movw	r22, r14
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	0e 94 47 21 	call	0x428e	; 0x428e <fputc>
    3dba:	0f 5f       	subi	r16, 0xFF	; 255
    3dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3dbe:	cf cf       	rjmp	.-98     	; 0x3d5e <vfprintf+0x682>
    3dc0:	23 e0       	ldi	r18, 0x03	; 3
    3dc2:	25 15       	cp	r18, r5
    3dc4:	10 f4       	brcc	.+4      	; 0x3dca <vfprintf+0x6ee>
    3dc6:	83 e0       	ldi	r24, 0x03	; 3
    3dc8:	bd cf       	rjmp	.-134    	; 0x3d44 <vfprintf+0x668>
    3dca:	51 2c       	mov	r5, r1
    3dcc:	c0 cf       	rjmp	.-128    	; 0x3d4e <vfprintf+0x672>
    3dce:	60 96       	adiw	r28, 0x10	; 16
    3dd0:	e2 e1       	ldi	r30, 0x12	; 18
    3dd2:	0c 94 0d 1f 	jmp	0x3e1a	; 0x3e1a <__epilogue_restores__>

00003dd6 <__tablejump2__>:
    3dd6:	ee 0f       	add	r30, r30
    3dd8:	ff 1f       	adc	r31, r31
    3dda:	05 90       	lpm	r0, Z+
    3ddc:	f4 91       	lpm	r31, Z
    3dde:	e0 2d       	mov	r30, r0
    3de0:	09 94       	ijmp

00003de2 <__prologue_saves__>:
    3de2:	2f 92       	push	r2
    3de4:	3f 92       	push	r3
    3de6:	4f 92       	push	r4
    3de8:	5f 92       	push	r5
    3dea:	6f 92       	push	r6
    3dec:	7f 92       	push	r7
    3dee:	8f 92       	push	r8
    3df0:	9f 92       	push	r9
    3df2:	af 92       	push	r10
    3df4:	bf 92       	push	r11
    3df6:	cf 92       	push	r12
    3df8:	df 92       	push	r13
    3dfa:	ef 92       	push	r14
    3dfc:	ff 92       	push	r15
    3dfe:	0f 93       	push	r16
    3e00:	1f 93       	push	r17
    3e02:	cf 93       	push	r28
    3e04:	df 93       	push	r29
    3e06:	cd b7       	in	r28, 0x3d	; 61
    3e08:	de b7       	in	r29, 0x3e	; 62
    3e0a:	ca 1b       	sub	r28, r26
    3e0c:	db 0b       	sbc	r29, r27
    3e0e:	0f b6       	in	r0, 0x3f	; 63
    3e10:	f8 94       	cli
    3e12:	de bf       	out	0x3e, r29	; 62
    3e14:	0f be       	out	0x3f, r0	; 63
    3e16:	cd bf       	out	0x3d, r28	; 61
    3e18:	09 94       	ijmp

00003e1a <__epilogue_restores__>:
    3e1a:	2a 88       	ldd	r2, Y+18	; 0x12
    3e1c:	39 88       	ldd	r3, Y+17	; 0x11
    3e1e:	48 88       	ldd	r4, Y+16	; 0x10
    3e20:	5f 84       	ldd	r5, Y+15	; 0x0f
    3e22:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e24:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e26:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e28:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e2a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e2c:	b9 84       	ldd	r11, Y+9	; 0x09
    3e2e:	c8 84       	ldd	r12, Y+8	; 0x08
    3e30:	df 80       	ldd	r13, Y+7	; 0x07
    3e32:	ee 80       	ldd	r14, Y+6	; 0x06
    3e34:	fd 80       	ldd	r15, Y+5	; 0x05
    3e36:	0c 81       	ldd	r16, Y+4	; 0x04
    3e38:	1b 81       	ldd	r17, Y+3	; 0x03
    3e3a:	aa 81       	ldd	r26, Y+2	; 0x02
    3e3c:	b9 81       	ldd	r27, Y+1	; 0x01
    3e3e:	ce 0f       	add	r28, r30
    3e40:	d1 1d       	adc	r29, r1
    3e42:	0f b6       	in	r0, 0x3f	; 63
    3e44:	f8 94       	cli
    3e46:	de bf       	out	0x3e, r29	; 62
    3e48:	0f be       	out	0x3f, r0	; 63
    3e4a:	cd bf       	out	0x3d, r28	; 61
    3e4c:	ed 01       	movw	r28, r26
    3e4e:	08 95       	ret

00003e50 <malloc>:
    3e50:	0f 93       	push	r16
    3e52:	1f 93       	push	r17
    3e54:	cf 93       	push	r28
    3e56:	df 93       	push	r29
    3e58:	82 30       	cpi	r24, 0x02	; 2
    3e5a:	91 05       	cpc	r25, r1
    3e5c:	10 f4       	brcc	.+4      	; 0x3e62 <malloc+0x12>
    3e5e:	82 e0       	ldi	r24, 0x02	; 2
    3e60:	90 e0       	ldi	r25, 0x00	; 0
    3e62:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <__flp>
    3e66:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <__flp+0x1>
    3e6a:	20 e0       	ldi	r18, 0x00	; 0
    3e6c:	30 e0       	ldi	r19, 0x00	; 0
    3e6e:	a0 e0       	ldi	r26, 0x00	; 0
    3e70:	b0 e0       	ldi	r27, 0x00	; 0
    3e72:	30 97       	sbiw	r30, 0x00	; 0
    3e74:	19 f1       	breq	.+70     	; 0x3ebc <malloc+0x6c>
    3e76:	40 81       	ld	r20, Z
    3e78:	51 81       	ldd	r21, Z+1	; 0x01
    3e7a:	02 81       	ldd	r16, Z+2	; 0x02
    3e7c:	13 81       	ldd	r17, Z+3	; 0x03
    3e7e:	48 17       	cp	r20, r24
    3e80:	59 07       	cpc	r21, r25
    3e82:	c8 f0       	brcs	.+50     	; 0x3eb6 <malloc+0x66>
    3e84:	84 17       	cp	r24, r20
    3e86:	95 07       	cpc	r25, r21
    3e88:	69 f4       	brne	.+26     	; 0x3ea4 <malloc+0x54>
    3e8a:	10 97       	sbiw	r26, 0x00	; 0
    3e8c:	31 f0       	breq	.+12     	; 0x3e9a <malloc+0x4a>
    3e8e:	12 96       	adiw	r26, 0x02	; 2
    3e90:	0c 93       	st	X, r16
    3e92:	12 97       	sbiw	r26, 0x02	; 2
    3e94:	13 96       	adiw	r26, 0x03	; 3
    3e96:	1c 93       	st	X, r17
    3e98:	27 c0       	rjmp	.+78     	; 0x3ee8 <malloc+0x98>
    3e9a:	00 93 57 02 	sts	0x0257, r16	; 0x800257 <__flp>
    3e9e:	10 93 58 02 	sts	0x0258, r17	; 0x800258 <__flp+0x1>
    3ea2:	22 c0       	rjmp	.+68     	; 0x3ee8 <malloc+0x98>
    3ea4:	21 15       	cp	r18, r1
    3ea6:	31 05       	cpc	r19, r1
    3ea8:	19 f0       	breq	.+6      	; 0x3eb0 <malloc+0x60>
    3eaa:	42 17       	cp	r20, r18
    3eac:	53 07       	cpc	r21, r19
    3eae:	18 f4       	brcc	.+6      	; 0x3eb6 <malloc+0x66>
    3eb0:	9a 01       	movw	r18, r20
    3eb2:	bd 01       	movw	r22, r26
    3eb4:	ef 01       	movw	r28, r30
    3eb6:	df 01       	movw	r26, r30
    3eb8:	f8 01       	movw	r30, r16
    3eba:	db cf       	rjmp	.-74     	; 0x3e72 <malloc+0x22>
    3ebc:	21 15       	cp	r18, r1
    3ebe:	31 05       	cpc	r19, r1
    3ec0:	f9 f0       	breq	.+62     	; 0x3f00 <malloc+0xb0>
    3ec2:	28 1b       	sub	r18, r24
    3ec4:	39 0b       	sbc	r19, r25
    3ec6:	24 30       	cpi	r18, 0x04	; 4
    3ec8:	31 05       	cpc	r19, r1
    3eca:	80 f4       	brcc	.+32     	; 0x3eec <malloc+0x9c>
    3ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ece:	9b 81       	ldd	r25, Y+3	; 0x03
    3ed0:	61 15       	cp	r22, r1
    3ed2:	71 05       	cpc	r23, r1
    3ed4:	21 f0       	breq	.+8      	; 0x3ede <malloc+0x8e>
    3ed6:	fb 01       	movw	r30, r22
    3ed8:	93 83       	std	Z+3, r25	; 0x03
    3eda:	82 83       	std	Z+2, r24	; 0x02
    3edc:	04 c0       	rjmp	.+8      	; 0x3ee6 <malloc+0x96>
    3ede:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <__flp+0x1>
    3ee2:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <__flp>
    3ee6:	fe 01       	movw	r30, r28
    3ee8:	32 96       	adiw	r30, 0x02	; 2
    3eea:	44 c0       	rjmp	.+136    	; 0x3f74 <malloc+0x124>
    3eec:	fe 01       	movw	r30, r28
    3eee:	e2 0f       	add	r30, r18
    3ef0:	f3 1f       	adc	r31, r19
    3ef2:	81 93       	st	Z+, r24
    3ef4:	91 93       	st	Z+, r25
    3ef6:	22 50       	subi	r18, 0x02	; 2
    3ef8:	31 09       	sbc	r19, r1
    3efa:	39 83       	std	Y+1, r19	; 0x01
    3efc:	28 83       	st	Y, r18
    3efe:	3a c0       	rjmp	.+116    	; 0x3f74 <malloc+0x124>
    3f00:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__brkval>
    3f04:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__brkval+0x1>
    3f08:	23 2b       	or	r18, r19
    3f0a:	41 f4       	brne	.+16     	; 0x3f1c <malloc+0xcc>
    3f0c:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3f10:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3f14:	30 93 56 02 	sts	0x0256, r19	; 0x800256 <__brkval+0x1>
    3f18:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <__brkval>
    3f1c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3f20:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3f24:	21 15       	cp	r18, r1
    3f26:	31 05       	cpc	r19, r1
    3f28:	41 f4       	brne	.+16     	; 0x3f3a <malloc+0xea>
    3f2a:	2d b7       	in	r18, 0x3d	; 61
    3f2c:	3e b7       	in	r19, 0x3e	; 62
    3f2e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3f32:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3f36:	24 1b       	sub	r18, r20
    3f38:	35 0b       	sbc	r19, r21
    3f3a:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <__brkval>
    3f3e:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <__brkval+0x1>
    3f42:	e2 17       	cp	r30, r18
    3f44:	f3 07       	cpc	r31, r19
    3f46:	a0 f4       	brcc	.+40     	; 0x3f70 <malloc+0x120>
    3f48:	2e 1b       	sub	r18, r30
    3f4a:	3f 0b       	sbc	r19, r31
    3f4c:	28 17       	cp	r18, r24
    3f4e:	39 07       	cpc	r19, r25
    3f50:	78 f0       	brcs	.+30     	; 0x3f70 <malloc+0x120>
    3f52:	ac 01       	movw	r20, r24
    3f54:	4e 5f       	subi	r20, 0xFE	; 254
    3f56:	5f 4f       	sbci	r21, 0xFF	; 255
    3f58:	24 17       	cp	r18, r20
    3f5a:	35 07       	cpc	r19, r21
    3f5c:	48 f0       	brcs	.+18     	; 0x3f70 <malloc+0x120>
    3f5e:	4e 0f       	add	r20, r30
    3f60:	5f 1f       	adc	r21, r31
    3f62:	50 93 56 02 	sts	0x0256, r21	; 0x800256 <__brkval+0x1>
    3f66:	40 93 55 02 	sts	0x0255, r20	; 0x800255 <__brkval>
    3f6a:	81 93       	st	Z+, r24
    3f6c:	91 93       	st	Z+, r25
    3f6e:	02 c0       	rjmp	.+4      	; 0x3f74 <malloc+0x124>
    3f70:	e0 e0       	ldi	r30, 0x00	; 0
    3f72:	f0 e0       	ldi	r31, 0x00	; 0
    3f74:	cf 01       	movw	r24, r30
    3f76:	df 91       	pop	r29
    3f78:	cf 91       	pop	r28
    3f7a:	1f 91       	pop	r17
    3f7c:	0f 91       	pop	r16
    3f7e:	08 95       	ret

00003f80 <free>:
    3f80:	cf 93       	push	r28
    3f82:	df 93       	push	r29
    3f84:	00 97       	sbiw	r24, 0x00	; 0
    3f86:	09 f4       	brne	.+2      	; 0x3f8a <free+0xa>
    3f88:	81 c0       	rjmp	.+258    	; 0x408c <free+0x10c>
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	32 97       	sbiw	r30, 0x02	; 2
    3f8e:	13 82       	std	Z+3, r1	; 0x03
    3f90:	12 82       	std	Z+2, r1	; 0x02
    3f92:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <__flp>
    3f96:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <__flp+0x1>
    3f9a:	10 97       	sbiw	r26, 0x00	; 0
    3f9c:	81 f4       	brne	.+32     	; 0x3fbe <free+0x3e>
    3f9e:	20 81       	ld	r18, Z
    3fa0:	31 81       	ldd	r19, Z+1	; 0x01
    3fa2:	82 0f       	add	r24, r18
    3fa4:	93 1f       	adc	r25, r19
    3fa6:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__brkval>
    3faa:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__brkval+0x1>
    3fae:	28 17       	cp	r18, r24
    3fb0:	39 07       	cpc	r19, r25
    3fb2:	51 f5       	brne	.+84     	; 0x4008 <free+0x88>
    3fb4:	f0 93 56 02 	sts	0x0256, r31	; 0x800256 <__brkval+0x1>
    3fb8:	e0 93 55 02 	sts	0x0255, r30	; 0x800255 <__brkval>
    3fbc:	67 c0       	rjmp	.+206    	; 0x408c <free+0x10c>
    3fbe:	ed 01       	movw	r28, r26
    3fc0:	20 e0       	ldi	r18, 0x00	; 0
    3fc2:	30 e0       	ldi	r19, 0x00	; 0
    3fc4:	ce 17       	cp	r28, r30
    3fc6:	df 07       	cpc	r29, r31
    3fc8:	40 f4       	brcc	.+16     	; 0x3fda <free+0x5a>
    3fca:	4a 81       	ldd	r20, Y+2	; 0x02
    3fcc:	5b 81       	ldd	r21, Y+3	; 0x03
    3fce:	9e 01       	movw	r18, r28
    3fd0:	41 15       	cp	r20, r1
    3fd2:	51 05       	cpc	r21, r1
    3fd4:	f1 f0       	breq	.+60     	; 0x4012 <free+0x92>
    3fd6:	ea 01       	movw	r28, r20
    3fd8:	f5 cf       	rjmp	.-22     	; 0x3fc4 <free+0x44>
    3fda:	d3 83       	std	Z+3, r29	; 0x03
    3fdc:	c2 83       	std	Z+2, r28	; 0x02
    3fde:	40 81       	ld	r20, Z
    3fe0:	51 81       	ldd	r21, Z+1	; 0x01
    3fe2:	84 0f       	add	r24, r20
    3fe4:	95 1f       	adc	r25, r21
    3fe6:	c8 17       	cp	r28, r24
    3fe8:	d9 07       	cpc	r29, r25
    3fea:	59 f4       	brne	.+22     	; 0x4002 <free+0x82>
    3fec:	88 81       	ld	r24, Y
    3fee:	99 81       	ldd	r25, Y+1	; 0x01
    3ff0:	84 0f       	add	r24, r20
    3ff2:	95 1f       	adc	r25, r21
    3ff4:	02 96       	adiw	r24, 0x02	; 2
    3ff6:	91 83       	std	Z+1, r25	; 0x01
    3ff8:	80 83       	st	Z, r24
    3ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    3ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    3ffe:	93 83       	std	Z+3, r25	; 0x03
    4000:	82 83       	std	Z+2, r24	; 0x02
    4002:	21 15       	cp	r18, r1
    4004:	31 05       	cpc	r19, r1
    4006:	29 f4       	brne	.+10     	; 0x4012 <free+0x92>
    4008:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <__flp+0x1>
    400c:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <__flp>
    4010:	3d c0       	rjmp	.+122    	; 0x408c <free+0x10c>
    4012:	e9 01       	movw	r28, r18
    4014:	fb 83       	std	Y+3, r31	; 0x03
    4016:	ea 83       	std	Y+2, r30	; 0x02
    4018:	49 91       	ld	r20, Y+
    401a:	59 91       	ld	r21, Y+
    401c:	c4 0f       	add	r28, r20
    401e:	d5 1f       	adc	r29, r21
    4020:	ec 17       	cp	r30, r28
    4022:	fd 07       	cpc	r31, r29
    4024:	61 f4       	brne	.+24     	; 0x403e <free+0xbe>
    4026:	80 81       	ld	r24, Z
    4028:	91 81       	ldd	r25, Z+1	; 0x01
    402a:	84 0f       	add	r24, r20
    402c:	95 1f       	adc	r25, r21
    402e:	02 96       	adiw	r24, 0x02	; 2
    4030:	e9 01       	movw	r28, r18
    4032:	99 83       	std	Y+1, r25	; 0x01
    4034:	88 83       	st	Y, r24
    4036:	82 81       	ldd	r24, Z+2	; 0x02
    4038:	93 81       	ldd	r25, Z+3	; 0x03
    403a:	9b 83       	std	Y+3, r25	; 0x03
    403c:	8a 83       	std	Y+2, r24	; 0x02
    403e:	e0 e0       	ldi	r30, 0x00	; 0
    4040:	f0 e0       	ldi	r31, 0x00	; 0
    4042:	12 96       	adiw	r26, 0x02	; 2
    4044:	8d 91       	ld	r24, X+
    4046:	9c 91       	ld	r25, X
    4048:	13 97       	sbiw	r26, 0x03	; 3
    404a:	00 97       	sbiw	r24, 0x00	; 0
    404c:	19 f0       	breq	.+6      	; 0x4054 <free+0xd4>
    404e:	fd 01       	movw	r30, r26
    4050:	dc 01       	movw	r26, r24
    4052:	f7 cf       	rjmp	.-18     	; 0x4042 <free+0xc2>
    4054:	8d 91       	ld	r24, X+
    4056:	9c 91       	ld	r25, X
    4058:	11 97       	sbiw	r26, 0x01	; 1
    405a:	9d 01       	movw	r18, r26
    405c:	2e 5f       	subi	r18, 0xFE	; 254
    405e:	3f 4f       	sbci	r19, 0xFF	; 255
    4060:	82 0f       	add	r24, r18
    4062:	93 1f       	adc	r25, r19
    4064:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__brkval>
    4068:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__brkval+0x1>
    406c:	28 17       	cp	r18, r24
    406e:	39 07       	cpc	r19, r25
    4070:	69 f4       	brne	.+26     	; 0x408c <free+0x10c>
    4072:	30 97       	sbiw	r30, 0x00	; 0
    4074:	29 f4       	brne	.+10     	; 0x4080 <free+0x100>
    4076:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <__flp+0x1>
    407a:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <__flp>
    407e:	02 c0       	rjmp	.+4      	; 0x4084 <free+0x104>
    4080:	13 82       	std	Z+3, r1	; 0x03
    4082:	12 82       	std	Z+2, r1	; 0x02
    4084:	b0 93 56 02 	sts	0x0256, r27	; 0x800256 <__brkval+0x1>
    4088:	a0 93 55 02 	sts	0x0255, r26	; 0x800255 <__brkval>
    408c:	df 91       	pop	r29
    408e:	cf 91       	pop	r28
    4090:	08 95       	ret

00004092 <__ftoa_engine>:
    4092:	28 30       	cpi	r18, 0x08	; 8
    4094:	08 f0       	brcs	.+2      	; 0x4098 <__ftoa_engine+0x6>
    4096:	27 e0       	ldi	r18, 0x07	; 7
    4098:	33 27       	eor	r19, r19
    409a:	da 01       	movw	r26, r20
    409c:	99 0f       	add	r25, r25
    409e:	31 1d       	adc	r19, r1
    40a0:	87 fd       	sbrc	r24, 7
    40a2:	91 60       	ori	r25, 0x01	; 1
    40a4:	00 96       	adiw	r24, 0x00	; 0
    40a6:	61 05       	cpc	r22, r1
    40a8:	71 05       	cpc	r23, r1
    40aa:	39 f4       	brne	.+14     	; 0x40ba <__ftoa_engine+0x28>
    40ac:	32 60       	ori	r19, 0x02	; 2
    40ae:	2e 5f       	subi	r18, 0xFE	; 254
    40b0:	3d 93       	st	X+, r19
    40b2:	30 e3       	ldi	r19, 0x30	; 48
    40b4:	2a 95       	dec	r18
    40b6:	e1 f7       	brne	.-8      	; 0x40b0 <__ftoa_engine+0x1e>
    40b8:	08 95       	ret
    40ba:	9f 3f       	cpi	r25, 0xFF	; 255
    40bc:	30 f0       	brcs	.+12     	; 0x40ca <__ftoa_engine+0x38>
    40be:	80 38       	cpi	r24, 0x80	; 128
    40c0:	71 05       	cpc	r23, r1
    40c2:	61 05       	cpc	r22, r1
    40c4:	09 f0       	breq	.+2      	; 0x40c8 <__ftoa_engine+0x36>
    40c6:	3c 5f       	subi	r19, 0xFC	; 252
    40c8:	3c 5f       	subi	r19, 0xFC	; 252
    40ca:	3d 93       	st	X+, r19
    40cc:	91 30       	cpi	r25, 0x01	; 1
    40ce:	08 f0       	brcs	.+2      	; 0x40d2 <__ftoa_engine+0x40>
    40d0:	80 68       	ori	r24, 0x80	; 128
    40d2:	91 1d       	adc	r25, r1
    40d4:	df 93       	push	r29
    40d6:	cf 93       	push	r28
    40d8:	1f 93       	push	r17
    40da:	0f 93       	push	r16
    40dc:	ff 92       	push	r15
    40de:	ef 92       	push	r14
    40e0:	19 2f       	mov	r17, r25
    40e2:	98 7f       	andi	r25, 0xF8	; 248
    40e4:	96 95       	lsr	r25
    40e6:	e9 2f       	mov	r30, r25
    40e8:	96 95       	lsr	r25
    40ea:	96 95       	lsr	r25
    40ec:	e9 0f       	add	r30, r25
    40ee:	ff 27       	eor	r31, r31
    40f0:	e8 5b       	subi	r30, 0xB8	; 184
    40f2:	fe 4f       	sbci	r31, 0xFE	; 254
    40f4:	99 27       	eor	r25, r25
    40f6:	33 27       	eor	r19, r19
    40f8:	ee 24       	eor	r14, r14
    40fa:	ff 24       	eor	r15, r15
    40fc:	a7 01       	movw	r20, r14
    40fe:	e7 01       	movw	r28, r14
    4100:	05 90       	lpm	r0, Z+
    4102:	08 94       	sec
    4104:	07 94       	ror	r0
    4106:	28 f4       	brcc	.+10     	; 0x4112 <__ftoa_engine+0x80>
    4108:	36 0f       	add	r19, r22
    410a:	e7 1e       	adc	r14, r23
    410c:	f8 1e       	adc	r15, r24
    410e:	49 1f       	adc	r20, r25
    4110:	51 1d       	adc	r21, r1
    4112:	66 0f       	add	r22, r22
    4114:	77 1f       	adc	r23, r23
    4116:	88 1f       	adc	r24, r24
    4118:	99 1f       	adc	r25, r25
    411a:	06 94       	lsr	r0
    411c:	a1 f7       	brne	.-24     	; 0x4106 <__ftoa_engine+0x74>
    411e:	05 90       	lpm	r0, Z+
    4120:	07 94       	ror	r0
    4122:	28 f4       	brcc	.+10     	; 0x412e <__ftoa_engine+0x9c>
    4124:	e7 0e       	add	r14, r23
    4126:	f8 1e       	adc	r15, r24
    4128:	49 1f       	adc	r20, r25
    412a:	56 1f       	adc	r21, r22
    412c:	c1 1d       	adc	r28, r1
    412e:	77 0f       	add	r23, r23
    4130:	88 1f       	adc	r24, r24
    4132:	99 1f       	adc	r25, r25
    4134:	66 1f       	adc	r22, r22
    4136:	06 94       	lsr	r0
    4138:	a1 f7       	brne	.-24     	; 0x4122 <__ftoa_engine+0x90>
    413a:	05 90       	lpm	r0, Z+
    413c:	07 94       	ror	r0
    413e:	28 f4       	brcc	.+10     	; 0x414a <__ftoa_engine+0xb8>
    4140:	f8 0e       	add	r15, r24
    4142:	49 1f       	adc	r20, r25
    4144:	56 1f       	adc	r21, r22
    4146:	c7 1f       	adc	r28, r23
    4148:	d1 1d       	adc	r29, r1
    414a:	88 0f       	add	r24, r24
    414c:	99 1f       	adc	r25, r25
    414e:	66 1f       	adc	r22, r22
    4150:	77 1f       	adc	r23, r23
    4152:	06 94       	lsr	r0
    4154:	a1 f7       	brne	.-24     	; 0x413e <__ftoa_engine+0xac>
    4156:	05 90       	lpm	r0, Z+
    4158:	07 94       	ror	r0
    415a:	20 f4       	brcc	.+8      	; 0x4164 <__ftoa_engine+0xd2>
    415c:	49 0f       	add	r20, r25
    415e:	56 1f       	adc	r21, r22
    4160:	c7 1f       	adc	r28, r23
    4162:	d8 1f       	adc	r29, r24
    4164:	99 0f       	add	r25, r25
    4166:	66 1f       	adc	r22, r22
    4168:	77 1f       	adc	r23, r23
    416a:	88 1f       	adc	r24, r24
    416c:	06 94       	lsr	r0
    416e:	a9 f7       	brne	.-22     	; 0x415a <__ftoa_engine+0xc8>
    4170:	84 91       	lpm	r24, Z
    4172:	10 95       	com	r17
    4174:	17 70       	andi	r17, 0x07	; 7
    4176:	41 f0       	breq	.+16     	; 0x4188 <__ftoa_engine+0xf6>
    4178:	d6 95       	lsr	r29
    417a:	c7 95       	ror	r28
    417c:	57 95       	ror	r21
    417e:	47 95       	ror	r20
    4180:	f7 94       	ror	r15
    4182:	e7 94       	ror	r14
    4184:	1a 95       	dec	r17
    4186:	c1 f7       	brne	.-16     	; 0x4178 <__ftoa_engine+0xe6>
    4188:	ee ee       	ldi	r30, 0xEE	; 238
    418a:	f0 e0       	ldi	r31, 0x00	; 0
    418c:	68 94       	set
    418e:	15 90       	lpm	r1, Z+
    4190:	15 91       	lpm	r17, Z+
    4192:	35 91       	lpm	r19, Z+
    4194:	65 91       	lpm	r22, Z+
    4196:	95 91       	lpm	r25, Z+
    4198:	05 90       	lpm	r0, Z+
    419a:	7f e2       	ldi	r23, 0x2F	; 47
    419c:	73 95       	inc	r23
    419e:	e1 18       	sub	r14, r1
    41a0:	f1 0a       	sbc	r15, r17
    41a2:	43 0b       	sbc	r20, r19
    41a4:	56 0b       	sbc	r21, r22
    41a6:	c9 0b       	sbc	r28, r25
    41a8:	d0 09       	sbc	r29, r0
    41aa:	c0 f7       	brcc	.-16     	; 0x419c <__ftoa_engine+0x10a>
    41ac:	e1 0c       	add	r14, r1
    41ae:	f1 1e       	adc	r15, r17
    41b0:	43 1f       	adc	r20, r19
    41b2:	56 1f       	adc	r21, r22
    41b4:	c9 1f       	adc	r28, r25
    41b6:	d0 1d       	adc	r29, r0
    41b8:	7e f4       	brtc	.+30     	; 0x41d8 <__ftoa_engine+0x146>
    41ba:	70 33       	cpi	r23, 0x30	; 48
    41bc:	11 f4       	brne	.+4      	; 0x41c2 <__ftoa_engine+0x130>
    41be:	8a 95       	dec	r24
    41c0:	e6 cf       	rjmp	.-52     	; 0x418e <__ftoa_engine+0xfc>
    41c2:	e8 94       	clt
    41c4:	01 50       	subi	r16, 0x01	; 1
    41c6:	30 f0       	brcs	.+12     	; 0x41d4 <__ftoa_engine+0x142>
    41c8:	08 0f       	add	r16, r24
    41ca:	0a f4       	brpl	.+2      	; 0x41ce <__ftoa_engine+0x13c>
    41cc:	00 27       	eor	r16, r16
    41ce:	02 17       	cp	r16, r18
    41d0:	08 f4       	brcc	.+2      	; 0x41d4 <__ftoa_engine+0x142>
    41d2:	20 2f       	mov	r18, r16
    41d4:	23 95       	inc	r18
    41d6:	02 2f       	mov	r16, r18
    41d8:	7a 33       	cpi	r23, 0x3A	; 58
    41da:	28 f0       	brcs	.+10     	; 0x41e6 <__ftoa_engine+0x154>
    41dc:	79 e3       	ldi	r23, 0x39	; 57
    41de:	7d 93       	st	X+, r23
    41e0:	2a 95       	dec	r18
    41e2:	e9 f7       	brne	.-6      	; 0x41de <__ftoa_engine+0x14c>
    41e4:	10 c0       	rjmp	.+32     	; 0x4206 <__ftoa_engine+0x174>
    41e6:	7d 93       	st	X+, r23
    41e8:	2a 95       	dec	r18
    41ea:	89 f6       	brne	.-94     	; 0x418e <__ftoa_engine+0xfc>
    41ec:	06 94       	lsr	r0
    41ee:	97 95       	ror	r25
    41f0:	67 95       	ror	r22
    41f2:	37 95       	ror	r19
    41f4:	17 95       	ror	r17
    41f6:	17 94       	ror	r1
    41f8:	e1 18       	sub	r14, r1
    41fa:	f1 0a       	sbc	r15, r17
    41fc:	43 0b       	sbc	r20, r19
    41fe:	56 0b       	sbc	r21, r22
    4200:	c9 0b       	sbc	r28, r25
    4202:	d0 09       	sbc	r29, r0
    4204:	98 f0       	brcs	.+38     	; 0x422c <__ftoa_engine+0x19a>
    4206:	23 95       	inc	r18
    4208:	7e 91       	ld	r23, -X
    420a:	73 95       	inc	r23
    420c:	7a 33       	cpi	r23, 0x3A	; 58
    420e:	08 f0       	brcs	.+2      	; 0x4212 <__ftoa_engine+0x180>
    4210:	70 e3       	ldi	r23, 0x30	; 48
    4212:	7c 93       	st	X, r23
    4214:	20 13       	cpse	r18, r16
    4216:	b8 f7       	brcc	.-18     	; 0x4206 <__ftoa_engine+0x174>
    4218:	7e 91       	ld	r23, -X
    421a:	70 61       	ori	r23, 0x10	; 16
    421c:	7d 93       	st	X+, r23
    421e:	30 f0       	brcs	.+12     	; 0x422c <__ftoa_engine+0x19a>
    4220:	83 95       	inc	r24
    4222:	71 e3       	ldi	r23, 0x31	; 49
    4224:	7d 93       	st	X+, r23
    4226:	70 e3       	ldi	r23, 0x30	; 48
    4228:	2a 95       	dec	r18
    422a:	e1 f7       	brne	.-8      	; 0x4224 <__ftoa_engine+0x192>
    422c:	11 24       	eor	r1, r1
    422e:	ef 90       	pop	r14
    4230:	ff 90       	pop	r15
    4232:	0f 91       	pop	r16
    4234:	1f 91       	pop	r17
    4236:	cf 91       	pop	r28
    4238:	df 91       	pop	r29
    423a:	99 27       	eor	r25, r25
    423c:	87 fd       	sbrc	r24, 7
    423e:	90 95       	com	r25
    4240:	08 95       	ret

00004242 <strnlen_P>:
    4242:	fc 01       	movw	r30, r24
    4244:	05 90       	lpm	r0, Z+
    4246:	61 50       	subi	r22, 0x01	; 1
    4248:	70 40       	sbci	r23, 0x00	; 0
    424a:	01 10       	cpse	r0, r1
    424c:	d8 f7       	brcc	.-10     	; 0x4244 <strnlen_P+0x2>
    424e:	80 95       	com	r24
    4250:	90 95       	com	r25
    4252:	8e 0f       	add	r24, r30
    4254:	9f 1f       	adc	r25, r31
    4256:	08 95       	ret

00004258 <memcpy>:
    4258:	fb 01       	movw	r30, r22
    425a:	dc 01       	movw	r26, r24
    425c:	02 c0       	rjmp	.+4      	; 0x4262 <memcpy+0xa>
    425e:	01 90       	ld	r0, Z+
    4260:	0d 92       	st	X+, r0
    4262:	41 50       	subi	r20, 0x01	; 1
    4264:	50 40       	sbci	r21, 0x00	; 0
    4266:	d8 f7       	brcc	.-10     	; 0x425e <memcpy+0x6>
    4268:	08 95       	ret

0000426a <memset>:
    426a:	dc 01       	movw	r26, r24
    426c:	01 c0       	rjmp	.+2      	; 0x4270 <memset+0x6>
    426e:	6d 93       	st	X+, r22
    4270:	41 50       	subi	r20, 0x01	; 1
    4272:	50 40       	sbci	r21, 0x00	; 0
    4274:	e0 f7       	brcc	.-8      	; 0x426e <memset+0x4>
    4276:	08 95       	ret

00004278 <strnlen>:
    4278:	fc 01       	movw	r30, r24
    427a:	61 50       	subi	r22, 0x01	; 1
    427c:	70 40       	sbci	r23, 0x00	; 0
    427e:	01 90       	ld	r0, Z+
    4280:	01 10       	cpse	r0, r1
    4282:	d8 f7       	brcc	.-10     	; 0x427a <strnlen+0x2>
    4284:	80 95       	com	r24
    4286:	90 95       	com	r25
    4288:	8e 0f       	add	r24, r30
    428a:	9f 1f       	adc	r25, r31
    428c:	08 95       	ret

0000428e <fputc>:
    428e:	0f 93       	push	r16
    4290:	1f 93       	push	r17
    4292:	cf 93       	push	r28
    4294:	df 93       	push	r29
    4296:	fb 01       	movw	r30, r22
    4298:	23 81       	ldd	r18, Z+3	; 0x03
    429a:	21 fd       	sbrc	r18, 1
    429c:	03 c0       	rjmp	.+6      	; 0x42a4 <fputc+0x16>
    429e:	8f ef       	ldi	r24, 0xFF	; 255
    42a0:	9f ef       	ldi	r25, 0xFF	; 255
    42a2:	2c c0       	rjmp	.+88     	; 0x42fc <fputc+0x6e>
    42a4:	22 ff       	sbrs	r18, 2
    42a6:	16 c0       	rjmp	.+44     	; 0x42d4 <fputc+0x46>
    42a8:	46 81       	ldd	r20, Z+6	; 0x06
    42aa:	57 81       	ldd	r21, Z+7	; 0x07
    42ac:	24 81       	ldd	r18, Z+4	; 0x04
    42ae:	35 81       	ldd	r19, Z+5	; 0x05
    42b0:	42 17       	cp	r20, r18
    42b2:	53 07       	cpc	r21, r19
    42b4:	44 f4       	brge	.+16     	; 0x42c6 <fputc+0x38>
    42b6:	a0 81       	ld	r26, Z
    42b8:	b1 81       	ldd	r27, Z+1	; 0x01
    42ba:	9d 01       	movw	r18, r26
    42bc:	2f 5f       	subi	r18, 0xFF	; 255
    42be:	3f 4f       	sbci	r19, 0xFF	; 255
    42c0:	31 83       	std	Z+1, r19	; 0x01
    42c2:	20 83       	st	Z, r18
    42c4:	8c 93       	st	X, r24
    42c6:	26 81       	ldd	r18, Z+6	; 0x06
    42c8:	37 81       	ldd	r19, Z+7	; 0x07
    42ca:	2f 5f       	subi	r18, 0xFF	; 255
    42cc:	3f 4f       	sbci	r19, 0xFF	; 255
    42ce:	37 83       	std	Z+7, r19	; 0x07
    42d0:	26 83       	std	Z+6, r18	; 0x06
    42d2:	14 c0       	rjmp	.+40     	; 0x42fc <fputc+0x6e>
    42d4:	8b 01       	movw	r16, r22
    42d6:	ec 01       	movw	r28, r24
    42d8:	fb 01       	movw	r30, r22
    42da:	00 84       	ldd	r0, Z+8	; 0x08
    42dc:	f1 85       	ldd	r31, Z+9	; 0x09
    42de:	e0 2d       	mov	r30, r0
    42e0:	09 95       	icall
    42e2:	89 2b       	or	r24, r25
    42e4:	e1 f6       	brne	.-72     	; 0x429e <fputc+0x10>
    42e6:	d8 01       	movw	r26, r16
    42e8:	16 96       	adiw	r26, 0x06	; 6
    42ea:	8d 91       	ld	r24, X+
    42ec:	9c 91       	ld	r25, X
    42ee:	17 97       	sbiw	r26, 0x07	; 7
    42f0:	01 96       	adiw	r24, 0x01	; 1
    42f2:	17 96       	adiw	r26, 0x07	; 7
    42f4:	9c 93       	st	X, r25
    42f6:	8e 93       	st	-X, r24
    42f8:	16 97       	sbiw	r26, 0x06	; 6
    42fa:	ce 01       	movw	r24, r28
    42fc:	df 91       	pop	r29
    42fe:	cf 91       	pop	r28
    4300:	1f 91       	pop	r17
    4302:	0f 91       	pop	r16
    4304:	08 95       	ret

00004306 <sprintf>:
    4306:	ae e0       	ldi	r26, 0x0E	; 14
    4308:	b0 e0       	ldi	r27, 0x00	; 0
    430a:	e9 e8       	ldi	r30, 0x89	; 137
    430c:	f1 e2       	ldi	r31, 0x21	; 33
    430e:	0c 94 ff 1e 	jmp	0x3dfe	; 0x3dfe <__prologue_saves__+0x1c>
    4312:	0d 89       	ldd	r16, Y+21	; 0x15
    4314:	1e 89       	ldd	r17, Y+22	; 0x16
    4316:	86 e0       	ldi	r24, 0x06	; 6
    4318:	8c 83       	std	Y+4, r24	; 0x04
    431a:	1a 83       	std	Y+2, r17	; 0x02
    431c:	09 83       	std	Y+1, r16	; 0x01
    431e:	8f ef       	ldi	r24, 0xFF	; 255
    4320:	9f e7       	ldi	r25, 0x7F	; 127
    4322:	9e 83       	std	Y+6, r25	; 0x06
    4324:	8d 83       	std	Y+5, r24	; 0x05
    4326:	ae 01       	movw	r20, r28
    4328:	47 5e       	subi	r20, 0xE7	; 231
    432a:	5f 4f       	sbci	r21, 0xFF	; 255
    432c:	6f 89       	ldd	r22, Y+23	; 0x17
    432e:	78 8d       	ldd	r23, Y+24	; 0x18
    4330:	ce 01       	movw	r24, r28
    4332:	01 96       	adiw	r24, 0x01	; 1
    4334:	0e 94 6e 1b 	call	0x36dc	; 0x36dc <vfprintf>
    4338:	ef 81       	ldd	r30, Y+7	; 0x07
    433a:	f8 85       	ldd	r31, Y+8	; 0x08
    433c:	e0 0f       	add	r30, r16
    433e:	f1 1f       	adc	r31, r17
    4340:	10 82       	st	Z, r1
    4342:	2e 96       	adiw	r28, 0x0e	; 14
    4344:	e4 e0       	ldi	r30, 0x04	; 4
    4346:	0c 94 1b 1f 	jmp	0x3e36	; 0x3e36 <__epilogue_restores__+0x1c>

0000434a <__ultoa_invert>:
    434a:	fa 01       	movw	r30, r20
    434c:	aa 27       	eor	r26, r26
    434e:	28 30       	cpi	r18, 0x08	; 8
    4350:	51 f1       	breq	.+84     	; 0x43a6 <__ultoa_invert+0x5c>
    4352:	20 31       	cpi	r18, 0x10	; 16
    4354:	81 f1       	breq	.+96     	; 0x43b6 <__ultoa_invert+0x6c>
    4356:	e8 94       	clt
    4358:	6f 93       	push	r22
    435a:	6e 7f       	andi	r22, 0xFE	; 254
    435c:	6e 5f       	subi	r22, 0xFE	; 254
    435e:	7f 4f       	sbci	r23, 0xFF	; 255
    4360:	8f 4f       	sbci	r24, 0xFF	; 255
    4362:	9f 4f       	sbci	r25, 0xFF	; 255
    4364:	af 4f       	sbci	r26, 0xFF	; 255
    4366:	b1 e0       	ldi	r27, 0x01	; 1
    4368:	3e d0       	rcall	.+124    	; 0x43e6 <__ultoa_invert+0x9c>
    436a:	b4 e0       	ldi	r27, 0x04	; 4
    436c:	3c d0       	rcall	.+120    	; 0x43e6 <__ultoa_invert+0x9c>
    436e:	67 0f       	add	r22, r23
    4370:	78 1f       	adc	r23, r24
    4372:	89 1f       	adc	r24, r25
    4374:	9a 1f       	adc	r25, r26
    4376:	a1 1d       	adc	r26, r1
    4378:	68 0f       	add	r22, r24
    437a:	79 1f       	adc	r23, r25
    437c:	8a 1f       	adc	r24, r26
    437e:	91 1d       	adc	r25, r1
    4380:	a1 1d       	adc	r26, r1
    4382:	6a 0f       	add	r22, r26
    4384:	71 1d       	adc	r23, r1
    4386:	81 1d       	adc	r24, r1
    4388:	91 1d       	adc	r25, r1
    438a:	a1 1d       	adc	r26, r1
    438c:	20 d0       	rcall	.+64     	; 0x43ce <__ultoa_invert+0x84>
    438e:	09 f4       	brne	.+2      	; 0x4392 <__ultoa_invert+0x48>
    4390:	68 94       	set
    4392:	3f 91       	pop	r19
    4394:	2a e0       	ldi	r18, 0x0A	; 10
    4396:	26 9f       	mul	r18, r22
    4398:	11 24       	eor	r1, r1
    439a:	30 19       	sub	r19, r0
    439c:	30 5d       	subi	r19, 0xD0	; 208
    439e:	31 93       	st	Z+, r19
    43a0:	de f6       	brtc	.-74     	; 0x4358 <__ultoa_invert+0xe>
    43a2:	cf 01       	movw	r24, r30
    43a4:	08 95       	ret
    43a6:	46 2f       	mov	r20, r22
    43a8:	47 70       	andi	r20, 0x07	; 7
    43aa:	40 5d       	subi	r20, 0xD0	; 208
    43ac:	41 93       	st	Z+, r20
    43ae:	b3 e0       	ldi	r27, 0x03	; 3
    43b0:	0f d0       	rcall	.+30     	; 0x43d0 <__ultoa_invert+0x86>
    43b2:	c9 f7       	brne	.-14     	; 0x43a6 <__ultoa_invert+0x5c>
    43b4:	f6 cf       	rjmp	.-20     	; 0x43a2 <__ultoa_invert+0x58>
    43b6:	46 2f       	mov	r20, r22
    43b8:	4f 70       	andi	r20, 0x0F	; 15
    43ba:	40 5d       	subi	r20, 0xD0	; 208
    43bc:	4a 33       	cpi	r20, 0x3A	; 58
    43be:	18 f0       	brcs	.+6      	; 0x43c6 <__ultoa_invert+0x7c>
    43c0:	49 5d       	subi	r20, 0xD9	; 217
    43c2:	31 fd       	sbrc	r19, 1
    43c4:	40 52       	subi	r20, 0x20	; 32
    43c6:	41 93       	st	Z+, r20
    43c8:	02 d0       	rcall	.+4      	; 0x43ce <__ultoa_invert+0x84>
    43ca:	a9 f7       	brne	.-22     	; 0x43b6 <__ultoa_invert+0x6c>
    43cc:	ea cf       	rjmp	.-44     	; 0x43a2 <__ultoa_invert+0x58>
    43ce:	b4 e0       	ldi	r27, 0x04	; 4
    43d0:	a6 95       	lsr	r26
    43d2:	97 95       	ror	r25
    43d4:	87 95       	ror	r24
    43d6:	77 95       	ror	r23
    43d8:	67 95       	ror	r22
    43da:	ba 95       	dec	r27
    43dc:	c9 f7       	brne	.-14     	; 0x43d0 <__ultoa_invert+0x86>
    43de:	00 97       	sbiw	r24, 0x00	; 0
    43e0:	61 05       	cpc	r22, r1
    43e2:	71 05       	cpc	r23, r1
    43e4:	08 95       	ret
    43e6:	9b 01       	movw	r18, r22
    43e8:	ac 01       	movw	r20, r24
    43ea:	0a 2e       	mov	r0, r26
    43ec:	06 94       	lsr	r0
    43ee:	57 95       	ror	r21
    43f0:	47 95       	ror	r20
    43f2:	37 95       	ror	r19
    43f4:	27 95       	ror	r18
    43f6:	ba 95       	dec	r27
    43f8:	c9 f7       	brne	.-14     	; 0x43ec <__ultoa_invert+0xa2>
    43fa:	62 0f       	add	r22, r18
    43fc:	73 1f       	adc	r23, r19
    43fe:	84 1f       	adc	r24, r20
    4400:	95 1f       	adc	r25, r21
    4402:	a0 1d       	adc	r26, r0
    4404:	08 95       	ret

00004406 <_exit>:
    4406:	f8 94       	cli

00004408 <__stop_program>:
    4408:	ff cf       	rjmp	.-2      	; 0x4408 <__stop_program>
