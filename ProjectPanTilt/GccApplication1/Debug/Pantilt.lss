
Pantilt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005c  00800100  000043c4  00004458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fd  0080015c  0080015c  000044b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000044b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004510  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b8  00000000  00000000  00004550  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e7d  00000000  00000000  00004b08  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ae9  00000000  00000000  0000b985  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c2e  00000000  00000000  0000d46e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011f0  00000000  00000000  0001109c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fe5  00000000  00000000  0001228c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000653e  00000000  00000000  00014271  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0001a7af  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      18:	0c 94 dd 0c 	jmp	0x19ba	; 0x19ba <__vector_6>
      1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      68:	85 16       	cp	r8, r21
      6a:	85 16       	cp	r8, r21
      6c:	85 16       	cp	r8, r21
      6e:	b5 16       	cp	r11, r21
      70:	bd 16       	cp	r11, r29
      72:	cd 16       	cp	r12, r29
      74:	85 16       	cp	r8, r21
      76:	85 16       	cp	r8, r21
      78:	b5 16       	cp	r11, r21
      7a:	bd 16       	cp	r11, r29
      7c:	03 6e       	ori	r16, 0xE3	; 227
      7e:	db 36       	cpi	r29, 0x6B	; 107
      80:	3d 9a       	sbi	0x07, 5	; 7
      82:	99 99       	sbic	0x13, 1	; 19
      84:	99 3d       	cpi	r25, 0xD9	; 217
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	3e 00       	.word	0x003e	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 4a       	sbci	r16, 0xA8	; 168
      92:	d7 3b       	cpi	r29, 0xB7	; 183
      94:	3b ce       	rjmp	.-906    	; 0xfffffd0c <__eeprom_end+0xff7efd0c>
      96:	01 6e       	ori	r16, 0xE1	; 225
      98:	84 bc       	out	0x24, r8	; 36
      9a:	bf fd       	.word	0xfdbf	; ????
      9c:	c1 2f       	mov	r28, r17
      9e:	3d 6c       	ori	r19, 0xCD	; 205
      a0:	74 31       	cpi	r23, 0x14	; 20
      a2:	9a bd       	out	0x2a, r25	; 42
      a4:	56 83       	std	Z+6, r21	; 0x06
      a6:	3d da       	rcall	.-2950   	; 0xfffff522 <__eeprom_end+0xff7ef522>
      a8:	3d 00       	.word	0x003d	; ????
      aa:	c7 7f       	andi	r28, 0xF7	; 247
      ac:	11 be       	out	0x31, r1	; 49
      ae:	d9 e4       	ldi	r29, 0x49	; 73
      b0:	bb 4c       	sbci	r27, 0xCB	; 203
      b2:	3e 91       	ld	r19, -X
      b4:	6b aa       	std	Y+51, r6	; 0x33
      b6:	aa be       	out	0x3a, r10	; 58
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <__stack+0x29d>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 00       	.word	0x003f	; ????

000000e6 <__trampolines_end>:
      e6:	6e 61       	ori	r22, 0x1E	; 30
      e8:	6e 00       	.word	0x006e	; ????

000000ea <__c.2332>:
      ea:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      fa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1aa:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1ba:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ca:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1da:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d8 e0       	ldi	r29, 0x08	; 8
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	11 e0       	ldi	r17, 0x01	; 1
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	e4 ec       	ldi	r30, 0xC4	; 196
     1fc:	f3 e4       	ldi	r31, 0x43	; 67
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x10>
     200:	05 90       	lpm	r0, Z+
     202:	0d 92       	st	X+, r0
     204:	ac 35       	cpi	r26, 0x5C	; 92
     206:	b1 07       	cpc	r27, r17
     208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0xc>

0000020a <__do_clear_bss>:
     20a:	22 e0       	ldi	r18, 0x02	; 2
     20c:	ac e5       	ldi	r26, 0x5C	; 92
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
     212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
     214:	a9 35       	cpi	r26, 0x59	; 89
     216:	b2 07       	cpc	r27, r18
     218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
     21a:	0e 94 13 01 	call	0x226	; 0x226 <main>
     21e:	0c 94 e0 21 	jmp	0x43c0	; 0x43c0 <_exit>

00000222 <__bad_interrupt>:
     222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <main>:
char MyString[10];
/*-----------------------------------------------------*/
int main(void)
{
	/* Replace with your application code */
	UART_init(BAUD_PRESCALER);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <UART_init>
	I2C_Init();
     22e:	0e 94 fa 16 	call	0x2df4	; 0x2df4 <I2C_Init>
	MPU_Init();
     232:	0e 94 af 0a 	call	0x155e	; 0x155e <MPU_Init>
	ADC_Init();
     236:	0e 94 33 01 	call	0x266	; 0x266 <ADC_Init>
	initialize_pwm_2servos();
     23a:	0e 94 a5 01 	call	0x34a	; 0x34a <initialize_pwm_2servos>
	initialize_pwm_joyservo();
     23e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <initialize_pwm_joyservo>
	sprintf(MyString,"Init OK");
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	af e1       	ldi	r26, 0x1F	; 31
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <main+0x26>
	UART_putstring(MyString);
     254:	8f e1       	ldi	r24, 0x1F	; 31
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_putstring>
	
	MytaskCreate();
     25c:	0e 94 b8 02 	call	0x570	; 0x570 <MytaskCreate>
	vTaskStartScheduler();
     260:	0e 94 7a 11 	call	0x22f4	; 0x22f4 <vTaskStartScheduler>
     264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x3e>

00000266 <ADC_Init>:
	OCR0A=80;
	OCR0B=OCR0A/2;
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM0B1);
	sei(); //Enable global interrupts
     266:	f8 94       	cli
     268:	e4 e6       	ldi	r30, 0x64	; 100
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8e 7f       	andi	r24, 0xFE	; 254
     270:	80 83       	st	Z, r24
     272:	ac e7       	ldi	r26, 0x7C	; 124
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	8c 91       	ld	r24, X
     278:	80 64       	ori	r24, 0x40	; 64
     27a:	8c 93       	st	X, r24
     27c:	8c 91       	ld	r24, X
     27e:	8f 77       	andi	r24, 0x7F	; 127
     280:	8c 93       	st	X, r24
     282:	ea e7       	ldi	r30, 0x7A	; 122
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	84 60       	ori	r24, 0x04	; 4
     28a:	80 83       	st	Z, r24
     28c:	80 81       	ld	r24, Z
     28e:	82 60       	ori	r24, 0x02	; 2
     290:	80 83       	st	Z, r24
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	8c 91       	ld	r24, X
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	8c 93       	st	X, r24
     29e:	8c 91       	ld	r24, X
     2a0:	8d 7f       	andi	r24, 0xFD	; 253
     2a2:	8c 93       	st	X, r24
     2a4:	8c 91       	ld	r24, X
     2a6:	8b 7f       	andi	r24, 0xFB	; 251
     2a8:	8c 93       	st	X, r24
     2aa:	8c 91       	ld	r24, X
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	8c 93       	st	X, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	80 62       	ori	r24, 0x20	; 32
     2b4:	80 83       	st	Z, r24
     2b6:	ab e7       	ldi	r26, 0x7B	; 123
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	8e 7f       	andi	r24, 0xFE	; 254
     2be:	8c 93       	st	X, r24
     2c0:	8c 91       	ld	r24, X
     2c2:	8e 7f       	andi	r24, 0xFE	; 254
     2c4:	8c 93       	st	X, r24
     2c6:	8c 91       	ld	r24, X
     2c8:	8e 7f       	andi	r24, 0xFE	; 254
     2ca:	8c 93       	st	X, r24
     2cc:	ae e7       	ldi	r26, 0x7E	; 126
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	8c 91       	ld	r24, X
     2d2:	81 60       	ori	r24, 0x01	; 1
     2d4:	8c 93       	st	X, r24
     2d6:	80 81       	ld	r24, Z
     2d8:	80 68       	ori	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
     2dc:	80 81       	ld	r24, Z
     2de:	80 64       	ori	r24, 0x40	; 64
     2e0:	80 83       	st	Z, r24
     2e2:	78 94       	sei
     2e4:	08 95       	ret

000002e6 <deg_to_servo1>:
}


//servo1 is on PB1
void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
     2e6:	bc 01       	movw	r22, r24
     2e8:	99 0f       	add	r25, r25
     2ea:	88 0b       	sbc	r24, r24
     2ec:	99 0b       	sbc	r25, r25
     2ee:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
     2f2:	2a e7       	ldi	r18, 0x7A	; 122
     2f4:	37 ec       	ldi	r19, 0xC7	; 199
     2f6:	41 e3       	ldi	r20, 0x31	; 49
     2f8:	50 e4       	ldi	r21, 0x40	; 64
     2fa:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	4a ef       	ldi	r20, 0xFA	; 250
     304:	52 e4       	ldi	r21, 0x42	; 66
     306:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     30a:	0e 94 36 19 	call	0x326c	; 0x326c <__fixunssfsi>
     30e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     312:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     316:	08 95       	ret

00000318 <deg_to_servo2>:
}
//servo2 is on PB2
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
     318:	bc 01       	movw	r22, r24
     31a:	99 0f       	add	r25, r25
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
     324:	2a e7       	ldi	r18, 0x7A	; 122
     326:	37 ec       	ldi	r19, 0xC7	; 199
     328:	41 e3       	ldi	r20, 0x31	; 49
     32a:	50 e4       	ldi	r21, 0x40	; 64
     32c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a ef       	ldi	r20, 0xFA	; 250
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     33c:	0e 94 36 19 	call	0x326c	; 0x326c <__fixunssfsi>
     340:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     344:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     348:	08 95       	ret

0000034a <initialize_pwm_2servos>:
}
void initialize_pwm_2servos (){
	cli();
     34a:	f8 94       	cli
	DDRB |= (1<<DDB1)|(1<<DDB2);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     34c:	84 b1       	in	r24, 0x04	; 4
     34e:	86 60       	ori	r24, 0x06	; 6
     350:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0;		/* Set timer1 count zero */
     352:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     356:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	ICR1 = 4999;		/* Set TOP count for timer1 in ICR1 register */
     35a:	87 e8       	ldi	r24, 0x87	; 135
     35c:	93 e1       	ldi	r25, 0x13	; 19
     35e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     362:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	//TCCR1A = (1<<WGM11)|(1<<COM1A1);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	//clear OC1A/OC1B on compare match
	//for servo1
	TCCR1A |= (1<<COM1A1);
     366:	e0 e8       	ldi	r30, 0x80	; 128
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);
     370:	80 81       	ld	r24, Z
     372:	8f 7b       	andi	r24, 0xBF	; 191
     374:	80 83       	st	Z, r24
	//for servo2
	TCCR1A |= (1<<COM1B1);
     376:	80 81       	ld	r24, Z
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     37c:	80 81       	ld	r24, Z
     37e:	8f 7e       	andi	r24, 0xEF	; 239
     380:	80 83       	st	Z, r24
	//Fast PWM Mode
	TCCR1A &= ~(1<<WGM10);
     382:	80 81       	ld	r24, Z
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11);
     388:	80 81       	ld	r24, Z
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
     38e:	e1 e8       	ldi	r30, 0x81	; 129
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	88 60       	ori	r24, 0x08	; 8
     396:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13);
     398:	80 81       	ld	r24, Z
     39a:	80 61       	ori	r24, 0x10	; 16
     39c:	80 83       	st	Z, r24
	//Configure timer pre-scaler (011) /64
	TCCR1B |= (1<<CS10);
     39e:	80 81       	ld	r24, Z
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
     3a4:	80 81       	ld	r24, Z
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
     3aa:	80 81       	ld	r24, Z
     3ac:	8b 7f       	andi	r24, 0xFB	; 251
     3ae:	80 83       	st	Z, r24
	sei();
     3b0:	78 94       	sei
     3b2:	08 95       	ret

000003b4 <initialize_pwm_joyservo>:
}
void initialize_pwm_joyservo (){
	cli();//disable all interrupts
     3b4:	f8 94       	cli
	DDRD |= (1<<DDD5);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     3b6:	55 9a       	sbi	0x0a, 5	; 10
	//Use Timer 0 for joystick to servo
	//prescale of 1024 (101)
	TCCR0B |= (1<<CS02);
     3b8:	85 b5       	in	r24, 0x25	; 37
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     3be:	85 b5       	in	r24, 0x25	; 37
     3c0:	8d 7f       	andi	r24, 0xFD	; 253
     3c2:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
     3c4:	85 b5       	in	r24, 0x25	; 37
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	85 bd       	out	0x25, r24	; 37
	
	//Fast PWM mode
	TCCR0A |= (1<<WGM00);
     3ca:	84 b5       	in	r24, 0x24	; 36
     3cc:	81 60       	ori	r24, 0x01	; 1
     3ce:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
     3d0:	84 b5       	in	r24, 0x24	; 36
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
     3d6:	85 b5       	in	r24, 0x25	; 37
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A sets frequency
	//OCR0B sets duty cycle
	OCR0A=255;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	87 bd       	out	0x27, r24	; 39
	OCR0B=OCR0A/2;
     3e0:	87 b5       	in	r24, 0x27	; 39
     3e2:	86 95       	lsr	r24
     3e4:	88 bd       	out	0x28, r24	; 40
	
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM1B1);
     3e6:	84 b5       	in	r24, 0x24	; 36
     3e8:	80 62       	ori	r24, 0x20	; 32
     3ea:	84 bd       	out	0x24, r24	; 36
	sei(); //Enable global interrupts
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <vADCTaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vADCTaskFunction( void *pvParameters )
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <vADCTaskFunction+0x6>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeADC;
		const TickType_t xPeriodFrequencyADC = 1;// 15ms per tick  15ms*93 = 1395
		
		xLastWakeTimeADC = xTaskGetTickCount();
     3fa:	0e 94 ae 11 	call	0x235c	; 0x235c <xTaskGetTickCount>
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
			//ADC
			ADC_Value = ADC;
     402:	08 e7       	ldi	r16, 0x78	; 120
     404:	10 e0       	ldi	r17, 0x00	; 0
		
		xLastWakeTimeADC = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
     406:	61 e0       	ldi	r22, 0x01	; 1
     408:	70 e0       	ldi	r23, 0x00	; 0
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vTaskDelayUntil>
			//ADC
			ADC_Value = ADC;
     412:	f8 01       	movw	r30, r16
     414:	60 81       	ld	r22, Z
     416:	71 81       	ldd	r23, Z+1	; 0x01
     418:	80 e0       	ldi	r24, 0x00	; 0
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 65 19 	call	0x32ca	; 0x32ca <__floatunsisf>
     420:	60 93 29 02 	sts	0x0229, r22	; 0x800229 <ADC_Value>
     424:	70 93 2a 02 	sts	0x022A, r23	; 0x80022a <ADC_Value+0x1>
     428:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <ADC_Value+0x2>
     42c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <ADC_Value+0x3>
			OCR0B = (float)ADC*(40-10)/1024+10;
     430:	f8 01       	movw	r30, r16
     432:	60 81       	ld	r22, Z
     434:	71 81       	ldd	r23, Z+1	; 0x01
     436:	80 e0       	ldi	r24, 0x00	; 0
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 65 19 	call	0x32ca	; 0x32ca <__floatunsisf>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	40 ef       	ldi	r20, 0xF0	; 240
     444:	51 e4       	ldi	r21, 0x41	; 65
     446:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     44a:	20 e0       	ldi	r18, 0x00	; 0
     44c:	30 e0       	ldi	r19, 0x00	; 0
     44e:	40 e8       	ldi	r20, 0x80	; 128
     450:	5a e3       	ldi	r21, 0x3A	; 58
     452:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     456:	20 e0       	ldi	r18, 0x00	; 0
     458:	30 e0       	ldi	r19, 0x00	; 0
     45a:	40 e2       	ldi	r20, 0x20	; 32
     45c:	51 e4       	ldi	r21, 0x41	; 65
     45e:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     462:	0e 94 36 19 	call	0x326c	; 0x326c <__fixunssfsi>
     466:	68 bd       	out	0x28, r22	; 40
     468:	ce cf       	rjmp	.-100    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

0000046a <vMahonyTaskFunction>:
float ADC_Value;
// static TickType_t time1;
// static TickType_t time2;
// static int period;
void vMahonyTaskFunction( void *pvParameters )
{
     46a:	cf 93       	push	r28
     46c:	df 93       	push	r29
     46e:	00 d0       	rcall	.+0      	; 0x470 <vMahonyTaskFunction+0x6>
     470:	cd b7       	in	r28, 0x3d	; 61
     472:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMahony;
		const TickType_t xPeriodFrequencyMahony = 1;// 15ms per tick

		xLastWakeTimeMahony = xTaskGetTickCount();
     474:	0e 94 ae 11 	call	0x235c	; 0x235c <xTaskGetTickCount>
     478:	9a 83       	std	Y+2, r25	; 0x02
     47a:	89 83       	std	Y+1, r24	; 0x01
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     47c:	0f 2e       	mov	r0, r31
     47e:	f6 e1       	ldi	r31, 0x16	; 22
     480:	8f 2e       	mov	r8, r31
     482:	f1 e0       	ldi	r31, 0x01	; 1
     484:	9f 2e       	mov	r9, r31
     486:	f0 2d       	mov	r31, r0
     488:	0f 2e       	mov	r0, r31
     48a:	fa e0       	ldi	r31, 0x0A	; 10
     48c:	6f 2e       	mov	r6, r31
     48e:	f1 e0       	ldi	r31, 0x01	; 1
     490:	7f 2e       	mov	r7, r31
     492:	f0 2d       	mov	r31, r0

		xLastWakeTimeMahony = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	70 e0       	ldi	r23, 0x00	; 0
     498:	ce 01       	movw	r24, r28
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vTaskDelayUntil>
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     4a0:	d4 01       	movw	r26, r8
     4a2:	ad 90       	ld	r10, X+
     4a4:	bd 90       	ld	r11, X+
     4a6:	cd 90       	ld	r12, X+
     4a8:	dc 90       	ld	r13, X
     4aa:	13 97       	sbiw	r26, 0x03	; 3
     4ac:	f3 01       	movw	r30, r6
     4ae:	e0 84       	ldd	r14, Z+8	; 0x08
     4b0:	f1 84       	ldd	r15, Z+9	; 0x09
     4b2:	02 85       	ldd	r16, Z+10	; 0x0a
     4b4:	13 85       	ldd	r17, Z+11	; 0x0b
     4b6:	24 81       	ldd	r18, Z+4	; 0x04
     4b8:	35 81       	ldd	r19, Z+5	; 0x05
     4ba:	46 81       	ldd	r20, Z+6	; 0x06
     4bc:	57 81       	ldd	r21, Z+7	; 0x07
     4be:	60 81       	ld	r22, Z
     4c0:	71 81       	ldd	r23, Z+1	; 0x01
     4c2:	82 81       	ldd	r24, Z+2	; 0x02
     4c4:	93 81       	ldd	r25, Z+3	; 0x03
     4c6:	1b 96       	adiw	r26, 0x0b	; 11
     4c8:	ec 91       	ld	r30, X
     4ca:	1b 97       	sbiw	r26, 0x0b	; 11
     4cc:	ef 93       	push	r30
     4ce:	1a 96       	adiw	r26, 0x0a	; 10
     4d0:	ec 91       	ld	r30, X
     4d2:	1a 97       	sbiw	r26, 0x0a	; 10
     4d4:	ef 93       	push	r30
     4d6:	19 96       	adiw	r26, 0x09	; 9
     4d8:	ec 91       	ld	r30, X
     4da:	19 97       	sbiw	r26, 0x09	; 9
     4dc:	ef 93       	push	r30
     4de:	18 96       	adiw	r26, 0x08	; 8
     4e0:	ec 91       	ld	r30, X
     4e2:	18 97       	sbiw	r26, 0x08	; 8
     4e4:	ef 93       	push	r30
     4e6:	17 96       	adiw	r26, 0x07	; 7
     4e8:	ec 91       	ld	r30, X
     4ea:	17 97       	sbiw	r26, 0x07	; 7
     4ec:	ef 93       	push	r30
     4ee:	16 96       	adiw	r26, 0x06	; 6
     4f0:	ec 91       	ld	r30, X
     4f2:	16 97       	sbiw	r26, 0x06	; 6
     4f4:	ef 93       	push	r30
     4f6:	15 96       	adiw	r26, 0x05	; 5
     4f8:	ec 91       	ld	r30, X
     4fa:	15 97       	sbiw	r26, 0x05	; 5
     4fc:	ef 93       	push	r30
     4fe:	14 96       	adiw	r26, 0x04	; 4
     500:	ec 91       	ld	r30, X
     502:	ef 93       	push	r30
     504:	0e 94 3d 04 	call	0x87a	; 0x87a <MahonyAHRSupdateIMU>
			q2Angle(Angle);
     508:	8d e2       	ldi	r24, 0x2D	; 45
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	0e 94 81 07 	call	0xf02	; 0xf02 <q2Angle>
     510:	0f b6       	in	r0, 0x3f	; 63
     512:	f8 94       	cli
     514:	de bf       	out	0x3e, r29	; 62
     516:	0f be       	out	0x3f, r0	; 63
     518:	cd bf       	out	0x3d, r28	; 61
     51a:	bc cf       	rjmp	.-136    	; 0x494 <vMahonyTaskFunction+0x2a>

0000051c <vMPU6050TaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vMPU6050TaskFunction( void *pvParameters )
{
     51c:	cf 93       	push	r28
     51e:	df 93       	push	r29
     520:	00 d0       	rcall	.+0      	; 0x522 <vMPU6050TaskFunction+0x6>
     522:	cd b7       	in	r28, 0x3d	; 61
     524:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMPU;
		const TickType_t xPeriodFrequencyMPU = 1;// 15ms per tick
		
		xLastWakeTimeMPU = xTaskGetTickCount();
     526:	0e 94 ae 11 	call	0x235c	; 0x235c <xTaskGetTickCount>
     52a:	9a 83       	std	Y+2, r25	; 0x02
     52c:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMPU, xPeriodFrequencyMPU );
     52e:	61 e0       	ldi	r22, 0x01	; 1
     530:	70 e0       	ldi	r23, 0x00	; 0
     532:	ce 01       	movw	r24, r28
     534:	01 96       	adiw	r24, 0x01	; 1
     536:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vTaskDelayUntil>
//			TickType_t time1 = xTaskGetTickCount();
			MPU_read(AccData,GyroData);
     53a:	6a e0       	ldi	r22, 0x0A	; 10
     53c:	71 e0       	ldi	r23, 0x01	; 1
     53e:	86 e1       	ldi	r24, 0x16	; 22
     540:	91 e0       	ldi	r25, 0x01	; 1
     542:	0e 94 c6 08 	call	0x118c	; 0x118c <MPU_read>
     546:	f3 cf       	rjmp	.-26     	; 0x52e <vMPU6050TaskFunction+0x12>

00000548 <vControlTaskFunction>:
	vTaskDelete( NULL );
}

// Task C for control
void vControlTaskFunction( void *pvParameters )
{
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	00 d0       	rcall	.+0      	; 0x54e <vControlTaskFunction+0x6>
     54e:	cd b7       	in	r28, 0x3d	; 61
     550:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeControl;
		const TickType_t xPeriodFrequencyControl = 1;// 15ms per tick  15ms*93 = 1395
		
		xLastWakeTimeControl = xTaskGetTickCount();
     552:	0e 94 ae 11 	call	0x235c	; 0x235c <xTaskGetTickCount>
     556:	9a 83       	std	Y+2, r25	; 0x02
     558:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeControl, xPeriodFrequencyControl );
     55a:	61 e0       	ldi	r22, 0x01	; 1
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	ce 01       	movw	r24, r28
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	0e 94 fa 12 	call	0x25f4	; 0x25f4 <vTaskDelayUntil>
			BalanceControl(Angle);
     566:	8d e2       	ldi	r24, 0x2D	; 45
     568:	92 e0       	ldi	r25, 0x02	; 2
     56a:	0e 94 86 03 	call	0x70c	; 0x70c <BalanceControl>
     56e:	f5 cf       	rjmp	.-22     	; 0x55a <vControlTaskFunction+0x12>

00000570 <MytaskCreate>:
	}
	vTaskDelete( NULL );
}
//
void MytaskCreate(void)
{
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
	/* Create tasks and make some magic*/

	xTaskCreate( vMahonyTaskFunction,"TASKA",256,NULL,3,NULL);
     576:	e1 2c       	mov	r14, r1
     578:	f1 2c       	mov	r15, r1
     57a:	03 e0       	ldi	r16, 0x03	; 3
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	40 e0       	ldi	r20, 0x00	; 0
     582:	51 e0       	ldi	r21, 0x01	; 1
     584:	6a e2       	ldi	r22, 0x2A	; 42
     586:	71 e0       	ldi	r23, 0x01	; 1
     588:	85 e3       	ldi	r24, 0x35	; 53
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	0e 94 5e 10 	call	0x20bc	; 0x20bc <xTaskCreate>
	xTaskCreate( vMPU6050TaskFunction,"TASKB",256,NULL, 2,NULL);
     590:	02 e0       	ldi	r16, 0x02	; 2
     592:	20 e0       	ldi	r18, 0x00	; 0
     594:	30 e0       	ldi	r19, 0x00	; 0
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	51 e0       	ldi	r21, 0x01	; 1
     59a:	60 e3       	ldi	r22, 0x30	; 48
     59c:	71 e0       	ldi	r23, 0x01	; 1
     59e:	8e e8       	ldi	r24, 0x8E	; 142
     5a0:	92 e0       	ldi	r25, 0x02	; 2
     5a2:	0e 94 5e 10 	call	0x20bc	; 0x20bc <xTaskCreate>
	xTaskCreate( vControlTaskFunction,"TASKC",256,NULL,1,NULL);
     5a6:	01 e0       	ldi	r16, 0x01	; 1
     5a8:	20 e0       	ldi	r18, 0x00	; 0
     5aa:	30 e0       	ldi	r19, 0x00	; 0
     5ac:	40 e0       	ldi	r20, 0x00	; 0
     5ae:	51 e0       	ldi	r21, 0x01	; 1
     5b0:	66 e3       	ldi	r22, 0x36	; 54
     5b2:	71 e0       	ldi	r23, 0x01	; 1
     5b4:	84 ea       	ldi	r24, 0xA4	; 164
     5b6:	92 e0       	ldi	r25, 0x02	; 2
     5b8:	0e 94 5e 10 	call	0x20bc	; 0x20bc <xTaskCreate>
	xTaskCreate( vADCTaskFunction,"TASKD",256,NULL,4,NULL);
     5bc:	04 e0       	ldi	r16, 0x04	; 4
     5be:	20 e0       	ldi	r18, 0x00	; 0
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	51 e0       	ldi	r21, 0x01	; 1
     5c6:	6c e3       	ldi	r22, 0x3C	; 60
     5c8:	71 e0       	ldi	r23, 0x01	; 1
     5ca:	88 ef       	ldi	r24, 0xF8	; 248
     5cc:	91 e0       	ldi	r25, 0x01	; 1
     5ce:	0e 94 5e 10 	call	0x20bc	; 0x20bc <xTaskCreate>
	
}
     5d2:	0f 91       	pop	r16
     5d4:	ff 90       	pop	r15
     5d6:	ef 90       	pop	r14
     5d8:	08 95       	ret

000005da <PID>:
struct PID_Para PIDParaY={0,0};
float last_error;
float increment_error;

float PID(float error, int frequency, struct PID_Para Parameter)
{
     5da:	8f 92       	push	r8
     5dc:	9f 92       	push	r9
     5de:	af 92       	push	r10
     5e0:	bf 92       	push	r11
     5e2:	cf 92       	push	r12
     5e4:	df 92       	push	r13
     5e6:	ef 92       	push	r14
     5e8:	ff 92       	push	r15
     5ea:	0f 93       	push	r16
     5ec:	1f 93       	push	r17
     5ee:	cf 93       	push	r28
     5f0:	df 93       	push	r29
     5f2:	cd b7       	in	r28, 0x3d	; 61
     5f4:	de b7       	in	r29, 0x3e	; 62
     5f6:	28 97       	sbiw	r28, 0x08	; 8
     5f8:	0f b6       	in	r0, 0x3f	; 63
     5fa:	f8 94       	cli
     5fc:	de bf       	out	0x3e, r29	; 62
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	cd bf       	out	0x3d, r28	; 61
     602:	4b 01       	movw	r8, r22
     604:	5c 01       	movw	r10, r24
     606:	c9 82       	std	Y+1, r12	; 0x01
     608:	da 82       	std	Y+2, r13	; 0x02
     60a:	eb 82       	std	Y+3, r14	; 0x03
     60c:	fc 82       	std	Y+4, r15	; 0x04
     60e:	0d 83       	std	Y+5, r16	; 0x05
     610:	1e 83       	std	Y+6, r17	; 0x06
     612:	2f 83       	std	Y+7, r18	; 0x07
     614:	38 87       	std	Y+8, r19	; 0x08
	float output;
	output = error*Kp+Parameter.increment_error*Ki+(error-Parameter.last_error)*Kd;
     616:	2f e6       	ldi	r18, 0x6F	; 111
     618:	32 e1       	ldi	r19, 0x12	; 18
     61a:	43 e8       	ldi	r20, 0x83	; 131
     61c:	5a e3       	ldi	r21, 0x3A	; 58
     61e:	6d 81       	ldd	r22, Y+5	; 0x05
     620:	7e 81       	ldd	r23, Y+6	; 0x06
     622:	8f 81       	ldd	r24, Y+7	; 0x07
     624:	98 85       	ldd	r25, Y+8	; 0x08
     626:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     62a:	26 e6       	ldi	r18, 0x66	; 102
     62c:	36 e6       	ldi	r19, 0x66	; 102
     62e:	45 e8       	ldi	r20, 0x85	; 133
     630:	52 e4       	ldi	r21, 0x42	; 66
     632:	0e 94 bd 18 	call	0x317a	; 0x317a <__divsf3>
     636:	6b 01       	movw	r12, r22
     638:	7c 01       	movw	r14, r24
     63a:	20 e0       	ldi	r18, 0x00	; 0
     63c:	30 e0       	ldi	r19, 0x00	; 0
     63e:	40 e0       	ldi	r20, 0x00	; 0
     640:	5f e3       	ldi	r21, 0x3F	; 63
     642:	c5 01       	movw	r24, r10
     644:	b4 01       	movw	r22, r8
     646:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     64a:	9b 01       	movw	r18, r22
     64c:	ac 01       	movw	r20, r24
     64e:	c7 01       	movw	r24, r14
     650:	b6 01       	movw	r22, r12
     652:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     656:	6b 01       	movw	r12, r22
     658:	7c 01       	movw	r14, r24
     65a:	29 81       	ldd	r18, Y+1	; 0x01
     65c:	3a 81       	ldd	r19, Y+2	; 0x02
     65e:	4b 81       	ldd	r20, Y+3	; 0x03
     660:	5c 81       	ldd	r21, Y+4	; 0x04
     662:	c5 01       	movw	r24, r10
     664:	b4 01       	movw	r22, r8
     666:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	a9 01       	movw	r20, r18
     670:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     674:	26 e6       	ldi	r18, 0x66	; 102
     676:	36 e6       	ldi	r19, 0x66	; 102
     678:	45 e8       	ldi	r20, 0x85	; 133
     67a:	52 e4       	ldi	r21, 0x42	; 66
     67c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     680:	9b 01       	movw	r18, r22
     682:	ac 01       	movw	r20, r24
     684:	c7 01       	movw	r24, r14
     686:	b6 01       	movw	r22, r12
     688:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     68c:	6b 01       	movw	r12, r22
     68e:	7c 01       	movw	r14, r24
	Parameter.last_error = error;
	Parameter.increment_error += error;
	if (output>90)
     690:	20 e0       	ldi	r18, 0x00	; 0
     692:	30 e0       	ldi	r19, 0x00	; 0
     694:	44 eb       	ldi	r20, 0xB4	; 180
     696:	52 e4       	ldi	r21, 0x42	; 66
     698:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__gesf2>
     69c:	18 16       	cp	r1, r24
     69e:	9c f0       	brlt	.+38     	; 0x6c6 <PID+0xec>
	{
		output = 90;
	}
	if (output<-90)
     6a0:	20 e0       	ldi	r18, 0x00	; 0
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	44 eb       	ldi	r20, 0xB4	; 180
     6a6:	52 ec       	ldi	r21, 0xC2	; 194
     6a8:	c7 01       	movw	r24, r14
     6aa:	b6 01       	movw	r22, r12
     6ac:	0e 94 b8 18 	call	0x3170	; 0x3170 <__cmpsf2>
     6b0:	88 23       	and	r24, r24
     6b2:	8c f4       	brge	.+34     	; 0x6d6 <PID+0xfc>
	{
		output = -90;
     6b4:	0f 2e       	mov	r0, r31
     6b6:	c1 2c       	mov	r12, r1
     6b8:	d1 2c       	mov	r13, r1
     6ba:	f4 eb       	ldi	r31, 0xB4	; 180
     6bc:	ef 2e       	mov	r14, r31
     6be:	f2 ec       	ldi	r31, 0xC2	; 194
     6c0:	ff 2e       	mov	r15, r31
     6c2:	f0 2d       	mov	r31, r0
     6c4:	08 c0       	rjmp	.+16     	; 0x6d6 <PID+0xfc>
	output = error*Kp+Parameter.increment_error*Ki+(error-Parameter.last_error)*Kd;
	Parameter.last_error = error;
	Parameter.increment_error += error;
	if (output>90)
	{
		output = 90;
     6c6:	0f 2e       	mov	r0, r31
     6c8:	c1 2c       	mov	r12, r1
     6ca:	d1 2c       	mov	r13, r1
     6cc:	f4 eb       	ldi	r31, 0xB4	; 180
     6ce:	ef 2e       	mov	r14, r31
     6d0:	f2 e4       	ldi	r31, 0x42	; 66
     6d2:	ff 2e       	mov	r15, r31
     6d4:	f0 2d       	mov	r31, r0
	if (output<-90)
	{
		output = -90;
	}
	output += 90;
	return output;
     6d6:	20 e0       	ldi	r18, 0x00	; 0
     6d8:	30 e0       	ldi	r19, 0x00	; 0
     6da:	44 eb       	ldi	r20, 0xB4	; 180
     6dc:	52 e4       	ldi	r21, 0x42	; 66
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
}
     6e6:	28 96       	adiw	r28, 0x08	; 8
     6e8:	0f b6       	in	r0, 0x3f	; 63
     6ea:	f8 94       	cli
     6ec:	de bf       	out	0x3e, r29	; 62
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	cd bf       	out	0x3d, r28	; 61
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	df 90       	pop	r13
     700:	cf 90       	pop	r12
     702:	bf 90       	pop	r11
     704:	af 90       	pop	r10
     706:	9f 90       	pop	r9
     708:	8f 90       	pop	r8
     70a:	08 95       	ret

0000070c <BalanceControl>:

void BalanceControl(float pAngle[3])
{
     70c:	8f 92       	push	r8
     70e:	9f 92       	push	r9
     710:	af 92       	push	r10
     712:	bf 92       	push	r11
     714:	cf 92       	push	r12
     716:	df 92       	push	r13
     718:	ef 92       	push	r14
     71a:	ff 92       	push	r15
     71c:	0f 93       	push	r16
     71e:	1f 93       	push	r17
     720:	cf 93       	push	r28
     722:	df 93       	push	r29
     724:	4c 01       	movw	r8, r24
	float x_error = pAngle[0] - 0;
	float y_error = pAngle[1] - 0;
	float DEG1 = PID(x_error,PID_Freq,PIDParaX);
     726:	fc 01       	movw	r30, r24
     728:	60 81       	ld	r22, Z
     72a:	71 81       	ldd	r23, Z+1	; 0x01
     72c:	82 81       	ldd	r24, Z+2	; 0x02
     72e:	93 81       	ldd	r25, Z+3	; 0x03
     730:	c0 90 64 01 	lds	r12, 0x0164	; 0x800164 <PIDParaX>
     734:	d0 90 65 01 	lds	r13, 0x0165	; 0x800165 <PIDParaX+0x1>
     738:	e0 90 66 01 	lds	r14, 0x0166	; 0x800166 <PIDParaX+0x2>
     73c:	f0 90 67 01 	lds	r15, 0x0167	; 0x800167 <PIDParaX+0x3>
     740:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <PIDParaX+0x4>
     744:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <PIDParaX+0x5>
     748:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <PIDParaX+0x6>
     74c:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <PIDParaX+0x7>
     750:	42 e4       	ldi	r20, 0x42	; 66
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	0e 94 ed 02 	call	0x5da	; 0x5da <PID>
     758:	a6 2e       	mov	r10, r22
     75a:	b7 2e       	mov	r11, r23
     75c:	d8 2f       	mov	r29, r24
     75e:	c9 2f       	mov	r28, r25
	float DEG2 = PID(y_error,PID_Freq,PIDParaY);
     760:	f4 01       	movw	r30, r8
     762:	64 81       	ldd	r22, Z+4	; 0x04
     764:	75 81       	ldd	r23, Z+5	; 0x05
     766:	86 81       	ldd	r24, Z+6	; 0x06
     768:	97 81       	ldd	r25, Z+7	; 0x07
     76a:	c0 90 5c 01 	lds	r12, 0x015C	; 0x80015c <__data_end>
     76e:	d0 90 5d 01 	lds	r13, 0x015D	; 0x80015d <__data_end+0x1>
     772:	e0 90 5e 01 	lds	r14, 0x015E	; 0x80015e <__data_end+0x2>
     776:	f0 90 5f 01 	lds	r15, 0x015F	; 0x80015f <__data_end+0x3>
     77a:	00 91 60 01 	lds	r16, 0x0160	; 0x800160 <__data_end+0x4>
     77e:	10 91 61 01 	lds	r17, 0x0161	; 0x800161 <__data_end+0x5>
     782:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <__data_end+0x6>
     786:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <__data_end+0x7>
     78a:	42 e4       	ldi	r20, 0x42	; 66
     78c:	50 e0       	ldi	r21, 0x00	; 0
     78e:	0e 94 ed 02 	call	0x5da	; 0x5da <PID>
     792:	6b 01       	movw	r12, r22
     794:	7c 01       	movw	r14, r24
	sprintf(MyString,"X error %f\n",DEG1);
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	bf 92       	push	r11
     79c:	af 92       	push	r10
     79e:	82 e4       	ldi	r24, 0x42	; 66
     7a0:	91 e0       	ldi	r25, 0x01	; 1
     7a2:	9f 93       	push	r25
     7a4:	8f 93       	push	r24
     7a6:	8f e1       	ldi	r24, 0x1F	; 31
     7a8:	92 e0       	ldi	r25, 0x02	; 2
     7aa:	9f 93       	push	r25
     7ac:	8f 93       	push	r24
     7ae:	0e 94 60 21 	call	0x42c0	; 0x42c0 <sprintf>
	UART_putstring(MyString);
     7b2:	8f e1       	ldi	r24, 0x1F	; 31
     7b4:	92 e0       	ldi	r25, 0x02	; 2
     7b6:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <UART_putstring>
	deg_to_servo1(DEG1);
     7ba:	6a 2d       	mov	r22, r10
     7bc:	7b 2d       	mov	r23, r11
     7be:	8d 2f       	mov	r24, r29
     7c0:	9c 2f       	mov	r25, r28
     7c2:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     7c6:	cb 01       	movw	r24, r22
     7c8:	0e 94 73 01 	call	0x2e6	; 0x2e6 <deg_to_servo1>
	deg_to_servo2(DEG2);	
     7cc:	c7 01       	movw	r24, r14
     7ce:	b6 01       	movw	r22, r12
     7d0:	0e 94 2f 19 	call	0x325e	; 0x325e <__fixsfsi>
     7d4:	cb 01       	movw	r24, r22
     7d6:	0e 94 8c 01 	call	0x318	; 0x318 <deg_to_servo2>
	
     7da:	8d b7       	in	r24, 0x3d	; 61
     7dc:	9e b7       	in	r25, 0x3e	; 62
     7de:	08 96       	adiw	r24, 0x08	; 8
     7e0:	0f b6       	in	r0, 0x3f	; 63
     7e2:	f8 94       	cli
     7e4:	9e bf       	out	0x3e, r25	; 62
     7e6:	0f be       	out	0x3f, r0	; 63
     7e8:	8d bf       	out	0x3d, r24	; 61
     7ea:	df 91       	pop	r29
     7ec:	cf 91       	pop	r28
     7ee:	1f 91       	pop	r17
     7f0:	0f 91       	pop	r16
     7f2:	ff 90       	pop	r15
     7f4:	ef 90       	pop	r14
     7f6:	df 90       	pop	r13
     7f8:	cf 90       	pop	r12
     7fa:	bf 90       	pop	r11
     7fc:	af 90       	pop	r10
     7fe:	9f 90       	pop	r9
     800:	8f 90       	pop	r8
     802:	08 95       	ret

00000804 <invSqrt>:
float integralFBx = 0;
float integralFBy = 0;
float integralFBz = 0;

float invSqrt( float number )
{
     804:	cf 92       	push	r12
     806:	df 92       	push	r13
     808:	ef 92       	push	r14
     80a:	ff 92       	push	r15
     80c:	0f 93       	push	r16
     80e:	1f 93       	push	r17

	x2 = number * 0.5F;
	y  = number;
	i  = * ( long * ) &y;                       
	i  = 0x5f3759df - ( i >> 1 );               
	y  = * ( float * ) &i;
     810:	8b 01       	movw	r16, r22
     812:	9c 01       	movw	r18, r24
     814:	35 95       	asr	r19
     816:	27 95       	ror	r18
     818:	17 95       	ror	r17
     81a:	07 95       	ror	r16
     81c:	0f 2e       	mov	r0, r31
     81e:	ff ed       	ldi	r31, 0xDF	; 223
     820:	cf 2e       	mov	r12, r31
     822:	f9 e5       	ldi	r31, 0x59	; 89
     824:	df 2e       	mov	r13, r31
     826:	f7 e3       	ldi	r31, 0x37	; 55
     828:	ef 2e       	mov	r14, r31
     82a:	ff e5       	ldi	r31, 0x5F	; 95
     82c:	ff 2e       	mov	r15, r31
     82e:	f0 2d       	mov	r31, r0
     830:	c0 1a       	sub	r12, r16
     832:	d1 0a       	sbc	r13, r17
     834:	e2 0a       	sbc	r14, r18
     836:	f3 0a       	sbc	r15, r19
	y  = y * ( threehalfs - ( x2 * y * y ) );   

	return y;
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     844:	a7 01       	movw	r20, r14
     846:	96 01       	movw	r18, r12
     848:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     84c:	a7 01       	movw	r20, r14
     84e:	96 01       	movw	r18, r12
     850:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	70 e0       	ldi	r23, 0x00	; 0
     85c:	80 ec       	ldi	r24, 0xC0	; 192
     85e:	9f e3       	ldi	r25, 0x3F	; 63
     860:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     864:	a7 01       	movw	r20, r14
     866:	96 01       	movw	r18, r12
     868:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
}
     86c:	1f 91       	pop	r17
     86e:	0f 91       	pop	r16
     870:	ff 90       	pop	r15
     872:	ef 90       	pop	r14
     874:	df 90       	pop	r13
     876:	cf 90       	pop	r12
     878:	08 95       	ret

0000087a <MahonyAHRSupdateIMU>:

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) 
{
     87a:	4f 92       	push	r4
     87c:	5f 92       	push	r5
     87e:	6f 92       	push	r6
     880:	7f 92       	push	r7
     882:	8f 92       	push	r8
     884:	9f 92       	push	r9
     886:	af 92       	push	r10
     888:	bf 92       	push	r11
     88a:	cf 92       	push	r12
     88c:	df 92       	push	r13
     88e:	ef 92       	push	r14
     890:	ff 92       	push	r15
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	cd b7       	in	r28, 0x3d	; 61
     89c:	de b7       	in	r29, 0x3e	; 62
     89e:	a0 97       	sbiw	r28, 0x20	; 32
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	f8 94       	cli
     8a4:	de bf       	out	0x3e, r29	; 62
     8a6:	0f be       	out	0x3f, r0	; 63
     8a8:	cd bf       	out	0x3d, r28	; 61
     8aa:	69 87       	std	Y+9, r22	; 0x09
     8ac:	7a 87       	std	Y+10, r23	; 0x0a
     8ae:	8b 87       	std	Y+11, r24	; 0x0b
     8b0:	9c 87       	std	Y+12, r25	; 0x0c
     8b2:	2d 87       	std	Y+13, r18	; 0x0d
     8b4:	3e 87       	std	Y+14, r19	; 0x0e
     8b6:	4f 87       	std	Y+15, r20	; 0x0f
     8b8:	58 8b       	std	Y+16, r21	; 0x10
     8ba:	e9 8a       	std	Y+17, r14	; 0x11
     8bc:	fa 8a       	std	Y+18, r15	; 0x12
     8be:	0b 8b       	std	Y+19, r16	; 0x13
     8c0:	1c 8b       	std	Y+20, r17	; 0x14

	float qa, qb, qc;
	
	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)

	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	a9 01       	movw	r20, r18
     8c8:	c6 01       	movw	r24, r12
     8ca:	b5 01       	movw	r22, r10
     8cc:	0e 94 b8 18 	call	0x3170	; 0x3170 <__cmpsf2>
     8d0:	81 11       	cpse	r24, r1
     8d2:	17 c0       	rjmp	.+46     	; 0x902 <__stack+0x3>
     8d4:	20 e0       	ldi	r18, 0x00	; 0
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	a9 01       	movw	r20, r18
     8da:	6b a9       	ldd	r22, Y+51	; 0x33
     8dc:	7c a9       	ldd	r23, Y+52	; 0x34
     8de:	8d a9       	ldd	r24, Y+53	; 0x35
     8e0:	9e a9       	ldd	r25, Y+54	; 0x36
     8e2:	0e 94 b8 18 	call	0x3170	; 0x3170 <__cmpsf2>
     8e6:	81 11       	cpse	r24, r1
     8e8:	0c c0       	rjmp	.+24     	; 0x902 <__stack+0x3>
     8ea:	20 e0       	ldi	r18, 0x00	; 0
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	a9 01       	movw	r20, r18
     8f0:	6f a9       	ldd	r22, Y+55	; 0x37
     8f2:	78 ad       	ldd	r23, Y+56	; 0x38
     8f4:	89 ad       	ldd	r24, Y+57	; 0x39
     8f6:	9a ad       	ldd	r25, Y+58	; 0x3a
     8f8:	0e 94 b8 18 	call	0x3170	; 0x3170 <__cmpsf2>
     8fc:	88 23       	and	r24, r24
     8fe:	09 f4       	brne	.+2      	; 0x902 <__stack+0x3>
     900:	50 c1       	rjmp	.+672    	; 0xba2 <__stack+0x2a3>

		// Normalise accelerometer measurement

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     902:	a6 01       	movw	r20, r12
     904:	95 01       	movw	r18, r10
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     90e:	2b 01       	movw	r4, r22
     910:	3c 01       	movw	r6, r24
     912:	2b a9       	ldd	r18, Y+51	; 0x33
     914:	3c a9       	ldd	r19, Y+52	; 0x34
     916:	4d a9       	ldd	r20, Y+53	; 0x35
     918:	5e a9       	ldd	r21, Y+54	; 0x36
     91a:	ca 01       	movw	r24, r20
     91c:	b9 01       	movw	r22, r18
     91e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     922:	9b 01       	movw	r18, r22
     924:	ac 01       	movw	r20, r24
     926:	c3 01       	movw	r24, r6
     928:	b2 01       	movw	r22, r4
     92a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     92e:	2b 01       	movw	r4, r22
     930:	3c 01       	movw	r6, r24
     932:	2f a9       	ldd	r18, Y+55	; 0x37
     934:	38 ad       	ldd	r19, Y+56	; 0x38
     936:	49 ad       	ldd	r20, Y+57	; 0x39
     938:	5a ad       	ldd	r21, Y+58	; 0x3a
     93a:	ca 01       	movw	r24, r20
     93c:	b9 01       	movw	r22, r18
     93e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     942:	9b 01       	movw	r18, r22
     944:	ac 01       	movw	r20, r24
     946:	c3 01       	movw	r24, r6
     948:	b2 01       	movw	r22, r4
     94a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     94e:	0e 94 02 04 	call	0x804	; 0x804 <invSqrt>
     952:	2b 01       	movw	r4, r22
     954:	3c 01       	movw	r6, r24

		ax *= recipNorm;
     956:	9b 01       	movw	r18, r22
     958:	ac 01       	movw	r20, r24
     95a:	c6 01       	movw	r24, r12
     95c:	b5 01       	movw	r22, r10
     95e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     962:	69 8f       	std	Y+25, r22	; 0x19
     964:	7a 8f       	std	Y+26, r23	; 0x1a
     966:	8b 8f       	std	Y+27, r24	; 0x1b
     968:	9c 8f       	std	Y+28, r25	; 0x1c

		ay *= recipNorm;
     96a:	a3 01       	movw	r20, r6
     96c:	92 01       	movw	r18, r4
     96e:	6b a9       	ldd	r22, Y+51	; 0x33
     970:	7c a9       	ldd	r23, Y+52	; 0x34
     972:	8d a9       	ldd	r24, Y+53	; 0x35
     974:	9e a9       	ldd	r25, Y+54	; 0x36
     976:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     97a:	6d 8f       	std	Y+29, r22	; 0x1d
     97c:	7e 8f       	std	Y+30, r23	; 0x1e
     97e:	8f 8f       	std	Y+31, r24	; 0x1f
     980:	98 a3       	std	Y+32, r25	; 0x20

		az *= recipNorm;
     982:	a3 01       	movw	r20, r6
     984:	92 01       	movw	r18, r4
     986:	6f a9       	ldd	r22, Y+55	; 0x37
     988:	78 ad       	ldd	r23, Y+56	; 0x38
     98a:	89 ad       	ldd	r24, Y+57	; 0x39
     98c:	9a ad       	ldd	r25, Y+58	; 0x3a
     98e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     992:	6d 83       	std	Y+5, r22	; 0x05
     994:	7e 83       	std	Y+6, r23	; 0x06
     996:	8f 83       	std	Y+7, r24	; 0x07
     998:	98 87       	std	Y+8, r25	; 0x08

		// Estimated direction of gravity and vector perpendicular to magnetic flux

		halfvx = q1 * q3 - q0 * q2;
     99a:	80 90 80 01 	lds	r8, 0x0180	; 0x800180 <q1>
     99e:	90 90 81 01 	lds	r9, 0x0181	; 0x800181 <q1+0x1>
     9a2:	a0 90 82 01 	lds	r10, 0x0182	; 0x800182 <q1+0x2>
     9a6:	b0 90 83 01 	lds	r11, 0x0183	; 0x800183 <q1+0x3>
     9aa:	40 90 78 01 	lds	r4, 0x0178	; 0x800178 <q3>
     9ae:	50 90 79 01 	lds	r5, 0x0179	; 0x800179 <q3+0x1>
     9b2:	60 90 7a 01 	lds	r6, 0x017A	; 0x80017a <q3+0x2>
     9b6:	70 90 7b 01 	lds	r7, 0x017B	; 0x80017b <q3+0x3>
     9ba:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <q0>
     9be:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <q0+0x1>
     9c2:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <q0+0x2>
     9c6:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <q0+0x3>
     9ca:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <q2>
     9ce:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <q2+0x1>
     9d2:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <q2+0x2>
     9d6:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <q2+0x3>
     9da:	89 83       	std	Y+1, r24	; 0x01
     9dc:	9a 83       	std	Y+2, r25	; 0x02
     9de:	ab 83       	std	Y+3, r26	; 0x03
     9e0:	bc 83       	std	Y+4, r27	; 0x04
     9e2:	a3 01       	movw	r20, r6
     9e4:	92 01       	movw	r18, r4
     9e6:	c5 01       	movw	r24, r10
     9e8:	b4 01       	movw	r22, r8
     9ea:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     9ee:	6d 8b       	std	Y+21, r22	; 0x15
     9f0:	7e 8b       	std	Y+22, r23	; 0x16
     9f2:	8f 8b       	std	Y+23, r24	; 0x17
     9f4:	98 8f       	std	Y+24, r25	; 0x18
     9f6:	29 81       	ldd	r18, Y+1	; 0x01
     9f8:	3a 81       	ldd	r19, Y+2	; 0x02
     9fa:	4b 81       	ldd	r20, Y+3	; 0x03
     9fc:	5c 81       	ldd	r21, Y+4	; 0x04
     9fe:	c7 01       	movw	r24, r14
     a00:	b6 01       	movw	r22, r12
     a02:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	6d 89       	ldd	r22, Y+21	; 0x15
     a0c:	7e 89       	ldd	r23, Y+22	; 0x16
     a0e:	8f 89       	ldd	r24, Y+23	; 0x17
     a10:	98 8d       	ldd	r25, Y+24	; 0x18
     a12:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     a16:	6d 8b       	std	Y+21, r22	; 0x15
     a18:	7e 8b       	std	Y+22, r23	; 0x16
     a1a:	8f 8b       	std	Y+23, r24	; 0x17
     a1c:	98 8f       	std	Y+24, r25	; 0x18

		halfvy = q0 * q1 + q2 * q3;
     a1e:	a7 01       	movw	r20, r14
     a20:	96 01       	movw	r18, r12
     a22:	c5 01       	movw	r24, r10
     a24:	b4 01       	movw	r22, r8
     a26:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     a2a:	4b 01       	movw	r8, r22
     a2c:	5c 01       	movw	r10, r24
     a2e:	29 81       	ldd	r18, Y+1	; 0x01
     a30:	3a 81       	ldd	r19, Y+2	; 0x02
     a32:	4b 81       	ldd	r20, Y+3	; 0x03
     a34:	5c 81       	ldd	r21, Y+4	; 0x04
     a36:	c3 01       	movw	r24, r6
     a38:	b2 01       	movw	r22, r4
     a3a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	c5 01       	movw	r24, r10
     a44:	b4 01       	movw	r22, r8
     a46:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     a4a:	69 83       	std	Y+1, r22	; 0x01
     a4c:	7a 83       	std	Y+2, r23	; 0x02
     a4e:	8b 83       	std	Y+3, r24	; 0x03
     a50:	9c 83       	std	Y+4, r25	; 0x04

		halfvz = q0 * q0 - 0.5f + q3 * q3;
     a52:	a7 01       	movw	r20, r14
     a54:	96 01       	movw	r18, r12
     a56:	c7 01       	movw	r24, r14
     a58:	b6 01       	movw	r22, r12
     a5a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     a5e:	20 e0       	ldi	r18, 0x00	; 0
     a60:	30 e0       	ldi	r19, 0x00	; 0
     a62:	40 e0       	ldi	r20, 0x00	; 0
     a64:	5f e3       	ldi	r21, 0x3F	; 63
     a66:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     a6a:	6b 01       	movw	r12, r22
     a6c:	7c 01       	movw	r14, r24
     a6e:	a3 01       	movw	r20, r6
     a70:	92 01       	movw	r18, r4
     a72:	c3 01       	movw	r24, r6
     a74:	b2 01       	movw	r22, r4
     a76:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
     a7e:	c7 01       	movw	r24, r14
     a80:	b6 01       	movw	r22, r12
     a82:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     a86:	6b 01       	movw	r12, r22
     a88:	7c 01       	movw	r14, r24

		}

		else {

			integralFBx = 0.0f; // prevent integral windup
     a8a:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <integralFBx>
     a8e:	10 92 75 01 	sts	0x0175, r1	; 0x800175 <integralFBx+0x1>
     a92:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <integralFBx+0x2>
     a96:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <integralFBx+0x3>

			integralFBy = 0.0f;
     a9a:	10 92 70 01 	sts	0x0170, r1	; 0x800170 <integralFBy>
     a9e:	10 92 71 01 	sts	0x0171, r1	; 0x800171 <integralFBy+0x1>
     aa2:	10 92 72 01 	sts	0x0172, r1	; 0x800172 <integralFBy+0x2>
     aa6:	10 92 73 01 	sts	0x0173, r1	; 0x800173 <integralFBy+0x3>

			integralFBz = 0.0f;
     aaa:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <integralFBz>
     aae:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <integralFBz+0x1>
     ab2:	10 92 6e 01 	sts	0x016E, r1	; 0x80016e <integralFBz+0x2>
     ab6:	10 92 6f 01 	sts	0x016F, r1	; 0x80016f <integralFBz+0x3>

		}

		// Apply proportional feedback

		gx += twoKp * halfex;
     aba:	9b 01       	movw	r18, r22
     abc:	ac 01       	movw	r20, r24
     abe:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ac0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ac2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ac4:	98 a1       	ldd	r25, Y+32	; 0x20
     ac6:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     aca:	4b 01       	movw	r8, r22
     acc:	5c 01       	movw	r10, r24
     ace:	29 81       	ldd	r18, Y+1	; 0x01
     ad0:	3a 81       	ldd	r19, Y+2	; 0x02
     ad2:	4b 81       	ldd	r20, Y+3	; 0x03
     ad4:	5c 81       	ldd	r21, Y+4	; 0x04
     ad6:	6d 81       	ldd	r22, Y+5	; 0x05
     ad8:	7e 81       	ldd	r23, Y+6	; 0x06
     ada:	8f 81       	ldd	r24, Y+7	; 0x07
     adc:	98 85       	ldd	r25, Y+8	; 0x08
     ade:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     ae2:	9b 01       	movw	r18, r22
     ae4:	ac 01       	movw	r20, r24
     ae6:	c5 01       	movw	r24, r10
     ae8:	b4 01       	movw	r22, r8
     aea:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	69 85       	ldd	r22, Y+9	; 0x09
     af4:	7a 85       	ldd	r23, Y+10	; 0x0a
     af6:	8b 85       	ldd	r24, Y+11	; 0x0b
     af8:	9c 85       	ldd	r25, Y+12	; 0x0c
     afa:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     afe:	69 87       	std	Y+9, r22	; 0x09
     b00:	7a 87       	std	Y+10, r23	; 0x0a
     b02:	8b 87       	std	Y+11, r24	; 0x0b
     b04:	9c 87       	std	Y+12, r25	; 0x0c

		gy += twoKp * halfey;
     b06:	2d 89       	ldd	r18, Y+21	; 0x15
     b08:	3e 89       	ldd	r19, Y+22	; 0x16
     b0a:	4f 89       	ldd	r20, Y+23	; 0x17
     b0c:	58 8d       	ldd	r21, Y+24	; 0x18
     b0e:	6d 81       	ldd	r22, Y+5	; 0x05
     b10:	7e 81       	ldd	r23, Y+6	; 0x06
     b12:	8f 81       	ldd	r24, Y+7	; 0x07
     b14:	98 85       	ldd	r25, Y+8	; 0x08
     b16:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     b1a:	4b 01       	movw	r8, r22
     b1c:	5c 01       	movw	r10, r24
     b1e:	a7 01       	movw	r20, r14
     b20:	96 01       	movw	r18, r12
     b22:	69 8d       	ldd	r22, Y+25	; 0x19
     b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b26:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b28:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b2a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     b2e:	9b 01       	movw	r18, r22
     b30:	ac 01       	movw	r20, r24
     b32:	c5 01       	movw	r24, r10
     b34:	b4 01       	movw	r22, r8
     b36:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     b3a:	9b 01       	movw	r18, r22
     b3c:	ac 01       	movw	r20, r24
     b3e:	6d 85       	ldd	r22, Y+13	; 0x0d
     b40:	7e 85       	ldd	r23, Y+14	; 0x0e
     b42:	8f 85       	ldd	r24, Y+15	; 0x0f
     b44:	98 89       	ldd	r25, Y+16	; 0x10
     b46:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     b4a:	6d 87       	std	Y+13, r22	; 0x0d
     b4c:	7e 87       	std	Y+14, r23	; 0x0e
     b4e:	8f 87       	std	Y+15, r24	; 0x0f
     b50:	98 8b       	std	Y+16, r25	; 0x10

		gz += twoKp * halfez;
     b52:	29 81       	ldd	r18, Y+1	; 0x01
     b54:	3a 81       	ldd	r19, Y+2	; 0x02
     b56:	4b 81       	ldd	r20, Y+3	; 0x03
     b58:	5c 81       	ldd	r21, Y+4	; 0x04
     b5a:	69 8d       	ldd	r22, Y+25	; 0x19
     b5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b60:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b62:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     b66:	6b 01       	movw	r12, r22
     b68:	7c 01       	movw	r14, r24
     b6a:	2d 89       	ldd	r18, Y+21	; 0x15
     b6c:	3e 89       	ldd	r19, Y+22	; 0x16
     b6e:	4f 89       	ldd	r20, Y+23	; 0x17
     b70:	58 8d       	ldd	r21, Y+24	; 0x18
     b72:	6d 8d       	ldd	r22, Y+29	; 0x1d
     b74:	7e 8d       	ldd	r23, Y+30	; 0x1e
     b76:	8f 8d       	ldd	r24, Y+31	; 0x1f
     b78:	98 a1       	ldd	r25, Y+32	; 0x20
     b7a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     b7e:	9b 01       	movw	r18, r22
     b80:	ac 01       	movw	r20, r24
     b82:	c7 01       	movw	r24, r14
     b84:	b6 01       	movw	r22, r12
     b86:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
     b8e:	69 89       	ldd	r22, Y+17	; 0x11
     b90:	7a 89       	ldd	r23, Y+18	; 0x12
     b92:	8b 89       	ldd	r24, Y+19	; 0x13
     b94:	9c 89       	ldd	r25, Y+20	; 0x14
     b96:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     b9a:	69 8b       	std	Y+17, r22	; 0x11
     b9c:	7a 8b       	std	Y+18, r23	; 0x12
     b9e:	8b 8b       	std	Y+19, r24	; 0x13
     ba0:	9c 8b       	std	Y+20, r25	; 0x14

	}

	// Integrate rate of change of quaternion

	gx *= (0.5f * (1.0f / sampleFreq)); // pre-multiply common factors
     ba2:	2f e1       	ldi	r18, 0x1F	; 31
     ba4:	33 ea       	ldi	r19, 0xA3	; 163
     ba6:	45 ef       	ldi	r20, 0xF5	; 245
     ba8:	5b e3       	ldi	r21, 0x3B	; 59
     baa:	69 85       	ldd	r22, Y+9	; 0x09
     bac:	7a 85       	ldd	r23, Y+10	; 0x0a
     bae:	8b 85       	ldd	r24, Y+11	; 0x0b
     bb0:	9c 85       	ldd	r25, Y+12	; 0x0c
     bb2:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     bb6:	69 87       	std	Y+9, r22	; 0x09
     bb8:	7a 87       	std	Y+10, r23	; 0x0a
     bba:	8b 87       	std	Y+11, r24	; 0x0b
     bbc:	9c 87       	std	Y+12, r25	; 0x0c

	gy *= (0.5f * (1.0f / sampleFreq));
     bbe:	2f e1       	ldi	r18, 0x1F	; 31
     bc0:	33 ea       	ldi	r19, 0xA3	; 163
     bc2:	45 ef       	ldi	r20, 0xF5	; 245
     bc4:	5b e3       	ldi	r21, 0x3B	; 59
     bc6:	6d 85       	ldd	r22, Y+13	; 0x0d
     bc8:	7e 85       	ldd	r23, Y+14	; 0x0e
     bca:	8f 85       	ldd	r24, Y+15	; 0x0f
     bcc:	98 89       	ldd	r25, Y+16	; 0x10
     bce:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     bd2:	6d 87       	std	Y+13, r22	; 0x0d
     bd4:	7e 87       	std	Y+14, r23	; 0x0e
     bd6:	8f 87       	std	Y+15, r24	; 0x0f
     bd8:	98 8b       	std	Y+16, r25	; 0x10

	gz *= (0.5f * (1.0f / sampleFreq));
     bda:	2f e1       	ldi	r18, 0x1F	; 31
     bdc:	33 ea       	ldi	r19, 0xA3	; 163
     bde:	45 ef       	ldi	r20, 0xF5	; 245
     be0:	5b e3       	ldi	r21, 0x3B	; 59
     be2:	69 89       	ldd	r22, Y+17	; 0x11
     be4:	7a 89       	ldd	r23, Y+18	; 0x12
     be6:	8b 89       	ldd	r24, Y+19	; 0x13
     be8:	9c 89       	ldd	r25, Y+20	; 0x14
     bea:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     bee:	69 8b       	std	Y+17, r22	; 0x11
     bf0:	7a 8b       	std	Y+18, r23	; 0x12
     bf2:	8b 8b       	std	Y+19, r24	; 0x13
     bf4:	9c 8b       	std	Y+20, r25	; 0x14

	qa = q0;
     bf6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <q0>
     bfa:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <q0+0x1>
     bfe:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <q0+0x2>
     c02:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <q0+0x3>
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	9a 83       	std	Y+2, r25	; 0x02
     c0a:	ab 83       	std	Y+3, r26	; 0x03
     c0c:	bc 83       	std	Y+4, r27	; 0x04

	qb = q1;
     c0e:	c0 90 80 01 	lds	r12, 0x0180	; 0x800180 <q1>
     c12:	d0 90 81 01 	lds	r13, 0x0181	; 0x800181 <q1+0x1>
     c16:	e0 90 82 01 	lds	r14, 0x0182	; 0x800182 <q1+0x2>
     c1a:	f0 90 83 01 	lds	r15, 0x0183	; 0x800183 <q1+0x3>

	qc = q2;
     c1e:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <q2>
     c22:	90 91 7d 01 	lds	r25, 0x017D	; 0x80017d <q2+0x1>
     c26:	a0 91 7e 01 	lds	r26, 0x017E	; 0x80017e <q2+0x2>
     c2a:	b0 91 7f 01 	lds	r27, 0x017F	; 0x80017f <q2+0x3>
     c2e:	8d 83       	std	Y+5, r24	; 0x05
     c30:	9e 83       	std	Y+6, r25	; 0x06
     c32:	af 83       	std	Y+7, r26	; 0x07
     c34:	b8 87       	std	Y+8, r27	; 0x08

	//update

	q0 += (-qb * gx - qc * gy - q3 * gz);
     c36:	40 90 78 01 	lds	r4, 0x0178	; 0x800178 <q3>
     c3a:	50 90 79 01 	lds	r5, 0x0179	; 0x800179 <q3+0x1>
     c3e:	60 90 7a 01 	lds	r6, 0x017A	; 0x80017a <q3+0x2>
     c42:	70 90 7b 01 	lds	r7, 0x017B	; 0x80017b <q3+0x3>
     c46:	c7 01       	movw	r24, r14
     c48:	b6 01       	movw	r22, r12
     c4a:	90 58       	subi	r25, 0x80	; 128
     c4c:	29 85       	ldd	r18, Y+9	; 0x09
     c4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c50:	4b 85       	ldd	r20, Y+11	; 0x0b
     c52:	5c 85       	ldd	r21, Y+12	; 0x0c
     c54:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     c58:	4b 01       	movw	r8, r22
     c5a:	5c 01       	movw	r10, r24
     c5c:	2d 81       	ldd	r18, Y+5	; 0x05
     c5e:	3e 81       	ldd	r19, Y+6	; 0x06
     c60:	4f 81       	ldd	r20, Y+7	; 0x07
     c62:	58 85       	ldd	r21, Y+8	; 0x08
     c64:	6d 85       	ldd	r22, Y+13	; 0x0d
     c66:	7e 85       	ldd	r23, Y+14	; 0x0e
     c68:	8f 85       	ldd	r24, Y+15	; 0x0f
     c6a:	98 89       	ldd	r25, Y+16	; 0x10
     c6c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     c70:	9b 01       	movw	r18, r22
     c72:	ac 01       	movw	r20, r24
     c74:	c5 01       	movw	r24, r10
     c76:	b4 01       	movw	r22, r8
     c78:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     c7c:	4b 01       	movw	r8, r22
     c7e:	5c 01       	movw	r10, r24
     c80:	a3 01       	movw	r20, r6
     c82:	92 01       	movw	r18, r4
     c84:	69 89       	ldd	r22, Y+17	; 0x11
     c86:	7a 89       	ldd	r23, Y+18	; 0x12
     c88:	8b 89       	ldd	r24, Y+19	; 0x13
     c8a:	9c 89       	ldd	r25, Y+20	; 0x14
     c8c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     c90:	9b 01       	movw	r18, r22
     c92:	ac 01       	movw	r20, r24
     c94:	c5 01       	movw	r24, r10
     c96:	b4 01       	movw	r22, r8
     c98:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     c9c:	29 81       	ldd	r18, Y+1	; 0x01
     c9e:	3a 81       	ldd	r19, Y+2	; 0x02
     ca0:	4b 81       	ldd	r20, Y+3	; 0x03
     ca2:	5c 81       	ldd	r21, Y+4	; 0x04
     ca4:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     ca8:	69 8f       	std	Y+25, r22	; 0x19
     caa:	7a 8f       	std	Y+26, r23	; 0x1a
     cac:	8b 8f       	std	Y+27, r24	; 0x1b
     cae:	9c 8f       	std	Y+28, r25	; 0x1c

	q1 += (qa * gx + qc * gz - q3 * gy);
     cb0:	29 81       	ldd	r18, Y+1	; 0x01
     cb2:	3a 81       	ldd	r19, Y+2	; 0x02
     cb4:	4b 81       	ldd	r20, Y+3	; 0x03
     cb6:	5c 81       	ldd	r21, Y+4	; 0x04
     cb8:	69 85       	ldd	r22, Y+9	; 0x09
     cba:	7a 85       	ldd	r23, Y+10	; 0x0a
     cbc:	8b 85       	ldd	r24, Y+11	; 0x0b
     cbe:	9c 85       	ldd	r25, Y+12	; 0x0c
     cc0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     cc4:	4b 01       	movw	r8, r22
     cc6:	5c 01       	movw	r10, r24
     cc8:	2d 81       	ldd	r18, Y+5	; 0x05
     cca:	3e 81       	ldd	r19, Y+6	; 0x06
     ccc:	4f 81       	ldd	r20, Y+7	; 0x07
     cce:	58 85       	ldd	r21, Y+8	; 0x08
     cd0:	69 89       	ldd	r22, Y+17	; 0x11
     cd2:	7a 89       	ldd	r23, Y+18	; 0x12
     cd4:	8b 89       	ldd	r24, Y+19	; 0x13
     cd6:	9c 89       	ldd	r25, Y+20	; 0x14
     cd8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     cdc:	9b 01       	movw	r18, r22
     cde:	ac 01       	movw	r20, r24
     ce0:	c5 01       	movw	r24, r10
     ce2:	b4 01       	movw	r22, r8
     ce4:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     ce8:	4b 01       	movw	r8, r22
     cea:	5c 01       	movw	r10, r24
     cec:	a3 01       	movw	r20, r6
     cee:	92 01       	movw	r18, r4
     cf0:	6d 85       	ldd	r22, Y+13	; 0x0d
     cf2:	7e 85       	ldd	r23, Y+14	; 0x0e
     cf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     cf6:	98 89       	ldd	r25, Y+16	; 0x10
     cf8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     cfc:	9b 01       	movw	r18, r22
     cfe:	ac 01       	movw	r20, r24
     d00:	c5 01       	movw	r24, r10
     d02:	b4 01       	movw	r22, r8
     d04:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     d08:	a7 01       	movw	r20, r14
     d0a:	96 01       	movw	r18, r12
     d0c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     d10:	6d 8f       	std	Y+29, r22	; 0x1d
     d12:	7e 8f       	std	Y+30, r23	; 0x1e
     d14:	8f 8f       	std	Y+31, r24	; 0x1f
     d16:	98 a3       	std	Y+32, r25	; 0x20

	q2 += (qa * gy - qb * gz + q3 * gx);
     d18:	29 81       	ldd	r18, Y+1	; 0x01
     d1a:	3a 81       	ldd	r19, Y+2	; 0x02
     d1c:	4b 81       	ldd	r20, Y+3	; 0x03
     d1e:	5c 81       	ldd	r21, Y+4	; 0x04
     d20:	6d 85       	ldd	r22, Y+13	; 0x0d
     d22:	7e 85       	ldd	r23, Y+14	; 0x0e
     d24:	8f 85       	ldd	r24, Y+15	; 0x0f
     d26:	98 89       	ldd	r25, Y+16	; 0x10
     d28:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     d2c:	4b 01       	movw	r8, r22
     d2e:	5c 01       	movw	r10, r24
     d30:	a7 01       	movw	r20, r14
     d32:	96 01       	movw	r18, r12
     d34:	69 89       	ldd	r22, Y+17	; 0x11
     d36:	7a 89       	ldd	r23, Y+18	; 0x12
     d38:	8b 89       	ldd	r24, Y+19	; 0x13
     d3a:	9c 89       	ldd	r25, Y+20	; 0x14
     d3c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     d40:	9b 01       	movw	r18, r22
     d42:	ac 01       	movw	r20, r24
     d44:	c5 01       	movw	r24, r10
     d46:	b4 01       	movw	r22, r8
     d48:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     d4c:	4b 01       	movw	r8, r22
     d4e:	5c 01       	movw	r10, r24
     d50:	a3 01       	movw	r20, r6
     d52:	92 01       	movw	r18, r4
     d54:	69 85       	ldd	r22, Y+9	; 0x09
     d56:	7a 85       	ldd	r23, Y+10	; 0x0a
     d58:	8b 85       	ldd	r24, Y+11	; 0x0b
     d5a:	9c 85       	ldd	r25, Y+12	; 0x0c
     d5c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     d60:	9b 01       	movw	r18, r22
     d62:	ac 01       	movw	r20, r24
     d64:	c5 01       	movw	r24, r10
     d66:	b4 01       	movw	r22, r8
     d68:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     d6c:	2d 81       	ldd	r18, Y+5	; 0x05
     d6e:	3e 81       	ldd	r19, Y+6	; 0x06
     d70:	4f 81       	ldd	r20, Y+7	; 0x07
     d72:	58 85       	ldd	r21, Y+8	; 0x08
     d74:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     d78:	6d 8b       	std	Y+21, r22	; 0x15
     d7a:	7e 8b       	std	Y+22, r23	; 0x16
     d7c:	8f 8b       	std	Y+23, r24	; 0x17
     d7e:	98 8f       	std	Y+24, r25	; 0x18

	q3 += (qa * gz + qb * gy - qc * gx);
     d80:	29 81       	ldd	r18, Y+1	; 0x01
     d82:	3a 81       	ldd	r19, Y+2	; 0x02
     d84:	4b 81       	ldd	r20, Y+3	; 0x03
     d86:	5c 81       	ldd	r21, Y+4	; 0x04
     d88:	69 89       	ldd	r22, Y+17	; 0x11
     d8a:	7a 89       	ldd	r23, Y+18	; 0x12
     d8c:	8b 89       	ldd	r24, Y+19	; 0x13
     d8e:	9c 89       	ldd	r25, Y+20	; 0x14
     d90:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     d94:	4b 01       	movw	r8, r22
     d96:	5c 01       	movw	r10, r24
     d98:	a7 01       	movw	r20, r14
     d9a:	96 01       	movw	r18, r12
     d9c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d9e:	7e 85       	ldd	r23, Y+14	; 0x0e
     da0:	8f 85       	ldd	r24, Y+15	; 0x0f
     da2:	98 89       	ldd	r25, Y+16	; 0x10
     da4:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     da8:	9b 01       	movw	r18, r22
     daa:	ac 01       	movw	r20, r24
     dac:	c5 01       	movw	r24, r10
     dae:	b4 01       	movw	r22, r8
     db0:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     db4:	6b 01       	movw	r12, r22
     db6:	7c 01       	movw	r14, r24
     db8:	2d 81       	ldd	r18, Y+5	; 0x05
     dba:	3e 81       	ldd	r19, Y+6	; 0x06
     dbc:	4f 81       	ldd	r20, Y+7	; 0x07
     dbe:	58 85       	ldd	r21, Y+8	; 0x08
     dc0:	69 85       	ldd	r22, Y+9	; 0x09
     dc2:	7a 85       	ldd	r23, Y+10	; 0x0a
     dc4:	8b 85       	ldd	r24, Y+11	; 0x0b
     dc6:	9c 85       	ldd	r25, Y+12	; 0x0c
     dc8:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     dcc:	9b 01       	movw	r18, r22
     dce:	ac 01       	movw	r20, r24
     dd0:	c7 01       	movw	r24, r14
     dd2:	b6 01       	movw	r22, r12
     dd4:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     dd8:	a3 01       	movw	r20, r6
     dda:	92 01       	movw	r18, r4
     ddc:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     de0:	4b 01       	movw	r8, r22
     de2:	5c 01       	movw	r10, r24

	// Normalise quaternion

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     de4:	29 8d       	ldd	r18, Y+25	; 0x19
     de6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     de8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     dea:	5c 8d       	ldd	r21, Y+28	; 0x1c
     dec:	ca 01       	movw	r24, r20
     dee:	b9 01       	movw	r22, r18
     df0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     df4:	6b 01       	movw	r12, r22
     df6:	7c 01       	movw	r14, r24
     df8:	2d 8d       	ldd	r18, Y+29	; 0x1d
     dfa:	3e 8d       	ldd	r19, Y+30	; 0x1e
     dfc:	4f 8d       	ldd	r20, Y+31	; 0x1f
     dfe:	58 a1       	ldd	r21, Y+32	; 0x20
     e00:	ca 01       	movw	r24, r20
     e02:	b9 01       	movw	r22, r18
     e04:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     e08:	9b 01       	movw	r18, r22
     e0a:	ac 01       	movw	r20, r24
     e0c:	c7 01       	movw	r24, r14
     e0e:	b6 01       	movw	r22, r12
     e10:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     e14:	6b 01       	movw	r12, r22
     e16:	7c 01       	movw	r14, r24
     e18:	2d 89       	ldd	r18, Y+21	; 0x15
     e1a:	3e 89       	ldd	r19, Y+22	; 0x16
     e1c:	4f 89       	ldd	r20, Y+23	; 0x17
     e1e:	58 8d       	ldd	r21, Y+24	; 0x18
     e20:	ca 01       	movw	r24, r20
     e22:	b9 01       	movw	r22, r18
     e24:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     e28:	9b 01       	movw	r18, r22
     e2a:	ac 01       	movw	r20, r24
     e2c:	c7 01       	movw	r24, r14
     e2e:	b6 01       	movw	r22, r12
     e30:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     e34:	6b 01       	movw	r12, r22
     e36:	7c 01       	movw	r14, r24
     e38:	a5 01       	movw	r20, r10
     e3a:	94 01       	movw	r18, r8
     e3c:	c5 01       	movw	r24, r10
     e3e:	b4 01       	movw	r22, r8
     e40:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     e44:	9b 01       	movw	r18, r22
     e46:	ac 01       	movw	r20, r24
     e48:	c7 01       	movw	r24, r14
     e4a:	b6 01       	movw	r22, r12
     e4c:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     e50:	0e 94 02 04 	call	0x804	; 0x804 <invSqrt>
     e54:	6b 01       	movw	r12, r22
     e56:	7c 01       	movw	r14, r24

	q0 *= recipNorm;
     e58:	9b 01       	movw	r18, r22
     e5a:	ac 01       	movw	r20, r24
     e5c:	69 8d       	ldd	r22, Y+25	; 0x19
     e5e:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e60:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e62:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e64:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     e68:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <q0>
     e6c:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <q0+0x1>
     e70:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <q0+0x2>
     e74:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <q0+0x3>

	q1 *= recipNorm;
     e78:	a7 01       	movw	r20, r14
     e7a:	96 01       	movw	r18, r12
     e7c:	6d 8d       	ldd	r22, Y+29	; 0x1d
     e7e:	7e 8d       	ldd	r23, Y+30	; 0x1e
     e80:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e82:	98 a1       	ldd	r25, Y+32	; 0x20
     e84:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     e88:	60 93 80 01 	sts	0x0180, r22	; 0x800180 <q1>
     e8c:	70 93 81 01 	sts	0x0181, r23	; 0x800181 <q1+0x1>
     e90:	80 93 82 01 	sts	0x0182, r24	; 0x800182 <q1+0x2>
     e94:	90 93 83 01 	sts	0x0183, r25	; 0x800183 <q1+0x3>

	q2 *= recipNorm;
     e98:	a7 01       	movw	r20, r14
     e9a:	96 01       	movw	r18, r12
     e9c:	6d 89       	ldd	r22, Y+21	; 0x15
     e9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ea0:	8f 89       	ldd	r24, Y+23	; 0x17
     ea2:	98 8d       	ldd	r25, Y+24	; 0x18
     ea4:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     ea8:	60 93 7c 01 	sts	0x017C, r22	; 0x80017c <q2>
     eac:	70 93 7d 01 	sts	0x017D, r23	; 0x80017d <q2+0x1>
     eb0:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <q2+0x2>
     eb4:	90 93 7f 01 	sts	0x017F, r25	; 0x80017f <q2+0x3>

	q3 *= recipNorm;
     eb8:	a7 01       	movw	r20, r14
     eba:	96 01       	movw	r18, r12
     ebc:	c5 01       	movw	r24, r10
     ebe:	b4 01       	movw	r22, r8
     ec0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     ec4:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <q3>
     ec8:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <q3+0x1>
     ecc:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <q3+0x2>
     ed0:	90 93 7b 01 	sts	0x017B, r25	; 0x80017b <q3+0x3>

}
     ed4:	a0 96       	adiw	r28, 0x20	; 32
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	f8 94       	cli
     eda:	de bf       	out	0x3e, r29	; 62
     edc:	0f be       	out	0x3f, r0	; 63
     ede:	cd bf       	out	0x3d, r28	; 61
     ee0:	df 91       	pop	r29
     ee2:	cf 91       	pop	r28
     ee4:	1f 91       	pop	r17
     ee6:	0f 91       	pop	r16
     ee8:	ff 90       	pop	r15
     eea:	ef 90       	pop	r14
     eec:	df 90       	pop	r13
     eee:	cf 90       	pop	r12
     ef0:	bf 90       	pop	r11
     ef2:	af 90       	pop	r10
     ef4:	9f 90       	pop	r9
     ef6:	8f 90       	pop	r8
     ef8:	7f 90       	pop	r7
     efa:	6f 90       	pop	r6
     efc:	5f 90       	pop	r5
     efe:	4f 90       	pop	r4
     f00:	08 95       	ret

00000f02 <q2Angle>:

void q2Angle(float angle[3])
{
     f02:	4f 92       	push	r4
     f04:	5f 92       	push	r5
     f06:	6f 92       	push	r6
     f08:	7f 92       	push	r7
     f0a:	8f 92       	push	r8
     f0c:	9f 92       	push	r9
     f0e:	af 92       	push	r10
     f10:	bf 92       	push	r11
     f12:	cf 92       	push	r12
     f14:	df 92       	push	r13
     f16:	ef 92       	push	r14
     f18:	ff 92       	push	r15
     f1a:	cf 93       	push	r28
     f1c:	df 93       	push	r29
     f1e:	cd b7       	in	r28, 0x3d	; 61
     f20:	de b7       	in	r29, 0x3e	; 62
     f22:	2e 97       	sbiw	r28, 0x0e	; 14
     f24:	0f b6       	in	r0, 0x3f	; 63
     f26:	f8 94       	cli
     f28:	de bf       	out	0x3e, r29	; 62
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	cd bf       	out	0x3d, r28	; 61
     f2e:	9e 87       	std	Y+14, r25	; 0x0e
     f30:	8d 87       	std	Y+13, r24	; 0x0d
	angle[2] = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2*q2 - 2 * q3* q3 + 1)* 57.3; // yaw
     f32:	c0 90 7c 01 	lds	r12, 0x017C	; 0x80017c <q2>
     f36:	d0 90 7d 01 	lds	r13, 0x017D	; 0x80017d <q2+0x1>
     f3a:	e0 90 7e 01 	lds	r14, 0x017E	; 0x80017e <q2+0x2>
     f3e:	f0 90 7f 01 	lds	r15, 0x017F	; 0x80017f <q2+0x3>
     f42:	80 90 78 01 	lds	r8, 0x0178	; 0x800178 <q3>
     f46:	90 90 79 01 	lds	r9, 0x0179	; 0x800179 <q3+0x1>
     f4a:	a0 90 7a 01 	lds	r10, 0x017A	; 0x80017a <q3+0x2>
     f4e:	b0 90 7b 01 	lds	r11, 0x017B	; 0x80017b <q3+0x3>
     f52:	40 90 80 01 	lds	r4, 0x0180	; 0x800180 <q1>
     f56:	50 90 81 01 	lds	r5, 0x0181	; 0x800181 <q1+0x1>
     f5a:	60 90 82 01 	lds	r6, 0x0182	; 0x800182 <q1+0x2>
     f5e:	70 90 83 01 	lds	r7, 0x0183	; 0x800183 <q1+0x3>
     f62:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <q0>
     f66:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <q0+0x1>
     f6a:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <q0+0x2>
     f6e:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <q0+0x3>
     f72:	9b 01       	movw	r18, r22
     f74:	ac 01       	movw	r20, r24
     f76:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     f7a:	69 87       	std	Y+9, r22	; 0x09
     f7c:	7a 87       	std	Y+10, r23	; 0x0a
     f7e:	8b 87       	std	Y+11, r24	; 0x0b
     f80:	9c 87       	std	Y+12, r25	; 0x0c
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	40 e0       	ldi	r20, 0x00	; 0
     f88:	50 ec       	ldi	r21, 0xC0	; 192
     f8a:	c7 01       	movw	r24, r14
     f8c:	b6 01       	movw	r22, r12
     f8e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     f92:	a7 01       	movw	r20, r14
     f94:	96 01       	movw	r18, r12
     f96:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     f9a:	69 83       	std	Y+1, r22	; 0x01
     f9c:	7a 83       	std	Y+2, r23	; 0x02
     f9e:	8b 83       	std	Y+3, r24	; 0x03
     fa0:	9c 83       	std	Y+4, r25	; 0x04
     fa2:	a5 01       	movw	r20, r10
     fa4:	94 01       	movw	r18, r8
     fa6:	c5 01       	movw	r24, r10
     fa8:	b4 01       	movw	r22, r8
     faa:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     fae:	a5 01       	movw	r20, r10
     fb0:	94 01       	movw	r18, r8
     fb2:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     fb6:	9b 01       	movw	r18, r22
     fb8:	ac 01       	movw	r20, r24
     fba:	69 81       	ldd	r22, Y+1	; 0x01
     fbc:	7a 81       	ldd	r23, Y+2	; 0x02
     fbe:	8b 81       	ldd	r24, Y+3	; 0x03
     fc0:	9c 81       	ldd	r25, Y+4	; 0x04
     fc2:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e8       	ldi	r20, 0x80	; 128
     fcc:	5f e3       	ldi	r21, 0x3F	; 63
     fce:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     fd2:	69 83       	std	Y+1, r22	; 0x01
     fd4:	7a 83       	std	Y+2, r23	; 0x02
     fd6:	8b 83       	std	Y+3, r24	; 0x03
     fd8:	9c 83       	std	Y+4, r25	; 0x04
     fda:	a3 01       	movw	r20, r6
     fdc:	92 01       	movw	r18, r4
     fde:	c3 01       	movw	r24, r6
     fe0:	b2 01       	movw	r22, r4
     fe2:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
     fe6:	a7 01       	movw	r20, r14
     fe8:	96 01       	movw	r18, r12
     fea:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
     fee:	6d 83       	std	Y+5, r22	; 0x05
     ff0:	7e 83       	std	Y+6, r23	; 0x06
     ff2:	8f 83       	std	Y+7, r24	; 0x07
     ff4:	98 87       	std	Y+8, r25	; 0x08
     ff6:	29 85       	ldd	r18, Y+9	; 0x09
     ff8:	3a 85       	ldd	r19, Y+10	; 0x0a
     ffa:	4b 85       	ldd	r20, Y+11	; 0x0b
     ffc:	5c 85       	ldd	r21, Y+12	; 0x0c
     ffe:	c5 01       	movw	r24, r10
    1000:	b4 01       	movw	r22, r8
    1002:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1006:	9b 01       	movw	r18, r22
    1008:	ac 01       	movw	r20, r24
    100a:	6d 81       	ldd	r22, Y+5	; 0x05
    100c:	7e 81       	ldd	r23, Y+6	; 0x06
    100e:	8f 81       	ldd	r24, Y+7	; 0x07
    1010:	98 85       	ldd	r25, Y+8	; 0x08
    1012:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
    1016:	29 81       	ldd	r18, Y+1	; 0x01
    1018:	3a 81       	ldd	r19, Y+2	; 0x02
    101a:	4b 81       	ldd	r20, Y+3	; 0x03
    101c:	5c 81       	ldd	r21, Y+4	; 0x04
    101e:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atan2>
    1022:	23 e3       	ldi	r18, 0x33	; 51
    1024:	33 e3       	ldi	r19, 0x33	; 51
    1026:	45 e6       	ldi	r20, 0x65	; 101
    1028:	52 e4       	ldi	r21, 0x42	; 66
    102a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    102e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1030:	fe 85       	ldd	r31, Y+14	; 0x0e
    1032:	60 87       	std	Z+8, r22	; 0x08
    1034:	71 87       	std	Z+9, r23	; 0x09
    1036:	82 87       	std	Z+10, r24	; 0x0a
    1038:	93 87       	std	Z+11, r25	; 0x0b

	angle[1] = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; // pitch
    103a:	20 e0       	ldi	r18, 0x00	; 0
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 ec       	ldi	r21, 0xC0	; 192
    1042:	c3 01       	movw	r24, r6
    1044:	b2 01       	movw	r22, r4
    1046:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    104a:	69 83       	std	Y+1, r22	; 0x01
    104c:	7a 83       	std	Y+2, r23	; 0x02
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	9c 83       	std	Y+4, r25	; 0x04
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	c5 01       	movw	r24, r10
    1058:	b4 01       	movw	r22, r8
    105a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    105e:	6d 83       	std	Y+5, r22	; 0x05
    1060:	7e 83       	std	Y+6, r23	; 0x06
    1062:	8f 83       	std	Y+7, r24	; 0x07
    1064:	98 87       	std	Y+8, r25	; 0x08
    1066:	29 85       	ldd	r18, Y+9	; 0x09
    1068:	3a 85       	ldd	r19, Y+10	; 0x0a
    106a:	4b 85       	ldd	r20, Y+11	; 0x0b
    106c:	5c 85       	ldd	r21, Y+12	; 0x0c
    106e:	c7 01       	movw	r24, r14
    1070:	b6 01       	movw	r22, r12
    1072:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1076:	9b 01       	movw	r18, r22
    1078:	ac 01       	movw	r20, r24
    107a:	6d 81       	ldd	r22, Y+5	; 0x05
    107c:	7e 81       	ldd	r23, Y+6	; 0x06
    107e:	8f 81       	ldd	r24, Y+7	; 0x07
    1080:	98 85       	ldd	r25, Y+8	; 0x08
    1082:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
    1086:	0e 94 2b 18 	call	0x3056	; 0x3056 <asin>
    108a:	23 e3       	ldi	r18, 0x33	; 51
    108c:	33 e3       	ldi	r19, 0x33	; 51
    108e:	45 e6       	ldi	r20, 0x65	; 101
    1090:	52 e4       	ldi	r21, 0x42	; 66
    1092:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1096:	ed 85       	ldd	r30, Y+13	; 0x0d
    1098:	fe 85       	ldd	r31, Y+14	; 0x0e
    109a:	64 83       	std	Z+4, r22	; 0x04
    109c:	75 83       	std	Z+5, r23	; 0x05
    109e:	86 83       	std	Z+6, r24	; 0x06
    10a0:	97 83       	std	Z+7, r25	; 0x07

	angle[0] = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
    10a2:	a7 01       	movw	r20, r14
    10a4:	96 01       	movw	r18, r12
    10a6:	c7 01       	movw	r24, r14
    10a8:	b6 01       	movw	r22, r12
    10aa:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
    10ae:	6d 83       	std	Y+5, r22	; 0x05
    10b0:	7e 83       	std	Y+6, r23	; 0x06
    10b2:	8f 83       	std	Y+7, r24	; 0x07
    10b4:	98 87       	std	Y+8, r25	; 0x08
    10b6:	29 81       	ldd	r18, Y+1	; 0x01
    10b8:	3a 81       	ldd	r19, Y+2	; 0x02
    10ba:	4b 81       	ldd	r20, Y+3	; 0x03
    10bc:	5c 81       	ldd	r21, Y+4	; 0x04
    10be:	c3 01       	movw	r24, r6
    10c0:	b2 01       	movw	r22, r4
    10c2:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    10c6:	69 83       	std	Y+1, r22	; 0x01
    10c8:	7a 83       	std	Y+2, r23	; 0x02
    10ca:	8b 83       	std	Y+3, r24	; 0x03
    10cc:	9c 83       	std	Y+4, r25	; 0x04
    10ce:	2d 81       	ldd	r18, Y+5	; 0x05
    10d0:	3e 81       	ldd	r19, Y+6	; 0x06
    10d2:	4f 81       	ldd	r20, Y+7	; 0x07
    10d4:	58 85       	ldd	r21, Y+8	; 0x08
    10d6:	c7 01       	movw	r24, r14
    10d8:	b6 01       	movw	r22, r12
    10da:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    10de:	9b 01       	movw	r18, r22
    10e0:	ac 01       	movw	r20, r24
    10e2:	69 81       	ldd	r22, Y+1	; 0x01
    10e4:	7a 81       	ldd	r23, Y+2	; 0x02
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
    10ee:	20 e0       	ldi	r18, 0x00	; 0
    10f0:	30 e0       	ldi	r19, 0x00	; 0
    10f2:	40 e8       	ldi	r20, 0x80	; 128
    10f4:	5f e3       	ldi	r21, 0x3F	; 63
    10f6:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
    10fa:	6b 01       	movw	r12, r22
    10fc:	7c 01       	movw	r14, r24
    10fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1100:	3e 81       	ldd	r19, Y+6	; 0x06
    1102:	4f 81       	ldd	r20, Y+7	; 0x07
    1104:	58 85       	ldd	r21, Y+8	; 0x08
    1106:	c5 01       	movw	r24, r10
    1108:	b4 01       	movw	r22, r8
    110a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    110e:	4b 01       	movw	r8, r22
    1110:	5c 01       	movw	r10, r24
    1112:	29 85       	ldd	r18, Y+9	; 0x09
    1114:	3a 85       	ldd	r19, Y+10	; 0x0a
    1116:	4b 85       	ldd	r20, Y+11	; 0x0b
    1118:	5c 85       	ldd	r21, Y+12	; 0x0c
    111a:	c3 01       	movw	r24, r6
    111c:	b2 01       	movw	r22, r4
    111e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1122:	9b 01       	movw	r18, r22
    1124:	ac 01       	movw	r20, r24
    1126:	c5 01       	movw	r24, r10
    1128:	b4 01       	movw	r22, r8
    112a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
    112e:	a7 01       	movw	r20, r14
    1130:	96 01       	movw	r18, r12
    1132:	0e 94 59 18 	call	0x30b2	; 0x30b2 <atan2>
    1136:	23 e3       	ldi	r18, 0x33	; 51
    1138:	33 e3       	ldi	r19, 0x33	; 51
    113a:	45 e6       	ldi	r20, 0x65	; 101
    113c:	52 e4       	ldi	r21, 0x42	; 66
    113e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1142:	ed 85       	ldd	r30, Y+13	; 0x0d
    1144:	fe 85       	ldd	r31, Y+14	; 0x0e
    1146:	60 83       	st	Z, r22
    1148:	71 83       	std	Z+1, r23	; 0x01
    114a:	82 83       	std	Z+2, r24	; 0x02
    114c:	93 83       	std	Z+3, r25	; 0x03
    114e:	2e 96       	adiw	r28, 0x0e	; 14
    1150:	0f b6       	in	r0, 0x3f	; 63
    1152:	f8 94       	cli
    1154:	de bf       	out	0x3e, r29	; 62
    1156:	0f be       	out	0x3f, r0	; 63
    1158:	cd bf       	out	0x3d, r28	; 61
    115a:	df 91       	pop	r29
    115c:	cf 91       	pop	r28
    115e:	ff 90       	pop	r15
    1160:	ef 90       	pop	r14
    1162:	df 90       	pop	r13
    1164:	cf 90       	pop	r12
    1166:	bf 90       	pop	r11
    1168:	af 90       	pop	r10
    116a:	9f 90       	pop	r9
    116c:	8f 90       	pop	r8
    116e:	7f 90       	pop	r7
    1170:	6f 90       	pop	r6
    1172:	5f 90       	pop	r5
    1174:	4f 90       	pop	r4
    1176:	08 95       	ret

00001178 <MPU_Start_Loc>:
	MPU_Calib(AccData,GyroData);
}

void MPU_Start_Loc(void)
{
	I2C_Start_Wait(MPU6050_addr);								/* I2C start with device write address */
    1178:	80 ed       	ldi	r24, 0xD0	; 208
    117a:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <I2C_Start_Wait>
	I2C_Write(0x3B);							/* Write start location address from where to read */
    117e:	8b e3       	ldi	r24, 0x3B	; 59
    1180:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
    1184:	81 ed       	ldi	r24, 0xD1	; 209
    1186:	0e 94 00 17 	call	0x2e00	; 0x2e00 <I2C_Repeated_Start>
    118a:	08 95       	ret

0000118c <MPU_read>:
}
void MPU_read(float Acc[3], float Gyro[3])
{
    118c:	4f 92       	push	r4
    118e:	5f 92       	push	r5
    1190:	6f 92       	push	r6
    1192:	7f 92       	push	r7
    1194:	af 92       	push	r10
    1196:	bf 92       	push	r11
    1198:	cf 92       	push	r12
    119a:	df 92       	push	r13
    119c:	ef 92       	push	r14
    119e:	ff 92       	push	r15
    11a0:	0f 93       	push	r16
    11a2:	1f 93       	push	r17
    11a4:	cf 93       	push	r28
    11a6:	df 93       	push	r29
    11a8:	8c 01       	movw	r16, r24
    11aa:	eb 01       	movw	r28, r22
	MPU_Start_Loc();									/* Read Gyro values */
    11ac:	0e 94 bc 08 	call	0x1178	; 0x1178 <MPU_Start_Loc>
	Acc[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    11b0:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    11b4:	f8 2e       	mov	r15, r24
    11b6:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    11ba:	6f 2d       	mov	r22, r15
    11bc:	70 e0       	ldi	r23, 0x00	; 0
    11be:	76 2f       	mov	r23, r22
    11c0:	66 27       	eor	r22, r22
    11c2:	68 2b       	or	r22, r24
    11c4:	07 2e       	mov	r0, r23
    11c6:	00 0c       	add	r0, r0
    11c8:	88 0b       	sbc	r24, r24
    11ca:	99 0b       	sbc	r25, r25
    11cc:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
    11d0:	f8 01       	movw	r30, r16
    11d2:	60 83       	st	Z, r22
    11d4:	71 83       	std	Z+1, r23	; 0x01
    11d6:	82 83       	std	Z+2, r24	; 0x02
    11d8:	93 83       	std	Z+3, r25	; 0x03
	Acc[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    11da:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    11de:	f8 2e       	mov	r15, r24
    11e0:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    11e4:	6f 2d       	mov	r22, r15
    11e6:	70 e0       	ldi	r23, 0x00	; 0
    11e8:	76 2f       	mov	r23, r22
    11ea:	66 27       	eor	r22, r22
    11ec:	68 2b       	or	r22, r24
    11ee:	07 2e       	mov	r0, r23
    11f0:	00 0c       	add	r0, r0
    11f2:	88 0b       	sbc	r24, r24
    11f4:	99 0b       	sbc	r25, r25
    11f6:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
    11fa:	f8 01       	movw	r30, r16
    11fc:	64 83       	std	Z+4, r22	; 0x04
    11fe:	75 83       	std	Z+5, r23	; 0x05
    1200:	86 83       	std	Z+6, r24	; 0x06
    1202:	97 83       	std	Z+7, r25	; 0x07
	Acc[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1204:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    1208:	f8 2e       	mov	r15, r24
    120a:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    120e:	6f 2d       	mov	r22, r15
    1210:	70 e0       	ldi	r23, 0x00	; 0
    1212:	76 2f       	mov	r23, r22
    1214:	66 27       	eor	r22, r22
    1216:	68 2b       	or	r22, r24
    1218:	07 2e       	mov	r0, r23
    121a:	00 0c       	add	r0, r0
    121c:	88 0b       	sbc	r24, r24
    121e:	99 0b       	sbc	r25, r25
    1220:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
    1224:	f8 01       	movw	r30, r16
    1226:	60 87       	std	Z+8, r22	; 0x08
    1228:	71 87       	std	Z+9, r23	; 0x09
    122a:	82 87       	std	Z+10, r24	; 0x0a
    122c:	93 87       	std	Z+11, r25	; 0x0b
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    122e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    1232:	f8 2e       	mov	r15, r24
    1234:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    1238:	6f 2d       	mov	r22, r15
    123a:	70 e0       	ldi	r23, 0x00	; 0
    123c:	76 2f       	mov	r23, r22
    123e:	66 27       	eor	r22, r22
    1240:	68 2b       	or	r22, r24
    1242:	07 2e       	mov	r0, r23
    1244:	00 0c       	add	r0, r0
    1246:	88 0b       	sbc	r24, r24
    1248:	99 0b       	sbc	r25, r25
    124a:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
    124e:	60 93 39 02 	sts	0x0239, r22	; 0x800239 <Temperature>
    1252:	70 93 3a 02 	sts	0x023A, r23	; 0x80023a <Temperature+0x1>
    1256:	80 93 3b 02 	sts	0x023B, r24	; 0x80023b <Temperature+0x2>
    125a:	90 93 3c 02 	sts	0x023C, r25	; 0x80023c <Temperature+0x3>
	Gyro[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    125e:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    1262:	f8 2e       	mov	r15, r24
    1264:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    1268:	6f 2d       	mov	r22, r15
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	76 2f       	mov	r23, r22
    126e:	66 27       	eor	r22, r22
    1270:	68 2b       	or	r22, r24
    1272:	07 2e       	mov	r0, r23
    1274:	00 0c       	add	r0, r0
    1276:	88 0b       	sbc	r24, r24
    1278:	99 0b       	sbc	r25, r25
    127a:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
    127e:	68 83       	st	Y, r22
    1280:	79 83       	std	Y+1, r23	; 0x01
    1282:	8a 83       	std	Y+2, r24	; 0x02
    1284:	9b 83       	std	Y+3, r25	; 0x03
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1286:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    128a:	f8 2e       	mov	r15, r24
    128c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    1290:	6f 2d       	mov	r22, r15
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	76 2f       	mov	r23, r22
    1296:	66 27       	eor	r22, r22
    1298:	68 2b       	or	r22, r24
    129a:	07 2e       	mov	r0, r23
    129c:	00 0c       	add	r0, r0
    129e:	88 0b       	sbc	r24, r24
    12a0:	99 0b       	sbc	r25, r25
    12a2:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
    12a6:	6c 83       	std	Y+4, r22	; 0x04
    12a8:	7d 83       	std	Y+5, r23	; 0x05
    12aa:	8e 83       	std	Y+6, r24	; 0x06
    12ac:	9f 83       	std	Y+7, r25	; 0x07
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
    12ae:	0e 94 82 17 	call	0x2f04	; 0x2f04 <I2C_Read_Ack>
    12b2:	f8 2e       	mov	r15, r24
    12b4:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <I2C_Read_Nack>
    12b8:	6f 2d       	mov	r22, r15
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	76 2f       	mov	r23, r22
    12be:	66 27       	eor	r22, r22
    12c0:	68 2b       	or	r22, r24
    12c2:	07 2e       	mov	r0, r23
    12c4:	00 0c       	add	r0, r0
    12c6:	88 0b       	sbc	r24, r24
    12c8:	99 0b       	sbc	r25, r25
    12ca:	0e 94 67 19 	call	0x32ce	; 0x32ce <__floatsisf>
    12ce:	68 87       	std	Y+8, r22	; 0x08
    12d0:	79 87       	std	Y+9, r23	; 0x09
    12d2:	8a 87       	std	Y+10, r24	; 0x0a
    12d4:	9b 87       	std	Y+11, r25	; 0x0b
	I2C_Stop();
    12d6:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_Stop>
    12da:	0f 2e       	mov	r0, r31
    12dc:	fd e3       	ldi	r31, 0x3D	; 61
    12de:	ef 2e       	mov	r14, r31
    12e0:	f2 e0       	ldi	r31, 0x02	; 2
    12e2:	ff 2e       	mov	r15, r31
    12e4:	f0 2d       	mov	r31, r0
    12e6:	0f 2e       	mov	r0, r31
    12e8:	f9 e4       	ldi	r31, 0x49	; 73
    12ea:	cf 2e       	mov	r12, r31
    12ec:	f2 e0       	ldi	r31, 0x02	; 2
    12ee:	df 2e       	mov	r13, r31
    12f0:	f0 2d       	mov	r31, r0
    12f2:	0f 2e       	mov	r0, r31
    12f4:	f9 e4       	ldi	r31, 0x49	; 73
    12f6:	af 2e       	mov	r10, r31
    12f8:	f2 e0       	ldi	r31, 0x02	; 2
    12fa:	bf 2e       	mov	r11, r31
    12fc:	f0 2d       	mov	r31, r0
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
    12fe:	f7 01       	movw	r30, r14
    1300:	41 90       	ld	r4, Z+
    1302:	51 90       	ld	r5, Z+
    1304:	61 90       	ld	r6, Z+
    1306:	71 90       	ld	r7, Z+
    1308:	7f 01       	movw	r14, r30
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e0       	ldi	r20, 0x00	; 0
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	f8 01       	movw	r30, r16
    1314:	60 81       	ld	r22, Z
    1316:	71 81       	ldd	r23, Z+1	; 0x01
    1318:	82 81       	ldd	r24, Z+2	; 0x02
    131a:	93 81       	ldd	r25, Z+3	; 0x03
    131c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1320:	2d ec       	ldi	r18, 0xCD	; 205
    1322:	3c ec       	ldi	r19, 0xCC	; 204
    1324:	4c e1       	ldi	r20, 0x1C	; 28
    1326:	51 e4       	ldi	r21, 0x41	; 65
    1328:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    132c:	20 e0       	ldi	r18, 0x00	; 0
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	40 e0       	ldi	r20, 0x00	; 0
    1332:	58 e3       	ldi	r21, 0x38	; 56
    1334:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1338:	a3 01       	movw	r20, r6
    133a:	92 01       	movw	r18, r4
    133c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
    1340:	f8 01       	movw	r30, r16
    1342:	61 93       	st	Z+, r22
    1344:	71 93       	st	Z+, r23
    1346:	81 93       	st	Z+, r24
    1348:	91 93       	st	Z+, r25
    134a:	8f 01       	movw	r16, r30
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
    134c:	f6 01       	movw	r30, r12
    134e:	41 90       	ld	r4, Z+
    1350:	51 90       	ld	r5, Z+
    1352:	61 90       	ld	r6, Z+
    1354:	71 90       	ld	r7, Z+
    1356:	6f 01       	movw	r12, r30
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	4a e7       	ldi	r20, 0x7A	; 122
    135e:	54 e4       	ldi	r21, 0x44	; 68
    1360:	68 81       	ld	r22, Y
    1362:	79 81       	ldd	r23, Y+1	; 0x01
    1364:	8a 81       	ldd	r24, Y+2	; 0x02
    1366:	9b 81       	ldd	r25, Y+3	; 0x03
    1368:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	40 e0       	ldi	r20, 0x00	; 0
    1372:	58 e3       	ldi	r21, 0x38	; 56
    1374:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1378:	20 e0       	ldi	r18, 0x00	; 0
    137a:	30 e0       	ldi	r19, 0x00	; 0
    137c:	44 e3       	ldi	r20, 0x34	; 52
    137e:	53 e4       	ldi	r21, 0x43	; 67
    1380:	0e 94 bd 18 	call	0x317a	; 0x317a <__divsf3>
    1384:	23 ec       	ldi	r18, 0xC3	; 195
    1386:	35 ef       	ldi	r19, 0xF5	; 245
    1388:	48 e4       	ldi	r20, 0x48	; 72
    138a:	50 e4       	ldi	r21, 0x40	; 64
    138c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    1390:	a3 01       	movw	r20, r6
    1392:	92 01       	movw	r18, r4
    1394:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
    1398:	69 93       	st	Y+, r22
    139a:	79 93       	st	Y+, r23
    139c:	89 93       	st	Y+, r24
    139e:	99 93       	st	Y+, r25
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
    13a0:	ea 14       	cp	r14, r10
    13a2:	fb 04       	cpc	r15, r11
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <MPU_read+0x21c>
    13a6:	ab cf       	rjmp	.-170    	; 0x12fe <MPU_read+0x172>
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
	}
}
    13a8:	df 91       	pop	r29
    13aa:	cf 91       	pop	r28
    13ac:	1f 91       	pop	r17
    13ae:	0f 91       	pop	r16
    13b0:	ff 90       	pop	r15
    13b2:	ef 90       	pop	r14
    13b4:	df 90       	pop	r13
    13b6:	cf 90       	pop	r12
    13b8:	bf 90       	pop	r11
    13ba:	af 90       	pop	r10
    13bc:	7f 90       	pop	r7
    13be:	6f 90       	pop	r6
    13c0:	5f 90       	pop	r5
    13c2:	4f 90       	pop	r4
    13c4:	08 95       	ret

000013c6 <MPU_Calib>:

void MPU_Calib(float Acc[3], float Gyro[3])
{
    13c6:	2f 92       	push	r2
    13c8:	3f 92       	push	r3
    13ca:	4f 92       	push	r4
    13cc:	5f 92       	push	r5
    13ce:	6f 92       	push	r6
    13d0:	7f 92       	push	r7
    13d2:	8f 92       	push	r8
    13d4:	9f 92       	push	r9
    13d6:	af 92       	push	r10
    13d8:	bf 92       	push	r11
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	00 d0       	rcall	.+0      	; 0x13ec <MPU_Calib+0x26>
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <MPU_Calib+0x28>
    13ee:	cd b7       	in	r28, 0x3d	; 61
    13f0:	de b7       	in	r29, 0x3e	; 62
    13f2:	1c 01       	movw	r2, r24
    13f4:	69 83       	std	Y+1, r22	; 0x01
    13f6:	7a 83       	std	Y+2, r23	; 0x02
    13f8:	81 2c       	mov	r8, r1
    13fa:	91 2c       	mov	r9, r1
    13fc:	5c 01       	movw	r10, r24
    13fe:	8c e0       	ldi	r24, 0x0C	; 12
    1400:	a8 0e       	add	r10, r24
    1402:	b1 1c       	adc	r11, r1
	static float calib_loops = 100;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
    1404:	69 81       	ldd	r22, Y+1	; 0x01
    1406:	7a 81       	ldd	r23, Y+2	; 0x02
    1408:	c1 01       	movw	r24, r2
    140a:	0e 94 c6 08 	call	0x118c	; 0x118c <MPU_read>
    140e:	71 01       	movw	r14, r2
    1410:	0f 2e       	mov	r0, r31
    1412:	f0 e9       	ldi	r31, 0x90	; 144
    1414:	6f 2e       	mov	r6, r31
    1416:	f1 e0       	ldi	r31, 0x01	; 1
    1418:	7f 2e       	mov	r7, r31
    141a:	f0 2d       	mov	r31, r0
    141c:	c9 80       	ldd	r12, Y+1	; 0x01
    141e:	da 80       	ldd	r13, Y+2	; 0x02
    1420:	0f 2e       	mov	r0, r31
    1422:	f4 e8       	ldi	r31, 0x84	; 132
    1424:	4f 2e       	mov	r4, r31
    1426:	f1 e0       	ldi	r31, 0x01	; 1
    1428:	5f 2e       	mov	r5, r31
    142a:	f0 2d       	mov	r31, r0
    142c:	82 01       	movw	r16, r4
    142e:	7c 82       	std	Y+4, r7	; 0x04
    1430:	6b 82       	std	Y+3, r6	; 0x03
		for (int j=0;j<3;j++)
		{
			sum_acc_cal_sum[j] += Acc[j];
    1432:	f7 01       	movw	r30, r14
    1434:	21 91       	ld	r18, Z+
    1436:	31 91       	ld	r19, Z+
    1438:	41 91       	ld	r20, Z+
    143a:	51 91       	ld	r21, Z+
    143c:	7f 01       	movw	r14, r30
    143e:	eb 81       	ldd	r30, Y+3	; 0x03
    1440:	fc 81       	ldd	r31, Y+4	; 0x04
    1442:	60 81       	ld	r22, Z
    1444:	71 81       	ldd	r23, Z+1	; 0x01
    1446:	82 81       	ldd	r24, Z+2	; 0x02
    1448:	93 81       	ldd	r25, Z+3	; 0x03
    144a:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
    144e:	eb 81       	ldd	r30, Y+3	; 0x03
    1450:	fc 81       	ldd	r31, Y+4	; 0x04
    1452:	61 93       	st	Z+, r22
    1454:	71 93       	st	Z+, r23
    1456:	81 93       	st	Z+, r24
    1458:	91 93       	st	Z+, r25
    145a:	fc 83       	std	Y+4, r31	; 0x04
    145c:	eb 83       	std	Y+3, r30	; 0x03
			sum_gyro_cal_sum[j] += Gyro[j];
    145e:	f6 01       	movw	r30, r12
    1460:	21 91       	ld	r18, Z+
    1462:	31 91       	ld	r19, Z+
    1464:	41 91       	ld	r20, Z+
    1466:	51 91       	ld	r21, Z+
    1468:	6f 01       	movw	r12, r30
    146a:	f8 01       	movw	r30, r16
    146c:	60 81       	ld	r22, Z
    146e:	71 81       	ldd	r23, Z+1	; 0x01
    1470:	82 81       	ldd	r24, Z+2	; 0x02
    1472:	93 81       	ldd	r25, Z+3	; 0x03
    1474:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <__addsf3>
    1478:	f8 01       	movw	r30, r16
    147a:	61 93       	st	Z+, r22
    147c:	71 93       	st	Z+, r23
    147e:	81 93       	st	Z+, r24
    1480:	91 93       	st	Z+, r25
    1482:	8f 01       	movw	r16, r30
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
		for (int j=0;j<3;j++)
    1484:	ea 14       	cp	r14, r10
    1486:	fb 04       	cpc	r15, r11
    1488:	a1 f6       	brne	.-88     	; 0x1432 <MPU_Calib+0x6c>
void MPU_Calib(float Acc[3], float Gyro[3])
{
	static float calib_loops = 100;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
    148a:	ff ef       	ldi	r31, 0xFF	; 255
    148c:	8f 1a       	sub	r8, r31
    148e:	9f 0a       	sbc	r9, r31
    1490:	84 e6       	ldi	r24, 0x64	; 100
    1492:	88 16       	cp	r8, r24
    1494:	91 04       	cpc	r9, r1
    1496:	09 f0       	breq	.+2      	; 0x149a <MPU_Calib+0xd4>
    1498:	b5 cf       	rjmp	.-150    	; 0x1404 <MPU_Calib+0x3e>
    149a:	0d e3       	ldi	r16, 0x3D	; 61
    149c:	12 e0       	ldi	r17, 0x02	; 2
    149e:	e9 e4       	ldi	r30, 0x49	; 73
    14a0:	f2 e0       	ldi	r31, 0x02	; 2
    14a2:	fc 83       	std	Y+4, r31	; 0x04
    14a4:	eb 83       	std	Y+3, r30	; 0x03
    14a6:	0f 2e       	mov	r0, r31
    14a8:	fc e9       	ldi	r31, 0x9C	; 156
    14aa:	ef 2e       	mov	r14, r31
    14ac:	f1 e0       	ldi	r31, 0x01	; 1
    14ae:	ff 2e       	mov	r15, r31
    14b0:	f0 2d       	mov	r31, r0
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
    14b2:	f3 01       	movw	r30, r6
    14b4:	61 91       	ld	r22, Z+
    14b6:	71 91       	ld	r23, Z+
    14b8:	81 91       	ld	r24, Z+
    14ba:	91 91       	ld	r25, Z+
    14bc:	3f 01       	movw	r6, r30
    14be:	20 e0       	ldi	r18, 0x00	; 0
    14c0:	30 e0       	ldi	r19, 0x00	; 0
    14c2:	48 ec       	ldi	r20, 0xC8	; 200
    14c4:	52 e4       	ldi	r21, 0x42	; 66
    14c6:	0e 94 bd 18 	call	0x317a	; 0x317a <__divsf3>
    14ca:	f8 01       	movw	r30, r16
    14cc:	61 93       	st	Z+, r22
    14ce:	71 93       	st	Z+, r23
    14d0:	81 93       	st	Z+, r24
    14d2:	91 93       	st	Z+, r25
    14d4:	8f 01       	movw	r16, r30
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
    14d6:	f2 01       	movw	r30, r4
    14d8:	61 91       	ld	r22, Z+
    14da:	71 91       	ld	r23, Z+
    14dc:	81 91       	ld	r24, Z+
    14de:	91 91       	ld	r25, Z+
    14e0:	2f 01       	movw	r4, r30
    14e2:	20 e0       	ldi	r18, 0x00	; 0
    14e4:	30 e0       	ldi	r19, 0x00	; 0
    14e6:	48 ec       	ldi	r20, 0xC8	; 200
    14e8:	52 e4       	ldi	r21, 0x42	; 66
    14ea:	0e 94 bd 18 	call	0x317a	; 0x317a <__divsf3>
    14ee:	eb 81       	ldd	r30, Y+3	; 0x03
    14f0:	fc 81       	ldd	r31, Y+4	; 0x04
    14f2:	61 93       	st	Z+, r22
    14f4:	71 93       	st	Z+, r23
    14f6:	81 93       	st	Z+, r24
    14f8:	91 93       	st	Z+, r25
    14fa:	fc 83       	std	Y+4, r31	; 0x04
    14fc:	eb 83       	std	Y+3, r30	; 0x03
		{
			sum_acc_cal_sum[j] += Acc[j];
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
    14fe:	6e 14       	cp	r6, r14
    1500:	7f 04       	cpc	r7, r15
    1502:	b9 f6       	brne	.-82     	; 0x14b2 <MPU_Calib+0xec>
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
	}
	acc_calib[2] -= 10;
    1504:	20 e0       	ldi	r18, 0x00	; 0
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	40 e2       	ldi	r20, 0x20	; 32
    150a:	51 e4       	ldi	r21, 0x41	; 65
    150c:	60 91 45 02 	lds	r22, 0x0245	; 0x800245 <acc_calib+0x8>
    1510:	70 91 46 02 	lds	r23, 0x0246	; 0x800246 <acc_calib+0x9>
    1514:	80 91 47 02 	lds	r24, 0x0247	; 0x800247 <acc_calib+0xa>
    1518:	90 91 48 02 	lds	r25, 0x0248	; 0x800248 <acc_calib+0xb>
    151c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
    1520:	60 93 45 02 	sts	0x0245, r22	; 0x800245 <acc_calib+0x8>
    1524:	70 93 46 02 	sts	0x0246, r23	; 0x800246 <acc_calib+0x9>
    1528:	80 93 47 02 	sts	0x0247, r24	; 0x800247 <acc_calib+0xa>
    152c:	90 93 48 02 	sts	0x0248, r25	; 0x800248 <acc_calib+0xb>
}
    1530:	0f 90       	pop	r0
    1532:	0f 90       	pop	r0
    1534:	0f 90       	pop	r0
    1536:	0f 90       	pop	r0
    1538:	df 91       	pop	r29
    153a:	cf 91       	pop	r28
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	bf 90       	pop	r11
    154a:	af 90       	pop	r10
    154c:	9f 90       	pop	r9
    154e:	8f 90       	pop	r8
    1550:	7f 90       	pop	r7
    1552:	6f 90       	pop	r6
    1554:	5f 90       	pop	r5
    1556:	4f 90       	pop	r4
    1558:	3f 90       	pop	r3
    155a:	2f 90       	pop	r2
    155c:	08 95       	ret

0000155e <MPU_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    155e:	8b e7       	ldi	r24, 0x7B	; 123
    1560:	92 e9       	ldi	r25, 0x92	; 146
    1562:	01 97       	sbiw	r24, 0x01	; 1
    1564:	f1 f7       	brne	.-4      	; 0x1562 <MPU_Init+0x4>
    1566:	00 c0       	rjmp	.+0      	; 0x1568 <MPU_Init+0xa>
    1568:	00 00       	nop
void MPU_Init(void)
{
	//
	_delay_ms(150);										/* Power up time >100ms */
	//0x68
	I2C_Start_Wait(MPU6050_addr);
    156a:	80 ed       	ldi	r24, 0xD0	; 208
    156c:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <I2C_Start_Wait>
	I2C_Write(0x6B);								/* Write to power management register */
    1570:	8b e6       	ldi	r24, 0x6B	; 107
    1572:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Write(0x01);									//select the clock X-axis 
    1576:	81 e0       	ldi	r24, 0x01	; 1
    1578:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Stop();
    157c:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_Stop>

	I2C_Start_Wait(MPU6050_addr);
    1580:	80 ed       	ldi	r24, 0xD0	; 208
    1582:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <I2C_Start_Wait>
	I2C_Write(0x1A);								//Low pass digital filter
    1586:	8a e1       	ldi	r24, 0x1A	; 26
    1588:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Write(0x05);									
    158c:	85 e0       	ldi	r24, 0x05	; 5
    158e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Stop();
    1592:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_Stop>
	00	+- 250 degrees/s
	01	+- 500 degrees/s
	10	+- 1000 degrees/s
	11	+- 2000 degrees/s
	*/
	I2C_Start_Wait(MPU6050_addr);
    1596:	80 ed       	ldi	r24, 0xD0	; 208
    1598:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <I2C_Start_Wait>
	I2C_Write(0x1B);			
    159c:	8b e1       	ldi	r24, 0x1B	; 27
    159e:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Write(0x08);
    15a2:	88 e0       	ldi	r24, 0x08	; 8
    15a4:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Stop();
    15a8:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_Stop>
	00	+- 2 g
	01	+- 4 g
	10	+- 8 g
	11	+- 16 g
	*/
	I2C_Start_Wait(MPU6050_addr);
    15ac:	80 ed       	ldi	r24, 0xD0	; 208
    15ae:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <I2C_Start_Wait>
	I2C_Write(0x1C);
    15b2:	8c e1       	ldi	r24, 0x1C	; 28
    15b4:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Write(0x10);
    15b8:	80 e1       	ldi	r24, 0x10	; 16
    15ba:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Stop();
    15be:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_Stop>
	//disable INT 
	I2C_Start_Wait(MPU6050_addr);
    15c2:	80 ed       	ldi	r24, 0xD0	; 208
    15c4:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <I2C_Start_Wait>
	I2C_Write(0x38);								/* Write to interrupt enable register */
    15c8:	88 e3       	ldi	r24, 0x38	; 56
    15ca:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Write(0x01);
    15ce:	81 e0       	ldi	r24, 0x01	; 1
    15d0:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Stop();
    15d4:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_Stop>
	//
	I2C_Start_Wait(0xD0);								/* Start with device write address */
    15d8:	80 ed       	ldi	r24, 0xD0	; 208
    15da:	0e 94 2f 17 	call	0x2e5e	; 0x2e5e <I2C_Start_Wait>
	I2C_Write(0x19);								/* Write to sample rate register */
    15de:	89 e1       	ldi	r24, 0x19	; 25
    15e0:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
    15e4:	87 e0       	ldi	r24, 0x07	; 7
    15e6:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <I2C_Write>
	I2C_Stop();
    15ea:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_Stop>
	
	MPU_Calib(AccData,GyroData);
    15ee:	6a e0       	ldi	r22, 0x0A	; 10
    15f0:	71 e0       	ldi	r23, 0x01	; 1
    15f2:	86 e1       	ldi	r24, 0x16	; 22
    15f4:	91 e0       	ldi	r25, 0x01	; 1
    15f6:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <MPU_Calib>
    15fa:	08 95       	ret

000015fc <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    15fc:	cf 93       	push	r28
    15fe:	df 93       	push	r29
    1600:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    1602:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    1606:	ce 01       	movw	r24, r28
    1608:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <malloc>
    160c:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    160e:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    1612:	20 97       	sbiw	r28, 0x00	; 0
    1614:	11 f4       	brne	.+4      	; 0x161a <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    1616:	0e 94 3c 0b 	call	0x1678	; 0x1678 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    161a:	ce 01       	movw	r24, r28
    161c:	df 91       	pop	r29
    161e:	cf 91       	pop	r28
    1620:	08 95       	ret

00001622 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1622:	cf 93       	push	r28
    1624:	df 93       	push	r29
    if( pv )
    1626:	00 97       	sbiw	r24, 0x00	; 0
    1628:	41 f0       	breq	.+16     	; 0x163a <vPortFree+0x18>
    162a:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    162c:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSuspendAll>
        {
            free( pv );
    1630:	ce 01       	movw	r24, r28
    1632:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    1636:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    }
}
    163a:	df 91       	pop	r29
    163c:	cf 91       	pop	r28
    163e:	08 95       	ret

00001640 <vApplicationIdleHook>:

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // with 1284p
    DIDR0 = 0xFF;

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino with 328p
    DIDR0 = 0x3F;
    1640:	8f e3       	ldi	r24, 0x3F	; 63
    1642:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
    // When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
    // This bit can be set at any time to turn off the Analogue Comparator.
    // This will Yellowuce power consumption in Active and Idle mode.
    // When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
    // Otherwise an interrupt can occur when the ACD bit is changed.
    ACSR &= ~_BV(ACIE);
    1646:	80 b7       	in	r24, 0x30	; 48
    1648:	87 7f       	andi	r24, 0xF7	; 247
    164a:	80 bf       	out	0x30, r24	; 48
    ACSR |=  _BV(ACD);
    164c:	80 b7       	in	r24, 0x30	; 48
    164e:	80 68       	ori	r24, 0x80	; 128
    1650:	80 bf       	out	0x30, r24	; 48
    // SLEEP_MODE_PWR_DOWN     _BV(SM1)
    // SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
    // SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
    // SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

    set_sleep_mode( SLEEP_MODE_IDLE );
    1652:	83 b7       	in	r24, 0x33	; 51
    1654:	81 7f       	andi	r24, 0xF1	; 241
    1656:	83 bf       	out	0x33, r24	; 51

    portENTER_CRITICAL();
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	0f 92       	push	r0
    sleep_enable();
    165e:	83 b7       	in	r24, 0x33	; 51
    1660:	81 60       	ori	r24, 0x01	; 1
    1662:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
    sleep_bod_disable();
    1664:	85 b7       	in	r24, 0x35	; 53
    1666:	80 66       	ori	r24, 0x60	; 96
    1668:	85 bf       	out	0x35, r24	; 53
    166a:	8f 7d       	andi	r24, 0xDF	; 223
    166c:	85 bf       	out	0x35, r24	; 53
#endif

    portEXIT_CRITICAL();
    166e:	0f 90       	pop	r0
    1670:	0f be       	out	0x3f, r0	; 63
    sleep_cpu();            // good night.
    1672:	88 95       	sleep

    sleep_reset();          // reset the sleep_mode() faster than sleep_disable();
    1674:	13 be       	out	0x33, r1	; 51
    1676:	08 95       	ret

00001678 <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    1678:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    167a:	2d 9a       	sbi	0x05, 5	; 5
    167c:	83 ed       	ldi	r24, 0xD3	; 211
    167e:	90 e3       	ldi	r25, 0x30	; 48
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	f1 f7       	brne	.-4      	; 0x1680 <vApplicationMallocFailedHook+0x8>
    1684:	00 c0       	rjmp	.+0      	; 0x1686 <vApplicationMallocFailedHook+0xe>
    1686:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED fast blink.
    1688:	1d 9a       	sbi	0x03, 5	; 3
    168a:	f8 cf       	rjmp	.-16     	; 0x167c <vApplicationMallocFailedHook+0x4>

0000168c <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    168c:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    168e:	2d 9a       	sbi	0x05, 5	; 5
    1690:	2f e7       	ldi	r18, 0x7F	; 127
    1692:	8a e1       	ldi	r24, 0x1A	; 26
    1694:	96 e0       	ldi	r25, 0x06	; 6
    1696:	21 50       	subi	r18, 0x01	; 1
    1698:	80 40       	sbci	r24, 0x00	; 0
    169a:	90 40       	sbci	r25, 0x00	; 0
    169c:	e1 f7       	brne	.-8      	; 0x1696 <vApplicationStackOverflowHook+0xa>
    169e:	00 c0       	rjmp	.+0      	; 0x16a0 <vApplicationStackOverflowHook+0x14>
    16a0:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED slow blink.
    16a2:	1d 9a       	sbi	0x03, 5	; 3
    16a4:	f5 cf       	rjmp	.-22     	; 0x1690 <vApplicationStackOverflowHook+0x4>

000016a6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    16a6:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16a8:	03 96       	adiw	r24, 0x03	; 3
    16aa:	92 83       	std	Z+2, r25	; 0x02
    16ac:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    16ae:	2f ef       	ldi	r18, 0xFF	; 255
    16b0:	3f ef       	ldi	r19, 0xFF	; 255
    16b2:	34 83       	std	Z+4, r19	; 0x04
    16b4:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16b6:	96 83       	std	Z+6, r25	; 0x06
    16b8:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16ba:	90 87       	std	Z+8, r25	; 0x08
    16bc:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    16be:	10 82       	st	Z, r1
    16c0:	08 95       	ret

000016c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    16c2:	fc 01       	movw	r30, r24
    16c4:	11 86       	std	Z+9, r1	; 0x09
    16c6:	10 86       	std	Z+8, r1	; 0x08
    16c8:	08 95       	ret

000016ca <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    16ca:	cf 93       	push	r28
    16cc:	df 93       	push	r29
    16ce:	9c 01       	movw	r18, r24
    16d0:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    16d2:	dc 01       	movw	r26, r24
    16d4:	11 96       	adiw	r26, 0x01	; 1
    16d6:	cd 91       	ld	r28, X+
    16d8:	dc 91       	ld	r29, X
    16da:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    16dc:	d3 83       	std	Z+3, r29	; 0x03
    16de:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	9d 81       	ldd	r25, Y+5	; 0x05
    16e4:	95 83       	std	Z+5, r25	; 0x05
    16e6:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    16e8:	8c 81       	ldd	r24, Y+4	; 0x04
    16ea:	9d 81       	ldd	r25, Y+5	; 0x05
    16ec:	dc 01       	movw	r26, r24
    16ee:	13 96       	adiw	r26, 0x03	; 3
    16f0:	7c 93       	st	X, r23
    16f2:	6e 93       	st	-X, r22
    16f4:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    16f6:	7d 83       	std	Y+5, r23	; 0x05
    16f8:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    16fa:	31 87       	std	Z+9, r19	; 0x09
    16fc:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    16fe:	f9 01       	movw	r30, r18
    1700:	80 81       	ld	r24, Z
    1702:	8f 5f       	subi	r24, 0xFF	; 255
    1704:	80 83       	st	Z, r24
}
    1706:	df 91       	pop	r29
    1708:	cf 91       	pop	r28
    170a:	08 95       	ret

0000170c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1712:	48 81       	ld	r20, Y
    1714:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stoYellow in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1716:	4f 3f       	cpi	r20, 0xFF	; 255
    1718:	2f ef       	ldi	r18, 0xFF	; 255
    171a:	52 07       	cpc	r21, r18
    171c:	21 f4       	brne	.+8      	; 0x1726 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    171e:	fc 01       	movw	r30, r24
    1720:	a7 81       	ldd	r26, Z+7	; 0x07
    1722:	b0 85       	ldd	r27, Z+8	; 0x08
    1724:	0d c0       	rjmp	.+26     	; 0x1740 <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1726:	dc 01       	movw	r26, r24
    1728:	13 96       	adiw	r26, 0x03	; 3
    172a:	01 c0       	rjmp	.+2      	; 0x172e <vListInsert+0x22>
    172c:	df 01       	movw	r26, r30
    172e:	12 96       	adiw	r26, 0x02	; 2
    1730:	ed 91       	ld	r30, X+
    1732:	fc 91       	ld	r31, X
    1734:	13 97       	sbiw	r26, 0x03	; 3
    1736:	20 81       	ld	r18, Z
    1738:	31 81       	ldd	r19, Z+1	; 0x01
    173a:	42 17       	cp	r20, r18
    173c:	53 07       	cpc	r21, r19
    173e:	b0 f7       	brcc	.-20     	; 0x172c <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    1740:	12 96       	adiw	r26, 0x02	; 2
    1742:	ed 91       	ld	r30, X+
    1744:	fc 91       	ld	r31, X
    1746:	13 97       	sbiw	r26, 0x03	; 3
    1748:	fb 83       	std	Y+3, r31	; 0x03
    174a:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    174c:	d5 83       	std	Z+5, r29	; 0x05
    174e:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    1750:	bd 83       	std	Y+5, r27	; 0x05
    1752:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    1754:	13 96       	adiw	r26, 0x03	; 3
    1756:	dc 93       	st	X, r29
    1758:	ce 93       	st	-X, r28
    175a:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    175c:	99 87       	std	Y+9, r25	; 0x09
    175e:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    1760:	fc 01       	movw	r30, r24
    1762:	20 81       	ld	r18, Z
    1764:	2f 5f       	subi	r18, 0xFF	; 255
    1766:	20 83       	st	Z, r18
}
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	08 95       	ret

0000176e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    176e:	cf 93       	push	r28
    1770:	df 93       	push	r29
    1772:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    1774:	a0 85       	ldd	r26, Z+8	; 0x08
    1776:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1778:	c2 81       	ldd	r28, Z+2	; 0x02
    177a:	d3 81       	ldd	r29, Z+3	; 0x03
    177c:	84 81       	ldd	r24, Z+4	; 0x04
    177e:	95 81       	ldd	r25, Z+5	; 0x05
    1780:	9d 83       	std	Y+5, r25	; 0x05
    1782:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1784:	c4 81       	ldd	r28, Z+4	; 0x04
    1786:	d5 81       	ldd	r29, Z+5	; 0x05
    1788:	82 81       	ldd	r24, Z+2	; 0x02
    178a:	93 81       	ldd	r25, Z+3	; 0x03
    178c:	9b 83       	std	Y+3, r25	; 0x03
    178e:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	8d 91       	ld	r24, X+
    1794:	9c 91       	ld	r25, X
    1796:	12 97       	sbiw	r26, 0x02	; 2
    1798:	e8 17       	cp	r30, r24
    179a:	f9 07       	cpc	r31, r25
    179c:	31 f4       	brne	.+12     	; 0x17aa <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    179e:	84 81       	ldd	r24, Z+4	; 0x04
    17a0:	95 81       	ldd	r25, Z+5	; 0x05
    17a2:	12 96       	adiw	r26, 0x02	; 2
    17a4:	9c 93       	st	X, r25
    17a6:	8e 93       	st	-X, r24
    17a8:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    17aa:	11 86       	std	Z+9, r1	; 0x09
    17ac:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    17ae:	8c 91       	ld	r24, X
    17b0:	81 50       	subi	r24, 0x01	; 1
    17b2:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    17b4:	8c 91       	ld	r24, X
}
    17b6:	df 91       	pop	r29
    17b8:	cf 91       	pop	r28
    17ba:	08 95       	ret

000017bc <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    17bc:	fc 01       	movw	r30, r24
    17be:	60 83       	st	Z, r22
    17c0:	31 97       	sbiw	r30, 0x01	; 1
    17c2:	70 83       	st	Z, r23
    17c4:	31 97       	sbiw	r30, 0x01	; 1
    17c6:	10 82       	st	Z, r1
    17c8:	31 97       	sbiw	r30, 0x01	; 1
    17ca:	20 e8       	ldi	r18, 0x80	; 128
    17cc:	20 83       	st	Z, r18
    17ce:	31 97       	sbiw	r30, 0x01	; 1
    17d0:	10 82       	st	Z, r1
    17d2:	77 97       	sbiw	r30, 0x17	; 23
    17d4:	40 83       	st	Z, r20
    17d6:	31 97       	sbiw	r30, 0x01	; 1
    17d8:	50 83       	st	Z, r21
    17da:	83 97       	sbiw	r24, 0x23	; 35
    17dc:	08 95       	ret

000017de <xPortStartScheduler>:
    17de:	a8 95       	wdr
    17e0:	90 ec       	ldi	r25, 0xC0	; 192
    17e2:	88 e1       	ldi	r24, 0x18	; 24
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	a8 95       	wdr
    17ea:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    17ee:	0f be       	out	0x3f, r0	; 63
    17f0:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    17f4:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    17f8:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    17fc:	cd 91       	ld	r28, X+
    17fe:	cd bf       	out	0x3d, r28	; 61
    1800:	dd 91       	ld	r29, X+
    1802:	de bf       	out	0x3e, r29	; 62
    1804:	ff 91       	pop	r31
    1806:	ef 91       	pop	r30
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	bf 91       	pop	r27
    180e:	af 91       	pop	r26
    1810:	9f 91       	pop	r25
    1812:	8f 91       	pop	r24
    1814:	7f 91       	pop	r23
    1816:	6f 91       	pop	r22
    1818:	5f 91       	pop	r21
    181a:	4f 91       	pop	r20
    181c:	3f 91       	pop	r19
    181e:	2f 91       	pop	r18
    1820:	1f 91       	pop	r17
    1822:	0f 91       	pop	r16
    1824:	ff 90       	pop	r15
    1826:	ef 90       	pop	r14
    1828:	df 90       	pop	r13
    182a:	cf 90       	pop	r12
    182c:	bf 90       	pop	r11
    182e:	af 90       	pop	r10
    1830:	9f 90       	pop	r9
    1832:	8f 90       	pop	r8
    1834:	7f 90       	pop	r7
    1836:	6f 90       	pop	r6
    1838:	5f 90       	pop	r5
    183a:	4f 90       	pop	r4
    183c:	3f 90       	pop	r3
    183e:	2f 90       	pop	r2
    1840:	1f 90       	pop	r1
    1842:	0f 90       	pop	r0
    1844:	0f be       	out	0x3f, r0	; 63
    1846:	0f 90       	pop	r0
    1848:	08 95       	ret
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	08 95       	ret

0000184e <vPortYield>:
    184e:	0f 92       	push	r0
    1850:	0f b6       	in	r0, 0x3f	; 63
    1852:	f8 94       	cli
    1854:	0f 92       	push	r0
    1856:	1f 92       	push	r1
    1858:	11 24       	eor	r1, r1
    185a:	2f 92       	push	r2
    185c:	3f 92       	push	r3
    185e:	4f 92       	push	r4
    1860:	5f 92       	push	r5
    1862:	6f 92       	push	r6
    1864:	7f 92       	push	r7
    1866:	8f 92       	push	r8
    1868:	9f 92       	push	r9
    186a:	af 92       	push	r10
    186c:	bf 92       	push	r11
    186e:	cf 92       	push	r12
    1870:	df 92       	push	r13
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	2f 93       	push	r18
    187c:	3f 93       	push	r19
    187e:	4f 93       	push	r20
    1880:	5f 93       	push	r21
    1882:	6f 93       	push	r22
    1884:	7f 93       	push	r23
    1886:	8f 93       	push	r24
    1888:	9f 93       	push	r25
    188a:	af 93       	push	r26
    188c:	bf 93       	push	r27
    188e:	cf 93       	push	r28
    1890:	df 93       	push	r29
    1892:	ef 93       	push	r30
    1894:	ff 93       	push	r31
    1896:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    189a:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    189e:	0d b6       	in	r0, 0x3d	; 61
    18a0:	0d 92       	st	X+, r0
    18a2:	0e b6       	in	r0, 0x3e	; 62
    18a4:	0d 92       	st	X+, r0
    18a6:	0e 94 38 13 	call	0x2670	; 0x2670 <vTaskSwitchContext>
    18aa:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    18ae:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    18b2:	cd 91       	ld	r28, X+
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	dd 91       	ld	r29, X+
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	ff 91       	pop	r31
    18bc:	ef 91       	pop	r30
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	bf 91       	pop	r27
    18c4:	af 91       	pop	r26
    18c6:	9f 91       	pop	r25
    18c8:	8f 91       	pop	r24
    18ca:	7f 91       	pop	r23
    18cc:	6f 91       	pop	r22
    18ce:	5f 91       	pop	r21
    18d0:	4f 91       	pop	r20
    18d2:	3f 91       	pop	r19
    18d4:	2f 91       	pop	r18
    18d6:	1f 91       	pop	r17
    18d8:	0f 91       	pop	r16
    18da:	ff 90       	pop	r15
    18dc:	ef 90       	pop	r14
    18de:	df 90       	pop	r13
    18e0:	cf 90       	pop	r12
    18e2:	bf 90       	pop	r11
    18e4:	af 90       	pop	r10
    18e6:	9f 90       	pop	r9
    18e8:	8f 90       	pop	r8
    18ea:	7f 90       	pop	r7
    18ec:	6f 90       	pop	r6
    18ee:	5f 90       	pop	r5
    18f0:	4f 90       	pop	r4
    18f2:	3f 90       	pop	r3
    18f4:	2f 90       	pop	r2
    18f6:	1f 90       	pop	r1
    18f8:	0f 90       	pop	r0
    18fa:	0f be       	out	0x3f, r0	; 63
    18fc:	0f 90       	pop	r0
    18fe:	08 95       	ret

00001900 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    1900:	0f 92       	push	r0
    1902:	0f b6       	in	r0, 0x3f	; 63
    1904:	f8 94       	cli
    1906:	0f 92       	push	r0
    1908:	1f 92       	push	r1
    190a:	11 24       	eor	r1, r1
    190c:	2f 92       	push	r2
    190e:	3f 92       	push	r3
    1910:	4f 92       	push	r4
    1912:	5f 92       	push	r5
    1914:	6f 92       	push	r6
    1916:	7f 92       	push	r7
    1918:	8f 92       	push	r8
    191a:	9f 92       	push	r9
    191c:	af 92       	push	r10
    191e:	bf 92       	push	r11
    1920:	cf 92       	push	r12
    1922:	df 92       	push	r13
    1924:	ef 92       	push	r14
    1926:	ff 92       	push	r15
    1928:	0f 93       	push	r16
    192a:	1f 93       	push	r17
    192c:	2f 93       	push	r18
    192e:	3f 93       	push	r19
    1930:	4f 93       	push	r20
    1932:	5f 93       	push	r21
    1934:	6f 93       	push	r22
    1936:	7f 93       	push	r23
    1938:	8f 93       	push	r24
    193a:	9f 93       	push	r25
    193c:	af 93       	push	r26
    193e:	bf 93       	push	r27
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	ef 93       	push	r30
    1946:	ff 93       	push	r31
    1948:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    194c:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    1950:	0d b6       	in	r0, 0x3d	; 61
    1952:	0d 92       	st	X+, r0
    1954:	0e b6       	in	r0, 0x3e	; 62
    1956:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1958:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    195a:	0e 94 b8 11 	call	0x2370	; 0x2370 <xTaskIncrementTick>
    195e:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    1960:	0e 94 38 13 	call	0x2670	; 0x2670 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1964:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    1968:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    196c:	cd 91       	ld	r28, X+
    196e:	cd bf       	out	0x3d, r28	; 61
    1970:	dd 91       	ld	r29, X+
    1972:	de bf       	out	0x3e, r29	; 62
    1974:	ff 91       	pop	r31
    1976:	ef 91       	pop	r30
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	bf 91       	pop	r27
    197e:	af 91       	pop	r26
    1980:	9f 91       	pop	r25
    1982:	8f 91       	pop	r24
    1984:	7f 91       	pop	r23
    1986:	6f 91       	pop	r22
    1988:	5f 91       	pop	r21
    198a:	4f 91       	pop	r20
    198c:	3f 91       	pop	r19
    198e:	2f 91       	pop	r18
    1990:	1f 91       	pop	r17
    1992:	0f 91       	pop	r16
    1994:	ff 90       	pop	r15
    1996:	ef 90       	pop	r14
    1998:	df 90       	pop	r13
    199a:	cf 90       	pop	r12
    199c:	bf 90       	pop	r11
    199e:	af 90       	pop	r10
    19a0:	9f 90       	pop	r9
    19a2:	8f 90       	pop	r8
    19a4:	7f 90       	pop	r7
    19a6:	6f 90       	pop	r6
    19a8:	5f 90       	pop	r5
    19aa:	4f 90       	pop	r4
    19ac:	3f 90       	pop	r3
    19ae:	2f 90       	pop	r2
    19b0:	1f 90       	pop	r1
    19b2:	0f 90       	pop	r0
    19b4:	0f be       	out	0x3f, r0	; 63
    19b6:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    19b8:	08 95       	ret

000019ba <__vector_6>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    19ba:	0e 94 80 0c 	call	0x1900	; 0x1900 <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    19be:	18 95       	reti

000019c0 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    19c0:	0f b6       	in	r0, 0x3f	; 63
    19c2:	f8 94       	cli
    19c4:	0f 92       	push	r0
    19c6:	fc 01       	movw	r30, r24
    19c8:	92 8d       	ldd	r25, Z+26	; 0x1a
    19ca:	0f 90       	pop	r0
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	91 11       	cpse	r25, r1
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	08 95       	ret

000019d6 <prvCopyDataToQueue>:
    19d6:	0f 93       	push	r16
    19d8:	1f 93       	push	r17
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	ec 01       	movw	r28, r24
    19e0:	04 2f       	mov	r16, r20
    19e2:	1a 8d       	ldd	r17, Y+26	; 0x1a
    19e4:	4c 8d       	ldd	r20, Y+28	; 0x1c
    19e6:	41 11       	cpse	r20, r1
    19e8:	0c c0       	rjmp	.+24     	; 0x1a02 <prvCopyDataToQueue+0x2c>
    19ea:	88 81       	ld	r24, Y
    19ec:	99 81       	ldd	r25, Y+1	; 0x01
    19ee:	89 2b       	or	r24, r25
    19f0:	09 f0       	breq	.+2      	; 0x19f4 <prvCopyDataToQueue+0x1e>
    19f2:	42 c0       	rjmp	.+132    	; 0x1a78 <prvCopyDataToQueue+0xa2>
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	0e 94 7f 14 	call	0x28fe	; 0x28fe <xTaskPriorityDisinherit>
    19fc:	1d 82       	std	Y+5, r1	; 0x05
    19fe:	1c 82       	std	Y+4, r1	; 0x04
    1a00:	42 c0       	rjmp	.+132    	; 0x1a86 <prvCopyDataToQueue+0xb0>
    1a02:	01 11       	cpse	r16, r1
    1a04:	17 c0       	rjmp	.+46     	; 0x1a34 <prvCopyDataToQueue+0x5e>
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a0c:	0e 94 09 21 	call	0x4212	; 0x4212 <memcpy>
    1a10:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	9b 81       	ldd	r25, Y+3	; 0x03
    1a16:	82 0f       	add	r24, r18
    1a18:	91 1d       	adc	r25, r1
    1a1a:	9b 83       	std	Y+3, r25	; 0x03
    1a1c:	8a 83       	std	Y+2, r24	; 0x02
    1a1e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a20:	3d 81       	ldd	r19, Y+5	; 0x05
    1a22:	82 17       	cp	r24, r18
    1a24:	93 07       	cpc	r25, r19
    1a26:	50 f1       	brcs	.+84     	; 0x1a7c <prvCopyDataToQueue+0xa6>
    1a28:	88 81       	ld	r24, Y
    1a2a:	99 81       	ldd	r25, Y+1	; 0x01
    1a2c:	9b 83       	std	Y+3, r25	; 0x03
    1a2e:	8a 83       	std	Y+2, r24	; 0x02
    1a30:	80 e0       	ldi	r24, 0x00	; 0
    1a32:	29 c0       	rjmp	.+82     	; 0x1a86 <prvCopyDataToQueue+0xb0>
    1a34:	50 e0       	ldi	r21, 0x00	; 0
    1a36:	8e 81       	ldd	r24, Y+6	; 0x06
    1a38:	9f 81       	ldd	r25, Y+7	; 0x07
    1a3a:	0e 94 09 21 	call	0x4212	; 0x4212 <memcpy>
    1a3e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	91 95       	neg	r25
    1a44:	81 95       	neg	r24
    1a46:	91 09       	sbc	r25, r1
    1a48:	2e 81       	ldd	r18, Y+6	; 0x06
    1a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    1a4c:	28 0f       	add	r18, r24
    1a4e:	39 1f       	adc	r19, r25
    1a50:	3f 83       	std	Y+7, r19	; 0x07
    1a52:	2e 83       	std	Y+6, r18	; 0x06
    1a54:	48 81       	ld	r20, Y
    1a56:	59 81       	ldd	r21, Y+1	; 0x01
    1a58:	24 17       	cp	r18, r20
    1a5a:	35 07       	cpc	r19, r21
    1a5c:	30 f4       	brcc	.+12     	; 0x1a6a <prvCopyDataToQueue+0x94>
    1a5e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a60:	3d 81       	ldd	r19, Y+5	; 0x05
    1a62:	82 0f       	add	r24, r18
    1a64:	93 1f       	adc	r25, r19
    1a66:	9f 83       	std	Y+7, r25	; 0x07
    1a68:	8e 83       	std	Y+6, r24	; 0x06
    1a6a:	02 30       	cpi	r16, 0x02	; 2
    1a6c:	49 f4       	brne	.+18     	; 0x1a80 <prvCopyDataToQueue+0xaa>
    1a6e:	11 23       	and	r17, r17
    1a70:	49 f0       	breq	.+18     	; 0x1a84 <prvCopyDataToQueue+0xae>
    1a72:	11 50       	subi	r17, 0x01	; 1
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	07 c0       	rjmp	.+14     	; 0x1a86 <prvCopyDataToQueue+0xb0>
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <prvCopyDataToQueue+0xb0>
    1a7c:	80 e0       	ldi	r24, 0x00	; 0
    1a7e:	03 c0       	rjmp	.+6      	; 0x1a86 <prvCopyDataToQueue+0xb0>
    1a80:	80 e0       	ldi	r24, 0x00	; 0
    1a82:	01 c0       	rjmp	.+2      	; 0x1a86 <prvCopyDataToQueue+0xb0>
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	1f 5f       	subi	r17, 0xFF	; 255
    1a88:	1a 8f       	std	Y+26, r17	; 0x1a
    1a8a:	df 91       	pop	r29
    1a8c:	cf 91       	pop	r28
    1a8e:	1f 91       	pop	r17
    1a90:	0f 91       	pop	r16
    1a92:	08 95       	ret

00001a94 <prvCopyDataFromQueue>:
    1a94:	fc 01       	movw	r30, r24
    1a96:	44 8d       	ldd	r20, Z+28	; 0x1c
    1a98:	44 23       	and	r20, r20
    1a9a:	a9 f0       	breq	.+42     	; 0x1ac6 <prvCopyDataFromQueue+0x32>
    1a9c:	50 e0       	ldi	r21, 0x00	; 0
    1a9e:	26 81       	ldd	r18, Z+6	; 0x06
    1aa0:	37 81       	ldd	r19, Z+7	; 0x07
    1aa2:	24 0f       	add	r18, r20
    1aa4:	35 1f       	adc	r19, r21
    1aa6:	37 83       	std	Z+7, r19	; 0x07
    1aa8:	26 83       	std	Z+6, r18	; 0x06
    1aaa:	84 81       	ldd	r24, Z+4	; 0x04
    1aac:	95 81       	ldd	r25, Z+5	; 0x05
    1aae:	28 17       	cp	r18, r24
    1ab0:	39 07       	cpc	r19, r25
    1ab2:	20 f0       	brcs	.+8      	; 0x1abc <prvCopyDataFromQueue+0x28>
    1ab4:	80 81       	ld	r24, Z
    1ab6:	91 81       	ldd	r25, Z+1	; 0x01
    1ab8:	97 83       	std	Z+7, r25	; 0x07
    1aba:	86 83       	std	Z+6, r24	; 0x06
    1abc:	cb 01       	movw	r24, r22
    1abe:	66 81       	ldd	r22, Z+6	; 0x06
    1ac0:	77 81       	ldd	r23, Z+7	; 0x07
    1ac2:	0e 94 09 21 	call	0x4212	; 0x4212 <memcpy>
    1ac6:	08 95       	ret

00001ac8 <prvUnlockQueue>:
    1ac8:	ef 92       	push	r14
    1aca:	ff 92       	push	r15
    1acc:	0f 93       	push	r16
    1ace:	1f 93       	push	r17
    1ad0:	cf 93       	push	r28
    1ad2:	8c 01       	movw	r16, r24
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	0f 92       	push	r0
    1ada:	fc 01       	movw	r30, r24
    1adc:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1ade:	1c 16       	cp	r1, r28
    1ae0:	ac f4       	brge	.+42     	; 0x1b0c <prvUnlockQueue+0x44>
    1ae2:	81 89       	ldd	r24, Z+17	; 0x11
    1ae4:	81 11       	cpse	r24, r1
    1ae6:	06 c0       	rjmp	.+12     	; 0x1af4 <prvUnlockQueue+0x2c>
    1ae8:	11 c0       	rjmp	.+34     	; 0x1b0c <prvUnlockQueue+0x44>
    1aea:	f8 01       	movw	r30, r16
    1aec:	81 89       	ldd	r24, Z+17	; 0x11
    1aee:	81 11       	cpse	r24, r1
    1af0:	05 c0       	rjmp	.+10     	; 0x1afc <prvUnlockQueue+0x34>
    1af2:	0c c0       	rjmp	.+24     	; 0x1b0c <prvUnlockQueue+0x44>
    1af4:	78 01       	movw	r14, r16
    1af6:	f1 e1       	ldi	r31, 0x11	; 17
    1af8:	ef 0e       	add	r14, r31
    1afa:	f1 1c       	adc	r15, r1
    1afc:	c7 01       	movw	r24, r14
    1afe:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <xTaskRemoveFromEventList>
    1b02:	81 11       	cpse	r24, r1
    1b04:	0e 94 6d 14 	call	0x28da	; 0x28da <vTaskMissedYield>
    1b08:	c1 50       	subi	r28, 0x01	; 1
    1b0a:	79 f7       	brne	.-34     	; 0x1aea <prvUnlockQueue+0x22>
    1b0c:	8f ef       	ldi	r24, 0xFF	; 255
    1b0e:	f8 01       	movw	r30, r16
    1b10:	86 8f       	std	Z+30, r24	; 0x1e
    1b12:	0f 90       	pop	r0
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	0f 92       	push	r0
    1b1c:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1b1e:	1c 16       	cp	r1, r28
    1b20:	ac f4       	brge	.+42     	; 0x1b4c <prvUnlockQueue+0x84>
    1b22:	80 85       	ldd	r24, Z+8	; 0x08
    1b24:	81 11       	cpse	r24, r1
    1b26:	06 c0       	rjmp	.+12     	; 0x1b34 <prvUnlockQueue+0x6c>
    1b28:	11 c0       	rjmp	.+34     	; 0x1b4c <prvUnlockQueue+0x84>
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 85       	ldd	r24, Z+8	; 0x08
    1b2e:	81 11       	cpse	r24, r1
    1b30:	05 c0       	rjmp	.+10     	; 0x1b3c <prvUnlockQueue+0x74>
    1b32:	0c c0       	rjmp	.+24     	; 0x1b4c <prvUnlockQueue+0x84>
    1b34:	78 01       	movw	r14, r16
    1b36:	f8 e0       	ldi	r31, 0x08	; 8
    1b38:	ef 0e       	add	r14, r31
    1b3a:	f1 1c       	adc	r15, r1
    1b3c:	c7 01       	movw	r24, r14
    1b3e:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <xTaskRemoveFromEventList>
    1b42:	81 11       	cpse	r24, r1
    1b44:	0e 94 6d 14 	call	0x28da	; 0x28da <vTaskMissedYield>
    1b48:	c1 50       	subi	r28, 0x01	; 1
    1b4a:	79 f7       	brne	.-34     	; 0x1b2a <prvUnlockQueue+0x62>
    1b4c:	8f ef       	ldi	r24, 0xFF	; 255
    1b4e:	f8 01       	movw	r30, r16
    1b50:	85 8f       	std	Z+29, r24	; 0x1d
    1b52:	0f 90       	pop	r0
    1b54:	0f be       	out	0x3f, r0	; 63
    1b56:	cf 91       	pop	r28
    1b58:	1f 91       	pop	r17
    1b5a:	0f 91       	pop	r16
    1b5c:	ff 90       	pop	r15
    1b5e:	ef 90       	pop	r14
    1b60:	08 95       	ret

00001b62 <xQueueGenericReset>:
    1b62:	cf 93       	push	r28
    1b64:	df 93       	push	r29
    1b66:	ec 01       	movw	r28, r24
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	0f 92       	push	r0
    1b6e:	e8 81       	ld	r30, Y
    1b70:	f9 81       	ldd	r31, Y+1	; 0x01
    1b72:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b74:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	82 9f       	mul	r24, r18
    1b7c:	a0 01       	movw	r20, r0
    1b7e:	83 9f       	mul	r24, r19
    1b80:	50 0d       	add	r21, r0
    1b82:	92 9f       	mul	r25, r18
    1b84:	50 0d       	add	r21, r0
    1b86:	11 24       	eor	r1, r1
    1b88:	4e 0f       	add	r20, r30
    1b8a:	5f 1f       	adc	r21, r31
    1b8c:	5d 83       	std	Y+5, r21	; 0x05
    1b8e:	4c 83       	std	Y+4, r20	; 0x04
    1b90:	1a 8e       	std	Y+26, r1	; 0x1a
    1b92:	fb 83       	std	Y+3, r31	; 0x03
    1b94:	ea 83       	std	Y+2, r30	; 0x02
    1b96:	01 97       	sbiw	r24, 0x01	; 1
    1b98:	82 9f       	mul	r24, r18
    1b9a:	a0 01       	movw	r20, r0
    1b9c:	83 9f       	mul	r24, r19
    1b9e:	50 0d       	add	r21, r0
    1ba0:	92 9f       	mul	r25, r18
    1ba2:	50 0d       	add	r21, r0
    1ba4:	11 24       	eor	r1, r1
    1ba6:	cf 01       	movw	r24, r30
    1ba8:	84 0f       	add	r24, r20
    1baa:	95 1f       	adc	r25, r21
    1bac:	9f 83       	std	Y+7, r25	; 0x07
    1bae:	8e 83       	std	Y+6, r24	; 0x06
    1bb0:	8f ef       	ldi	r24, 0xFF	; 255
    1bb2:	8d 8f       	std	Y+29, r24	; 0x1d
    1bb4:	8e 8f       	std	Y+30, r24	; 0x1e
    1bb6:	61 11       	cpse	r22, r1
    1bb8:	0c c0       	rjmp	.+24     	; 0x1bd2 <xQueueGenericReset+0x70>
    1bba:	88 85       	ldd	r24, Y+8	; 0x08
    1bbc:	88 23       	and	r24, r24
    1bbe:	89 f0       	breq	.+34     	; 0x1be2 <xQueueGenericReset+0x80>
    1bc0:	ce 01       	movw	r24, r28
    1bc2:	08 96       	adiw	r24, 0x08	; 8
    1bc4:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <xTaskRemoveFromEventList>
    1bc8:	88 23       	and	r24, r24
    1bca:	59 f0       	breq	.+22     	; 0x1be2 <xQueueGenericReset+0x80>
    1bcc:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    1bd0:	08 c0       	rjmp	.+16     	; 0x1be2 <xQueueGenericReset+0x80>
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	08 96       	adiw	r24, 0x08	; 8
    1bd6:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    1bda:	ce 01       	movw	r24, r28
    1bdc:	41 96       	adiw	r24, 0x11	; 17
    1bde:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    1be2:	0f 90       	pop	r0
    1be4:	0f be       	out	0x3f, r0	; 63
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	df 91       	pop	r29
    1bea:	cf 91       	pop	r28
    1bec:	08 95       	ret

00001bee <xQueueGenericCreate>:
    1bee:	0f 93       	push	r16
    1bf0:	1f 93       	push	r17
    1bf2:	cf 93       	push	r28
    1bf4:	df 93       	push	r29
    1bf6:	08 2f       	mov	r16, r24
    1bf8:	16 2f       	mov	r17, r22
    1bfa:	86 9f       	mul	r24, r22
    1bfc:	c0 01       	movw	r24, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	4f 96       	adiw	r24, 0x1f	; 31
    1c02:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <pvPortMalloc>
    1c06:	ec 01       	movw	r28, r24
    1c08:	00 97       	sbiw	r24, 0x00	; 0
    1c0a:	71 f0       	breq	.+28     	; 0x1c28 <xQueueGenericCreate+0x3a>
    1c0c:	11 11       	cpse	r17, r1
    1c0e:	03 c0       	rjmp	.+6      	; 0x1c16 <xQueueGenericCreate+0x28>
    1c10:	99 83       	std	Y+1, r25	; 0x01
    1c12:	88 83       	st	Y, r24
    1c14:	03 c0       	rjmp	.+6      	; 0x1c1c <xQueueGenericCreate+0x2e>
    1c16:	4f 96       	adiw	r24, 0x1f	; 31
    1c18:	99 83       	std	Y+1, r25	; 0x01
    1c1a:	88 83       	st	Y, r24
    1c1c:	0b 8f       	std	Y+27, r16	; 0x1b
    1c1e:	1c 8f       	std	Y+28, r17	; 0x1c
    1c20:	61 e0       	ldi	r22, 0x01	; 1
    1c22:	ce 01       	movw	r24, r28
    1c24:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <xQueueGenericReset>
    1c28:	ce 01       	movw	r24, r28
    1c2a:	df 91       	pop	r29
    1c2c:	cf 91       	pop	r28
    1c2e:	1f 91       	pop	r17
    1c30:	0f 91       	pop	r16
    1c32:	08 95       	ret

00001c34 <xQueueGenericSend>:
    1c34:	9f 92       	push	r9
    1c36:	af 92       	push	r10
    1c38:	bf 92       	push	r11
    1c3a:	cf 92       	push	r12
    1c3c:	df 92       	push	r13
    1c3e:	ef 92       	push	r14
    1c40:	ff 92       	push	r15
    1c42:	0f 93       	push	r16
    1c44:	1f 93       	push	r17
    1c46:	cf 93       	push	r28
    1c48:	df 93       	push	r29
    1c4a:	00 d0       	rcall	.+0      	; 0x1c4c <xQueueGenericSend+0x18>
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <xQueueGenericSend+0x1a>
    1c4e:	1f 92       	push	r1
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	8c 01       	movw	r16, r24
    1c56:	6b 01       	movw	r12, r22
    1c58:	5d 83       	std	Y+5, r21	; 0x05
    1c5a:	4c 83       	std	Y+4, r20	; 0x04
    1c5c:	a2 2e       	mov	r10, r18
    1c5e:	b1 2c       	mov	r11, r1
    1c60:	99 24       	eor	r9, r9
    1c62:	93 94       	inc	r9
    1c64:	7c 01       	movw	r14, r24
    1c66:	88 e0       	ldi	r24, 0x08	; 8
    1c68:	e8 0e       	add	r14, r24
    1c6a:	f1 1c       	adc	r15, r1
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	0f 92       	push	r0
    1c72:	f8 01       	movw	r30, r16
    1c74:	92 8d       	ldd	r25, Z+26	; 0x1a
    1c76:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c78:	98 17       	cp	r25, r24
    1c7a:	18 f0       	brcs	.+6      	; 0x1c82 <xQueueGenericSend+0x4e>
    1c7c:	f2 e0       	ldi	r31, 0x02	; 2
    1c7e:	af 12       	cpse	r10, r31
    1c80:	19 c0       	rjmp	.+50     	; 0x1cb4 <xQueueGenericSend+0x80>
    1c82:	4a 2d       	mov	r20, r10
    1c84:	b6 01       	movw	r22, r12
    1c86:	c8 01       	movw	r24, r16
    1c88:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <prvCopyDataToQueue>
    1c8c:	f8 01       	movw	r30, r16
    1c8e:	91 89       	ldd	r25, Z+17	; 0x11
    1c90:	99 23       	and	r25, r25
    1c92:	49 f0       	breq	.+18     	; 0x1ca6 <xQueueGenericSend+0x72>
    1c94:	c8 01       	movw	r24, r16
    1c96:	41 96       	adiw	r24, 0x11	; 17
    1c98:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <xTaskRemoveFromEventList>
    1c9c:	88 23       	and	r24, r24
    1c9e:	31 f0       	breq	.+12     	; 0x1cac <xQueueGenericSend+0x78>
    1ca0:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    1ca4:	03 c0       	rjmp	.+6      	; 0x1cac <xQueueGenericSend+0x78>
    1ca6:	81 11       	cpse	r24, r1
    1ca8:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    1cac:	0f 90       	pop	r0
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	50 c0       	rjmp	.+160    	; 0x1d54 <xQueueGenericSend+0x120>
    1cb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb8:	89 2b       	or	r24, r25
    1cba:	21 f4       	brne	.+8      	; 0x1cc4 <xQueueGenericSend+0x90>
    1cbc:	0f 90       	pop	r0
    1cbe:	0f be       	out	0x3f, r0	; 63
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	48 c0       	rjmp	.+144    	; 0x1d54 <xQueueGenericSend+0x120>
    1cc4:	b1 10       	cpse	r11, r1
    1cc6:	05 c0       	rjmp	.+10     	; 0x1cd2 <xQueueGenericSend+0x9e>
    1cc8:	ce 01       	movw	r24, r28
    1cca:	01 96       	adiw	r24, 0x01	; 1
    1ccc:	0e 94 2c 14 	call	0x2858	; 0x2858 <vTaskInternalSetTimeOutState>
    1cd0:	b9 2c       	mov	r11, r9
    1cd2:	0f 90       	pop	r0
    1cd4:	0f be       	out	0x3f, r0	; 63
    1cd6:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSuspendAll>
    1cda:	0f b6       	in	r0, 0x3f	; 63
    1cdc:	f8 94       	cli
    1cde:	0f 92       	push	r0
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ce4:	8f 3f       	cpi	r24, 0xFF	; 255
    1ce6:	09 f4       	brne	.+2      	; 0x1cea <xQueueGenericSend+0xb6>
    1ce8:	15 8e       	std	Z+29, r1	; 0x1d
    1cea:	f8 01       	movw	r30, r16
    1cec:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cee:	8f 3f       	cpi	r24, 0xFF	; 255
    1cf0:	09 f4       	brne	.+2      	; 0x1cf4 <xQueueGenericSend+0xc0>
    1cf2:	16 8e       	std	Z+30, r1	; 0x1e
    1cf4:	0f 90       	pop	r0
    1cf6:	0f be       	out	0x3f, r0	; 63
    1cf8:	be 01       	movw	r22, r28
    1cfa:	6c 5f       	subi	r22, 0xFC	; 252
    1cfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cfe:	ce 01       	movw	r24, r28
    1d00:	01 96       	adiw	r24, 0x01	; 1
    1d02:	0e 94 37 14 	call	0x286e	; 0x286e <xTaskCheckForTimeOut>
    1d06:	81 11       	cpse	r24, r1
    1d08:	1f c0       	rjmp	.+62     	; 0x1d48 <xQueueGenericSend+0x114>
    1d0a:	0f b6       	in	r0, 0x3f	; 63
    1d0c:	f8 94       	cli
    1d0e:	0f 92       	push	r0
    1d10:	f8 01       	movw	r30, r16
    1d12:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d14:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	98 13       	cpse	r25, r24
    1d1c:	0f c0       	rjmp	.+30     	; 0x1d3c <xQueueGenericSend+0x108>
    1d1e:	6c 81       	ldd	r22, Y+4	; 0x04
    1d20:	7d 81       	ldd	r23, Y+5	; 0x05
    1d22:	c7 01       	movw	r24, r14
    1d24:	0e 94 b9 13 	call	0x2772	; 0x2772 <vTaskPlaceOnEventList>
    1d28:	c8 01       	movw	r24, r16
    1d2a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <prvUnlockQueue>
    1d2e:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    1d32:	81 11       	cpse	r24, r1
    1d34:	9b cf       	rjmp	.-202    	; 0x1c6c <xQueueGenericSend+0x38>
    1d36:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    1d3a:	98 cf       	rjmp	.-208    	; 0x1c6c <xQueueGenericSend+0x38>
    1d3c:	c8 01       	movw	r24, r16
    1d3e:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <prvUnlockQueue>
    1d42:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    1d46:	92 cf       	rjmp	.-220    	; 0x1c6c <xQueueGenericSend+0x38>
    1d48:	c8 01       	movw	r24, r16
    1d4a:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <prvUnlockQueue>
    1d4e:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    1d52:	80 e0       	ldi	r24, 0x00	; 0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	1f 91       	pop	r17
    1d64:	0f 91       	pop	r16
    1d66:	ff 90       	pop	r15
    1d68:	ef 90       	pop	r14
    1d6a:	df 90       	pop	r13
    1d6c:	cf 90       	pop	r12
    1d6e:	bf 90       	pop	r11
    1d70:	af 90       	pop	r10
    1d72:	9f 90       	pop	r9
    1d74:	08 95       	ret

00001d76 <xQueueGenericSendFromISR>:
    1d76:	ef 92       	push	r14
    1d78:	ff 92       	push	r15
    1d7a:	0f 93       	push	r16
    1d7c:	1f 93       	push	r17
    1d7e:	cf 93       	push	r28
    1d80:	df 93       	push	r29
    1d82:	8a 01       	movw	r16, r20
    1d84:	fc 01       	movw	r30, r24
    1d86:	52 8d       	ldd	r21, Z+26	; 0x1a
    1d88:	33 8d       	ldd	r19, Z+27	; 0x1b
    1d8a:	53 17       	cp	r21, r19
    1d8c:	10 f0       	brcs	.+4      	; 0x1d92 <xQueueGenericSendFromISR+0x1c>
    1d8e:	22 30       	cpi	r18, 0x02	; 2
    1d90:	01 f5       	brne	.+64     	; 0x1dd2 <xQueueGenericSendFromISR+0x5c>
    1d92:	42 2f       	mov	r20, r18
    1d94:	78 01       	movw	r14, r16
    1d96:	ec 01       	movw	r28, r24
    1d98:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1d9a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1d9c:	ce 01       	movw	r24, r28
    1d9e:	0e 94 eb 0c 	call	0x19d6	; 0x19d6 <prvCopyDataToQueue>
    1da2:	1f 3f       	cpi	r17, 0xFF	; 255
    1da4:	81 f4       	brne	.+32     	; 0x1dc6 <xQueueGenericSendFromISR+0x50>
    1da6:	89 89       	ldd	r24, Y+17	; 0x11
    1da8:	88 23       	and	r24, r24
    1daa:	a9 f0       	breq	.+42     	; 0x1dd6 <xQueueGenericSendFromISR+0x60>
    1dac:	ce 01       	movw	r24, r28
    1dae:	41 96       	adiw	r24, 0x11	; 17
    1db0:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <xTaskRemoveFromEventList>
    1db4:	88 23       	and	r24, r24
    1db6:	89 f0       	breq	.+34     	; 0x1dda <xQueueGenericSendFromISR+0x64>
    1db8:	e1 14       	cp	r14, r1
    1dba:	f1 04       	cpc	r15, r1
    1dbc:	81 f0       	breq	.+32     	; 0x1dde <xQueueGenericSendFromISR+0x68>
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	f7 01       	movw	r30, r14
    1dc2:	80 83       	st	Z, r24
    1dc4:	0d c0       	rjmp	.+26     	; 0x1de0 <xQueueGenericSendFromISR+0x6a>
    1dc6:	ff 24       	eor	r15, r15
    1dc8:	f3 94       	inc	r15
    1dca:	f1 0e       	add	r15, r17
    1dcc:	fe 8e       	std	Y+30, r15	; 0x1e
    1dce:	81 e0       	ldi	r24, 0x01	; 1
    1dd0:	07 c0       	rjmp	.+14     	; 0x1de0 <xQueueGenericSendFromISR+0x6a>
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	05 c0       	rjmp	.+10     	; 0x1de0 <xQueueGenericSendFromISR+0x6a>
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	03 c0       	rjmp	.+6      	; 0x1de0 <xQueueGenericSendFromISR+0x6a>
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	01 c0       	rjmp	.+2      	; 0x1de0 <xQueueGenericSendFromISR+0x6a>
    1dde:	81 e0       	ldi	r24, 0x01	; 1
    1de0:	df 91       	pop	r29
    1de2:	cf 91       	pop	r28
    1de4:	1f 91       	pop	r17
    1de6:	0f 91       	pop	r16
    1de8:	ff 90       	pop	r15
    1dea:	ef 90       	pop	r14
    1dec:	08 95       	ret

00001dee <xQueueReceive>:
    1dee:	9f 92       	push	r9
    1df0:	af 92       	push	r10
    1df2:	bf 92       	push	r11
    1df4:	cf 92       	push	r12
    1df6:	df 92       	push	r13
    1df8:	ef 92       	push	r14
    1dfa:	ff 92       	push	r15
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <xQueueReceive+0x18>
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <xQueueReceive+0x1a>
    1e08:	1f 92       	push	r1
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	8c 01       	movw	r16, r24
    1e10:	5b 01       	movw	r10, r22
    1e12:	5d 83       	std	Y+5, r21	; 0x05
    1e14:	4c 83       	std	Y+4, r20	; 0x04
    1e16:	e1 2c       	mov	r14, r1
    1e18:	99 24       	eor	r9, r9
    1e1a:	93 94       	inc	r9
    1e1c:	6c 01       	movw	r12, r24
    1e1e:	81 e1       	ldi	r24, 0x11	; 17
    1e20:	c8 0e       	add	r12, r24
    1e22:	d1 1c       	adc	r13, r1
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	0f 92       	push	r0
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1e2e:	ff 20       	and	r15, r15
    1e30:	a9 f0       	breq	.+42     	; 0x1e5c <xQueueReceive+0x6e>
    1e32:	b5 01       	movw	r22, r10
    1e34:	c8 01       	movw	r24, r16
    1e36:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <prvCopyDataFromQueue>
    1e3a:	fa 94       	dec	r15
    1e3c:	f8 01       	movw	r30, r16
    1e3e:	f2 8e       	std	Z+26, r15	; 0x1a
    1e40:	80 85       	ldd	r24, Z+8	; 0x08
    1e42:	88 23       	and	r24, r24
    1e44:	39 f0       	breq	.+14     	; 0x1e54 <xQueueReceive+0x66>
    1e46:	c8 01       	movw	r24, r16
    1e48:	08 96       	adiw	r24, 0x08	; 8
    1e4a:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <xTaskRemoveFromEventList>
    1e4e:	81 11       	cpse	r24, r1
    1e50:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    1e54:	0f 90       	pop	r0
    1e56:	0f be       	out	0x3f, r0	; 63
    1e58:	81 e0       	ldi	r24, 0x01	; 1
    1e5a:	51 c0       	rjmp	.+162    	; 0x1efe <xQueueReceive+0x110>
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e60:	89 2b       	or	r24, r25
    1e62:	21 f4       	brne	.+8      	; 0x1e6c <xQueueReceive+0x7e>
    1e64:	0f 90       	pop	r0
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	49 c0       	rjmp	.+146    	; 0x1efe <xQueueReceive+0x110>
    1e6c:	e1 10       	cpse	r14, r1
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <xQueueReceive+0x8c>
    1e70:	ce 01       	movw	r24, r28
    1e72:	01 96       	adiw	r24, 0x01	; 1
    1e74:	0e 94 2c 14 	call	0x2858	; 0x2858 <vTaskInternalSetTimeOutState>
    1e78:	e9 2c       	mov	r14, r9
    1e7a:	0f 90       	pop	r0
    1e7c:	0f be       	out	0x3f, r0	; 63
    1e7e:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSuspendAll>
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	0f 92       	push	r0
    1e88:	f8 01       	movw	r30, r16
    1e8a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e8e:	09 f4       	brne	.+2      	; 0x1e92 <xQueueReceive+0xa4>
    1e90:	15 8e       	std	Z+29, r1	; 0x1d
    1e92:	f8 01       	movw	r30, r16
    1e94:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e96:	8f 3f       	cpi	r24, 0xFF	; 255
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <xQueueReceive+0xae>
    1e9a:	16 8e       	std	Z+30, r1	; 0x1e
    1e9c:	0f 90       	pop	r0
    1e9e:	0f be       	out	0x3f, r0	; 63
    1ea0:	be 01       	movw	r22, r28
    1ea2:	6c 5f       	subi	r22, 0xFC	; 252
    1ea4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	01 96       	adiw	r24, 0x01	; 1
    1eaa:	0e 94 37 14 	call	0x286e	; 0x286e <xTaskCheckForTimeOut>
    1eae:	81 11       	cpse	r24, r1
    1eb0:	1a c0       	rjmp	.+52     	; 0x1ee6 <xQueueReceive+0xf8>
    1eb2:	c8 01       	movw	r24, r16
    1eb4:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <prvIsQueueEmpty>
    1eb8:	88 23       	and	r24, r24
    1eba:	79 f0       	breq	.+30     	; 0x1eda <xQueueReceive+0xec>
    1ebc:	6c 81       	ldd	r22, Y+4	; 0x04
    1ebe:	7d 81       	ldd	r23, Y+5	; 0x05
    1ec0:	c6 01       	movw	r24, r12
    1ec2:	0e 94 b9 13 	call	0x2772	; 0x2772 <vTaskPlaceOnEventList>
    1ec6:	c8 01       	movw	r24, r16
    1ec8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <prvUnlockQueue>
    1ecc:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    1ed0:	81 11       	cpse	r24, r1
    1ed2:	a8 cf       	rjmp	.-176    	; 0x1e24 <xQueueReceive+0x36>
    1ed4:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    1ed8:	a5 cf       	rjmp	.-182    	; 0x1e24 <xQueueReceive+0x36>
    1eda:	c8 01       	movw	r24, r16
    1edc:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <prvUnlockQueue>
    1ee0:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    1ee4:	9f cf       	rjmp	.-194    	; 0x1e24 <xQueueReceive+0x36>
    1ee6:	c8 01       	movw	r24, r16
    1ee8:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <prvUnlockQueue>
    1eec:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    1ef0:	c8 01       	movw	r24, r16
    1ef2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <prvIsQueueEmpty>
    1ef6:	88 23       	and	r24, r24
    1ef8:	09 f4       	brne	.+2      	; 0x1efc <xQueueReceive+0x10e>
    1efa:	94 cf       	rjmp	.-216    	; 0x1e24 <xQueueReceive+0x36>
    1efc:	80 e0       	ldi	r24, 0x00	; 0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
    1f06:	0f 90       	pop	r0
    1f08:	df 91       	pop	r29
    1f0a:	cf 91       	pop	r28
    1f0c:	1f 91       	pop	r17
    1f0e:	0f 91       	pop	r16
    1f10:	ff 90       	pop	r15
    1f12:	ef 90       	pop	r14
    1f14:	df 90       	pop	r13
    1f16:	cf 90       	pop	r12
    1f18:	bf 90       	pop	r11
    1f1a:	af 90       	pop	r10
    1f1c:	9f 90       	pop	r9
    1f1e:	08 95       	ret

00001f20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1f20:	cf 93       	push	r28
    1f22:	df 93       	push	r29
    1f24:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	0f 92       	push	r0
    1f2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f2e:	8f 3f       	cpi	r24, 0xFF	; 255
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <vQueueWaitForMessageRestricted+0x14>
    1f32:	1d 8e       	std	Y+29, r1	; 0x1d
    1f34:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f36:	8f 3f       	cpi	r24, 0xFF	; 255
    1f38:	09 f4       	brne	.+2      	; 0x1f3c <vQueueWaitForMessageRestricted+0x1c>
    1f3a:	1e 8e       	std	Y+30, r1	; 0x1e
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f40:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f42:	81 11       	cpse	r24, r1
    1f44:	04 c0       	rjmp	.+8      	; 0x1f4e <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1f46:	ce 01       	movw	r24, r28
    1f48:	41 96       	adiw	r24, 0x11	; 17
    1f4a:	0e 94 cb 13 	call	0x2796	; 0x2796 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1f4e:	ce 01       	movw	r24, r28
    1f50:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <prvUnlockQueue>
    }
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	08 95       	ret

00001f5a <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1f5a:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    1f5e:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    1f62:	80 81       	ld	r24, Z
    1f64:	81 11       	cpse	r24, r1
    1f66:	07 c0       	rjmp	.+14     	; 0x1f76 <prvResetNextTaskUnblockTime+0x1c>
    1f68:	8f ef       	ldi	r24, 0xFF	; 255
    1f6a:	9f ef       	ldi	r25, 0xFF	; 255
    1f6c:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    1f70:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    1f74:	08 95       	ret
    1f76:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    1f7a:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    1f7e:	05 80       	ldd	r0, Z+5	; 0x05
    1f80:	f6 81       	ldd	r31, Z+6	; 0x06
    1f82:	e0 2d       	mov	r30, r0
    1f84:	06 80       	ldd	r0, Z+6	; 0x06
    1f86:	f7 81       	ldd	r31, Z+7	; 0x07
    1f88:	e0 2d       	mov	r30, r0
    1f8a:	82 81       	ldd	r24, Z+2	; 0x02
    1f8c:	93 81       	ldd	r25, Z+3	; 0x03
    1f8e:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    1f92:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    1f96:	08 95       	ret

00001f98 <prvAddCurrentTaskToDelayedList>:
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	ec 01       	movw	r28, r24
    1fa4:	f6 2e       	mov	r15, r22
    1fa6:	00 91 a8 01 	lds	r16, 0x01A8	; 0x8001a8 <xTickCount>
    1faa:	10 91 a9 01 	lds	r17, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    1fae:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pxCurrentTCB>
    1fb2:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    1fb6:	02 96       	adiw	r24, 0x02	; 2
    1fb8:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    1fbc:	cf 3f       	cpi	r28, 0xFF	; 255
    1fbe:	8f ef       	ldi	r24, 0xFF	; 255
    1fc0:	d8 07       	cpc	r29, r24
    1fc2:	69 f4       	brne	.+26     	; 0x1fde <prvAddCurrentTaskToDelayedList+0x46>
    1fc4:	ff 20       	and	r15, r15
    1fc6:	59 f0       	breq	.+22     	; 0x1fde <prvAddCurrentTaskToDelayedList+0x46>
    1fc8:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    1fcc:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    1fd0:	6e 5f       	subi	r22, 0xFE	; 254
    1fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    1fd4:	8b ea       	ldi	r24, 0xAB	; 171
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vListInsertEnd>
    1fdc:	2f c0       	rjmp	.+94     	; 0x203c <prvAddCurrentTaskToDelayedList+0xa4>
    1fde:	c0 0f       	add	r28, r16
    1fe0:	d1 1f       	adc	r29, r17
    1fe2:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    1fe6:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    1fea:	d3 83       	std	Z+3, r29	; 0x03
    1fec:	c2 83       	std	Z+2, r28	; 0x02
    1fee:	c0 17       	cp	r28, r16
    1ff0:	d1 07       	cpc	r29, r17
    1ff2:	68 f4       	brcc	.+26     	; 0x200e <prvAddCurrentTaskToDelayedList+0x76>
    1ff4:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    1ff8:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    1ffc:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pxOverflowDelayedTaskList>
    2000:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <pxOverflowDelayedTaskList+0x1>
    2004:	6e 5f       	subi	r22, 0xFE	; 254
    2006:	7f 4f       	sbci	r23, 0xFF	; 255
    2008:	0e 94 86 0b 	call	0x170c	; 0x170c <vListInsert>
    200c:	17 c0       	rjmp	.+46     	; 0x203c <prvAddCurrentTaskToDelayedList+0xa4>
    200e:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    2012:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2016:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    201a:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    201e:	6e 5f       	subi	r22, 0xFE	; 254
    2020:	7f 4f       	sbci	r23, 0xFF	; 255
    2022:	0e 94 86 0b 	call	0x170c	; 0x170c <vListInsert>
    2026:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <xNextTaskUnblockTime>
    202a:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    202e:	c8 17       	cp	r28, r24
    2030:	d9 07       	cpc	r29, r25
    2032:	20 f4       	brcc	.+8      	; 0x203c <prvAddCurrentTaskToDelayedList+0xa4>
    2034:	d0 93 a0 01 	sts	0x01A0, r29	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    2038:	c0 93 9f 01 	sts	0x019F, r28	; 0x80019f <xNextTaskUnblockTime>
    203c:	df 91       	pop	r29
    203e:	cf 91       	pop	r28
    2040:	1f 91       	pop	r17
    2042:	0f 91       	pop	r16
    2044:	ff 90       	pop	r15
    2046:	08 95       	ret

00002048 <prvIdleTask>:
    2048:	05 eb       	ldi	r16, 0xB5	; 181
    204a:	11 e0       	ldi	r17, 0x01	; 1
    204c:	0f 2e       	mov	r0, r31
    204e:	fd ed       	ldi	r31, 0xDD	; 221
    2050:	ef 2e       	mov	r14, r31
    2052:	f1 e0       	ldi	r31, 0x01	; 1
    2054:	ff 2e       	mov	r15, r31
    2056:	f0 2d       	mov	r31, r0
    2058:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <uxDeletedTasksWaitingCleanUp>
    205c:	88 23       	and	r24, r24
    205e:	29 f1       	breq	.+74     	; 0x20aa <prvIdleTask+0x62>
    2060:	0f b6       	in	r0, 0x3f	; 63
    2062:	f8 94       	cli
    2064:	0f 92       	push	r0
    2066:	d8 01       	movw	r26, r16
    2068:	15 96       	adiw	r26, 0x05	; 5
    206a:	ed 91       	ld	r30, X+
    206c:	fc 91       	ld	r31, X
    206e:	16 97       	sbiw	r26, 0x06	; 6
    2070:	c6 81       	ldd	r28, Z+6	; 0x06
    2072:	d7 81       	ldd	r29, Z+7	; 0x07
    2074:	ce 01       	movw	r24, r28
    2076:	02 96       	adiw	r24, 0x02	; 2
    2078:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    207c:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <uxCurrentNumberOfTasks>
    2080:	81 50       	subi	r24, 0x01	; 1
    2082:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <uxCurrentNumberOfTasks>
    2086:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <uxDeletedTasksWaitingCleanUp>
    208a:	81 50       	subi	r24, 0x01	; 1
    208c:	80 93 b4 01 	sts	0x01B4, r24	; 0x8001b4 <uxDeletedTasksWaitingCleanUp>
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	8f 89       	ldd	r24, Y+23	; 0x17
    2096:	98 8d       	ldd	r25, Y+24	; 0x18
    2098:	0e 94 11 0b 	call	0x1622	; 0x1622 <vPortFree>
    209c:	ce 01       	movw	r24, r28
    209e:	0e 94 11 0b 	call	0x1622	; 0x1622 <vPortFree>
    20a2:	80 91 b4 01 	lds	r24, 0x01B4	; 0x8001b4 <uxDeletedTasksWaitingCleanUp>
    20a6:	81 11       	cpse	r24, r1
    20a8:	db cf       	rjmp	.-74     	; 0x2060 <prvIdleTask+0x18>
    20aa:	f7 01       	movw	r30, r14
    20ac:	80 81       	ld	r24, Z
    20ae:	82 30       	cpi	r24, 0x02	; 2
    20b0:	10 f0       	brcs	.+4      	; 0x20b6 <prvIdleTask+0x6e>
    20b2:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    20b6:	0e 94 20 0b 	call	0x1640	; 0x1640 <vApplicationIdleHook>
    20ba:	ce cf       	rjmp	.-100    	; 0x2058 <prvIdleTask+0x10>

000020bc <xTaskCreate>:
    20bc:	4f 92       	push	r4
    20be:	5f 92       	push	r5
    20c0:	6f 92       	push	r6
    20c2:	7f 92       	push	r7
    20c4:	8f 92       	push	r8
    20c6:	9f 92       	push	r9
    20c8:	af 92       	push	r10
    20ca:	bf 92       	push	r11
    20cc:	cf 92       	push	r12
    20ce:	df 92       	push	r13
    20d0:	ef 92       	push	r14
    20d2:	ff 92       	push	r15
    20d4:	0f 93       	push	r16
    20d6:	cf 93       	push	r28
    20d8:	df 93       	push	r29
    20da:	4c 01       	movw	r8, r24
    20dc:	6b 01       	movw	r12, r22
    20de:	5a 01       	movw	r10, r20
    20e0:	29 01       	movw	r4, r18
    20e2:	ca 01       	movw	r24, r20
    20e4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <pvPortMalloc>
    20e8:	3c 01       	movw	r6, r24
    20ea:	89 2b       	or	r24, r25
    20ec:	09 f4       	brne	.+2      	; 0x20f0 <xTaskCreate+0x34>
    20ee:	f1 c0       	rjmp	.+482    	; 0x22d2 <xTaskCreate+0x216>
    20f0:	88 e2       	ldi	r24, 0x28	; 40
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <pvPortMalloc>
    20f8:	ec 01       	movw	r28, r24
    20fa:	89 2b       	or	r24, r25
    20fc:	99 f0       	breq	.+38     	; 0x2124 <xTaskCreate+0x68>
    20fe:	78 8e       	std	Y+24, r7	; 0x18
    2100:	6f 8a       	std	Y+23, r6	; 0x17
    2102:	a5 01       	movw	r20, r10
    2104:	65 ea       	ldi	r22, 0xA5	; 165
    2106:	70 e0       	ldi	r23, 0x00	; 0
    2108:	c3 01       	movw	r24, r6
    210a:	0e 94 12 21 	call	0x4224	; 0x4224 <memset>
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	a8 1a       	sub	r10, r24
    2112:	b1 08       	sbc	r11, r1
    2114:	8f 89       	ldd	r24, Y+23	; 0x17
    2116:	98 8d       	ldd	r25, Y+24	; 0x18
    2118:	a8 0e       	add	r10, r24
    211a:	b9 1e       	adc	r11, r25
    211c:	c1 14       	cp	r12, r1
    211e:	d1 04       	cpc	r13, r1
    2120:	29 f4       	brne	.+10     	; 0x212c <xTaskCreate+0x70>
    2122:	20 c0       	rjmp	.+64     	; 0x2164 <xTaskCreate+0xa8>
    2124:	c3 01       	movw	r24, r6
    2126:	0e 94 11 0b 	call	0x1622	; 0x1622 <vPortFree>
    212a:	d3 c0       	rjmp	.+422    	; 0x22d2 <xTaskCreate+0x216>
    212c:	d6 01       	movw	r26, r12
    212e:	8c 91       	ld	r24, X
    2130:	89 8f       	std	Y+25, r24	; 0x19
    2132:	8c 91       	ld	r24, X
    2134:	88 23       	and	r24, r24
    2136:	a1 f0       	breq	.+40     	; 0x2160 <xTaskCreate+0xa4>
    2138:	ae 01       	movw	r20, r28
    213a:	46 5e       	subi	r20, 0xE6	; 230
    213c:	5f 4f       	sbci	r21, 0xFF	; 255
    213e:	f6 01       	movw	r30, r12
    2140:	31 96       	adiw	r30, 0x01	; 1
    2142:	b8 e0       	ldi	r27, 0x08	; 8
    2144:	cb 0e       	add	r12, r27
    2146:	d1 1c       	adc	r13, r1
    2148:	cf 01       	movw	r24, r30
    214a:	21 91       	ld	r18, Z+
    214c:	da 01       	movw	r26, r20
    214e:	2d 93       	st	X+, r18
    2150:	ad 01       	movw	r20, r26
    2152:	dc 01       	movw	r26, r24
    2154:	8c 91       	ld	r24, X
    2156:	88 23       	and	r24, r24
    2158:	19 f0       	breq	.+6      	; 0x2160 <xTaskCreate+0xa4>
    215a:	ec 15       	cp	r30, r12
    215c:	fd 05       	cpc	r31, r13
    215e:	a1 f7       	brne	.-24     	; 0x2148 <xTaskCreate+0x8c>
    2160:	18 a2       	std	Y+32, r1	; 0x20
    2162:	01 c0       	rjmp	.+2      	; 0x2166 <xTaskCreate+0xaa>
    2164:	19 8e       	std	Y+25, r1	; 0x19
    2166:	04 30       	cpi	r16, 0x04	; 4
    2168:	08 f0       	brcs	.+2      	; 0x216c <xTaskCreate+0xb0>
    216a:	03 e0       	ldi	r16, 0x03	; 3
    216c:	0e 8b       	std	Y+22, r16	; 0x16
    216e:	09 a3       	std	Y+33, r16	; 0x21
    2170:	1a a2       	std	Y+34, r1	; 0x22
    2172:	6e 01       	movw	r12, r28
    2174:	b2 e0       	ldi	r27, 0x02	; 2
    2176:	cb 0e       	add	r12, r27
    2178:	d1 1c       	adc	r13, r1
    217a:	c6 01       	movw	r24, r12
    217c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <vListInitialiseItem>
    2180:	ce 01       	movw	r24, r28
    2182:	0c 96       	adiw	r24, 0x0c	; 12
    2184:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <vListInitialiseItem>
    2188:	d9 87       	std	Y+9, r29	; 0x09
    218a:	c8 87       	std	Y+8, r28	; 0x08
    218c:	84 e0       	ldi	r24, 0x04	; 4
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	80 1b       	sub	r24, r16
    2192:	91 09       	sbc	r25, r1
    2194:	9d 87       	std	Y+13, r25	; 0x0d
    2196:	8c 87       	std	Y+12, r24	; 0x0c
    2198:	db 8b       	std	Y+19, r29	; 0x13
    219a:	ca 8b       	std	Y+18, r28	; 0x12
    219c:	1b a2       	std	Y+35, r1	; 0x23
    219e:	1c a2       	std	Y+36, r1	; 0x24
    21a0:	1d a2       	std	Y+37, r1	; 0x25
    21a2:	1e a2       	std	Y+38, r1	; 0x26
    21a4:	1f a2       	std	Y+39, r1	; 0x27
    21a6:	a2 01       	movw	r20, r4
    21a8:	b4 01       	movw	r22, r8
    21aa:	c5 01       	movw	r24, r10
    21ac:	0e 94 de 0b 	call	0x17bc	; 0x17bc <pxPortInitialiseStack>
    21b0:	99 83       	std	Y+1, r25	; 0x01
    21b2:	88 83       	st	Y, r24
    21b4:	e1 14       	cp	r14, r1
    21b6:	f1 04       	cpc	r15, r1
    21b8:	19 f0       	breq	.+6      	; 0x21c0 <xTaskCreate+0x104>
    21ba:	f7 01       	movw	r30, r14
    21bc:	d1 83       	std	Z+1, r29	; 0x01
    21be:	c0 83       	st	Z, r28
    21c0:	0f b6       	in	r0, 0x3f	; 63
    21c2:	f8 94       	cli
    21c4:	0f 92       	push	r0
    21c6:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <uxCurrentNumberOfTasks>
    21ca:	8f 5f       	subi	r24, 0xFF	; 255
    21cc:	80 93 aa 01 	sts	0x01AA, r24	; 0x8001aa <uxCurrentNumberOfTasks>
    21d0:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pxCurrentTCB>
    21d4:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    21d8:	89 2b       	or	r24, r25
    21da:	d1 f5       	brne	.+116    	; 0x2250 <xTaskCreate+0x194>
    21dc:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <pxCurrentTCB+0x1>
    21e0:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pxCurrentTCB>
    21e4:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <uxCurrentNumberOfTasks>
    21e8:	81 30       	cpi	r24, 0x01	; 1
    21ea:	09 f0       	breq	.+2      	; 0x21ee <xTaskCreate+0x132>
    21ec:	41 c0       	rjmp	.+130    	; 0x2270 <xTaskCreate+0x1b4>
    21ee:	8d ed       	ldi	r24, 0xDD	; 221
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    21f6:	86 ee       	ldi	r24, 0xE6	; 230
    21f8:	91 e0       	ldi	r25, 0x01	; 1
    21fa:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    21fe:	8f ee       	ldi	r24, 0xEF	; 239
    2200:	91 e0       	ldi	r25, 0x01	; 1
    2202:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    2206:	88 ef       	ldi	r24, 0xF8	; 248
    2208:	91 e0       	ldi	r25, 0x01	; 1
    220a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    220e:	84 ed       	ldi	r24, 0xD4	; 212
    2210:	91 e0       	ldi	r25, 0x01	; 1
    2212:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    2216:	8b ec       	ldi	r24, 0xCB	; 203
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    221e:	8e eb       	ldi	r24, 0xBE	; 190
    2220:	91 e0       	ldi	r25, 0x01	; 1
    2222:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    2226:	85 eb       	ldi	r24, 0xB5	; 181
    2228:	91 e0       	ldi	r25, 0x01	; 1
    222a:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    222e:	8b ea       	ldi	r24, 0xAB	; 171
    2230:	91 e0       	ldi	r25, 0x01	; 1
    2232:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    2236:	84 ed       	ldi	r24, 0xD4	; 212
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <pxDelayedTaskList+0x1>
    223e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <pxDelayedTaskList>
    2242:	8b ec       	ldi	r24, 0xCB	; 203
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <pxOverflowDelayedTaskList+0x1>
    224a:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pxOverflowDelayedTaskList>
    224e:	10 c0       	rjmp	.+32     	; 0x2270 <xTaskCreate+0x1b4>
    2250:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <xSchedulerRunning>
    2254:	81 11       	cpse	r24, r1
    2256:	0c c0       	rjmp	.+24     	; 0x2270 <xTaskCreate+0x1b4>
    2258:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    225c:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2260:	96 89       	ldd	r25, Z+22	; 0x16
    2262:	8e 89       	ldd	r24, Y+22	; 0x16
    2264:	89 17       	cp	r24, r25
    2266:	20 f0       	brcs	.+8      	; 0x2270 <xTaskCreate+0x1b4>
    2268:	d0 93 02 02 	sts	0x0202, r29	; 0x800202 <pxCurrentTCB+0x1>
    226c:	c0 93 01 02 	sts	0x0201, r28	; 0x800201 <pxCurrentTCB>
    2270:	80 91 a1 01 	lds	r24, 0x01A1	; 0x8001a1 <uxTaskNumber>
    2274:	8f 5f       	subi	r24, 0xFF	; 255
    2276:	80 93 a1 01 	sts	0x01A1, r24	; 0x8001a1 <uxTaskNumber>
    227a:	8e 89       	ldd	r24, Y+22	; 0x16
    227c:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    2280:	98 17       	cp	r25, r24
    2282:	10 f4       	brcc	.+4      	; 0x2288 <xTaskCreate+0x1cc>
    2284:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	9c 01       	movw	r18, r24
    228c:	22 0f       	add	r18, r18
    228e:	33 1f       	adc	r19, r19
    2290:	22 0f       	add	r18, r18
    2292:	33 1f       	adc	r19, r19
    2294:	22 0f       	add	r18, r18
    2296:	33 1f       	adc	r19, r19
    2298:	82 0f       	add	r24, r18
    229a:	93 1f       	adc	r25, r19
    229c:	b6 01       	movw	r22, r12
    229e:	83 52       	subi	r24, 0x23	; 35
    22a0:	9e 4f       	sbci	r25, 0xFE	; 254
    22a2:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vListInsertEnd>
    22a6:	0f 90       	pop	r0
    22a8:	0f be       	out	0x3f, r0	; 63
    22aa:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <xSchedulerRunning>
    22ae:	88 23       	and	r24, r24
    22b0:	61 f0       	breq	.+24     	; 0x22ca <xTaskCreate+0x20e>
    22b2:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    22b6:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    22ba:	96 89       	ldd	r25, Z+22	; 0x16
    22bc:	8e 89       	ldd	r24, Y+22	; 0x16
    22be:	98 17       	cp	r25, r24
    22c0:	30 f4       	brcc	.+12     	; 0x22ce <xTaskCreate+0x212>
    22c2:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	05 c0       	rjmp	.+10     	; 0x22d4 <xTaskCreate+0x218>
    22ca:	81 e0       	ldi	r24, 0x01	; 1
    22cc:	03 c0       	rjmp	.+6      	; 0x22d4 <xTaskCreate+0x218>
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <xTaskCreate+0x218>
    22d2:	8f ef       	ldi	r24, 0xFF	; 255
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	0f 91       	pop	r16
    22da:	ff 90       	pop	r15
    22dc:	ef 90       	pop	r14
    22de:	df 90       	pop	r13
    22e0:	cf 90       	pop	r12
    22e2:	bf 90       	pop	r11
    22e4:	af 90       	pop	r10
    22e6:	9f 90       	pop	r9
    22e8:	8f 90       	pop	r8
    22ea:	7f 90       	pop	r7
    22ec:	6f 90       	pop	r6
    22ee:	5f 90       	pop	r5
    22f0:	4f 90       	pop	r4
    22f2:	08 95       	ret

000022f4 <vTaskStartScheduler>:
    22f4:	ef 92       	push	r14
    22f6:	ff 92       	push	r15
    22f8:	0f 93       	push	r16
    22fa:	0f 2e       	mov	r0, r31
    22fc:	fd e9       	ldi	r31, 0x9D	; 157
    22fe:	ef 2e       	mov	r14, r31
    2300:	f1 e0       	ldi	r31, 0x01	; 1
    2302:	ff 2e       	mov	r15, r31
    2304:	f0 2d       	mov	r31, r0
    2306:	00 e0       	ldi	r16, 0x00	; 0
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	45 e5       	ldi	r20, 0x55	; 85
    230e:	50 e0       	ldi	r21, 0x00	; 0
    2310:	6e e4       	ldi	r22, 0x4E	; 78
    2312:	71 e0       	ldi	r23, 0x01	; 1
    2314:	84 e2       	ldi	r24, 0x24	; 36
    2316:	90 e1       	ldi	r25, 0x10	; 16
    2318:	0e 94 5e 10 	call	0x20bc	; 0x20bc <xTaskCreate>
    231c:	81 30       	cpi	r24, 0x01	; 1
    231e:	a1 f4       	brne	.+40     	; 0x2348 <vTaskStartScheduler+0x54>
    2320:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <xTimerCreateTimerTask>
    2324:	81 30       	cpi	r24, 0x01	; 1
    2326:	81 f4       	brne	.+32     	; 0x2348 <vTaskStartScheduler+0x54>
    2328:	f8 94       	cli
    232a:	8f ef       	ldi	r24, 0xFF	; 255
    232c:	9f ef       	ldi	r25, 0xFF	; 255
    232e:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    2332:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    2336:	81 e0       	ldi	r24, 0x01	; 1
    2338:	80 93 a6 01 	sts	0x01A6, r24	; 0x8001a6 <xSchedulerRunning>
    233c:	10 92 a9 01 	sts	0x01A9, r1	; 0x8001a9 <xTickCount+0x1>
    2340:	10 92 a8 01 	sts	0x01A8, r1	; 0x8001a8 <xTickCount>
    2344:	0e 94 ef 0b 	call	0x17de	; 0x17de <xPortStartScheduler>
    2348:	0f 91       	pop	r16
    234a:	ff 90       	pop	r15
    234c:	ef 90       	pop	r14
    234e:	08 95       	ret

00002350 <vTaskSuspendAll>:
    2350:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    2354:	8f 5f       	subi	r24, 0xFF	; 255
    2356:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <uxSchedulerSuspended>
    235a:	08 95       	ret

0000235c <xTaskGetTickCount>:
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	0f 92       	push	r0
    2362:	80 91 a8 01 	lds	r24, 0x01A8	; 0x8001a8 <xTickCount>
    2366:	90 91 a9 01 	lds	r25, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    236a:	0f 90       	pop	r0
    236c:	0f be       	out	0x3f, r0	; 63
    236e:	08 95       	ret

00002370 <xTaskIncrementTick>:
    2370:	cf 92       	push	r12
    2372:	df 92       	push	r13
    2374:	ef 92       	push	r14
    2376:	ff 92       	push	r15
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    2384:	81 11       	cpse	r24, r1
    2386:	9f c0       	rjmp	.+318    	; 0x24c6 <xTaskIncrementTick+0x156>
    2388:	e0 90 a8 01 	lds	r14, 0x01A8	; 0x8001a8 <xTickCount>
    238c:	f0 90 a9 01 	lds	r15, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    2390:	8f ef       	ldi	r24, 0xFF	; 255
    2392:	e8 1a       	sub	r14, r24
    2394:	f8 0a       	sbc	r15, r24
    2396:	f0 92 a9 01 	sts	0x01A9, r15	; 0x8001a9 <xTickCount+0x1>
    239a:	e0 92 a8 01 	sts	0x01A8, r14	; 0x8001a8 <xTickCount>
    239e:	e1 14       	cp	r14, r1
    23a0:	f1 04       	cpc	r15, r1
    23a2:	b9 f4       	brne	.+46     	; 0x23d2 <xTaskIncrementTick+0x62>
    23a4:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    23a8:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    23ac:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <pxOverflowDelayedTaskList>
    23b0:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <pxOverflowDelayedTaskList+0x1>
    23b4:	30 93 ca 01 	sts	0x01CA, r19	; 0x8001ca <pxDelayedTaskList+0x1>
    23b8:	20 93 c9 01 	sts	0x01C9, r18	; 0x8001c9 <pxDelayedTaskList>
    23bc:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <pxOverflowDelayedTaskList+0x1>
    23c0:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pxOverflowDelayedTaskList>
    23c4:	80 91 a2 01 	lds	r24, 0x01A2	; 0x8001a2 <xNumOfOverflows>
    23c8:	8f 5f       	subi	r24, 0xFF	; 255
    23ca:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <xNumOfOverflows>
    23ce:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <prvResetNextTaskUnblockTime>
    23d2:	80 91 9f 01 	lds	r24, 0x019F	; 0x80019f <xNextTaskUnblockTime>
    23d6:	90 91 a0 01 	lds	r25, 0x01A0	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    23da:	e8 16       	cp	r14, r24
    23dc:	f9 06       	cpc	r15, r25
    23de:	10 f4       	brcc	.+4      	; 0x23e4 <xTaskIncrementTick+0x74>
    23e0:	d1 2c       	mov	r13, r1
    23e2:	53 c0       	rjmp	.+166    	; 0x248a <xTaskIncrementTick+0x11a>
    23e4:	d1 2c       	mov	r13, r1
    23e6:	cc 24       	eor	r12, r12
    23e8:	c3 94       	inc	r12
    23ea:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    23ee:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    23f2:	80 81       	ld	r24, Z
    23f4:	81 11       	cpse	r24, r1
    23f6:	07 c0       	rjmp	.+14     	; 0x2406 <xTaskIncrementTick+0x96>
    23f8:	8f ef       	ldi	r24, 0xFF	; 255
    23fa:	9f ef       	ldi	r25, 0xFF	; 255
    23fc:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    2400:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    2404:	42 c0       	rjmp	.+132    	; 0x248a <xTaskIncrementTick+0x11a>
    2406:	e0 91 c9 01 	lds	r30, 0x01C9	; 0x8001c9 <pxDelayedTaskList>
    240a:	f0 91 ca 01 	lds	r31, 0x01CA	; 0x8001ca <pxDelayedTaskList+0x1>
    240e:	05 80       	ldd	r0, Z+5	; 0x05
    2410:	f6 81       	ldd	r31, Z+6	; 0x06
    2412:	e0 2d       	mov	r30, r0
    2414:	c6 81       	ldd	r28, Z+6	; 0x06
    2416:	d7 81       	ldd	r29, Z+7	; 0x07
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	9b 81       	ldd	r25, Y+3	; 0x03
    241c:	e8 16       	cp	r14, r24
    241e:	f9 06       	cpc	r15, r25
    2420:	28 f4       	brcc	.+10     	; 0x242c <xTaskIncrementTick+0xbc>
    2422:	90 93 a0 01 	sts	0x01A0, r25	; 0x8001a0 <xNextTaskUnblockTime+0x1>
    2426:	80 93 9f 01 	sts	0x019F, r24	; 0x80019f <xNextTaskUnblockTime>
    242a:	2f c0       	rjmp	.+94     	; 0x248a <xTaskIncrementTick+0x11a>
    242c:	8e 01       	movw	r16, r28
    242e:	0e 5f       	subi	r16, 0xFE	; 254
    2430:	1f 4f       	sbci	r17, 0xFF	; 255
    2432:	c8 01       	movw	r24, r16
    2434:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    2438:	8c 89       	ldd	r24, Y+20	; 0x14
    243a:	9d 89       	ldd	r25, Y+21	; 0x15
    243c:	89 2b       	or	r24, r25
    243e:	21 f0       	breq	.+8      	; 0x2448 <xTaskIncrementTick+0xd8>
    2440:	ce 01       	movw	r24, r28
    2442:	0c 96       	adiw	r24, 0x0c	; 12
    2444:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    2448:	8e 89       	ldd	r24, Y+22	; 0x16
    244a:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    244e:	98 17       	cp	r25, r24
    2450:	10 f4       	brcc	.+4      	; 0x2456 <xTaskIncrementTick+0xe6>
    2452:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    2456:	90 e0       	ldi	r25, 0x00	; 0
    2458:	9c 01       	movw	r18, r24
    245a:	22 0f       	add	r18, r18
    245c:	33 1f       	adc	r19, r19
    245e:	22 0f       	add	r18, r18
    2460:	33 1f       	adc	r19, r19
    2462:	22 0f       	add	r18, r18
    2464:	33 1f       	adc	r19, r19
    2466:	82 0f       	add	r24, r18
    2468:	93 1f       	adc	r25, r19
    246a:	b8 01       	movw	r22, r16
    246c:	83 52       	subi	r24, 0x23	; 35
    246e:	9e 4f       	sbci	r25, 0xFE	; 254
    2470:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vListInsertEnd>
    2474:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    2478:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    247c:	9e 89       	ldd	r25, Y+22	; 0x16
    247e:	86 89       	ldd	r24, Z+22	; 0x16
    2480:	98 17       	cp	r25, r24
    2482:	08 f4       	brcc	.+2      	; 0x2486 <xTaskIncrementTick+0x116>
    2484:	b2 cf       	rjmp	.-156    	; 0x23ea <xTaskIncrementTick+0x7a>
    2486:	dc 2c       	mov	r13, r12
    2488:	b0 cf       	rjmp	.-160    	; 0x23ea <xTaskIncrementTick+0x7a>
    248a:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    248e:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2492:	86 89       	ldd	r24, Z+22	; 0x16
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	fc 01       	movw	r30, r24
    2498:	ee 0f       	add	r30, r30
    249a:	ff 1f       	adc	r31, r31
    249c:	ee 0f       	add	r30, r30
    249e:	ff 1f       	adc	r31, r31
    24a0:	ee 0f       	add	r30, r30
    24a2:	ff 1f       	adc	r31, r31
    24a4:	8e 0f       	add	r24, r30
    24a6:	9f 1f       	adc	r25, r31
    24a8:	fc 01       	movw	r30, r24
    24aa:	e3 52       	subi	r30, 0x23	; 35
    24ac:	fe 4f       	sbci	r31, 0xFE	; 254
    24ae:	80 81       	ld	r24, Z
    24b0:	82 30       	cpi	r24, 0x02	; 2
    24b2:	10 f0       	brcs	.+4      	; 0x24b8 <xTaskIncrementTick+0x148>
    24b4:	dd 24       	eor	r13, r13
    24b6:	d3 94       	inc	r13
    24b8:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <xYieldPending>
    24bc:	88 23       	and	r24, r24
    24be:	69 f0       	breq	.+26     	; 0x24da <xTaskIncrementTick+0x16a>
    24c0:	dd 24       	eor	r13, r13
    24c2:	d3 94       	inc	r13
    24c4:	0a c0       	rjmp	.+20     	; 0x24da <xTaskIncrementTick+0x16a>
    24c6:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <xPendedTicks>
    24ca:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <xPendedTicks+0x1>
    24ce:	01 96       	adiw	r24, 0x01	; 1
    24d0:	90 93 a5 01 	sts	0x01A5, r25	; 0x8001a5 <xPendedTicks+0x1>
    24d4:	80 93 a4 01 	sts	0x01A4, r24	; 0x8001a4 <xPendedTicks>
    24d8:	d1 2c       	mov	r13, r1
    24da:	8d 2d       	mov	r24, r13
    24dc:	df 91       	pop	r29
    24de:	cf 91       	pop	r28
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	df 90       	pop	r13
    24ea:	cf 90       	pop	r12
    24ec:	08 95       	ret

000024ee <xTaskResumeAll>:
    24ee:	df 92       	push	r13
    24f0:	ef 92       	push	r14
    24f2:	ff 92       	push	r15
    24f4:	0f 93       	push	r16
    24f6:	1f 93       	push	r17
    24f8:	cf 93       	push	r28
    24fa:	df 93       	push	r29
    24fc:	0f b6       	in	r0, 0x3f	; 63
    24fe:	f8 94       	cli
    2500:	0f 92       	push	r0
    2502:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    2506:	81 50       	subi	r24, 0x01	; 1
    2508:	80 93 9c 01 	sts	0x019C, r24	; 0x80019c <uxSchedulerSuspended>
    250c:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    2510:	81 11       	cpse	r24, r1
    2512:	63 c0       	rjmp	.+198    	; 0x25da <xTaskResumeAll+0xec>
    2514:	80 91 aa 01 	lds	r24, 0x01AA	; 0x8001aa <uxCurrentNumberOfTasks>
    2518:	81 11       	cpse	r24, r1
    251a:	33 c0       	rjmp	.+102    	; 0x2582 <xTaskResumeAll+0x94>
    251c:	61 c0       	rjmp	.+194    	; 0x25e0 <xTaskResumeAll+0xf2>
    251e:	d7 01       	movw	r26, r14
    2520:	15 96       	adiw	r26, 0x05	; 5
    2522:	ed 91       	ld	r30, X+
    2524:	fc 91       	ld	r31, X
    2526:	16 97       	sbiw	r26, 0x06	; 6
    2528:	c6 81       	ldd	r28, Z+6	; 0x06
    252a:	d7 81       	ldd	r29, Z+7	; 0x07
    252c:	ce 01       	movw	r24, r28
    252e:	0c 96       	adiw	r24, 0x0c	; 12
    2530:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    2534:	8e 01       	movw	r16, r28
    2536:	0e 5f       	subi	r16, 0xFE	; 254
    2538:	1f 4f       	sbci	r17, 0xFF	; 255
    253a:	c8 01       	movw	r24, r16
    253c:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    2540:	8e 89       	ldd	r24, Y+22	; 0x16
    2542:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    2546:	98 17       	cp	r25, r24
    2548:	10 f4       	brcc	.+4      	; 0x254e <xTaskResumeAll+0x60>
    254a:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	9c 01       	movw	r18, r24
    2552:	22 0f       	add	r18, r18
    2554:	33 1f       	adc	r19, r19
    2556:	22 0f       	add	r18, r18
    2558:	33 1f       	adc	r19, r19
    255a:	22 0f       	add	r18, r18
    255c:	33 1f       	adc	r19, r19
    255e:	82 0f       	add	r24, r18
    2560:	93 1f       	adc	r25, r19
    2562:	b8 01       	movw	r22, r16
    2564:	83 52       	subi	r24, 0x23	; 35
    2566:	9e 4f       	sbci	r25, 0xFE	; 254
    2568:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vListInsertEnd>
    256c:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    2570:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2574:	9e 89       	ldd	r25, Y+22	; 0x16
    2576:	86 89       	ldd	r24, Z+22	; 0x16
    2578:	98 17       	cp	r25, r24
    257a:	68 f0       	brcs	.+26     	; 0x2596 <xTaskResumeAll+0xa8>
    257c:	d0 92 a3 01 	sts	0x01A3, r13	; 0x8001a3 <xYieldPending>
    2580:	0a c0       	rjmp	.+20     	; 0x2596 <xTaskResumeAll+0xa8>
    2582:	c0 e0       	ldi	r28, 0x00	; 0
    2584:	d0 e0       	ldi	r29, 0x00	; 0
    2586:	0f 2e       	mov	r0, r31
    2588:	fe eb       	ldi	r31, 0xBE	; 190
    258a:	ef 2e       	mov	r14, r31
    258c:	f1 e0       	ldi	r31, 0x01	; 1
    258e:	ff 2e       	mov	r15, r31
    2590:	f0 2d       	mov	r31, r0
    2592:	dd 24       	eor	r13, r13
    2594:	d3 94       	inc	r13
    2596:	f7 01       	movw	r30, r14
    2598:	80 81       	ld	r24, Z
    259a:	81 11       	cpse	r24, r1
    259c:	c0 cf       	rjmp	.-128    	; 0x251e <xTaskResumeAll+0x30>
    259e:	cd 2b       	or	r28, r29
    25a0:	11 f0       	breq	.+4      	; 0x25a6 <xTaskResumeAll+0xb8>
    25a2:	0e 94 ad 0f 	call	0x1f5a	; 0x1f5a <prvResetNextTaskUnblockTime>
    25a6:	c0 91 a4 01 	lds	r28, 0x01A4	; 0x8001a4 <xPendedTicks>
    25aa:	d0 91 a5 01 	lds	r29, 0x01A5	; 0x8001a5 <xPendedTicks+0x1>
    25ae:	20 97       	sbiw	r28, 0x00	; 0
    25b0:	61 f0       	breq	.+24     	; 0x25ca <xTaskResumeAll+0xdc>
    25b2:	11 e0       	ldi	r17, 0x01	; 1
    25b4:	0e 94 b8 11 	call	0x2370	; 0x2370 <xTaskIncrementTick>
    25b8:	81 11       	cpse	r24, r1
    25ba:	10 93 a3 01 	sts	0x01A3, r17	; 0x8001a3 <xYieldPending>
    25be:	21 97       	sbiw	r28, 0x01	; 1
    25c0:	c9 f7       	brne	.-14     	; 0x25b4 <xTaskResumeAll+0xc6>
    25c2:	10 92 a5 01 	sts	0x01A5, r1	; 0x8001a5 <xPendedTicks+0x1>
    25c6:	10 92 a4 01 	sts	0x01A4, r1	; 0x8001a4 <xPendedTicks>
    25ca:	80 91 a3 01 	lds	r24, 0x01A3	; 0x8001a3 <xYieldPending>
    25ce:	88 23       	and	r24, r24
    25d0:	31 f0       	breq	.+12     	; 0x25de <xTaskResumeAll+0xf0>
    25d2:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	03 c0       	rjmp	.+6      	; 0x25e0 <xTaskResumeAll+0xf2>
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <xTaskResumeAll+0xf2>
    25de:	80 e0       	ldi	r24, 0x00	; 0
    25e0:	0f 90       	pop	r0
    25e2:	0f be       	out	0x3f, r0	; 63
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	df 90       	pop	r13
    25f2:	08 95       	ret

000025f4 <vTaskDelayUntil>:
    25f4:	0f 93       	push	r16
    25f6:	1f 93       	push	r17
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	8c 01       	movw	r16, r24
    25fe:	eb 01       	movw	r28, r22
    2600:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSuspendAll>
    2604:	40 91 a8 01 	lds	r20, 0x01A8	; 0x8001a8 <xTickCount>
    2608:	50 91 a9 01 	lds	r21, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    260c:	f8 01       	movw	r30, r16
    260e:	20 81       	ld	r18, Z
    2610:	31 81       	ldd	r19, Z+1	; 0x01
    2612:	c9 01       	movw	r24, r18
    2614:	8c 0f       	add	r24, r28
    2616:	9d 1f       	adc	r25, r29
    2618:	42 17       	cp	r20, r18
    261a:	53 07       	cpc	r21, r19
    261c:	48 f4       	brcc	.+18     	; 0x2630 <vTaskDelayUntil+0x3c>
    261e:	82 17       	cp	r24, r18
    2620:	93 07       	cpc	r25, r19
    2622:	e8 f4       	brcc	.+58     	; 0x265e <vTaskDelayUntil+0x6a>
    2624:	91 83       	std	Z+1, r25	; 0x01
    2626:	80 83       	st	Z, r24
    2628:	48 17       	cp	r20, r24
    262a:	59 07       	cpc	r21, r25
    262c:	68 f4       	brcc	.+26     	; 0x2648 <vTaskDelayUntil+0x54>
    262e:	07 c0       	rjmp	.+14     	; 0x263e <vTaskDelayUntil+0x4a>
    2630:	82 17       	cp	r24, r18
    2632:	93 07       	cpc	r25, r19
    2634:	80 f0       	brcs	.+32     	; 0x2656 <vTaskDelayUntil+0x62>
    2636:	48 17       	cp	r20, r24
    2638:	59 07       	cpc	r21, r25
    263a:	68 f0       	brcs	.+26     	; 0x2656 <vTaskDelayUntil+0x62>
    263c:	10 c0       	rjmp	.+32     	; 0x265e <vTaskDelayUntil+0x6a>
    263e:	60 e0       	ldi	r22, 0x00	; 0
    2640:	84 1b       	sub	r24, r20
    2642:	95 0b       	sbc	r25, r21
    2644:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <prvAddCurrentTaskToDelayedList>
    2648:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    264c:	81 11       	cpse	r24, r1
    264e:	0b c0       	rjmp	.+22     	; 0x2666 <vTaskDelayUntil+0x72>
    2650:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    2654:	08 c0       	rjmp	.+16     	; 0x2666 <vTaskDelayUntil+0x72>
    2656:	f8 01       	movw	r30, r16
    2658:	91 83       	std	Z+1, r25	; 0x01
    265a:	80 83       	st	Z, r24
    265c:	f0 cf       	rjmp	.-32     	; 0x263e <vTaskDelayUntil+0x4a>
    265e:	f8 01       	movw	r30, r16
    2660:	91 83       	std	Z+1, r25	; 0x01
    2662:	80 83       	st	Z, r24
    2664:	f1 cf       	rjmp	.-30     	; 0x2648 <vTaskDelayUntil+0x54>
    2666:	df 91       	pop	r29
    2668:	cf 91       	pop	r28
    266a:	1f 91       	pop	r17
    266c:	0f 91       	pop	r16
    266e:	08 95       	ret

00002670 <vTaskSwitchContext>:
    2670:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    2674:	88 23       	and	r24, r24
    2676:	21 f0       	breq	.+8      	; 0x2680 <vTaskSwitchContext+0x10>
    2678:	81 e0       	ldi	r24, 0x01	; 1
    267a:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <xYieldPending>
    267e:	08 95       	ret
    2680:	10 92 a3 01 	sts	0x01A3, r1	; 0x8001a3 <xYieldPending>
    2684:	a0 91 01 02 	lds	r26, 0x0201	; 0x800201 <pxCurrentTCB>
    2688:	b0 91 02 02 	lds	r27, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    268c:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    2690:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2694:	2d 91       	ld	r18, X+
    2696:	3c 91       	ld	r19, X
    2698:	87 89       	ldd	r24, Z+23	; 0x17
    269a:	90 8d       	ldd	r25, Z+24	; 0x18
    269c:	82 17       	cp	r24, r18
    269e:	93 07       	cpc	r25, r19
    26a0:	60 f0       	brcs	.+24     	; 0x26ba <vTaskSwitchContext+0x4a>
    26a2:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    26a6:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    26aa:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <pxCurrentTCB>
    26ae:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    26b2:	67 5e       	subi	r22, 0xE7	; 231
    26b4:	7f 4f       	sbci	r23, 0xFF	; 255
    26b6:	0e 94 46 0b 	call	0x168c	; 0x168c <vApplicationStackOverflowHook>
    26ba:	20 91 a7 01 	lds	r18, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    26be:	82 2f       	mov	r24, r18
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	fc 01       	movw	r30, r24
    26c4:	ee 0f       	add	r30, r30
    26c6:	ff 1f       	adc	r31, r31
    26c8:	ee 0f       	add	r30, r30
    26ca:	ff 1f       	adc	r31, r31
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	e8 0f       	add	r30, r24
    26d2:	f9 1f       	adc	r31, r25
    26d4:	e3 52       	subi	r30, 0x23	; 35
    26d6:	fe 4f       	sbci	r31, 0xFE	; 254
    26d8:	30 81       	ld	r19, Z
    26da:	31 11       	cpse	r19, r1
    26dc:	11 c0       	rjmp	.+34     	; 0x2700 <vTaskSwitchContext+0x90>
    26de:	21 50       	subi	r18, 0x01	; 1
    26e0:	82 2f       	mov	r24, r18
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	fc 01       	movw	r30, r24
    26e6:	ee 0f       	add	r30, r30
    26e8:	ff 1f       	adc	r31, r31
    26ea:	ee 0f       	add	r30, r30
    26ec:	ff 1f       	adc	r31, r31
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	e8 0f       	add	r30, r24
    26f4:	f9 1f       	adc	r31, r25
    26f6:	e3 52       	subi	r30, 0x23	; 35
    26f8:	fe 4f       	sbci	r31, 0xFE	; 254
    26fa:	30 81       	ld	r19, Z
    26fc:	33 23       	and	r19, r19
    26fe:	79 f3       	breq	.-34     	; 0x26de <vTaskSwitchContext+0x6e>
    2700:	ac 01       	movw	r20, r24
    2702:	44 0f       	add	r20, r20
    2704:	55 1f       	adc	r21, r21
    2706:	44 0f       	add	r20, r20
    2708:	55 1f       	adc	r21, r21
    270a:	44 0f       	add	r20, r20
    270c:	55 1f       	adc	r21, r21
    270e:	48 0f       	add	r20, r24
    2710:	59 1f       	adc	r21, r25
    2712:	da 01       	movw	r26, r20
    2714:	a3 52       	subi	r26, 0x23	; 35
    2716:	be 4f       	sbci	r27, 0xFE	; 254
    2718:	11 96       	adiw	r26, 0x01	; 1
    271a:	ed 91       	ld	r30, X+
    271c:	fc 91       	ld	r31, X
    271e:	12 97       	sbiw	r26, 0x02	; 2
    2720:	02 80       	ldd	r0, Z+2	; 0x02
    2722:	f3 81       	ldd	r31, Z+3	; 0x03
    2724:	e0 2d       	mov	r30, r0
    2726:	12 96       	adiw	r26, 0x02	; 2
    2728:	fc 93       	st	X, r31
    272a:	ee 93       	st	-X, r30
    272c:	11 97       	sbiw	r26, 0x01	; 1
    272e:	40 52       	subi	r20, 0x20	; 32
    2730:	5e 4f       	sbci	r21, 0xFE	; 254
    2732:	e4 17       	cp	r30, r20
    2734:	f5 07       	cpc	r31, r21
    2736:	29 f4       	brne	.+10     	; 0x2742 <vTaskSwitchContext+0xd2>
    2738:	42 81       	ldd	r20, Z+2	; 0x02
    273a:	53 81       	ldd	r21, Z+3	; 0x03
    273c:	fd 01       	movw	r30, r26
    273e:	52 83       	std	Z+2, r21	; 0x02
    2740:	41 83       	std	Z+1, r20	; 0x01
    2742:	fc 01       	movw	r30, r24
    2744:	ee 0f       	add	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	ee 0f       	add	r30, r30
    274a:	ff 1f       	adc	r31, r31
    274c:	ee 0f       	add	r30, r30
    274e:	ff 1f       	adc	r31, r31
    2750:	8e 0f       	add	r24, r30
    2752:	9f 1f       	adc	r25, r31
    2754:	fc 01       	movw	r30, r24
    2756:	e3 52       	subi	r30, 0x23	; 35
    2758:	fe 4f       	sbci	r31, 0xFE	; 254
    275a:	01 80       	ldd	r0, Z+1	; 0x01
    275c:	f2 81       	ldd	r31, Z+2	; 0x02
    275e:	e0 2d       	mov	r30, r0
    2760:	86 81       	ldd	r24, Z+6	; 0x06
    2762:	97 81       	ldd	r25, Z+7	; 0x07
    2764:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <pxCurrentTCB+0x1>
    2768:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <pxCurrentTCB>
    276c:	20 93 a7 01 	sts	0x01A7, r18	; 0x8001a7 <uxTopReadyPriority>
    2770:	08 95       	ret

00002772 <vTaskPlaceOnEventList>:
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	eb 01       	movw	r28, r22
    2778:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    277c:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    2780:	64 5f       	subi	r22, 0xF4	; 244
    2782:	7f 4f       	sbci	r23, 0xFF	; 255
    2784:	0e 94 86 0b 	call	0x170c	; 0x170c <vListInsert>
    2788:	61 e0       	ldi	r22, 0x01	; 1
    278a:	ce 01       	movw	r24, r28
    278c:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <prvAddCurrentTaskToDelayedList>
    2790:	df 91       	pop	r29
    2792:	cf 91       	pop	r28
    2794:	08 95       	ret

00002796 <vTaskPlaceOnEventListRestricted>:
    2796:	0f 93       	push	r16
    2798:	1f 93       	push	r17
    279a:	cf 93       	push	r28
    279c:	8b 01       	movw	r16, r22
    279e:	c4 2f       	mov	r28, r20
    27a0:	60 91 01 02 	lds	r22, 0x0201	; 0x800201 <pxCurrentTCB>
    27a4:	70 91 02 02 	lds	r23, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    27a8:	64 5f       	subi	r22, 0xF4	; 244
    27aa:	7f 4f       	sbci	r23, 0xFF	; 255
    27ac:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vListInsertEnd>
    27b0:	cc 23       	and	r28, r28
    27b2:	11 f0       	breq	.+4      	; 0x27b8 <vTaskPlaceOnEventListRestricted+0x22>
    27b4:	0f ef       	ldi	r16, 0xFF	; 255
    27b6:	1f ef       	ldi	r17, 0xFF	; 255
    27b8:	6c 2f       	mov	r22, r28
    27ba:	c8 01       	movw	r24, r16
    27bc:	0e 94 cc 0f 	call	0x1f98	; 0x1f98 <prvAddCurrentTaskToDelayedList>
    27c0:	cf 91       	pop	r28
    27c2:	1f 91       	pop	r17
    27c4:	0f 91       	pop	r16
    27c6:	08 95       	ret

000027c8 <xTaskRemoveFromEventList>:
    27c8:	0f 93       	push	r16
    27ca:	1f 93       	push	r17
    27cc:	cf 93       	push	r28
    27ce:	df 93       	push	r29
    27d0:	dc 01       	movw	r26, r24
    27d2:	15 96       	adiw	r26, 0x05	; 5
    27d4:	ed 91       	ld	r30, X+
    27d6:	fc 91       	ld	r31, X
    27d8:	16 97       	sbiw	r26, 0x06	; 6
    27da:	c6 81       	ldd	r28, Z+6	; 0x06
    27dc:	d7 81       	ldd	r29, Z+7	; 0x07
    27de:	8e 01       	movw	r16, r28
    27e0:	04 5f       	subi	r16, 0xF4	; 244
    27e2:	1f 4f       	sbci	r17, 0xFF	; 255
    27e4:	c8 01       	movw	r24, r16
    27e6:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    27ea:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    27ee:	81 11       	cpse	r24, r1
    27f0:	1c c0       	rjmp	.+56     	; 0x282a <xTaskRemoveFromEventList+0x62>
    27f2:	0a 50       	subi	r16, 0x0A	; 10
    27f4:	11 09       	sbc	r17, r1
    27f6:	c8 01       	movw	r24, r16
    27f8:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    27fc:	8e 89       	ldd	r24, Y+22	; 0x16
    27fe:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    2802:	98 17       	cp	r25, r24
    2804:	10 f4       	brcc	.+4      	; 0x280a <xTaskRemoveFromEventList+0x42>
    2806:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    280a:	90 e0       	ldi	r25, 0x00	; 0
    280c:	9c 01       	movw	r18, r24
    280e:	22 0f       	add	r18, r18
    2810:	33 1f       	adc	r19, r19
    2812:	22 0f       	add	r18, r18
    2814:	33 1f       	adc	r19, r19
    2816:	22 0f       	add	r18, r18
    2818:	33 1f       	adc	r19, r19
    281a:	82 0f       	add	r24, r18
    281c:	93 1f       	adc	r25, r19
    281e:	b8 01       	movw	r22, r16
    2820:	83 52       	subi	r24, 0x23	; 35
    2822:	9e 4f       	sbci	r25, 0xFE	; 254
    2824:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vListInsertEnd>
    2828:	05 c0       	rjmp	.+10     	; 0x2834 <xTaskRemoveFromEventList+0x6c>
    282a:	b8 01       	movw	r22, r16
    282c:	8e eb       	ldi	r24, 0xBE	; 190
    282e:	91 e0       	ldi	r25, 0x01	; 1
    2830:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vListInsertEnd>
    2834:	e0 91 01 02 	lds	r30, 0x0201	; 0x800201 <pxCurrentTCB>
    2838:	f0 91 02 02 	lds	r31, 0x0202	; 0x800202 <pxCurrentTCB+0x1>
    283c:	9e 89       	ldd	r25, Y+22	; 0x16
    283e:	86 89       	ldd	r24, Z+22	; 0x16
    2840:	89 17       	cp	r24, r25
    2842:	20 f4       	brcc	.+8      	; 0x284c <xTaskRemoveFromEventList+0x84>
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <xYieldPending>
    284a:	01 c0       	rjmp	.+2      	; 0x284e <xTaskRemoveFromEventList+0x86>
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	df 91       	pop	r29
    2850:	cf 91       	pop	r28
    2852:	1f 91       	pop	r17
    2854:	0f 91       	pop	r16
    2856:	08 95       	ret

00002858 <vTaskInternalSetTimeOutState>:
    2858:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <xNumOfOverflows>
    285c:	fc 01       	movw	r30, r24
    285e:	20 83       	st	Z, r18
    2860:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <xTickCount>
    2864:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    2868:	32 83       	std	Z+2, r19	; 0x02
    286a:	21 83       	std	Z+1, r18	; 0x01
    286c:	08 95       	ret

0000286e <xTaskCheckForTimeOut>:
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	0f 92       	push	r0
    2878:	20 91 a8 01 	lds	r18, 0x01A8	; 0x8001a8 <xTickCount>
    287c:	30 91 a9 01 	lds	r19, 0x01A9	; 0x8001a9 <xTickCount+0x1>
    2880:	db 01       	movw	r26, r22
    2882:	4d 91       	ld	r20, X+
    2884:	5c 91       	ld	r21, X
    2886:	4f 3f       	cpi	r20, 0xFF	; 255
    2888:	bf ef       	ldi	r27, 0xFF	; 255
    288a:	5b 07       	cpc	r21, r27
    288c:	f1 f0       	breq	.+60     	; 0x28ca <xTaskCheckForTimeOut+0x5c>
    288e:	ec 01       	movw	r28, r24
    2890:	e9 81       	ldd	r30, Y+1	; 0x01
    2892:	fa 81       	ldd	r31, Y+2	; 0x02
    2894:	a0 91 a2 01 	lds	r26, 0x01A2	; 0x8001a2 <xNumOfOverflows>
    2898:	b8 81       	ld	r27, Y
    289a:	ba 17       	cp	r27, r26
    289c:	19 f0       	breq	.+6      	; 0x28a4 <xTaskCheckForTimeOut+0x36>
    289e:	2e 17       	cp	r18, r30
    28a0:	3f 07       	cpc	r19, r31
    28a2:	a8 f4       	brcc	.+42     	; 0x28ce <xTaskCheckForTimeOut+0x60>
    28a4:	2e 1b       	sub	r18, r30
    28a6:	3f 0b       	sbc	r19, r31
    28a8:	24 17       	cp	r18, r20
    28aa:	35 07       	cpc	r19, r21
    28ac:	48 f4       	brcc	.+18     	; 0x28c0 <xTaskCheckForTimeOut+0x52>
    28ae:	fb 01       	movw	r30, r22
    28b0:	42 1b       	sub	r20, r18
    28b2:	53 0b       	sbc	r21, r19
    28b4:	51 83       	std	Z+1, r21	; 0x01
    28b6:	40 83       	st	Z, r20
    28b8:	0e 94 2c 14 	call	0x2858	; 0x2858 <vTaskInternalSetTimeOutState>
    28bc:	80 e0       	ldi	r24, 0x00	; 0
    28be:	08 c0       	rjmp	.+16     	; 0x28d0 <xTaskCheckForTimeOut+0x62>
    28c0:	fb 01       	movw	r30, r22
    28c2:	11 82       	std	Z+1, r1	; 0x01
    28c4:	10 82       	st	Z, r1
    28c6:	81 e0       	ldi	r24, 0x01	; 1
    28c8:	03 c0       	rjmp	.+6      	; 0x28d0 <xTaskCheckForTimeOut+0x62>
    28ca:	80 e0       	ldi	r24, 0x00	; 0
    28cc:	01 c0       	rjmp	.+2      	; 0x28d0 <xTaskCheckForTimeOut+0x62>
    28ce:	81 e0       	ldi	r24, 0x01	; 1
    28d0:	0f 90       	pop	r0
    28d2:	0f be       	out	0x3f, r0	; 63
    28d4:	df 91       	pop	r29
    28d6:	cf 91       	pop	r28
    28d8:	08 95       	ret

000028da <vTaskMissedYield>:
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	80 93 a3 01 	sts	0x01A3, r24	; 0x8001a3 <xYieldPending>
    28e0:	08 95       	ret

000028e2 <xTaskGetSchedulerState>:
    28e2:	80 91 a6 01 	lds	r24, 0x01A6	; 0x8001a6 <xSchedulerRunning>
    28e6:	88 23       	and	r24, r24
    28e8:	31 f0       	breq	.+12     	; 0x28f6 <xTaskGetSchedulerState+0x14>
    28ea:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <uxSchedulerSuspended>
    28ee:	88 23       	and	r24, r24
    28f0:	21 f0       	breq	.+8      	; 0x28fa <xTaskGetSchedulerState+0x18>
    28f2:	80 e0       	ldi	r24, 0x00	; 0
    28f4:	08 95       	ret
    28f6:	81 e0       	ldi	r24, 0x01	; 1
    28f8:	08 95       	ret
    28fa:	82 e0       	ldi	r24, 0x02	; 2
    28fc:	08 95       	ret

000028fe <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    28fe:	0f 93       	push	r16
    2900:	1f 93       	push	r17
    2902:	cf 93       	push	r28
    2904:	df 93       	push	r29
    2906:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2908:	89 2b       	or	r24, r25
    290a:	79 f1       	breq	.+94     	; 0x296a <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    290c:	82 a1       	ldd	r24, Z+34	; 0x22
    290e:	81 50       	subi	r24, 0x01	; 1
    2910:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    2912:	26 89       	ldd	r18, Z+22	; 0x16
    2914:	91 a1       	ldd	r25, Z+33	; 0x21
    2916:	29 17       	cp	r18, r25
    2918:	51 f1       	breq	.+84     	; 0x296e <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    291a:	81 11       	cpse	r24, r1
    291c:	2a c0       	rjmp	.+84     	; 0x2972 <xTaskPriorityDisinherit+0x74>
    291e:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready/delayed list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2920:	8f 01       	movw	r16, r30
    2922:	0e 5f       	subi	r16, 0xFE	; 254
    2924:	1f 4f       	sbci	r17, 0xFF	; 255
    2926:	c8 01       	movw	r24, r16
    2928:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    292c:	89 a1       	ldd	r24, Y+33	; 0x21
    292e:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only Yellowundant for some ports. */
    2930:	24 e0       	ldi	r18, 0x04	; 4
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	28 1b       	sub	r18, r24
    2936:	31 09       	sbc	r19, r1
    2938:	3d 87       	std	Y+13, r19	; 0x0d
    293a:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    293c:	90 91 a7 01 	lds	r25, 0x01A7	; 0x8001a7 <uxTopReadyPriority>
    2940:	98 17       	cp	r25, r24
    2942:	10 f4       	brcc	.+4      	; 0x2948 <xTaskPriorityDisinherit+0x4a>
    2944:	80 93 a7 01 	sts	0x01A7, r24	; 0x8001a7 <uxTopReadyPriority>
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	9c 01       	movw	r18, r24
    294c:	22 0f       	add	r18, r18
    294e:	33 1f       	adc	r19, r19
    2950:	22 0f       	add	r18, r18
    2952:	33 1f       	adc	r19, r19
    2954:	22 0f       	add	r18, r18
    2956:	33 1f       	adc	r19, r19
    2958:	82 0f       	add	r24, r18
    295a:	93 1f       	adc	r25, r19
    295c:	b8 01       	movw	r22, r16
    295e:	83 52       	subi	r24, 0x23	; 35
    2960:	9e 4f       	sbci	r25, 0xFE	; 254
    2962:	0e 94 65 0b 	call	0x16ca	; 0x16ca <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2966:	81 e0       	ldi	r24, 0x01	; 1
    2968:	05 c0       	rjmp	.+10     	; 0x2974 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	03 c0       	rjmp	.+6      	; 0x2974 <xTaskPriorityDisinherit+0x76>
    296e:	80 e0       	ldi	r24, 0x00	; 0
    2970:	01 c0       	rjmp	.+2      	; 0x2974 <xTaskPriorityDisinherit+0x76>
    2972:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	08 95       	ret

0000297e <prvInsertTimerInActiveList>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    297e:	fc 01       	movw	r30, r24
    2980:	73 83       	std	Z+3, r23	; 0x03
    2982:	62 83       	std	Z+2, r22	; 0x02
    2984:	91 87       	std	Z+9, r25	; 0x09
    2986:	80 87       	std	Z+8, r24	; 0x08
    2988:	46 17       	cp	r20, r22
    298a:	57 07       	cpc	r21, r23
    298c:	90 f0       	brcs	.+36     	; 0x29b2 <prvInsertTimerInActiveList+0x34>
    298e:	42 1b       	sub	r20, r18
    2990:	53 0b       	sbc	r21, r19
    2992:	84 85       	ldd	r24, Z+12	; 0x0c
    2994:	95 85       	ldd	r25, Z+13	; 0x0d
    2996:	48 17       	cp	r20, r24
    2998:	59 07       	cpc	r21, r25
    299a:	e0 f4       	brcc	.+56     	; 0x29d4 <prvInsertTimerInActiveList+0x56>
    299c:	bf 01       	movw	r22, r30
    299e:	6e 5f       	subi	r22, 0xFE	; 254
    29a0:	7f 4f       	sbci	r23, 0xFF	; 255
    29a2:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <pxOverflowTimerList>
    29a6:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <pxOverflowTimerList+0x1>
    29aa:	0e 94 86 0b 	call	0x170c	; 0x170c <vListInsert>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	08 95       	ret
    29b2:	42 17       	cp	r20, r18
    29b4:	53 07       	cpc	r21, r19
    29b6:	18 f4       	brcc	.+6      	; 0x29be <prvInsertTimerInActiveList+0x40>
    29b8:	62 17       	cp	r22, r18
    29ba:	73 07       	cpc	r23, r19
    29bc:	68 f4       	brcc	.+26     	; 0x29d8 <prvInsertTimerInActiveList+0x5a>
    29be:	bf 01       	movw	r22, r30
    29c0:	6e 5f       	subi	r22, 0xFE	; 254
    29c2:	7f 4f       	sbci	r23, 0xFF	; 255
    29c4:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <pxCurrentTimerList>
    29c8:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    29cc:	0e 94 86 0b 	call	0x170c	; 0x170c <vListInsert>
    29d0:	80 e0       	ldi	r24, 0x00	; 0
    29d2:	08 95       	ret
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	08 95       	ret
    29d8:	81 e0       	ldi	r24, 0x01	; 1
    29da:	08 95       	ret

000029dc <prvCheckForValidListAndQueue>:
    29dc:	0f b6       	in	r0, 0x3f	; 63
    29de:	f8 94       	cli
    29e0:	0f 92       	push	r0
    29e2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    29e6:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    29ea:	89 2b       	or	r24, r25
    29ec:	e9 f4       	brne	.+58     	; 0x2a28 <prvCheckForValidListAndQueue+0x4c>
    29ee:	86 e1       	ldi	r24, 0x16	; 22
    29f0:	92 e0       	ldi	r25, 0x02	; 2
    29f2:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    29f6:	8d e0       	ldi	r24, 0x0D	; 13
    29f8:	92 e0       	ldi	r25, 0x02	; 2
    29fa:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <vListInitialise>
    29fe:	86 e1       	ldi	r24, 0x16	; 22
    2a00:	92 e0       	ldi	r25, 0x02	; 2
    2a02:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <pxCurrentTimerList+0x1>
    2a06:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <pxCurrentTimerList>
    2a0a:	8d e0       	ldi	r24, 0x0D	; 13
    2a0c:	92 e0       	ldi	r25, 0x02	; 2
    2a0e:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <pxOverflowTimerList+0x1>
    2a12:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <pxOverflowTimerList>
    2a16:	40 e0       	ldi	r20, 0x00	; 0
    2a18:	65 e0       	ldi	r22, 0x05	; 5
    2a1a:	8a e0       	ldi	r24, 0x0A	; 10
    2a1c:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <xQueueGenericCreate>
    2a20:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <xTimerQueue+0x1>
    2a24:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <xTimerQueue>
    2a28:	0f 90       	pop	r0
    2a2a:	0f be       	out	0x3f, r0	; 63
    2a2c:	08 95       	ret

00002a2e <xTimerCreateTimerTask>:
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	0e 94 ee 14 	call	0x29dc	; 0x29dc <prvCheckForValidListAndQueue>
    2a38:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2a3c:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2a40:	89 2b       	or	r24, r25
    2a42:	91 f0       	breq	.+36     	; 0x2a68 <xTimerCreateTimerTask+0x3a>
    2a44:	0f 2e       	mov	r0, r31
    2a46:	f5 e0       	ldi	r31, 0x05	; 5
    2a48:	ef 2e       	mov	r14, r31
    2a4a:	f2 e0       	ldi	r31, 0x02	; 2
    2a4c:	ff 2e       	mov	r15, r31
    2a4e:	f0 2d       	mov	r31, r0
    2a50:	03 e0       	ldi	r16, 0x03	; 3
    2a52:	20 e0       	ldi	r18, 0x00	; 0
    2a54:	30 e0       	ldi	r19, 0x00	; 0
    2a56:	45 e5       	ldi	r20, 0x55	; 85
    2a58:	50 e0       	ldi	r21, 0x00	; 0
    2a5a:	63 e5       	ldi	r22, 0x53	; 83
    2a5c:	71 e0       	ldi	r23, 0x01	; 1
    2a5e:	81 ef       	ldi	r24, 0xF1	; 241
    2a60:	95 e1       	ldi	r25, 0x15	; 21
    2a62:	0e 94 5e 10 	call	0x20bc	; 0x20bc <xTaskCreate>
    2a66:	01 c0       	rjmp	.+2      	; 0x2a6a <xTimerCreateTimerTask+0x3c>
    2a68:	80 e0       	ldi	r24, 0x00	; 0
    2a6a:	0f 91       	pop	r16
    2a6c:	ff 90       	pop	r15
    2a6e:	ef 90       	pop	r14
    2a70:	08 95       	ret

00002a72 <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	cf 93       	push	r28
    2a78:	df 93       	push	r29
    2a7a:	00 d0       	rcall	.+0      	; 0x2a7c <xTimerGenericCommand+0xa>
    2a7c:	00 d0       	rcall	.+0      	; 0x2a7e <xTimerGenericCommand+0xc>
    2a7e:	1f 92       	push	r1
    2a80:	cd b7       	in	r28, 0x3d	; 61
    2a82:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2a84:	e0 91 07 02 	lds	r30, 0x0207	; 0x800207 <xTimerQueue>
    2a88:	f0 91 08 02 	lds	r31, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2a8c:	30 97       	sbiw	r30, 0x00	; 0
    2a8e:	71 f1       	breq	.+92     	; 0x2aec <xTimerGenericCommand+0x7a>
    2a90:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2a92:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2a94:	5b 83       	std	Y+3, r21	; 0x03
    2a96:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2a98:	9d 83       	std	Y+5, r25	; 0x05
    2a9a:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2a9c:	66 30       	cpi	r22, 0x06	; 6
    2a9e:	ec f4       	brge	.+58     	; 0x2ada <xTimerGenericCommand+0x68>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2aa0:	0e 94 71 14 	call	0x28e2	; 0x28e2 <xTaskGetSchedulerState>
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	61 f4       	brne	.+24     	; 0x2ac0 <xTimerGenericCommand+0x4e>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2aa8:	20 e0       	ldi	r18, 0x00	; 0
    2aaa:	a8 01       	movw	r20, r16
    2aac:	be 01       	movw	r22, r28
    2aae:	6f 5f       	subi	r22, 0xFF	; 255
    2ab0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab2:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2ab6:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2aba:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xQueueGenericSend>
    2abe:	17 c0       	rjmp	.+46     	; 0x2aee <xTimerGenericCommand+0x7c>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2ac0:	20 e0       	ldi	r18, 0x00	; 0
    2ac2:	40 e0       	ldi	r20, 0x00	; 0
    2ac4:	50 e0       	ldi	r21, 0x00	; 0
    2ac6:	be 01       	movw	r22, r28
    2ac8:	6f 5f       	subi	r22, 0xFF	; 255
    2aca:	7f 4f       	sbci	r23, 0xFF	; 255
    2acc:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2ad0:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2ad4:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <xQueueGenericSend>
    2ad8:	0a c0       	rjmp	.+20     	; 0x2aee <xTimerGenericCommand+0x7c>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	ad 01       	movw	r20, r26
    2ade:	be 01       	movw	r22, r28
    2ae0:	6f 5f       	subi	r22, 0xFF	; 255
    2ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ae4:	cf 01       	movw	r24, r30
    2ae6:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <xQueueGenericSendFromISR>
    2aea:	01 c0       	rjmp	.+2      	; 0x2aee <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	0f 91       	pop	r16
    2b00:	08 95       	ret

00002b02 <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2b02:	af 92       	push	r10
    2b04:	bf 92       	push	r11
    2b06:	cf 92       	push	r12
    2b08:	df 92       	push	r13
    2b0a:	ef 92       	push	r14
    2b0c:	ff 92       	push	r15
    2b0e:	0f 93       	push	r16
    2b10:	1f 93       	push	r17
    2b12:	cf 93       	push	r28
    2b14:	df 93       	push	r29
    2b16:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2b18:	0e 94 ae 11 	call	0x235c	; 0x235c <xTaskGetTickCount>
    2b1c:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2b1e:	80 91 03 02 	lds	r24, 0x0203	; 0x800203 <xLastTime.2416>
    2b22:	90 91 04 02 	lds	r25, 0x0204	; 0x800204 <xLastTime.2416+0x1>
    2b26:	e8 16       	cp	r14, r24
    2b28:	f9 06       	cpc	r15, r25
    2b2a:	08 f0       	brcs	.+2      	; 0x2b2e <prvSampleTimeNow+0x2c>
    2b2c:	48 c0       	rjmp	.+144    	; 0x2bbe <prvSampleTimeNow+0xbc>
    2b2e:	30 c0       	rjmp	.+96     	; 0x2b90 <prvSampleTimeNow+0x8e>
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b30:	05 80       	ldd	r0, Z+5	; 0x05
    2b32:	f6 81       	ldd	r31, Z+6	; 0x06
    2b34:	e0 2d       	mov	r30, r0
    2b36:	a0 80       	ld	r10, Z
    2b38:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2b3a:	c6 81       	ldd	r28, Z+6	; 0x06
    2b3c:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b3e:	8e 01       	movw	r16, r28
    2b40:	0e 5f       	subi	r16, 0xFE	; 254
    2b42:	1f 4f       	sbci	r17, 0xFF	; 255
    2b44:	c8 01       	movw	r24, r16
    2b46:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
        traceTIMER_EXPIYellow( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b4a:	e8 89       	ldd	r30, Y+16	; 0x10
    2b4c:	f9 89       	ldd	r31, Y+17	; 0x11
    2b4e:	ce 01       	movw	r24, r28
    2b50:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b52:	8a 89       	ldd	r24, Y+18	; 0x12
    2b54:	82 ff       	sbrs	r24, 2
    2b56:	1c c0       	rjmp	.+56     	; 0x2b90 <prvSampleTimeNow+0x8e>
            the timer going into the same timer list then it has already expiYellow
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b58:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b5a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b5c:	8a 0d       	add	r24, r10
    2b5e:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2b60:	a8 16       	cp	r10, r24
    2b62:	b9 06       	cpc	r11, r25
    2b64:	60 f4       	brcc	.+24     	; 0x2b7e <prvSampleTimeNow+0x7c>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b66:	9b 83       	std	Y+3, r25	; 0x03
    2b68:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b6a:	d9 87       	std	Y+9, r29	; 0x09
    2b6c:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b6e:	b8 01       	movw	r22, r16
    2b70:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <pxCurrentTimerList>
    2b74:	90 91 0c 02 	lds	r25, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2b78:	0e 94 86 0b 	call	0x170c	; 0x170c <vListInsert>
    2b7c:	09 c0       	rjmp	.+18     	; 0x2b90 <prvSampleTimeNow+0x8e>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2b7e:	00 e0       	ldi	r16, 0x00	; 0
    2b80:	10 e0       	ldi	r17, 0x00	; 0
    2b82:	20 e0       	ldi	r18, 0x00	; 0
    2b84:	30 e0       	ldi	r19, 0x00	; 0
    2b86:	a5 01       	movw	r20, r10
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	ce 01       	movw	r24, r28
    2b8c:	0e 94 39 15 	call	0x2a72	; 0x2a72 <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2b90:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <pxCurrentTimerList>
    2b94:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2b98:	80 81       	ld	r24, Z
    2b9a:	81 11       	cpse	r24, r1
    2b9c:	c9 cf       	rjmp	.-110    	; 0x2b30 <prvSampleTimeNow+0x2e>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2b9e:	80 91 09 02 	lds	r24, 0x0209	; 0x800209 <pxOverflowTimerList>
    2ba2:	90 91 0a 02 	lds	r25, 0x020A	; 0x80020a <pxOverflowTimerList+0x1>
    2ba6:	90 93 0c 02 	sts	0x020C, r25	; 0x80020c <pxCurrentTimerList+0x1>
    2baa:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2bae:	f0 93 0a 02 	sts	0x020A, r31	; 0x80020a <pxOverflowTimerList+0x1>
    2bb2:	e0 93 09 02 	sts	0x0209, r30	; 0x800209 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2bb6:	81 e0       	ldi	r24, 0x01	; 1
    2bb8:	f6 01       	movw	r30, r12
    2bba:	80 83       	st	Z, r24
    2bbc:	02 c0       	rjmp	.+4      	; 0x2bc2 <prvSampleTimeNow+0xc0>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2bbe:	f6 01       	movw	r30, r12
    2bc0:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2bc2:	f0 92 04 02 	sts	0x0204, r15	; 0x800204 <xLastTime.2416+0x1>
    2bc6:	e0 92 03 02 	sts	0x0203, r14	; 0x800203 <xLastTime.2416>

    return xTimeNow;
}
    2bca:	c7 01       	movw	r24, r14
    2bcc:	df 91       	pop	r29
    2bce:	cf 91       	pop	r28
    2bd0:	1f 91       	pop	r17
    2bd2:	0f 91       	pop	r16
    2bd4:	ff 90       	pop	r15
    2bd6:	ef 90       	pop	r14
    2bd8:	df 90       	pop	r13
    2bda:	cf 90       	pop	r12
    2bdc:	bf 90       	pop	r11
    2bde:	af 90       	pop	r10
    2be0:	08 95       	ret

00002be2 <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <prvTimerTask+0x6>
    2be8:	00 d0       	rcall	.+0      	; 0x2bea <prvTimerTask+0x8>
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <prvTimerTask+0xa>
    2bec:	cd b7       	in	r28, 0x3d	; 61
    2bee:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2bf0:	ce 01       	movw	r24, r28
    2bf2:	01 96       	adiw	r24, 0x01	; 1
    2bf4:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2bf6:	44 24       	eor	r4, r4
    2bf8:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2bfa:	e1 2c       	mov	r14, r1
    2bfc:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2bfe:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2c00:	c8 2e       	mov	r12, r24
    2c02:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2c04:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <pxCurrentTimerList>
    2c08:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2c0c:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    2c0e:	88 23       	and	r24, r24
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <prvTimerTask+0x32>
    2c12:	dc c0       	rjmp	.+440    	; 0x2dcc <prvTimerTask+0x1ea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c14:	05 80       	ldd	r0, Z+5	; 0x05
    2c16:	f6 81       	ldd	r31, Z+6	; 0x06
    2c18:	e0 2d       	mov	r30, r0
    2c1a:	a0 80       	ld	r10, Z
    2c1c:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2c1e:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c22:	c4 01       	movw	r24, r8
    2c24:	0e 94 81 15 	call	0x2b02	; 0x2b02 <prvSampleTimeNow>
    2c28:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	81 11       	cpse	r24, r1
    2c2e:	4b c0       	rjmp	.+150    	; 0x2cc6 <prvTimerTask+0xe4>
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2c30:	0a 15       	cp	r16, r10
    2c32:	1b 05       	cpc	r17, r11
    2c34:	b8 f1       	brcs	.+110    	; 0x2ca4 <prvTimerTask+0xc2>
            {
                ( void ) xTaskResumeAll();
    2c36:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiYellowTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2c3a:	e0 91 0b 02 	lds	r30, 0x020B	; 0x80020b <pxCurrentTimerList>
    2c3e:	f0 91 0c 02 	lds	r31, 0x020C	; 0x80020c <pxCurrentTimerList+0x1>
    2c42:	05 80       	ldd	r0, Z+5	; 0x05
    2c44:	f6 81       	ldd	r31, Z+6	; 0x06
    2c46:	e0 2d       	mov	r30, r0
    2c48:	66 80       	ldd	r6, Z+6	; 0x06
    2c4a:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c4c:	c3 01       	movw	r24, r6
    2c4e:	02 96       	adiw	r24, 0x02	; 2
    2c50:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
    traceTIMER_EXPIYellow( pxTimer );

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c54:	d3 01       	movw	r26, r6
    2c56:	52 96       	adiw	r26, 0x12	; 18
    2c58:	8c 91       	ld	r24, X
    2c5a:	52 97       	sbiw	r26, 0x12	; 18
    2c5c:	82 ff       	sbrs	r24, 2
    2c5e:	17 c0       	rjmp	.+46     	; 0x2c8e <prvTimerTask+0xac>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2c60:	1c 96       	adiw	r26, 0x0c	; 12
    2c62:	6d 91       	ld	r22, X+
    2c64:	7c 91       	ld	r23, X
    2c66:	1d 97       	sbiw	r26, 0x0d	; 13
    2c68:	6a 0d       	add	r22, r10
    2c6a:	7b 1d       	adc	r23, r11
    2c6c:	95 01       	movw	r18, r10
    2c6e:	a8 01       	movw	r20, r16
    2c70:	c3 01       	movw	r24, r6
    2c72:	0e 94 bf 14 	call	0x297e	; 0x297e <prvInsertTimerInActiveList>
    2c76:	88 23       	and	r24, r24
    2c78:	69 f0       	breq	.+26     	; 0x2c94 <prvTimerTask+0xb2>
        {
            /* The timer expiYellow before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2c7a:	0e 2d       	mov	r16, r14
    2c7c:	1f 2d       	mov	r17, r15
    2c7e:	2e 2d       	mov	r18, r14
    2c80:	3f 2d       	mov	r19, r15
    2c82:	a5 01       	movw	r20, r10
    2c84:	65 2d       	mov	r22, r5
    2c86:	c3 01       	movw	r24, r6
    2c88:	0e 94 39 15 	call	0x2a72	; 0x2a72 <xTimerGenericCommand>
    2c8c:	03 c0       	rjmp	.+6      	; 0x2c94 <prvTimerTask+0xb2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2c8e:	8e 7f       	andi	r24, 0xFE	; 254
    2c90:	f3 01       	movw	r30, r6
    2c92:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c94:	d3 01       	movw	r26, r6
    2c96:	50 96       	adiw	r26, 0x10	; 16
    2c98:	ed 91       	ld	r30, X+
    2c9a:	fc 91       	ld	r31, X
    2c9c:	51 97       	sbiw	r26, 0x11	; 17
    2c9e:	c3 01       	movw	r24, r6
    2ca0:	09 95       	icall
    2ca2:	87 c0       	rjmp	.+270    	; 0x2db2 <prvTimerTask+0x1d0>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2ca4:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2ca6:	b5 01       	movw	r22, r10
    2ca8:	60 1b       	sub	r22, r16
    2caa:	71 0b       	sbc	r23, r17
    2cac:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2cb0:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2cb4:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    2cb8:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    2cbc:	81 11       	cpse	r24, r1
    2cbe:	79 c0       	rjmp	.+242    	; 0x2db2 <prvTimerTask+0x1d0>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2cc0:	0e 94 27 0c 	call	0x184e	; 0x184e <vPortYield>
    2cc4:	76 c0       	rjmp	.+236    	; 0x2db2 <prvTimerTask+0x1d0>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2cc6:	0e 94 77 12 	call	0x24ee	; 0x24ee <xTaskResumeAll>
    2cca:	73 c0       	rjmp	.+230    	; 0x2db2 <prvTimerTask+0x1d0>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2ccc:	89 81       	ldd	r24, Y+1	; 0x01
    2cce:	88 23       	and	r24, r24
    2cd0:	0c f4       	brge	.+2      	; 0x2cd4 <prvTimerTask+0xf2>
    2cd2:	6f c0       	rjmp	.+222    	; 0x2db2 <prvTimerTask+0x1d0>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2cd4:	ac 80       	ldd	r10, Y+4	; 0x04
    2cd6:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only Yellowundant when NULL is passed into the macro. */
    2cd8:	f5 01       	movw	r30, r10
    2cda:	82 85       	ldd	r24, Z+10	; 0x0a
    2cdc:	93 85       	ldd	r25, Z+11	; 0x0b
    2cde:	89 2b       	or	r24, r25
    2ce0:	21 f0       	breq	.+8      	; 0x2cea <prvTimerTask+0x108>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2ce2:	c5 01       	movw	r24, r10
    2ce4:	02 96       	adiw	r24, 0x02	; 2
    2ce6:	0e 94 b7 0b 	call	0x176e	; 0x176e <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2cea:	ce 01       	movw	r24, r28
    2cec:	06 96       	adiw	r24, 0x06	; 6
    2cee:	0e 94 81 15 	call	0x2b02	; 0x2b02 <prvSampleTimeNow>

            switch( xMessage.xMessageID )
    2cf2:	e9 81       	ldd	r30, Y+1	; 0x01
    2cf4:	0e 2e       	mov	r0, r30
    2cf6:	00 0c       	add	r0, r0
    2cf8:	ff 0b       	sbc	r31, r31
    2cfa:	ea 30       	cpi	r30, 0x0A	; 10
    2cfc:	f1 05       	cpc	r31, r1
    2cfe:	08 f0       	brcs	.+2      	; 0x2d02 <prvTimerTask+0x120>
    2d00:	58 c0       	rjmp	.+176    	; 0x2db2 <prvTimerTask+0x1d0>
    2d02:	ec 5c       	subi	r30, 0xCC	; 204
    2d04:	ff 4f       	sbci	r31, 0xFF	; 255
    2d06:	0c 94 c8 1e 	jmp	0x3d90	; 0x3d90 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d0a:	d5 01       	movw	r26, r10
    2d0c:	52 96       	adiw	r26, 0x12	; 18
    2d0e:	2c 91       	ld	r18, X
    2d10:	52 97       	sbiw	r26, 0x12	; 18
    2d12:	21 60       	ori	r18, 0x01	; 1
    2d14:	52 96       	adiw	r26, 0x12	; 18
    2d16:	2c 93       	st	X, r18
    2d18:	52 97       	sbiw	r26, 0x12	; 18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2d1a:	2a 81       	ldd	r18, Y+2	; 0x02
    2d1c:	3b 81       	ldd	r19, Y+3	; 0x03
    2d1e:	1c 96       	adiw	r26, 0x0c	; 12
    2d20:	6d 91       	ld	r22, X+
    2d22:	7c 91       	ld	r23, X
    2d24:	1d 97       	sbiw	r26, 0x0d	; 13
    2d26:	62 0f       	add	r22, r18
    2d28:	73 1f       	adc	r23, r19
    2d2a:	ac 01       	movw	r20, r24
    2d2c:	c5 01       	movw	r24, r10
    2d2e:	0e 94 bf 14 	call	0x297e	; 0x297e <prvInsertTimerInActiveList>
    2d32:	88 23       	and	r24, r24
    2d34:	f1 f1       	breq	.+124    	; 0x2db2 <prvTimerTask+0x1d0>
                    {
                        /* The timer expiYellow before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d36:	d5 01       	movw	r26, r10
    2d38:	50 96       	adiw	r26, 0x10	; 16
    2d3a:	ed 91       	ld	r30, X+
    2d3c:	fc 91       	ld	r31, X
    2d3e:	51 97       	sbiw	r26, 0x11	; 17
    2d40:	c5 01       	movw	r24, r10
    2d42:	09 95       	icall
                        traceTIMER_EXPIYellow( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d44:	f5 01       	movw	r30, r10
    2d46:	82 89       	ldd	r24, Z+18	; 0x12
    2d48:	82 ff       	sbrs	r24, 2
    2d4a:	33 c0       	rjmp	.+102    	; 0x2db2 <prvTimerTask+0x1d0>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2d4c:	4a 81       	ldd	r20, Y+2	; 0x02
    2d4e:	5b 81       	ldd	r21, Y+3	; 0x03
    2d50:	84 85       	ldd	r24, Z+12	; 0x0c
    2d52:	95 85       	ldd	r25, Z+13	; 0x0d
    2d54:	48 0f       	add	r20, r24
    2d56:	59 1f       	adc	r21, r25
    2d58:	0e 2d       	mov	r16, r14
    2d5a:	1f 2d       	mov	r17, r15
    2d5c:	2e 2d       	mov	r18, r14
    2d5e:	3f 2d       	mov	r19, r15
    2d60:	65 2d       	mov	r22, r5
    2d62:	c5 01       	movw	r24, r10
    2d64:	0e 94 39 15 	call	0x2a72	; 0x2a72 <xTimerGenericCommand>
    2d68:	24 c0       	rjmp	.+72     	; 0x2db2 <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d6a:	d5 01       	movw	r26, r10
    2d6c:	52 96       	adiw	r26, 0x12	; 18
    2d6e:	8c 91       	ld	r24, X
    2d70:	52 97       	sbiw	r26, 0x12	; 18
    2d72:	8e 7f       	andi	r24, 0xFE	; 254
    2d74:	52 96       	adiw	r26, 0x12	; 18
    2d76:	8c 93       	st	X, r24
    2d78:	1c c0       	rjmp	.+56     	; 0x2db2 <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d7a:	f5 01       	movw	r30, r10
    2d7c:	22 89       	ldd	r18, Z+18	; 0x12
    2d7e:	21 60       	ori	r18, 0x01	; 1
    2d80:	22 8b       	std	Z+18, r18	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2d82:	6a 81       	ldd	r22, Y+2	; 0x02
    2d84:	7b 81       	ldd	r23, Y+3	; 0x03
    2d86:	75 87       	std	Z+13, r23	; 0x0d
    2d88:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2d8a:	68 0f       	add	r22, r24
    2d8c:	79 1f       	adc	r23, r25
    2d8e:	9c 01       	movw	r18, r24
    2d90:	ac 01       	movw	r20, r24
    2d92:	c5 01       	movw	r24, r10
    2d94:	0e 94 bf 14 	call	0x297e	; 0x297e <prvInsertTimerInActiveList>
    2d98:	0c c0       	rjmp	.+24     	; 0x2db2 <prvTimerTask+0x1d0>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2d9a:	d5 01       	movw	r26, r10
    2d9c:	52 96       	adiw	r26, 0x12	; 18
    2d9e:	8c 91       	ld	r24, X
    2da0:	81 fd       	sbrc	r24, 1
    2da2:	04 c0       	rjmp	.+8      	; 0x2dac <prvTimerTask+0x1ca>
                        {
                            vPortFree( pxTimer );
    2da4:	c5 01       	movw	r24, r10
    2da6:	0e 94 11 0b 	call	0x1622	; 0x1622 <vPortFree>
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <prvTimerTask+0x1d0>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2dac:	8e 7f       	andi	r24, 0xFE	; 254
    2dae:	f5 01       	movw	r30, r10
    2db0:	82 8b       	std	Z+18, r24	; 0x12
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2db2:	4e 2d       	mov	r20, r14
    2db4:	5f 2d       	mov	r21, r15
    2db6:	6c 2d       	mov	r22, r12
    2db8:	7d 2d       	mov	r23, r13
    2dba:	80 91 07 02 	lds	r24, 0x0207	; 0x800207 <xTimerQueue>
    2dbe:	90 91 08 02 	lds	r25, 0x0208	; 0x800208 <xTimerQueue+0x1>
    2dc2:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <xQueueReceive>
    2dc6:	81 11       	cpse	r24, r1
    2dc8:	81 cf       	rjmp	.-254    	; 0x2ccc <prvTimerTask+0xea>
    2dca:	1c cf       	rjmp	.-456    	; 0x2c04 <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2dcc:	0e 94 a8 11 	call	0x2350	; 0x2350 <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dd0:	c4 01       	movw	r24, r8
    2dd2:	0e 94 81 15 	call	0x2b02	; 0x2b02 <prvSampleTimeNow>
    2dd6:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2dd8:	89 81       	ldd	r24, Y+1	; 0x01
    2dda:	81 11       	cpse	r24, r1
    2ddc:	74 cf       	rjmp	.-280    	; 0x2cc6 <prvTimerTask+0xe4>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2dde:	e0 91 09 02 	lds	r30, 0x0209	; 0x800209 <pxOverflowTimerList>
    2de2:	f0 91 0a 02 	lds	r31, 0x020A	; 0x80020a <pxOverflowTimerList+0x1>
    2de6:	80 81       	ld	r24, Z
    2de8:	44 2d       	mov	r20, r4
    2dea:	81 11       	cpse	r24, r1
    2dec:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2dee:	ae 2c       	mov	r10, r14
    2df0:	bf 2c       	mov	r11, r15
    2df2:	59 cf       	rjmp	.-334    	; 0x2ca6 <prvTimerTask+0xc4>

00002df4 <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2df4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2df8:	88 e4       	ldi	r24, 0x48	; 72
    2dfa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2dfe:	08 95       	ret

00002e00 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    2e00:	94 ea       	ldi	r25, 0xA4	; 164
    2e02:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    2e06:	ec eb       	ldi	r30, 0xBC	; 188
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	90 81       	ld	r25, Z
    2e0c:	99 23       	and	r25, r25
    2e0e:	ec f7       	brge	.-6      	; 0x2e0a <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2e10:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
    2e14:	98 7f       	andi	r25, 0xF8	; 248
    2e16:	90 31       	cpi	r25, 0x10	; 16
    2e18:	99 f4       	brne	.+38     	; 0x2e40 <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
    2e1a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    2e1e:	84 e8       	ldi	r24, 0x84	; 132
    2e20:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    2e24:	ec eb       	ldi	r30, 0xBC	; 188
    2e26:	f0 e0       	ldi	r31, 0x00	; 0
    2e28:	80 81       	ld	r24, Z
    2e2a:	88 23       	and	r24, r24
    2e2c:	ec f7       	brge	.-6      	; 0x2e28 <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2e2e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2e32:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
    2e34:	80 34       	cpi	r24, 0x40	; 64
    2e36:	31 f0       	breq	.+12     	; 0x2e44 <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
    2e38:	80 32       	cpi	r24, 0x20	; 32
    2e3a:	31 f0       	breq	.+12     	; 0x2e48 <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    2e3c:	83 e0       	ldi	r24, 0x03	; 3
    2e3e:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
    2e40:	80 e0       	ldi	r24, 0x00	; 0
    2e42:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
    2e44:	81 e0       	ldi	r24, 0x01	; 1
    2e46:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    2e48:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2e4a:	08 95       	ret

00002e4c <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    2e4c:	84 e9       	ldi	r24, 0x94	; 148
    2e4e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
    2e52:	ec eb       	ldi	r30, 0xBC	; 188
    2e54:	f0 e0       	ldi	r31, 0x00	; 0
    2e56:	80 81       	ld	r24, Z
    2e58:	84 fd       	sbrc	r24, 4
    2e5a:	fd cf       	rjmp	.-6      	; 0x2e56 <I2C_Stop+0xa>
}
    2e5c:	08 95       	ret

00002e5e <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
    2e5e:	bf 92       	push	r11
    2e60:	cf 92       	push	r12
    2e62:	df 92       	push	r13
    2e64:	ef 92       	push	r14
    2e66:	ff 92       	push	r15
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2e72:	cc eb       	ldi	r28, 0xBC	; 188
    2e74:	d0 e0       	ldi	r29, 0x00	; 0
    2e76:	0f 2e       	mov	r0, r31
    2e78:	f4 ea       	ldi	r31, 0xA4	; 164
    2e7a:	df 2e       	mov	r13, r31
    2e7c:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2e7e:	09 eb       	ldi	r16, 0xB9	; 185
    2e80:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2e82:	0f 2e       	mov	r0, r31
    2e84:	fb eb       	ldi	r31, 0xBB	; 187
    2e86:	ef 2e       	mov	r14, r31
    2e88:	f1 2c       	mov	r15, r1
    2e8a:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2e8c:	0f 2e       	mov	r0, r31
    2e8e:	f4 e8       	ldi	r31, 0x84	; 132
    2e90:	cf 2e       	mov	r12, r31
    2e92:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2e94:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    2e96:	88 81       	ld	r24, Y
    2e98:	88 23       	and	r24, r24
    2e9a:	ec f7       	brge	.-6      	; 0x2e96 <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2e9c:	f8 01       	movw	r30, r16
    2e9e:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    2ea0:	88 7f       	andi	r24, 0xF8	; 248
    2ea2:	88 30       	cpi	r24, 0x08	; 8
    2ea4:	b9 f7       	brne	.-18     	; 0x2e94 <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2ea6:	f7 01       	movw	r30, r14
    2ea8:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2eaa:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    2eac:	88 81       	ld	r24, Y
    2eae:	88 23       	and	r24, r24
    2eb0:	ec f7       	brge	.-6      	; 0x2eac <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2eb2:	f8 01       	movw	r30, r16
    2eb4:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
    2eb6:	88 7f       	andi	r24, 0xF8	; 248
    2eb8:	88 31       	cpi	r24, 0x18	; 24
    2eba:	19 f0       	breq	.+6      	; 0x2ec2 <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
    2ebc:	0e 94 26 17 	call	0x2e4c	; 0x2e4c <I2C_Stop>
			continue;										/* continue with start loop again */
    2ec0:	e9 cf       	rjmp	.-46     	; 0x2e94 <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	ff 90       	pop	r15
    2ecc:	ef 90       	pop	r14
    2ece:	df 90       	pop	r13
    2ed0:	cf 90       	pop	r12
    2ed2:	bf 90       	pop	r11
    2ed4:	08 95       	ret

00002ed6 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
    2ed6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    2eda:	84 e8       	ldi	r24, 0x84	; 132
    2edc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    2ee0:	ec eb       	ldi	r30, 0xBC	; 188
    2ee2:	f0 e0       	ldi	r31, 0x00	; 0
    2ee4:	80 81       	ld	r24, Z
    2ee6:	88 23       	and	r24, r24
    2ee8:	ec f7       	brge	.-6      	; 0x2ee4 <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2eea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2eee:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
    2ef0:	88 32       	cpi	r24, 0x28	; 40
    2ef2:	21 f0       	breq	.+8      	; 0x2efc <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
    2ef4:	80 33       	cpi	r24, 0x30	; 48
    2ef6:	21 f0       	breq	.+8      	; 0x2f00 <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
    2ef8:	82 e0       	ldi	r24, 0x02	; 2
    2efa:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
    2efc:	80 e0       	ldi	r24, 0x00	; 0
    2efe:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
    2f00:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
    2f02:	08 95       	ret

00002f04 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
    2f04:	84 ec       	ldi	r24, 0xC4	; 196
    2f06:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    2f0a:	ec eb       	ldi	r30, 0xBC	; 188
    2f0c:	f0 e0       	ldi	r31, 0x00	; 0
    2f0e:	80 81       	ld	r24, Z
    2f10:	88 23       	and	r24, r24
    2f12:	ec f7       	brge	.-6      	; 0x2f0e <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
    2f14:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    2f18:	08 95       	ret

00002f1a <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
    2f1a:	84 e8       	ldi	r24, 0x84	; 132
    2f1c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    2f20:	ec eb       	ldi	r30, 0xBC	; 188
    2f22:	f0 e0       	ldi	r31, 0x00	; 0
    2f24:	80 81       	ld	r24, Z
    2f26:	88 23       	and	r24, r24
    2f28:	ec f7       	brge	.-6      	; 0x2f24 <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
    2f2a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    2f2e:	08 95       	ret

00002f30 <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
    2f30:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
    2f34:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2f38:	88 e1       	ldi	r24, 0x18	; 24
    2f3a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C |= (1<<USBS0); // 2 stop bits
    2f3e:	e2 ec       	ldi	r30, 0xC2	; 194
    2f40:	f0 e0       	ldi	r31, 0x00	; 0
    2f42:	80 81       	ld	r24, Z
    2f44:	88 60       	ori	r24, 0x08	; 8
    2f46:	80 83       	st	Z, r24
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
    2f48:	86 e0       	ldi	r24, 0x06	; 6
    2f4a:	80 83       	st	Z, r24
    2f4c:	08 95       	ret

00002f4e <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
    2f4e:	e0 ec       	ldi	r30, 0xC0	; 192
    2f50:	f0 e0       	ldi	r31, 0x00	; 0
    2f52:	90 81       	ld	r25, Z
    2f54:	95 ff       	sbrs	r25, 5
    2f56:	fd cf       	rjmp	.-6      	; 0x2f52 <UART_send+0x4>
  // Put data into buffer and send data
  UDR0 = data;
    2f58:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    2f5c:	08 95       	ret

00002f5e <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
    2f5e:	cf 93       	push	r28
    2f60:	df 93       	push	r29
    2f62:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
    2f64:	88 81       	ld	r24, Y
    2f66:	88 23       	and	r24, r24
    2f68:	31 f0       	breq	.+12     	; 0x2f76 <UART_putstring+0x18>
    2f6a:	21 96       	adiw	r28, 0x01	; 1
  {
    UART_send(*StringPtr);
    2f6c:	0e 94 a7 17 	call	0x2f4e	; 0x2f4e <UART_send>
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
    2f70:	89 91       	ld	r24, Y+
    2f72:	81 11       	cpse	r24, r1
    2f74:	fb cf       	rjmp	.-10     	; 0x2f6c <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	08 95       	ret

00002f7c <__subsf3>:
    2f7c:	50 58       	subi	r21, 0x80	; 128

00002f7e <__addsf3>:
    2f7e:	bb 27       	eor	r27, r27
    2f80:	aa 27       	eor	r26, r26
    2f82:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__addsf3x>
    2f86:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__fp_round>
    2f8a:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__fp_pscA>
    2f8e:	38 f0       	brcs	.+14     	; 0x2f9e <__addsf3+0x20>
    2f90:	0e 94 31 1a 	call	0x3462	; 0x3462 <__fp_pscB>
    2f94:	20 f0       	brcs	.+8      	; 0x2f9e <__addsf3+0x20>
    2f96:	39 f4       	brne	.+14     	; 0x2fa6 <__addsf3+0x28>
    2f98:	9f 3f       	cpi	r25, 0xFF	; 255
    2f9a:	19 f4       	brne	.+6      	; 0x2fa2 <__addsf3+0x24>
    2f9c:	26 f4       	brtc	.+8      	; 0x2fa6 <__addsf3+0x28>
    2f9e:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_nan>
    2fa2:	0e f4       	brtc	.+2      	; 0x2fa6 <__addsf3+0x28>
    2fa4:	e0 95       	com	r30
    2fa6:	e7 fb       	bst	r30, 7
    2fa8:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__fp_inf>

00002fac <__addsf3x>:
    2fac:	e9 2f       	mov	r30, r25
    2fae:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fp_split3>
    2fb2:	58 f3       	brcs	.-42     	; 0x2f8a <__addsf3+0xc>
    2fb4:	ba 17       	cp	r27, r26
    2fb6:	62 07       	cpc	r22, r18
    2fb8:	73 07       	cpc	r23, r19
    2fba:	84 07       	cpc	r24, r20
    2fbc:	95 07       	cpc	r25, r21
    2fbe:	20 f0       	brcs	.+8      	; 0x2fc8 <__addsf3x+0x1c>
    2fc0:	79 f4       	brne	.+30     	; 0x2fe0 <__addsf3x+0x34>
    2fc2:	a6 f5       	brtc	.+104    	; 0x302c <__addsf3x+0x80>
    2fc4:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__fp_zero>
    2fc8:	0e f4       	brtc	.+2      	; 0x2fcc <__addsf3x+0x20>
    2fca:	e0 95       	com	r30
    2fcc:	0b 2e       	mov	r0, r27
    2fce:	ba 2f       	mov	r27, r26
    2fd0:	a0 2d       	mov	r26, r0
    2fd2:	0b 01       	movw	r0, r22
    2fd4:	b9 01       	movw	r22, r18
    2fd6:	90 01       	movw	r18, r0
    2fd8:	0c 01       	movw	r0, r24
    2fda:	ca 01       	movw	r24, r20
    2fdc:	a0 01       	movw	r20, r0
    2fde:	11 24       	eor	r1, r1
    2fe0:	ff 27       	eor	r31, r31
    2fe2:	59 1b       	sub	r21, r25
    2fe4:	99 f0       	breq	.+38     	; 0x300c <__addsf3x+0x60>
    2fe6:	59 3f       	cpi	r21, 0xF9	; 249
    2fe8:	50 f4       	brcc	.+20     	; 0x2ffe <__addsf3x+0x52>
    2fea:	50 3e       	cpi	r21, 0xE0	; 224
    2fec:	68 f1       	brcs	.+90     	; 0x3048 <__addsf3x+0x9c>
    2fee:	1a 16       	cp	r1, r26
    2ff0:	f0 40       	sbci	r31, 0x00	; 0
    2ff2:	a2 2f       	mov	r26, r18
    2ff4:	23 2f       	mov	r18, r19
    2ff6:	34 2f       	mov	r19, r20
    2ff8:	44 27       	eor	r20, r20
    2ffa:	58 5f       	subi	r21, 0xF8	; 248
    2ffc:	f3 cf       	rjmp	.-26     	; 0x2fe4 <__addsf3x+0x38>
    2ffe:	46 95       	lsr	r20
    3000:	37 95       	ror	r19
    3002:	27 95       	ror	r18
    3004:	a7 95       	ror	r26
    3006:	f0 40       	sbci	r31, 0x00	; 0
    3008:	53 95       	inc	r21
    300a:	c9 f7       	brne	.-14     	; 0x2ffe <__addsf3x+0x52>
    300c:	7e f4       	brtc	.+30     	; 0x302c <__addsf3x+0x80>
    300e:	1f 16       	cp	r1, r31
    3010:	ba 0b       	sbc	r27, r26
    3012:	62 0b       	sbc	r22, r18
    3014:	73 0b       	sbc	r23, r19
    3016:	84 0b       	sbc	r24, r20
    3018:	ba f0       	brmi	.+46     	; 0x3048 <__addsf3x+0x9c>
    301a:	91 50       	subi	r25, 0x01	; 1
    301c:	a1 f0       	breq	.+40     	; 0x3046 <__addsf3x+0x9a>
    301e:	ff 0f       	add	r31, r31
    3020:	bb 1f       	adc	r27, r27
    3022:	66 1f       	adc	r22, r22
    3024:	77 1f       	adc	r23, r23
    3026:	88 1f       	adc	r24, r24
    3028:	c2 f7       	brpl	.-16     	; 0x301a <__addsf3x+0x6e>
    302a:	0e c0       	rjmp	.+28     	; 0x3048 <__addsf3x+0x9c>
    302c:	ba 0f       	add	r27, r26
    302e:	62 1f       	adc	r22, r18
    3030:	73 1f       	adc	r23, r19
    3032:	84 1f       	adc	r24, r20
    3034:	48 f4       	brcc	.+18     	; 0x3048 <__addsf3x+0x9c>
    3036:	87 95       	ror	r24
    3038:	77 95       	ror	r23
    303a:	67 95       	ror	r22
    303c:	b7 95       	ror	r27
    303e:	f7 95       	ror	r31
    3040:	9e 3f       	cpi	r25, 0xFE	; 254
    3042:	08 f0       	brcs	.+2      	; 0x3046 <__addsf3x+0x9a>
    3044:	b0 cf       	rjmp	.-160    	; 0x2fa6 <__addsf3+0x28>
    3046:	93 95       	inc	r25
    3048:	88 0f       	add	r24, r24
    304a:	08 f0       	brcs	.+2      	; 0x304e <__addsf3x+0xa2>
    304c:	99 27       	eor	r25, r25
    304e:	ee 0f       	add	r30, r30
    3050:	97 95       	ror	r25
    3052:	87 95       	ror	r24
    3054:	08 95       	ret

00003056 <asin>:
    3056:	9f 93       	push	r25
    3058:	9f 77       	andi	r25, 0x7F	; 127
    305a:	ee e3       	ldi	r30, 0x3E	; 62
    305c:	89 37       	cpi	r24, 0x79	; 121
    305e:	9e 07       	cpc	r25, r30
    3060:	28 f4       	brcc	.+10     	; 0x306c <asin+0x16>
    3062:	ec e7       	ldi	r30, 0x7C	; 124
    3064:	f0 e0       	ldi	r31, 0x00	; 0
    3066:	0e 94 16 1a 	call	0x342c	; 0x342c <__fp_powsodd>
    306a:	0c c0       	rjmp	.+24     	; 0x3084 <asin+0x2e>
    306c:	0e 94 a2 19 	call	0x3344	; 0x3344 <__fp_arccos>
    3070:	90 58       	subi	r25, 0x80	; 128
    3072:	a2 ea       	ldi	r26, 0xA2	; 162
    3074:	2a ed       	ldi	r18, 0xDA	; 218
    3076:	3f e0       	ldi	r19, 0x0F	; 15
    3078:	49 ec       	ldi	r20, 0xC9	; 201
    307a:	5f e3       	ldi	r21, 0x3F	; 63
    307c:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__addsf3x>
    3080:	0e 94 38 1a 	call	0x3470	; 0x3470 <__fp_round>
    3084:	0f 90       	pop	r0
    3086:	07 fc       	sbrc	r0, 7
    3088:	90 58       	subi	r25, 0x80	; 128
    308a:	08 95       	ret
    308c:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__fp_pscA>
    3090:	60 f0       	brcs	.+24     	; 0x30aa <asin+0x54>
    3092:	80 e8       	ldi	r24, 0x80	; 128
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	09 f4       	brne	.+2      	; 0x309a <asin+0x44>
    3098:	9e ef       	ldi	r25, 0xFE	; 254
    309a:	0e 94 31 1a 	call	0x3462	; 0x3462 <__fp_pscB>
    309e:	28 f0       	brcs	.+10     	; 0x30aa <asin+0x54>
    30a0:	40 e8       	ldi	r20, 0x80	; 128
    30a2:	51 e0       	ldi	r21, 0x01	; 1
    30a4:	71 f4       	brne	.+28     	; 0x30c2 <atan2+0x10>
    30a6:	5e ef       	ldi	r21, 0xFE	; 254
    30a8:	0c c0       	rjmp	.+24     	; 0x30c2 <atan2+0x10>
    30aa:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_nan>
    30ae:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__fp_zero>

000030b2 <atan2>:
    30b2:	e9 2f       	mov	r30, r25
    30b4:	e0 78       	andi	r30, 0x80	; 128
    30b6:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fp_split3>
    30ba:	40 f3       	brcs	.-48     	; 0x308c <asin+0x36>
    30bc:	09 2e       	mov	r0, r25
    30be:	05 2a       	or	r0, r21
    30c0:	b1 f3       	breq	.-20     	; 0x30ae <asin+0x58>
    30c2:	26 17       	cp	r18, r22
    30c4:	37 07       	cpc	r19, r23
    30c6:	48 07       	cpc	r20, r24
    30c8:	59 07       	cpc	r21, r25
    30ca:	38 f0       	brcs	.+14     	; 0x30da <atan2+0x28>
    30cc:	0e 2e       	mov	r0, r30
    30ce:	07 f8       	bld	r0, 7
    30d0:	e0 25       	eor	r30, r0
    30d2:	69 f0       	breq	.+26     	; 0x30ee <atan2+0x3c>
    30d4:	e0 25       	eor	r30, r0
    30d6:	e0 64       	ori	r30, 0x40	; 64
    30d8:	0a c0       	rjmp	.+20     	; 0x30ee <atan2+0x3c>
    30da:	ef 63       	ori	r30, 0x3F	; 63
    30dc:	07 f8       	bld	r0, 7
    30de:	00 94       	com	r0
    30e0:	07 fa       	bst	r0, 7
    30e2:	db 01       	movw	r26, r22
    30e4:	b9 01       	movw	r22, r18
    30e6:	9d 01       	movw	r18, r26
    30e8:	dc 01       	movw	r26, r24
    30ea:	ca 01       	movw	r24, r20
    30ec:	ad 01       	movw	r20, r26
    30ee:	ef 93       	push	r30
    30f0:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__divsf3_pse>
    30f4:	0e 94 38 1a 	call	0x3470	; 0x3470 <__fp_round>
    30f8:	0e 94 89 18 	call	0x3112	; 0x3112 <atan>
    30fc:	5f 91       	pop	r21
    30fe:	55 23       	and	r21, r21
    3100:	39 f0       	breq	.+14     	; 0x3110 <atan2+0x5e>
    3102:	2b ed       	ldi	r18, 0xDB	; 219
    3104:	3f e0       	ldi	r19, 0x0F	; 15
    3106:	49 e4       	ldi	r20, 0x49	; 73
    3108:	50 fd       	sbrc	r21, 0
    310a:	49 ec       	ldi	r20, 0xC9	; 201
    310c:	0c 94 bf 17 	jmp	0x2f7e	; 0x2f7e <__addsf3>
    3110:	08 95       	ret

00003112 <atan>:
    3112:	df 93       	push	r29
    3114:	dd 27       	eor	r29, r29
    3116:	b9 2f       	mov	r27, r25
    3118:	bf 77       	andi	r27, 0x7F	; 127
    311a:	40 e8       	ldi	r20, 0x80	; 128
    311c:	5f e3       	ldi	r21, 0x3F	; 63
    311e:	16 16       	cp	r1, r22
    3120:	17 06       	cpc	r1, r23
    3122:	48 07       	cpc	r20, r24
    3124:	5b 07       	cpc	r21, r27
    3126:	18 f4       	brcc	.+6      	; 0x312e <atan+0x1c>
    3128:	d9 2f       	mov	r29, r25
    312a:	0e 94 77 1a 	call	0x34ee	; 0x34ee <inverse>
    312e:	9f 93       	push	r25
    3130:	8f 93       	push	r24
    3132:	7f 93       	push	r23
    3134:	6f 93       	push	r22
    3136:	0e 94 32 1b 	call	0x3664	; 0x3664 <square>
    313a:	e0 e9       	ldi	r30, 0x90	; 144
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	0e 94 ef 19 	call	0x33de	; 0x33de <__fp_powser>
    3142:	0e 94 38 1a 	call	0x3470	; 0x3470 <__fp_round>
    3146:	2f 91       	pop	r18
    3148:	3f 91       	pop	r19
    314a:	4f 91       	pop	r20
    314c:	5f 91       	pop	r21
    314e:	0e 94 92 1a 	call	0x3524	; 0x3524 <__mulsf3x>
    3152:	dd 23       	and	r29, r29
    3154:	51 f0       	breq	.+20     	; 0x316a <atan+0x58>
    3156:	90 58       	subi	r25, 0x80	; 128
    3158:	a2 ea       	ldi	r26, 0xA2	; 162
    315a:	2a ed       	ldi	r18, 0xDA	; 218
    315c:	3f e0       	ldi	r19, 0x0F	; 15
    315e:	49 ec       	ldi	r20, 0xC9	; 201
    3160:	5f e3       	ldi	r21, 0x3F	; 63
    3162:	d0 78       	andi	r29, 0x80	; 128
    3164:	5d 27       	eor	r21, r29
    3166:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__addsf3x>
    316a:	df 91       	pop	r29
    316c:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__fp_round>

00003170 <__cmpsf2>:
    3170:	0e 94 c2 19 	call	0x3384	; 0x3384 <__fp_cmp>
    3174:	08 f4       	brcc	.+2      	; 0x3178 <__cmpsf2+0x8>
    3176:	81 e0       	ldi	r24, 0x01	; 1
    3178:	08 95       	ret

0000317a <__divsf3>:
    317a:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <__divsf3x>
    317e:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__fp_round>
    3182:	0e 94 31 1a 	call	0x3462	; 0x3462 <__fp_pscB>
    3186:	58 f0       	brcs	.+22     	; 0x319e <__divsf3+0x24>
    3188:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__fp_pscA>
    318c:	40 f0       	brcs	.+16     	; 0x319e <__divsf3+0x24>
    318e:	29 f4       	brne	.+10     	; 0x319a <__divsf3+0x20>
    3190:	5f 3f       	cpi	r21, 0xFF	; 255
    3192:	29 f0       	breq	.+10     	; 0x319e <__divsf3+0x24>
    3194:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__fp_inf>
    3198:	51 11       	cpse	r21, r1
    319a:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_szero>
    319e:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_nan>

000031a2 <__divsf3x>:
    31a2:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fp_split3>
    31a6:	68 f3       	brcs	.-38     	; 0x3182 <__divsf3+0x8>

000031a8 <__divsf3_pse>:
    31a8:	99 23       	and	r25, r25
    31aa:	b1 f3       	breq	.-20     	; 0x3198 <__divsf3+0x1e>
    31ac:	55 23       	and	r21, r21
    31ae:	91 f3       	breq	.-28     	; 0x3194 <__divsf3+0x1a>
    31b0:	95 1b       	sub	r25, r21
    31b2:	55 0b       	sbc	r21, r21
    31b4:	bb 27       	eor	r27, r27
    31b6:	aa 27       	eor	r26, r26
    31b8:	62 17       	cp	r22, r18
    31ba:	73 07       	cpc	r23, r19
    31bc:	84 07       	cpc	r24, r20
    31be:	38 f0       	brcs	.+14     	; 0x31ce <__divsf3_pse+0x26>
    31c0:	9f 5f       	subi	r25, 0xFF	; 255
    31c2:	5f 4f       	sbci	r21, 0xFF	; 255
    31c4:	22 0f       	add	r18, r18
    31c6:	33 1f       	adc	r19, r19
    31c8:	44 1f       	adc	r20, r20
    31ca:	aa 1f       	adc	r26, r26
    31cc:	a9 f3       	breq	.-22     	; 0x31b8 <__divsf3_pse+0x10>
    31ce:	35 d0       	rcall	.+106    	; 0x323a <__divsf3_pse+0x92>
    31d0:	0e 2e       	mov	r0, r30
    31d2:	3a f0       	brmi	.+14     	; 0x31e2 <__divsf3_pse+0x3a>
    31d4:	e0 e8       	ldi	r30, 0x80	; 128
    31d6:	32 d0       	rcall	.+100    	; 0x323c <__divsf3_pse+0x94>
    31d8:	91 50       	subi	r25, 0x01	; 1
    31da:	50 40       	sbci	r21, 0x00	; 0
    31dc:	e6 95       	lsr	r30
    31de:	00 1c       	adc	r0, r0
    31e0:	ca f7       	brpl	.-14     	; 0x31d4 <__divsf3_pse+0x2c>
    31e2:	2b d0       	rcall	.+86     	; 0x323a <__divsf3_pse+0x92>
    31e4:	fe 2f       	mov	r31, r30
    31e6:	29 d0       	rcall	.+82     	; 0x323a <__divsf3_pse+0x92>
    31e8:	66 0f       	add	r22, r22
    31ea:	77 1f       	adc	r23, r23
    31ec:	88 1f       	adc	r24, r24
    31ee:	bb 1f       	adc	r27, r27
    31f0:	26 17       	cp	r18, r22
    31f2:	37 07       	cpc	r19, r23
    31f4:	48 07       	cpc	r20, r24
    31f6:	ab 07       	cpc	r26, r27
    31f8:	b0 e8       	ldi	r27, 0x80	; 128
    31fa:	09 f0       	breq	.+2      	; 0x31fe <__divsf3_pse+0x56>
    31fc:	bb 0b       	sbc	r27, r27
    31fe:	80 2d       	mov	r24, r0
    3200:	bf 01       	movw	r22, r30
    3202:	ff 27       	eor	r31, r31
    3204:	93 58       	subi	r25, 0x83	; 131
    3206:	5f 4f       	sbci	r21, 0xFF	; 255
    3208:	3a f0       	brmi	.+14     	; 0x3218 <__divsf3_pse+0x70>
    320a:	9e 3f       	cpi	r25, 0xFE	; 254
    320c:	51 05       	cpc	r21, r1
    320e:	78 f0       	brcs	.+30     	; 0x322e <__divsf3_pse+0x86>
    3210:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__fp_inf>
    3214:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_szero>
    3218:	5f 3f       	cpi	r21, 0xFF	; 255
    321a:	e4 f3       	brlt	.-8      	; 0x3214 <__divsf3_pse+0x6c>
    321c:	98 3e       	cpi	r25, 0xE8	; 232
    321e:	d4 f3       	brlt	.-12     	; 0x3214 <__divsf3_pse+0x6c>
    3220:	86 95       	lsr	r24
    3222:	77 95       	ror	r23
    3224:	67 95       	ror	r22
    3226:	b7 95       	ror	r27
    3228:	f7 95       	ror	r31
    322a:	9f 5f       	subi	r25, 0xFF	; 255
    322c:	c9 f7       	brne	.-14     	; 0x3220 <__divsf3_pse+0x78>
    322e:	88 0f       	add	r24, r24
    3230:	91 1d       	adc	r25, r1
    3232:	96 95       	lsr	r25
    3234:	87 95       	ror	r24
    3236:	97 f9       	bld	r25, 7
    3238:	08 95       	ret
    323a:	e1 e0       	ldi	r30, 0x01	; 1
    323c:	66 0f       	add	r22, r22
    323e:	77 1f       	adc	r23, r23
    3240:	88 1f       	adc	r24, r24
    3242:	bb 1f       	adc	r27, r27
    3244:	62 17       	cp	r22, r18
    3246:	73 07       	cpc	r23, r19
    3248:	84 07       	cpc	r24, r20
    324a:	ba 07       	cpc	r27, r26
    324c:	20 f0       	brcs	.+8      	; 0x3256 <__divsf3_pse+0xae>
    324e:	62 1b       	sub	r22, r18
    3250:	73 0b       	sbc	r23, r19
    3252:	84 0b       	sbc	r24, r20
    3254:	ba 0b       	sbc	r27, r26
    3256:	ee 1f       	adc	r30, r30
    3258:	88 f7       	brcc	.-30     	; 0x323c <__divsf3_pse+0x94>
    325a:	e0 95       	com	r30
    325c:	08 95       	ret

0000325e <__fixsfsi>:
    325e:	0e 94 36 19 	call	0x326c	; 0x326c <__fixunssfsi>
    3262:	68 94       	set
    3264:	b1 11       	cpse	r27, r1
    3266:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_szero>
    326a:	08 95       	ret

0000326c <__fixunssfsi>:
    326c:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__fp_splitA>
    3270:	88 f0       	brcs	.+34     	; 0x3294 <__fixunssfsi+0x28>
    3272:	9f 57       	subi	r25, 0x7F	; 127
    3274:	98 f0       	brcs	.+38     	; 0x329c <__fixunssfsi+0x30>
    3276:	b9 2f       	mov	r27, r25
    3278:	99 27       	eor	r25, r25
    327a:	b7 51       	subi	r27, 0x17	; 23
    327c:	b0 f0       	brcs	.+44     	; 0x32aa <__fixunssfsi+0x3e>
    327e:	e1 f0       	breq	.+56     	; 0x32b8 <__fixunssfsi+0x4c>
    3280:	66 0f       	add	r22, r22
    3282:	77 1f       	adc	r23, r23
    3284:	88 1f       	adc	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	1a f0       	brmi	.+6      	; 0x3290 <__fixunssfsi+0x24>
    328a:	ba 95       	dec	r27
    328c:	c9 f7       	brne	.-14     	; 0x3280 <__fixunssfsi+0x14>
    328e:	14 c0       	rjmp	.+40     	; 0x32b8 <__fixunssfsi+0x4c>
    3290:	b1 30       	cpi	r27, 0x01	; 1
    3292:	91 f0       	breq	.+36     	; 0x32b8 <__fixunssfsi+0x4c>
    3294:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <__fp_zero>
    3298:	b1 e0       	ldi	r27, 0x01	; 1
    329a:	08 95       	ret
    329c:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <__fp_zero>
    32a0:	67 2f       	mov	r22, r23
    32a2:	78 2f       	mov	r23, r24
    32a4:	88 27       	eor	r24, r24
    32a6:	b8 5f       	subi	r27, 0xF8	; 248
    32a8:	39 f0       	breq	.+14     	; 0x32b8 <__fixunssfsi+0x4c>
    32aa:	b9 3f       	cpi	r27, 0xF9	; 249
    32ac:	cc f3       	brlt	.-14     	; 0x32a0 <__fixunssfsi+0x34>
    32ae:	86 95       	lsr	r24
    32b0:	77 95       	ror	r23
    32b2:	67 95       	ror	r22
    32b4:	b3 95       	inc	r27
    32b6:	d9 f7       	brne	.-10     	; 0x32ae <__fixunssfsi+0x42>
    32b8:	3e f4       	brtc	.+14     	; 0x32c8 <__fixunssfsi+0x5c>
    32ba:	90 95       	com	r25
    32bc:	80 95       	com	r24
    32be:	70 95       	com	r23
    32c0:	61 95       	neg	r22
    32c2:	7f 4f       	sbci	r23, 0xFF	; 255
    32c4:	8f 4f       	sbci	r24, 0xFF	; 255
    32c6:	9f 4f       	sbci	r25, 0xFF	; 255
    32c8:	08 95       	ret

000032ca <__floatunsisf>:
    32ca:	e8 94       	clt
    32cc:	09 c0       	rjmp	.+18     	; 0x32e0 <__floatsisf+0x12>

000032ce <__floatsisf>:
    32ce:	97 fb       	bst	r25, 7
    32d0:	3e f4       	brtc	.+14     	; 0x32e0 <__floatsisf+0x12>
    32d2:	90 95       	com	r25
    32d4:	80 95       	com	r24
    32d6:	70 95       	com	r23
    32d8:	61 95       	neg	r22
    32da:	7f 4f       	sbci	r23, 0xFF	; 255
    32dc:	8f 4f       	sbci	r24, 0xFF	; 255
    32de:	9f 4f       	sbci	r25, 0xFF	; 255
    32e0:	99 23       	and	r25, r25
    32e2:	a9 f0       	breq	.+42     	; 0x330e <__floatsisf+0x40>
    32e4:	f9 2f       	mov	r31, r25
    32e6:	96 e9       	ldi	r25, 0x96	; 150
    32e8:	bb 27       	eor	r27, r27
    32ea:	93 95       	inc	r25
    32ec:	f6 95       	lsr	r31
    32ee:	87 95       	ror	r24
    32f0:	77 95       	ror	r23
    32f2:	67 95       	ror	r22
    32f4:	b7 95       	ror	r27
    32f6:	f1 11       	cpse	r31, r1
    32f8:	f8 cf       	rjmp	.-16     	; 0x32ea <__floatsisf+0x1c>
    32fa:	fa f4       	brpl	.+62     	; 0x333a <__floatsisf+0x6c>
    32fc:	bb 0f       	add	r27, r27
    32fe:	11 f4       	brne	.+4      	; 0x3304 <__floatsisf+0x36>
    3300:	60 ff       	sbrs	r22, 0
    3302:	1b c0       	rjmp	.+54     	; 0x333a <__floatsisf+0x6c>
    3304:	6f 5f       	subi	r22, 0xFF	; 255
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	8f 4f       	sbci	r24, 0xFF	; 255
    330a:	9f 4f       	sbci	r25, 0xFF	; 255
    330c:	16 c0       	rjmp	.+44     	; 0x333a <__floatsisf+0x6c>
    330e:	88 23       	and	r24, r24
    3310:	11 f0       	breq	.+4      	; 0x3316 <__floatsisf+0x48>
    3312:	96 e9       	ldi	r25, 0x96	; 150
    3314:	11 c0       	rjmp	.+34     	; 0x3338 <__floatsisf+0x6a>
    3316:	77 23       	and	r23, r23
    3318:	21 f0       	breq	.+8      	; 0x3322 <__floatsisf+0x54>
    331a:	9e e8       	ldi	r25, 0x8E	; 142
    331c:	87 2f       	mov	r24, r23
    331e:	76 2f       	mov	r23, r22
    3320:	05 c0       	rjmp	.+10     	; 0x332c <__floatsisf+0x5e>
    3322:	66 23       	and	r22, r22
    3324:	71 f0       	breq	.+28     	; 0x3342 <__floatsisf+0x74>
    3326:	96 e8       	ldi	r25, 0x86	; 134
    3328:	86 2f       	mov	r24, r22
    332a:	70 e0       	ldi	r23, 0x00	; 0
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	2a f0       	brmi	.+10     	; 0x333a <__floatsisf+0x6c>
    3330:	9a 95       	dec	r25
    3332:	66 0f       	add	r22, r22
    3334:	77 1f       	adc	r23, r23
    3336:	88 1f       	adc	r24, r24
    3338:	da f7       	brpl	.-10     	; 0x3330 <__floatsisf+0x62>
    333a:	88 0f       	add	r24, r24
    333c:	96 95       	lsr	r25
    333e:	87 95       	ror	r24
    3340:	97 f9       	bld	r25, 7
    3342:	08 95       	ret

00003344 <__fp_arccos>:
    3344:	df 93       	push	r29
    3346:	cf 93       	push	r28
    3348:	1f 93       	push	r17
    334a:	0f 93       	push	r16
    334c:	8b 01       	movw	r16, r22
    334e:	ec 01       	movw	r28, r24
    3350:	ed eb       	ldi	r30, 0xBD	; 189
    3352:	f0 e0       	ldi	r31, 0x00	; 0
    3354:	0e 94 ef 19 	call	0x33de	; 0x33de <__fp_powser>
    3358:	0e 94 38 1a 	call	0x3470	; 0x3470 <__fp_round>
    335c:	98 01       	movw	r18, r16
    335e:	ae 01       	movw	r20, r28
    3360:	8b 01       	movw	r16, r22
    3362:	ec 01       	movw	r28, r24
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	70 e0       	ldi	r23, 0x00	; 0
    3368:	80 e8       	ldi	r24, 0x80	; 128
    336a:	9f e3       	ldi	r25, 0x3F	; 63
    336c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__subsf3>
    3370:	0e 94 f2 1a 	call	0x35e4	; 0x35e4 <sqrt>
    3374:	98 01       	movw	r18, r16
    3376:	ae 01       	movw	r20, r28
    3378:	0f 91       	pop	r16
    337a:	1f 91       	pop	r17
    337c:	cf 91       	pop	r28
    337e:	df 91       	pop	r29
    3380:	0c 94 92 1a 	jmp	0x3524	; 0x3524 <__mulsf3x>

00003384 <__fp_cmp>:
    3384:	99 0f       	add	r25, r25
    3386:	00 08       	sbc	r0, r0
    3388:	55 0f       	add	r21, r21
    338a:	aa 0b       	sbc	r26, r26
    338c:	e0 e8       	ldi	r30, 0x80	; 128
    338e:	fe ef       	ldi	r31, 0xFE	; 254
    3390:	16 16       	cp	r1, r22
    3392:	17 06       	cpc	r1, r23
    3394:	e8 07       	cpc	r30, r24
    3396:	f9 07       	cpc	r31, r25
    3398:	c0 f0       	brcs	.+48     	; 0x33ca <__fp_cmp+0x46>
    339a:	12 16       	cp	r1, r18
    339c:	13 06       	cpc	r1, r19
    339e:	e4 07       	cpc	r30, r20
    33a0:	f5 07       	cpc	r31, r21
    33a2:	98 f0       	brcs	.+38     	; 0x33ca <__fp_cmp+0x46>
    33a4:	62 1b       	sub	r22, r18
    33a6:	73 0b       	sbc	r23, r19
    33a8:	84 0b       	sbc	r24, r20
    33aa:	95 0b       	sbc	r25, r21
    33ac:	39 f4       	brne	.+14     	; 0x33bc <__fp_cmp+0x38>
    33ae:	0a 26       	eor	r0, r26
    33b0:	61 f0       	breq	.+24     	; 0x33ca <__fp_cmp+0x46>
    33b2:	23 2b       	or	r18, r19
    33b4:	24 2b       	or	r18, r20
    33b6:	25 2b       	or	r18, r21
    33b8:	21 f4       	brne	.+8      	; 0x33c2 <__fp_cmp+0x3e>
    33ba:	08 95       	ret
    33bc:	0a 26       	eor	r0, r26
    33be:	09 f4       	brne	.+2      	; 0x33c2 <__fp_cmp+0x3e>
    33c0:	a1 40       	sbci	r26, 0x01	; 1
    33c2:	a6 95       	lsr	r26
    33c4:	8f ef       	ldi	r24, 0xFF	; 255
    33c6:	81 1d       	adc	r24, r1
    33c8:	81 1d       	adc	r24, r1
    33ca:	08 95       	ret

000033cc <__fp_inf>:
    33cc:	97 f9       	bld	r25, 7
    33ce:	9f 67       	ori	r25, 0x7F	; 127
    33d0:	80 e8       	ldi	r24, 0x80	; 128
    33d2:	70 e0       	ldi	r23, 0x00	; 0
    33d4:	60 e0       	ldi	r22, 0x00	; 0
    33d6:	08 95       	ret

000033d8 <__fp_nan>:
    33d8:	9f ef       	ldi	r25, 0xFF	; 255
    33da:	80 ec       	ldi	r24, 0xC0	; 192
    33dc:	08 95       	ret

000033de <__fp_powser>:
    33de:	df 93       	push	r29
    33e0:	cf 93       	push	r28
    33e2:	1f 93       	push	r17
    33e4:	0f 93       	push	r16
    33e6:	ff 92       	push	r15
    33e8:	ef 92       	push	r14
    33ea:	df 92       	push	r13
    33ec:	7b 01       	movw	r14, r22
    33ee:	8c 01       	movw	r16, r24
    33f0:	68 94       	set
    33f2:	06 c0       	rjmp	.+12     	; 0x3400 <__fp_powser+0x22>
    33f4:	da 2e       	mov	r13, r26
    33f6:	ef 01       	movw	r28, r30
    33f8:	0e 94 92 1a 	call	0x3524	; 0x3524 <__mulsf3x>
    33fc:	fe 01       	movw	r30, r28
    33fe:	e8 94       	clt
    3400:	a5 91       	lpm	r26, Z+
    3402:	25 91       	lpm	r18, Z+
    3404:	35 91       	lpm	r19, Z+
    3406:	45 91       	lpm	r20, Z+
    3408:	55 91       	lpm	r21, Z+
    340a:	a6 f3       	brts	.-24     	; 0x33f4 <__fp_powser+0x16>
    340c:	ef 01       	movw	r28, r30
    340e:	0e 94 d6 17 	call	0x2fac	; 0x2fac <__addsf3x>
    3412:	fe 01       	movw	r30, r28
    3414:	97 01       	movw	r18, r14
    3416:	a8 01       	movw	r20, r16
    3418:	da 94       	dec	r13
    341a:	69 f7       	brne	.-38     	; 0x33f6 <__fp_powser+0x18>
    341c:	df 90       	pop	r13
    341e:	ef 90       	pop	r14
    3420:	ff 90       	pop	r15
    3422:	0f 91       	pop	r16
    3424:	1f 91       	pop	r17
    3426:	cf 91       	pop	r28
    3428:	df 91       	pop	r29
    342a:	08 95       	ret

0000342c <__fp_powsodd>:
    342c:	9f 93       	push	r25
    342e:	8f 93       	push	r24
    3430:	7f 93       	push	r23
    3432:	6f 93       	push	r22
    3434:	ff 93       	push	r31
    3436:	ef 93       	push	r30
    3438:	9b 01       	movw	r18, r22
    343a:	ac 01       	movw	r20, r24
    343c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__mulsf3>
    3440:	ef 91       	pop	r30
    3442:	ff 91       	pop	r31
    3444:	0e 94 ef 19 	call	0x33de	; 0x33de <__fp_powser>
    3448:	2f 91       	pop	r18
    344a:	3f 91       	pop	r19
    344c:	4f 91       	pop	r20
    344e:	5f 91       	pop	r21
    3450:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__mulsf3>

00003454 <__fp_pscA>:
    3454:	00 24       	eor	r0, r0
    3456:	0a 94       	dec	r0
    3458:	16 16       	cp	r1, r22
    345a:	17 06       	cpc	r1, r23
    345c:	18 06       	cpc	r1, r24
    345e:	09 06       	cpc	r0, r25
    3460:	08 95       	ret

00003462 <__fp_pscB>:
    3462:	00 24       	eor	r0, r0
    3464:	0a 94       	dec	r0
    3466:	12 16       	cp	r1, r18
    3468:	13 06       	cpc	r1, r19
    346a:	14 06       	cpc	r1, r20
    346c:	05 06       	cpc	r0, r21
    346e:	08 95       	ret

00003470 <__fp_round>:
    3470:	09 2e       	mov	r0, r25
    3472:	03 94       	inc	r0
    3474:	00 0c       	add	r0, r0
    3476:	11 f4       	brne	.+4      	; 0x347c <__fp_round+0xc>
    3478:	88 23       	and	r24, r24
    347a:	52 f0       	brmi	.+20     	; 0x3490 <__fp_round+0x20>
    347c:	bb 0f       	add	r27, r27
    347e:	40 f4       	brcc	.+16     	; 0x3490 <__fp_round+0x20>
    3480:	bf 2b       	or	r27, r31
    3482:	11 f4       	brne	.+4      	; 0x3488 <__fp_round+0x18>
    3484:	60 ff       	sbrs	r22, 0
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <__fp_round+0x20>
    3488:	6f 5f       	subi	r22, 0xFF	; 255
    348a:	7f 4f       	sbci	r23, 0xFF	; 255
    348c:	8f 4f       	sbci	r24, 0xFF	; 255
    348e:	9f 4f       	sbci	r25, 0xFF	; 255
    3490:	08 95       	ret

00003492 <__fp_split3>:
    3492:	57 fd       	sbrc	r21, 7
    3494:	90 58       	subi	r25, 0x80	; 128
    3496:	44 0f       	add	r20, r20
    3498:	55 1f       	adc	r21, r21
    349a:	59 f0       	breq	.+22     	; 0x34b2 <__fp_splitA+0x10>
    349c:	5f 3f       	cpi	r21, 0xFF	; 255
    349e:	71 f0       	breq	.+28     	; 0x34bc <__fp_splitA+0x1a>
    34a0:	47 95       	ror	r20

000034a2 <__fp_splitA>:
    34a2:	88 0f       	add	r24, r24
    34a4:	97 fb       	bst	r25, 7
    34a6:	99 1f       	adc	r25, r25
    34a8:	61 f0       	breq	.+24     	; 0x34c2 <__fp_splitA+0x20>
    34aa:	9f 3f       	cpi	r25, 0xFF	; 255
    34ac:	79 f0       	breq	.+30     	; 0x34cc <__fp_splitA+0x2a>
    34ae:	87 95       	ror	r24
    34b0:	08 95       	ret
    34b2:	12 16       	cp	r1, r18
    34b4:	13 06       	cpc	r1, r19
    34b6:	14 06       	cpc	r1, r20
    34b8:	55 1f       	adc	r21, r21
    34ba:	f2 cf       	rjmp	.-28     	; 0x34a0 <__fp_split3+0xe>
    34bc:	46 95       	lsr	r20
    34be:	f1 df       	rcall	.-30     	; 0x34a2 <__fp_splitA>
    34c0:	08 c0       	rjmp	.+16     	; 0x34d2 <__fp_splitA+0x30>
    34c2:	16 16       	cp	r1, r22
    34c4:	17 06       	cpc	r1, r23
    34c6:	18 06       	cpc	r1, r24
    34c8:	99 1f       	adc	r25, r25
    34ca:	f1 cf       	rjmp	.-30     	; 0x34ae <__fp_splitA+0xc>
    34cc:	86 95       	lsr	r24
    34ce:	71 05       	cpc	r23, r1
    34d0:	61 05       	cpc	r22, r1
    34d2:	08 94       	sec
    34d4:	08 95       	ret

000034d6 <__fp_zero>:
    34d6:	e8 94       	clt

000034d8 <__fp_szero>:
    34d8:	bb 27       	eor	r27, r27
    34da:	66 27       	eor	r22, r22
    34dc:	77 27       	eor	r23, r23
    34de:	cb 01       	movw	r24, r22
    34e0:	97 f9       	bld	r25, 7
    34e2:	08 95       	ret

000034e4 <__gesf2>:
    34e4:	0e 94 c2 19 	call	0x3384	; 0x3384 <__fp_cmp>
    34e8:	08 f4       	brcc	.+2      	; 0x34ec <__gesf2+0x8>
    34ea:	8f ef       	ldi	r24, 0xFF	; 255
    34ec:	08 95       	ret

000034ee <inverse>:
    34ee:	9b 01       	movw	r18, r22
    34f0:	ac 01       	movw	r20, r24
    34f2:	60 e0       	ldi	r22, 0x00	; 0
    34f4:	70 e0       	ldi	r23, 0x00	; 0
    34f6:	80 e8       	ldi	r24, 0x80	; 128
    34f8:	9f e3       	ldi	r25, 0x3F	; 63
    34fa:	0c 94 bd 18 	jmp	0x317a	; 0x317a <__divsf3>

000034fe <__mulsf3>:
    34fe:	0e 94 92 1a 	call	0x3524	; 0x3524 <__mulsf3x>
    3502:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <__fp_round>
    3506:	0e 94 2a 1a 	call	0x3454	; 0x3454 <__fp_pscA>
    350a:	38 f0       	brcs	.+14     	; 0x351a <__mulsf3+0x1c>
    350c:	0e 94 31 1a 	call	0x3462	; 0x3462 <__fp_pscB>
    3510:	20 f0       	brcs	.+8      	; 0x351a <__mulsf3+0x1c>
    3512:	95 23       	and	r25, r21
    3514:	11 f0       	breq	.+4      	; 0x351a <__mulsf3+0x1c>
    3516:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__fp_inf>
    351a:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_nan>
    351e:	11 24       	eor	r1, r1
    3520:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_szero>

00003524 <__mulsf3x>:
    3524:	0e 94 49 1a 	call	0x3492	; 0x3492 <__fp_split3>
    3528:	70 f3       	brcs	.-36     	; 0x3506 <__mulsf3+0x8>

0000352a <__mulsf3_pse>:
    352a:	95 9f       	mul	r25, r21
    352c:	c1 f3       	breq	.-16     	; 0x351e <__mulsf3+0x20>
    352e:	95 0f       	add	r25, r21
    3530:	50 e0       	ldi	r21, 0x00	; 0
    3532:	55 1f       	adc	r21, r21
    3534:	62 9f       	mul	r22, r18
    3536:	f0 01       	movw	r30, r0
    3538:	72 9f       	mul	r23, r18
    353a:	bb 27       	eor	r27, r27
    353c:	f0 0d       	add	r31, r0
    353e:	b1 1d       	adc	r27, r1
    3540:	63 9f       	mul	r22, r19
    3542:	aa 27       	eor	r26, r26
    3544:	f0 0d       	add	r31, r0
    3546:	b1 1d       	adc	r27, r1
    3548:	aa 1f       	adc	r26, r26
    354a:	64 9f       	mul	r22, r20
    354c:	66 27       	eor	r22, r22
    354e:	b0 0d       	add	r27, r0
    3550:	a1 1d       	adc	r26, r1
    3552:	66 1f       	adc	r22, r22
    3554:	82 9f       	mul	r24, r18
    3556:	22 27       	eor	r18, r18
    3558:	b0 0d       	add	r27, r0
    355a:	a1 1d       	adc	r26, r1
    355c:	62 1f       	adc	r22, r18
    355e:	73 9f       	mul	r23, r19
    3560:	b0 0d       	add	r27, r0
    3562:	a1 1d       	adc	r26, r1
    3564:	62 1f       	adc	r22, r18
    3566:	83 9f       	mul	r24, r19
    3568:	a0 0d       	add	r26, r0
    356a:	61 1d       	adc	r22, r1
    356c:	22 1f       	adc	r18, r18
    356e:	74 9f       	mul	r23, r20
    3570:	33 27       	eor	r19, r19
    3572:	a0 0d       	add	r26, r0
    3574:	61 1d       	adc	r22, r1
    3576:	23 1f       	adc	r18, r19
    3578:	84 9f       	mul	r24, r20
    357a:	60 0d       	add	r22, r0
    357c:	21 1d       	adc	r18, r1
    357e:	82 2f       	mov	r24, r18
    3580:	76 2f       	mov	r23, r22
    3582:	6a 2f       	mov	r22, r26
    3584:	11 24       	eor	r1, r1
    3586:	9f 57       	subi	r25, 0x7F	; 127
    3588:	50 40       	sbci	r21, 0x00	; 0
    358a:	9a f0       	brmi	.+38     	; 0x35b2 <__mulsf3_pse+0x88>
    358c:	f1 f0       	breq	.+60     	; 0x35ca <__mulsf3_pse+0xa0>
    358e:	88 23       	and	r24, r24
    3590:	4a f0       	brmi	.+18     	; 0x35a4 <__mulsf3_pse+0x7a>
    3592:	ee 0f       	add	r30, r30
    3594:	ff 1f       	adc	r31, r31
    3596:	bb 1f       	adc	r27, r27
    3598:	66 1f       	adc	r22, r22
    359a:	77 1f       	adc	r23, r23
    359c:	88 1f       	adc	r24, r24
    359e:	91 50       	subi	r25, 0x01	; 1
    35a0:	50 40       	sbci	r21, 0x00	; 0
    35a2:	a9 f7       	brne	.-22     	; 0x358e <__mulsf3_pse+0x64>
    35a4:	9e 3f       	cpi	r25, 0xFE	; 254
    35a6:	51 05       	cpc	r21, r1
    35a8:	80 f0       	brcs	.+32     	; 0x35ca <__mulsf3_pse+0xa0>
    35aa:	0c 94 e6 19 	jmp	0x33cc	; 0x33cc <__fp_inf>
    35ae:	0c 94 6c 1a 	jmp	0x34d8	; 0x34d8 <__fp_szero>
    35b2:	5f 3f       	cpi	r21, 0xFF	; 255
    35b4:	e4 f3       	brlt	.-8      	; 0x35ae <__mulsf3_pse+0x84>
    35b6:	98 3e       	cpi	r25, 0xE8	; 232
    35b8:	d4 f3       	brlt	.-12     	; 0x35ae <__mulsf3_pse+0x84>
    35ba:	86 95       	lsr	r24
    35bc:	77 95       	ror	r23
    35be:	67 95       	ror	r22
    35c0:	b7 95       	ror	r27
    35c2:	f7 95       	ror	r31
    35c4:	e7 95       	ror	r30
    35c6:	9f 5f       	subi	r25, 0xFF	; 255
    35c8:	c1 f7       	brne	.-16     	; 0x35ba <__mulsf3_pse+0x90>
    35ca:	fe 2b       	or	r31, r30
    35cc:	88 0f       	add	r24, r24
    35ce:	91 1d       	adc	r25, r1
    35d0:	96 95       	lsr	r25
    35d2:	87 95       	ror	r24
    35d4:	97 f9       	bld	r25, 7
    35d6:	08 95       	ret
    35d8:	19 f4       	brne	.+6      	; 0x35e0 <__mulsf3_pse+0xb6>
    35da:	16 f4       	brtc	.+4      	; 0x35e0 <__mulsf3_pse+0xb6>
    35dc:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__fp_nan>
    35e0:	0c 94 36 1b 	jmp	0x366c	; 0x366c <__fp_mpack>

000035e4 <sqrt>:
    35e4:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__fp_splitA>
    35e8:	b8 f3       	brcs	.-18     	; 0x35d8 <__mulsf3_pse+0xae>
    35ea:	99 23       	and	r25, r25
    35ec:	c9 f3       	breq	.-14     	; 0x35e0 <__mulsf3_pse+0xb6>
    35ee:	b6 f3       	brts	.-20     	; 0x35dc <__mulsf3_pse+0xb2>
    35f0:	9f 57       	subi	r25, 0x7F	; 127
    35f2:	55 0b       	sbc	r21, r21
    35f4:	87 ff       	sbrs	r24, 7
    35f6:	0e 94 44 1b 	call	0x3688	; 0x3688 <__fp_norm2>
    35fa:	00 24       	eor	r0, r0
    35fc:	a0 e6       	ldi	r26, 0x60	; 96
    35fe:	40 ea       	ldi	r20, 0xA0	; 160
    3600:	90 01       	movw	r18, r0
    3602:	80 58       	subi	r24, 0x80	; 128
    3604:	56 95       	lsr	r21
    3606:	97 95       	ror	r25
    3608:	28 f4       	brcc	.+10     	; 0x3614 <sqrt+0x30>
    360a:	80 5c       	subi	r24, 0xC0	; 192
    360c:	66 0f       	add	r22, r22
    360e:	77 1f       	adc	r23, r23
    3610:	88 1f       	adc	r24, r24
    3612:	20 f0       	brcs	.+8      	; 0x361c <sqrt+0x38>
    3614:	26 17       	cp	r18, r22
    3616:	37 07       	cpc	r19, r23
    3618:	48 07       	cpc	r20, r24
    361a:	30 f4       	brcc	.+12     	; 0x3628 <sqrt+0x44>
    361c:	62 1b       	sub	r22, r18
    361e:	73 0b       	sbc	r23, r19
    3620:	84 0b       	sbc	r24, r20
    3622:	20 29       	or	r18, r0
    3624:	31 29       	or	r19, r1
    3626:	4a 2b       	or	r20, r26
    3628:	a6 95       	lsr	r26
    362a:	17 94       	ror	r1
    362c:	07 94       	ror	r0
    362e:	20 25       	eor	r18, r0
    3630:	31 25       	eor	r19, r1
    3632:	4a 27       	eor	r20, r26
    3634:	58 f7       	brcc	.-42     	; 0x360c <sqrt+0x28>
    3636:	66 0f       	add	r22, r22
    3638:	77 1f       	adc	r23, r23
    363a:	88 1f       	adc	r24, r24
    363c:	20 f0       	brcs	.+8      	; 0x3646 <sqrt+0x62>
    363e:	26 17       	cp	r18, r22
    3640:	37 07       	cpc	r19, r23
    3642:	48 07       	cpc	r20, r24
    3644:	30 f4       	brcc	.+12     	; 0x3652 <sqrt+0x6e>
    3646:	62 0b       	sbc	r22, r18
    3648:	73 0b       	sbc	r23, r19
    364a:	84 0b       	sbc	r24, r20
    364c:	20 0d       	add	r18, r0
    364e:	31 1d       	adc	r19, r1
    3650:	41 1d       	adc	r20, r1
    3652:	a0 95       	com	r26
    3654:	81 f7       	brne	.-32     	; 0x3636 <sqrt+0x52>
    3656:	b9 01       	movw	r22, r18
    3658:	84 2f       	mov	r24, r20
    365a:	91 58       	subi	r25, 0x81	; 129
    365c:	88 0f       	add	r24, r24
    365e:	96 95       	lsr	r25
    3660:	87 95       	ror	r24
    3662:	08 95       	ret

00003664 <square>:
    3664:	9b 01       	movw	r18, r22
    3666:	ac 01       	movw	r20, r24
    3668:	0c 94 7f 1a 	jmp	0x34fe	; 0x34fe <__mulsf3>

0000366c <__fp_mpack>:
    366c:	9f 3f       	cpi	r25, 0xFF	; 255
    366e:	31 f0       	breq	.+12     	; 0x367c <__fp_mpack_finite+0xc>

00003670 <__fp_mpack_finite>:
    3670:	91 50       	subi	r25, 0x01	; 1
    3672:	20 f4       	brcc	.+8      	; 0x367c <__fp_mpack_finite+0xc>
    3674:	87 95       	ror	r24
    3676:	77 95       	ror	r23
    3678:	67 95       	ror	r22
    367a:	b7 95       	ror	r27
    367c:	88 0f       	add	r24, r24
    367e:	91 1d       	adc	r25, r1
    3680:	96 95       	lsr	r25
    3682:	87 95       	ror	r24
    3684:	97 f9       	bld	r25, 7
    3686:	08 95       	ret

00003688 <__fp_norm2>:
    3688:	91 50       	subi	r25, 0x01	; 1
    368a:	50 40       	sbci	r21, 0x00	; 0
    368c:	66 0f       	add	r22, r22
    368e:	77 1f       	adc	r23, r23
    3690:	88 1f       	adc	r24, r24
    3692:	d2 f7       	brpl	.-12     	; 0x3688 <__fp_norm2>
    3694:	08 95       	ret

00003696 <vfprintf>:
    3696:	a0 e1       	ldi	r26, 0x10	; 16
    3698:	b0 e0       	ldi	r27, 0x00	; 0
    369a:	e1 e5       	ldi	r30, 0x51	; 81
    369c:	fb e1       	ldi	r31, 0x1B	; 27
    369e:	0c 94 ce 1e 	jmp	0x3d9c	; 0x3d9c <__prologue_saves__>
    36a2:	7c 01       	movw	r14, r24
    36a4:	1b 01       	movw	r2, r22
    36a6:	6a 01       	movw	r12, r20
    36a8:	fc 01       	movw	r30, r24
    36aa:	17 82       	std	Z+7, r1	; 0x07
    36ac:	16 82       	std	Z+6, r1	; 0x06
    36ae:	83 81       	ldd	r24, Z+3	; 0x03
    36b0:	81 ff       	sbrs	r24, 1
    36b2:	44 c3       	rjmp	.+1672   	; 0x3d3c <vfprintf+0x6a6>
    36b4:	9e 01       	movw	r18, r28
    36b6:	2f 5f       	subi	r18, 0xFF	; 255
    36b8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ba:	39 01       	movw	r6, r18
    36bc:	f7 01       	movw	r30, r14
    36be:	93 81       	ldd	r25, Z+3	; 0x03
    36c0:	f1 01       	movw	r30, r2
    36c2:	93 fd       	sbrc	r25, 3
    36c4:	85 91       	lpm	r24, Z+
    36c6:	93 ff       	sbrs	r25, 3
    36c8:	81 91       	ld	r24, Z+
    36ca:	1f 01       	movw	r2, r30
    36cc:	88 23       	and	r24, r24
    36ce:	09 f4       	brne	.+2      	; 0x36d2 <vfprintf+0x3c>
    36d0:	31 c3       	rjmp	.+1634   	; 0x3d34 <vfprintf+0x69e>
    36d2:	85 32       	cpi	r24, 0x25	; 37
    36d4:	39 f4       	brne	.+14     	; 0x36e4 <vfprintf+0x4e>
    36d6:	93 fd       	sbrc	r25, 3
    36d8:	85 91       	lpm	r24, Z+
    36da:	93 ff       	sbrs	r25, 3
    36dc:	81 91       	ld	r24, Z+
    36de:	1f 01       	movw	r2, r30
    36e0:	85 32       	cpi	r24, 0x25	; 37
    36e2:	39 f4       	brne	.+14     	; 0x36f2 <vfprintf+0x5c>
    36e4:	b7 01       	movw	r22, r14
    36e6:	90 e0       	ldi	r25, 0x00	; 0
    36e8:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    36ec:	56 01       	movw	r10, r12
    36ee:	65 01       	movw	r12, r10
    36f0:	e5 cf       	rjmp	.-54     	; 0x36bc <vfprintf+0x26>
    36f2:	10 e0       	ldi	r17, 0x00	; 0
    36f4:	51 2c       	mov	r5, r1
    36f6:	91 2c       	mov	r9, r1
    36f8:	ff e1       	ldi	r31, 0x1F	; 31
    36fa:	f9 15       	cp	r31, r9
    36fc:	d8 f0       	brcs	.+54     	; 0x3734 <vfprintf+0x9e>
    36fe:	8b 32       	cpi	r24, 0x2B	; 43
    3700:	79 f0       	breq	.+30     	; 0x3720 <vfprintf+0x8a>
    3702:	38 f4       	brcc	.+14     	; 0x3712 <vfprintf+0x7c>
    3704:	80 32       	cpi	r24, 0x20	; 32
    3706:	79 f0       	breq	.+30     	; 0x3726 <vfprintf+0x90>
    3708:	83 32       	cpi	r24, 0x23	; 35
    370a:	a1 f4       	brne	.+40     	; 0x3734 <vfprintf+0x9e>
    370c:	f9 2d       	mov	r31, r9
    370e:	f0 61       	ori	r31, 0x10	; 16
    3710:	2e c0       	rjmp	.+92     	; 0x376e <vfprintf+0xd8>
    3712:	8d 32       	cpi	r24, 0x2D	; 45
    3714:	61 f0       	breq	.+24     	; 0x372e <vfprintf+0x98>
    3716:	80 33       	cpi	r24, 0x30	; 48
    3718:	69 f4       	brne	.+26     	; 0x3734 <vfprintf+0x9e>
    371a:	29 2d       	mov	r18, r9
    371c:	21 60       	ori	r18, 0x01	; 1
    371e:	2d c0       	rjmp	.+90     	; 0x377a <vfprintf+0xe4>
    3720:	39 2d       	mov	r19, r9
    3722:	32 60       	ori	r19, 0x02	; 2
    3724:	93 2e       	mov	r9, r19
    3726:	89 2d       	mov	r24, r9
    3728:	84 60       	ori	r24, 0x04	; 4
    372a:	98 2e       	mov	r9, r24
    372c:	2a c0       	rjmp	.+84     	; 0x3782 <vfprintf+0xec>
    372e:	e9 2d       	mov	r30, r9
    3730:	e8 60       	ori	r30, 0x08	; 8
    3732:	15 c0       	rjmp	.+42     	; 0x375e <vfprintf+0xc8>
    3734:	97 fc       	sbrc	r9, 7
    3736:	2d c0       	rjmp	.+90     	; 0x3792 <vfprintf+0xfc>
    3738:	20 ed       	ldi	r18, 0xD0	; 208
    373a:	28 0f       	add	r18, r24
    373c:	2a 30       	cpi	r18, 0x0A	; 10
    373e:	88 f4       	brcc	.+34     	; 0x3762 <vfprintf+0xcc>
    3740:	96 fe       	sbrs	r9, 6
    3742:	06 c0       	rjmp	.+12     	; 0x3750 <vfprintf+0xba>
    3744:	3a e0       	ldi	r19, 0x0A	; 10
    3746:	13 9f       	mul	r17, r19
    3748:	20 0d       	add	r18, r0
    374a:	11 24       	eor	r1, r1
    374c:	12 2f       	mov	r17, r18
    374e:	19 c0       	rjmp	.+50     	; 0x3782 <vfprintf+0xec>
    3750:	8a e0       	ldi	r24, 0x0A	; 10
    3752:	58 9e       	mul	r5, r24
    3754:	20 0d       	add	r18, r0
    3756:	11 24       	eor	r1, r1
    3758:	52 2e       	mov	r5, r18
    375a:	e9 2d       	mov	r30, r9
    375c:	e0 62       	ori	r30, 0x20	; 32
    375e:	9e 2e       	mov	r9, r30
    3760:	10 c0       	rjmp	.+32     	; 0x3782 <vfprintf+0xec>
    3762:	8e 32       	cpi	r24, 0x2E	; 46
    3764:	31 f4       	brne	.+12     	; 0x3772 <vfprintf+0xdc>
    3766:	96 fc       	sbrc	r9, 6
    3768:	e5 c2       	rjmp	.+1482   	; 0x3d34 <vfprintf+0x69e>
    376a:	f9 2d       	mov	r31, r9
    376c:	f0 64       	ori	r31, 0x40	; 64
    376e:	9f 2e       	mov	r9, r31
    3770:	08 c0       	rjmp	.+16     	; 0x3782 <vfprintf+0xec>
    3772:	8c 36       	cpi	r24, 0x6C	; 108
    3774:	21 f4       	brne	.+8      	; 0x377e <vfprintf+0xe8>
    3776:	29 2d       	mov	r18, r9
    3778:	20 68       	ori	r18, 0x80	; 128
    377a:	92 2e       	mov	r9, r18
    377c:	02 c0       	rjmp	.+4      	; 0x3782 <vfprintf+0xec>
    377e:	88 36       	cpi	r24, 0x68	; 104
    3780:	41 f4       	brne	.+16     	; 0x3792 <vfprintf+0xfc>
    3782:	f1 01       	movw	r30, r2
    3784:	93 fd       	sbrc	r25, 3
    3786:	85 91       	lpm	r24, Z+
    3788:	93 ff       	sbrs	r25, 3
    378a:	81 91       	ld	r24, Z+
    378c:	1f 01       	movw	r2, r30
    378e:	81 11       	cpse	r24, r1
    3790:	b3 cf       	rjmp	.-154    	; 0x36f8 <vfprintf+0x62>
    3792:	9b eb       	ldi	r25, 0xBB	; 187
    3794:	98 0f       	add	r25, r24
    3796:	93 30       	cpi	r25, 0x03	; 3
    3798:	20 f4       	brcc	.+8      	; 0x37a2 <vfprintf+0x10c>
    379a:	99 2d       	mov	r25, r9
    379c:	90 61       	ori	r25, 0x10	; 16
    379e:	80 5e       	subi	r24, 0xE0	; 224
    37a0:	07 c0       	rjmp	.+14     	; 0x37b0 <vfprintf+0x11a>
    37a2:	9b e9       	ldi	r25, 0x9B	; 155
    37a4:	98 0f       	add	r25, r24
    37a6:	93 30       	cpi	r25, 0x03	; 3
    37a8:	08 f0       	brcs	.+2      	; 0x37ac <vfprintf+0x116>
    37aa:	66 c1       	rjmp	.+716    	; 0x3a78 <vfprintf+0x3e2>
    37ac:	99 2d       	mov	r25, r9
    37ae:	9f 7e       	andi	r25, 0xEF	; 239
    37b0:	96 ff       	sbrs	r25, 6
    37b2:	16 e0       	ldi	r17, 0x06	; 6
    37b4:	9f 73       	andi	r25, 0x3F	; 63
    37b6:	99 2e       	mov	r9, r25
    37b8:	85 36       	cpi	r24, 0x65	; 101
    37ba:	19 f4       	brne	.+6      	; 0x37c2 <vfprintf+0x12c>
    37bc:	90 64       	ori	r25, 0x40	; 64
    37be:	99 2e       	mov	r9, r25
    37c0:	08 c0       	rjmp	.+16     	; 0x37d2 <vfprintf+0x13c>
    37c2:	86 36       	cpi	r24, 0x66	; 102
    37c4:	21 f4       	brne	.+8      	; 0x37ce <vfprintf+0x138>
    37c6:	39 2f       	mov	r19, r25
    37c8:	30 68       	ori	r19, 0x80	; 128
    37ca:	93 2e       	mov	r9, r19
    37cc:	02 c0       	rjmp	.+4      	; 0x37d2 <vfprintf+0x13c>
    37ce:	11 11       	cpse	r17, r1
    37d0:	11 50       	subi	r17, 0x01	; 1
    37d2:	97 fe       	sbrs	r9, 7
    37d4:	07 c0       	rjmp	.+14     	; 0x37e4 <vfprintf+0x14e>
    37d6:	1c 33       	cpi	r17, 0x3C	; 60
    37d8:	50 f4       	brcc	.+20     	; 0x37ee <vfprintf+0x158>
    37da:	44 24       	eor	r4, r4
    37dc:	43 94       	inc	r4
    37de:	41 0e       	add	r4, r17
    37e0:	27 e0       	ldi	r18, 0x07	; 7
    37e2:	0b c0       	rjmp	.+22     	; 0x37fa <vfprintf+0x164>
    37e4:	18 30       	cpi	r17, 0x08	; 8
    37e6:	38 f0       	brcs	.+14     	; 0x37f6 <vfprintf+0x160>
    37e8:	27 e0       	ldi	r18, 0x07	; 7
    37ea:	17 e0       	ldi	r17, 0x07	; 7
    37ec:	05 c0       	rjmp	.+10     	; 0x37f8 <vfprintf+0x162>
    37ee:	27 e0       	ldi	r18, 0x07	; 7
    37f0:	9c e3       	ldi	r25, 0x3C	; 60
    37f2:	49 2e       	mov	r4, r25
    37f4:	02 c0       	rjmp	.+4      	; 0x37fa <vfprintf+0x164>
    37f6:	21 2f       	mov	r18, r17
    37f8:	41 2c       	mov	r4, r1
    37fa:	56 01       	movw	r10, r12
    37fc:	84 e0       	ldi	r24, 0x04	; 4
    37fe:	a8 0e       	add	r10, r24
    3800:	b1 1c       	adc	r11, r1
    3802:	f6 01       	movw	r30, r12
    3804:	60 81       	ld	r22, Z
    3806:	71 81       	ldd	r23, Z+1	; 0x01
    3808:	82 81       	ldd	r24, Z+2	; 0x02
    380a:	93 81       	ldd	r25, Z+3	; 0x03
    380c:	04 2d       	mov	r16, r4
    380e:	a3 01       	movw	r20, r6
    3810:	0e 94 26 20 	call	0x404c	; 0x404c <__ftoa_engine>
    3814:	6c 01       	movw	r12, r24
    3816:	f9 81       	ldd	r31, Y+1	; 0x01
    3818:	fc 87       	std	Y+12, r31	; 0x0c
    381a:	f0 ff       	sbrs	r31, 0
    381c:	02 c0       	rjmp	.+4      	; 0x3822 <vfprintf+0x18c>
    381e:	f3 ff       	sbrs	r31, 3
    3820:	06 c0       	rjmp	.+12     	; 0x382e <vfprintf+0x198>
    3822:	91 fc       	sbrc	r9, 1
    3824:	06 c0       	rjmp	.+12     	; 0x3832 <vfprintf+0x19c>
    3826:	92 fe       	sbrs	r9, 2
    3828:	06 c0       	rjmp	.+12     	; 0x3836 <vfprintf+0x1a0>
    382a:	00 e2       	ldi	r16, 0x20	; 32
    382c:	05 c0       	rjmp	.+10     	; 0x3838 <vfprintf+0x1a2>
    382e:	0d e2       	ldi	r16, 0x2D	; 45
    3830:	03 c0       	rjmp	.+6      	; 0x3838 <vfprintf+0x1a2>
    3832:	0b e2       	ldi	r16, 0x2B	; 43
    3834:	01 c0       	rjmp	.+2      	; 0x3838 <vfprintf+0x1a2>
    3836:	00 e0       	ldi	r16, 0x00	; 0
    3838:	8c 85       	ldd	r24, Y+12	; 0x0c
    383a:	8c 70       	andi	r24, 0x0C	; 12
    383c:	19 f0       	breq	.+6      	; 0x3844 <vfprintf+0x1ae>
    383e:	01 11       	cpse	r16, r1
    3840:	5a c2       	rjmp	.+1204   	; 0x3cf6 <vfprintf+0x660>
    3842:	9b c2       	rjmp	.+1334   	; 0x3d7a <vfprintf+0x6e4>
    3844:	97 fe       	sbrs	r9, 7
    3846:	10 c0       	rjmp	.+32     	; 0x3868 <vfprintf+0x1d2>
    3848:	4c 0c       	add	r4, r12
    384a:	fc 85       	ldd	r31, Y+12	; 0x0c
    384c:	f4 ff       	sbrs	r31, 4
    384e:	04 c0       	rjmp	.+8      	; 0x3858 <vfprintf+0x1c2>
    3850:	8a 81       	ldd	r24, Y+2	; 0x02
    3852:	81 33       	cpi	r24, 0x31	; 49
    3854:	09 f4       	brne	.+2      	; 0x3858 <vfprintf+0x1c2>
    3856:	4a 94       	dec	r4
    3858:	14 14       	cp	r1, r4
    385a:	74 f5       	brge	.+92     	; 0x38b8 <vfprintf+0x222>
    385c:	28 e0       	ldi	r18, 0x08	; 8
    385e:	24 15       	cp	r18, r4
    3860:	78 f5       	brcc	.+94     	; 0x38c0 <vfprintf+0x22a>
    3862:	88 e0       	ldi	r24, 0x08	; 8
    3864:	48 2e       	mov	r4, r24
    3866:	2c c0       	rjmp	.+88     	; 0x38c0 <vfprintf+0x22a>
    3868:	96 fc       	sbrc	r9, 6
    386a:	2a c0       	rjmp	.+84     	; 0x38c0 <vfprintf+0x22a>
    386c:	81 2f       	mov	r24, r17
    386e:	90 e0       	ldi	r25, 0x00	; 0
    3870:	8c 15       	cp	r24, r12
    3872:	9d 05       	cpc	r25, r13
    3874:	9c f0       	brlt	.+38     	; 0x389c <vfprintf+0x206>
    3876:	3c ef       	ldi	r19, 0xFC	; 252
    3878:	c3 16       	cp	r12, r19
    387a:	3f ef       	ldi	r19, 0xFF	; 255
    387c:	d3 06       	cpc	r13, r19
    387e:	74 f0       	brlt	.+28     	; 0x389c <vfprintf+0x206>
    3880:	89 2d       	mov	r24, r9
    3882:	80 68       	ori	r24, 0x80	; 128
    3884:	98 2e       	mov	r9, r24
    3886:	0a c0       	rjmp	.+20     	; 0x389c <vfprintf+0x206>
    3888:	e2 e0       	ldi	r30, 0x02	; 2
    388a:	f0 e0       	ldi	r31, 0x00	; 0
    388c:	ec 0f       	add	r30, r28
    388e:	fd 1f       	adc	r31, r29
    3890:	e1 0f       	add	r30, r17
    3892:	f1 1d       	adc	r31, r1
    3894:	80 81       	ld	r24, Z
    3896:	80 33       	cpi	r24, 0x30	; 48
    3898:	19 f4       	brne	.+6      	; 0x38a0 <vfprintf+0x20a>
    389a:	11 50       	subi	r17, 0x01	; 1
    389c:	11 11       	cpse	r17, r1
    389e:	f4 cf       	rjmp	.-24     	; 0x3888 <vfprintf+0x1f2>
    38a0:	97 fe       	sbrs	r9, 7
    38a2:	0e c0       	rjmp	.+28     	; 0x38c0 <vfprintf+0x22a>
    38a4:	44 24       	eor	r4, r4
    38a6:	43 94       	inc	r4
    38a8:	41 0e       	add	r4, r17
    38aa:	81 2f       	mov	r24, r17
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	c8 16       	cp	r12, r24
    38b0:	d9 06       	cpc	r13, r25
    38b2:	2c f4       	brge	.+10     	; 0x38be <vfprintf+0x228>
    38b4:	1c 19       	sub	r17, r12
    38b6:	04 c0       	rjmp	.+8      	; 0x38c0 <vfprintf+0x22a>
    38b8:	44 24       	eor	r4, r4
    38ba:	43 94       	inc	r4
    38bc:	01 c0       	rjmp	.+2      	; 0x38c0 <vfprintf+0x22a>
    38be:	10 e0       	ldi	r17, 0x00	; 0
    38c0:	97 fe       	sbrs	r9, 7
    38c2:	06 c0       	rjmp	.+12     	; 0x38d0 <vfprintf+0x23a>
    38c4:	1c 14       	cp	r1, r12
    38c6:	1d 04       	cpc	r1, r13
    38c8:	34 f4       	brge	.+12     	; 0x38d6 <vfprintf+0x240>
    38ca:	c6 01       	movw	r24, r12
    38cc:	01 96       	adiw	r24, 0x01	; 1
    38ce:	05 c0       	rjmp	.+10     	; 0x38da <vfprintf+0x244>
    38d0:	85 e0       	ldi	r24, 0x05	; 5
    38d2:	90 e0       	ldi	r25, 0x00	; 0
    38d4:	02 c0       	rjmp	.+4      	; 0x38da <vfprintf+0x244>
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	01 11       	cpse	r16, r1
    38dc:	01 96       	adiw	r24, 0x01	; 1
    38de:	11 23       	and	r17, r17
    38e0:	31 f0       	breq	.+12     	; 0x38ee <vfprintf+0x258>
    38e2:	21 2f       	mov	r18, r17
    38e4:	30 e0       	ldi	r19, 0x00	; 0
    38e6:	2f 5f       	subi	r18, 0xFF	; 255
    38e8:	3f 4f       	sbci	r19, 0xFF	; 255
    38ea:	82 0f       	add	r24, r18
    38ec:	93 1f       	adc	r25, r19
    38ee:	25 2d       	mov	r18, r5
    38f0:	30 e0       	ldi	r19, 0x00	; 0
    38f2:	82 17       	cp	r24, r18
    38f4:	93 07       	cpc	r25, r19
    38f6:	14 f4       	brge	.+4      	; 0x38fc <vfprintf+0x266>
    38f8:	58 1a       	sub	r5, r24
    38fa:	01 c0       	rjmp	.+2      	; 0x38fe <vfprintf+0x268>
    38fc:	51 2c       	mov	r5, r1
    38fe:	89 2d       	mov	r24, r9
    3900:	89 70       	andi	r24, 0x09	; 9
    3902:	49 f4       	brne	.+18     	; 0x3916 <vfprintf+0x280>
    3904:	55 20       	and	r5, r5
    3906:	39 f0       	breq	.+14     	; 0x3916 <vfprintf+0x280>
    3908:	b7 01       	movw	r22, r14
    390a:	80 e2       	ldi	r24, 0x20	; 32
    390c:	90 e0       	ldi	r25, 0x00	; 0
    390e:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3912:	5a 94       	dec	r5
    3914:	f7 cf       	rjmp	.-18     	; 0x3904 <vfprintf+0x26e>
    3916:	00 23       	and	r16, r16
    3918:	29 f0       	breq	.+10     	; 0x3924 <vfprintf+0x28e>
    391a:	b7 01       	movw	r22, r14
    391c:	80 2f       	mov	r24, r16
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3924:	93 fc       	sbrc	r9, 3
    3926:	09 c0       	rjmp	.+18     	; 0x393a <vfprintf+0x2a4>
    3928:	55 20       	and	r5, r5
    392a:	39 f0       	breq	.+14     	; 0x393a <vfprintf+0x2a4>
    392c:	b7 01       	movw	r22, r14
    392e:	80 e3       	ldi	r24, 0x30	; 48
    3930:	90 e0       	ldi	r25, 0x00	; 0
    3932:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3936:	5a 94       	dec	r5
    3938:	f7 cf       	rjmp	.-18     	; 0x3928 <vfprintf+0x292>
    393a:	97 fe       	sbrs	r9, 7
    393c:	4c c0       	rjmp	.+152    	; 0x39d6 <vfprintf+0x340>
    393e:	46 01       	movw	r8, r12
    3940:	d7 fe       	sbrs	r13, 7
    3942:	02 c0       	rjmp	.+4      	; 0x3948 <vfprintf+0x2b2>
    3944:	81 2c       	mov	r8, r1
    3946:	91 2c       	mov	r9, r1
    3948:	c6 01       	movw	r24, r12
    394a:	88 19       	sub	r24, r8
    394c:	99 09       	sbc	r25, r9
    394e:	f3 01       	movw	r30, r6
    3950:	e8 0f       	add	r30, r24
    3952:	f9 1f       	adc	r31, r25
    3954:	fe 87       	std	Y+14, r31	; 0x0e
    3956:	ed 87       	std	Y+13, r30	; 0x0d
    3958:	96 01       	movw	r18, r12
    395a:	24 19       	sub	r18, r4
    395c:	31 09       	sbc	r19, r1
    395e:	38 8b       	std	Y+16, r19	; 0x10
    3960:	2f 87       	std	Y+15, r18	; 0x0f
    3962:	01 2f       	mov	r16, r17
    3964:	10 e0       	ldi	r17, 0x00	; 0
    3966:	11 95       	neg	r17
    3968:	01 95       	neg	r16
    396a:	11 09       	sbc	r17, r1
    396c:	3f ef       	ldi	r19, 0xFF	; 255
    396e:	83 16       	cp	r8, r19
    3970:	93 06       	cpc	r9, r19
    3972:	29 f4       	brne	.+10     	; 0x397e <vfprintf+0x2e8>
    3974:	b7 01       	movw	r22, r14
    3976:	8e e2       	ldi	r24, 0x2E	; 46
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    397e:	c8 14       	cp	r12, r8
    3980:	d9 04       	cpc	r13, r9
    3982:	4c f0       	brlt	.+18     	; 0x3996 <vfprintf+0x300>
    3984:	8f 85       	ldd	r24, Y+15	; 0x0f
    3986:	98 89       	ldd	r25, Y+16	; 0x10
    3988:	88 15       	cp	r24, r8
    398a:	99 05       	cpc	r25, r9
    398c:	24 f4       	brge	.+8      	; 0x3996 <vfprintf+0x300>
    398e:	ed 85       	ldd	r30, Y+13	; 0x0d
    3990:	fe 85       	ldd	r31, Y+14	; 0x0e
    3992:	81 81       	ldd	r24, Z+1	; 0x01
    3994:	01 c0       	rjmp	.+2      	; 0x3998 <vfprintf+0x302>
    3996:	80 e3       	ldi	r24, 0x30	; 48
    3998:	f1 e0       	ldi	r31, 0x01	; 1
    399a:	8f 1a       	sub	r8, r31
    399c:	91 08       	sbc	r9, r1
    399e:	2d 85       	ldd	r18, Y+13	; 0x0d
    39a0:	3e 85       	ldd	r19, Y+14	; 0x0e
    39a2:	2f 5f       	subi	r18, 0xFF	; 255
    39a4:	3f 4f       	sbci	r19, 0xFF	; 255
    39a6:	3e 87       	std	Y+14, r19	; 0x0e
    39a8:	2d 87       	std	Y+13, r18	; 0x0d
    39aa:	80 16       	cp	r8, r16
    39ac:	91 06       	cpc	r9, r17
    39ae:	2c f0       	brlt	.+10     	; 0x39ba <vfprintf+0x324>
    39b0:	b7 01       	movw	r22, r14
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    39b8:	d9 cf       	rjmp	.-78     	; 0x396c <vfprintf+0x2d6>
    39ba:	c8 14       	cp	r12, r8
    39bc:	d9 04       	cpc	r13, r9
    39be:	41 f4       	brne	.+16     	; 0x39d0 <vfprintf+0x33a>
    39c0:	9a 81       	ldd	r25, Y+2	; 0x02
    39c2:	96 33       	cpi	r25, 0x36	; 54
    39c4:	20 f4       	brcc	.+8      	; 0x39ce <vfprintf+0x338>
    39c6:	95 33       	cpi	r25, 0x35	; 53
    39c8:	19 f4       	brne	.+6      	; 0x39d0 <vfprintf+0x33a>
    39ca:	3c 85       	ldd	r19, Y+12	; 0x0c
    39cc:	34 ff       	sbrs	r19, 4
    39ce:	81 e3       	ldi	r24, 0x31	; 49
    39d0:	b7 01       	movw	r22, r14
    39d2:	90 e0       	ldi	r25, 0x00	; 0
    39d4:	4e c0       	rjmp	.+156    	; 0x3a72 <vfprintf+0x3dc>
    39d6:	8a 81       	ldd	r24, Y+2	; 0x02
    39d8:	81 33       	cpi	r24, 0x31	; 49
    39da:	19 f0       	breq	.+6      	; 0x39e2 <vfprintf+0x34c>
    39dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    39de:	9f 7e       	andi	r25, 0xEF	; 239
    39e0:	9c 87       	std	Y+12, r25	; 0x0c
    39e2:	b7 01       	movw	r22, r14
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    39ea:	11 11       	cpse	r17, r1
    39ec:	05 c0       	rjmp	.+10     	; 0x39f8 <vfprintf+0x362>
    39ee:	94 fc       	sbrc	r9, 4
    39f0:	18 c0       	rjmp	.+48     	; 0x3a22 <vfprintf+0x38c>
    39f2:	85 e6       	ldi	r24, 0x65	; 101
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	17 c0       	rjmp	.+46     	; 0x3a26 <vfprintf+0x390>
    39f8:	b7 01       	movw	r22, r14
    39fa:	8e e2       	ldi	r24, 0x2E	; 46
    39fc:	90 e0       	ldi	r25, 0x00	; 0
    39fe:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3a02:	1e 5f       	subi	r17, 0xFE	; 254
    3a04:	82 e0       	ldi	r24, 0x02	; 2
    3a06:	01 e0       	ldi	r16, 0x01	; 1
    3a08:	08 0f       	add	r16, r24
    3a0a:	f3 01       	movw	r30, r6
    3a0c:	e8 0f       	add	r30, r24
    3a0e:	f1 1d       	adc	r31, r1
    3a10:	80 81       	ld	r24, Z
    3a12:	b7 01       	movw	r22, r14
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3a1a:	80 2f       	mov	r24, r16
    3a1c:	01 13       	cpse	r16, r17
    3a1e:	f3 cf       	rjmp	.-26     	; 0x3a06 <vfprintf+0x370>
    3a20:	e6 cf       	rjmp	.-52     	; 0x39ee <vfprintf+0x358>
    3a22:	85 e4       	ldi	r24, 0x45	; 69
    3a24:	90 e0       	ldi	r25, 0x00	; 0
    3a26:	b7 01       	movw	r22, r14
    3a28:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3a2c:	d7 fc       	sbrc	r13, 7
    3a2e:	06 c0       	rjmp	.+12     	; 0x3a3c <vfprintf+0x3a6>
    3a30:	c1 14       	cp	r12, r1
    3a32:	d1 04       	cpc	r13, r1
    3a34:	41 f4       	brne	.+16     	; 0x3a46 <vfprintf+0x3b0>
    3a36:	ec 85       	ldd	r30, Y+12	; 0x0c
    3a38:	e4 ff       	sbrs	r30, 4
    3a3a:	05 c0       	rjmp	.+10     	; 0x3a46 <vfprintf+0x3b0>
    3a3c:	d1 94       	neg	r13
    3a3e:	c1 94       	neg	r12
    3a40:	d1 08       	sbc	r13, r1
    3a42:	8d e2       	ldi	r24, 0x2D	; 45
    3a44:	01 c0       	rjmp	.+2      	; 0x3a48 <vfprintf+0x3b2>
    3a46:	8b e2       	ldi	r24, 0x2B	; 43
    3a48:	b7 01       	movw	r22, r14
    3a4a:	90 e0       	ldi	r25, 0x00	; 0
    3a4c:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3a50:	80 e3       	ldi	r24, 0x30	; 48
    3a52:	2a e0       	ldi	r18, 0x0A	; 10
    3a54:	c2 16       	cp	r12, r18
    3a56:	d1 04       	cpc	r13, r1
    3a58:	2c f0       	brlt	.+10     	; 0x3a64 <vfprintf+0x3ce>
    3a5a:	8f 5f       	subi	r24, 0xFF	; 255
    3a5c:	fa e0       	ldi	r31, 0x0A	; 10
    3a5e:	cf 1a       	sub	r12, r31
    3a60:	d1 08       	sbc	r13, r1
    3a62:	f7 cf       	rjmp	.-18     	; 0x3a52 <vfprintf+0x3bc>
    3a64:	b7 01       	movw	r22, r14
    3a66:	90 e0       	ldi	r25, 0x00	; 0
    3a68:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3a6c:	b7 01       	movw	r22, r14
    3a6e:	c6 01       	movw	r24, r12
    3a70:	c0 96       	adiw	r24, 0x30	; 48
    3a72:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3a76:	54 c1       	rjmp	.+680    	; 0x3d20 <vfprintf+0x68a>
    3a78:	83 36       	cpi	r24, 0x63	; 99
    3a7a:	31 f0       	breq	.+12     	; 0x3a88 <vfprintf+0x3f2>
    3a7c:	83 37       	cpi	r24, 0x73	; 115
    3a7e:	79 f0       	breq	.+30     	; 0x3a9e <vfprintf+0x408>
    3a80:	83 35       	cpi	r24, 0x53	; 83
    3a82:	09 f0       	breq	.+2      	; 0x3a86 <vfprintf+0x3f0>
    3a84:	56 c0       	rjmp	.+172    	; 0x3b32 <vfprintf+0x49c>
    3a86:	20 c0       	rjmp	.+64     	; 0x3ac8 <vfprintf+0x432>
    3a88:	56 01       	movw	r10, r12
    3a8a:	32 e0       	ldi	r19, 0x02	; 2
    3a8c:	a3 0e       	add	r10, r19
    3a8e:	b1 1c       	adc	r11, r1
    3a90:	f6 01       	movw	r30, r12
    3a92:	80 81       	ld	r24, Z
    3a94:	89 83       	std	Y+1, r24	; 0x01
    3a96:	01 e0       	ldi	r16, 0x01	; 1
    3a98:	10 e0       	ldi	r17, 0x00	; 0
    3a9a:	63 01       	movw	r12, r6
    3a9c:	12 c0       	rjmp	.+36     	; 0x3ac2 <vfprintf+0x42c>
    3a9e:	56 01       	movw	r10, r12
    3aa0:	f2 e0       	ldi	r31, 0x02	; 2
    3aa2:	af 0e       	add	r10, r31
    3aa4:	b1 1c       	adc	r11, r1
    3aa6:	f6 01       	movw	r30, r12
    3aa8:	c0 80       	ld	r12, Z
    3aaa:	d1 80       	ldd	r13, Z+1	; 0x01
    3aac:	96 fe       	sbrs	r9, 6
    3aae:	03 c0       	rjmp	.+6      	; 0x3ab6 <vfprintf+0x420>
    3ab0:	61 2f       	mov	r22, r17
    3ab2:	70 e0       	ldi	r23, 0x00	; 0
    3ab4:	02 c0       	rjmp	.+4      	; 0x3aba <vfprintf+0x424>
    3ab6:	6f ef       	ldi	r22, 0xFF	; 255
    3ab8:	7f ef       	ldi	r23, 0xFF	; 255
    3aba:	c6 01       	movw	r24, r12
    3abc:	0e 94 19 21 	call	0x4232	; 0x4232 <strnlen>
    3ac0:	8c 01       	movw	r16, r24
    3ac2:	f9 2d       	mov	r31, r9
    3ac4:	ff 77       	andi	r31, 0x7F	; 127
    3ac6:	14 c0       	rjmp	.+40     	; 0x3af0 <vfprintf+0x45a>
    3ac8:	56 01       	movw	r10, r12
    3aca:	22 e0       	ldi	r18, 0x02	; 2
    3acc:	a2 0e       	add	r10, r18
    3ace:	b1 1c       	adc	r11, r1
    3ad0:	f6 01       	movw	r30, r12
    3ad2:	c0 80       	ld	r12, Z
    3ad4:	d1 80       	ldd	r13, Z+1	; 0x01
    3ad6:	96 fe       	sbrs	r9, 6
    3ad8:	03 c0       	rjmp	.+6      	; 0x3ae0 <vfprintf+0x44a>
    3ada:	61 2f       	mov	r22, r17
    3adc:	70 e0       	ldi	r23, 0x00	; 0
    3ade:	02 c0       	rjmp	.+4      	; 0x3ae4 <vfprintf+0x44e>
    3ae0:	6f ef       	ldi	r22, 0xFF	; 255
    3ae2:	7f ef       	ldi	r23, 0xFF	; 255
    3ae4:	c6 01       	movw	r24, r12
    3ae6:	0e 94 fe 20 	call	0x41fc	; 0x41fc <strnlen_P>
    3aea:	8c 01       	movw	r16, r24
    3aec:	f9 2d       	mov	r31, r9
    3aee:	f0 68       	ori	r31, 0x80	; 128
    3af0:	9f 2e       	mov	r9, r31
    3af2:	f3 fd       	sbrc	r31, 3
    3af4:	1a c0       	rjmp	.+52     	; 0x3b2a <vfprintf+0x494>
    3af6:	85 2d       	mov	r24, r5
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	08 17       	cp	r16, r24
    3afc:	19 07       	cpc	r17, r25
    3afe:	a8 f4       	brcc	.+42     	; 0x3b2a <vfprintf+0x494>
    3b00:	b7 01       	movw	r22, r14
    3b02:	80 e2       	ldi	r24, 0x20	; 32
    3b04:	90 e0       	ldi	r25, 0x00	; 0
    3b06:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3b0a:	5a 94       	dec	r5
    3b0c:	f4 cf       	rjmp	.-24     	; 0x3af6 <vfprintf+0x460>
    3b0e:	f6 01       	movw	r30, r12
    3b10:	97 fc       	sbrc	r9, 7
    3b12:	85 91       	lpm	r24, Z+
    3b14:	97 fe       	sbrs	r9, 7
    3b16:	81 91       	ld	r24, Z+
    3b18:	6f 01       	movw	r12, r30
    3b1a:	b7 01       	movw	r22, r14
    3b1c:	90 e0       	ldi	r25, 0x00	; 0
    3b1e:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3b22:	51 10       	cpse	r5, r1
    3b24:	5a 94       	dec	r5
    3b26:	01 50       	subi	r16, 0x01	; 1
    3b28:	11 09       	sbc	r17, r1
    3b2a:	01 15       	cp	r16, r1
    3b2c:	11 05       	cpc	r17, r1
    3b2e:	79 f7       	brne	.-34     	; 0x3b0e <vfprintf+0x478>
    3b30:	f7 c0       	rjmp	.+494    	; 0x3d20 <vfprintf+0x68a>
    3b32:	84 36       	cpi	r24, 0x64	; 100
    3b34:	11 f0       	breq	.+4      	; 0x3b3a <vfprintf+0x4a4>
    3b36:	89 36       	cpi	r24, 0x69	; 105
    3b38:	61 f5       	brne	.+88     	; 0x3b92 <vfprintf+0x4fc>
    3b3a:	56 01       	movw	r10, r12
    3b3c:	97 fe       	sbrs	r9, 7
    3b3e:	09 c0       	rjmp	.+18     	; 0x3b52 <vfprintf+0x4bc>
    3b40:	24 e0       	ldi	r18, 0x04	; 4
    3b42:	a2 0e       	add	r10, r18
    3b44:	b1 1c       	adc	r11, r1
    3b46:	f6 01       	movw	r30, r12
    3b48:	60 81       	ld	r22, Z
    3b4a:	71 81       	ldd	r23, Z+1	; 0x01
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	93 81       	ldd	r25, Z+3	; 0x03
    3b50:	0a c0       	rjmp	.+20     	; 0x3b66 <vfprintf+0x4d0>
    3b52:	f2 e0       	ldi	r31, 0x02	; 2
    3b54:	af 0e       	add	r10, r31
    3b56:	b1 1c       	adc	r11, r1
    3b58:	f6 01       	movw	r30, r12
    3b5a:	60 81       	ld	r22, Z
    3b5c:	71 81       	ldd	r23, Z+1	; 0x01
    3b5e:	07 2e       	mov	r0, r23
    3b60:	00 0c       	add	r0, r0
    3b62:	88 0b       	sbc	r24, r24
    3b64:	99 0b       	sbc	r25, r25
    3b66:	f9 2d       	mov	r31, r9
    3b68:	ff 76       	andi	r31, 0x6F	; 111
    3b6a:	9f 2e       	mov	r9, r31
    3b6c:	97 ff       	sbrs	r25, 7
    3b6e:	09 c0       	rjmp	.+18     	; 0x3b82 <vfprintf+0x4ec>
    3b70:	90 95       	com	r25
    3b72:	80 95       	com	r24
    3b74:	70 95       	com	r23
    3b76:	61 95       	neg	r22
    3b78:	7f 4f       	sbci	r23, 0xFF	; 255
    3b7a:	8f 4f       	sbci	r24, 0xFF	; 255
    3b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    3b7e:	f0 68       	ori	r31, 0x80	; 128
    3b80:	9f 2e       	mov	r9, r31
    3b82:	2a e0       	ldi	r18, 0x0A	; 10
    3b84:	30 e0       	ldi	r19, 0x00	; 0
    3b86:	a3 01       	movw	r20, r6
    3b88:	0e 94 82 21 	call	0x4304	; 0x4304 <__ultoa_invert>
    3b8c:	c8 2e       	mov	r12, r24
    3b8e:	c6 18       	sub	r12, r6
    3b90:	3f c0       	rjmp	.+126    	; 0x3c10 <vfprintf+0x57a>
    3b92:	09 2d       	mov	r16, r9
    3b94:	85 37       	cpi	r24, 0x75	; 117
    3b96:	21 f4       	brne	.+8      	; 0x3ba0 <vfprintf+0x50a>
    3b98:	0f 7e       	andi	r16, 0xEF	; 239
    3b9a:	2a e0       	ldi	r18, 0x0A	; 10
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	1d c0       	rjmp	.+58     	; 0x3bda <vfprintf+0x544>
    3ba0:	09 7f       	andi	r16, 0xF9	; 249
    3ba2:	8f 36       	cpi	r24, 0x6F	; 111
    3ba4:	91 f0       	breq	.+36     	; 0x3bca <vfprintf+0x534>
    3ba6:	18 f4       	brcc	.+6      	; 0x3bae <vfprintf+0x518>
    3ba8:	88 35       	cpi	r24, 0x58	; 88
    3baa:	59 f0       	breq	.+22     	; 0x3bc2 <vfprintf+0x52c>
    3bac:	c3 c0       	rjmp	.+390    	; 0x3d34 <vfprintf+0x69e>
    3bae:	80 37       	cpi	r24, 0x70	; 112
    3bb0:	19 f0       	breq	.+6      	; 0x3bb8 <vfprintf+0x522>
    3bb2:	88 37       	cpi	r24, 0x78	; 120
    3bb4:	11 f0       	breq	.+4      	; 0x3bba <vfprintf+0x524>
    3bb6:	be c0       	rjmp	.+380    	; 0x3d34 <vfprintf+0x69e>
    3bb8:	00 61       	ori	r16, 0x10	; 16
    3bba:	04 ff       	sbrs	r16, 4
    3bbc:	09 c0       	rjmp	.+18     	; 0x3bd0 <vfprintf+0x53a>
    3bbe:	04 60       	ori	r16, 0x04	; 4
    3bc0:	07 c0       	rjmp	.+14     	; 0x3bd0 <vfprintf+0x53a>
    3bc2:	94 fe       	sbrs	r9, 4
    3bc4:	08 c0       	rjmp	.+16     	; 0x3bd6 <vfprintf+0x540>
    3bc6:	06 60       	ori	r16, 0x06	; 6
    3bc8:	06 c0       	rjmp	.+12     	; 0x3bd6 <vfprintf+0x540>
    3bca:	28 e0       	ldi	r18, 0x08	; 8
    3bcc:	30 e0       	ldi	r19, 0x00	; 0
    3bce:	05 c0       	rjmp	.+10     	; 0x3bda <vfprintf+0x544>
    3bd0:	20 e1       	ldi	r18, 0x10	; 16
    3bd2:	30 e0       	ldi	r19, 0x00	; 0
    3bd4:	02 c0       	rjmp	.+4      	; 0x3bda <vfprintf+0x544>
    3bd6:	20 e1       	ldi	r18, 0x10	; 16
    3bd8:	32 e0       	ldi	r19, 0x02	; 2
    3bda:	56 01       	movw	r10, r12
    3bdc:	07 ff       	sbrs	r16, 7
    3bde:	09 c0       	rjmp	.+18     	; 0x3bf2 <vfprintf+0x55c>
    3be0:	84 e0       	ldi	r24, 0x04	; 4
    3be2:	a8 0e       	add	r10, r24
    3be4:	b1 1c       	adc	r11, r1
    3be6:	f6 01       	movw	r30, r12
    3be8:	60 81       	ld	r22, Z
    3bea:	71 81       	ldd	r23, Z+1	; 0x01
    3bec:	82 81       	ldd	r24, Z+2	; 0x02
    3bee:	93 81       	ldd	r25, Z+3	; 0x03
    3bf0:	08 c0       	rjmp	.+16     	; 0x3c02 <vfprintf+0x56c>
    3bf2:	f2 e0       	ldi	r31, 0x02	; 2
    3bf4:	af 0e       	add	r10, r31
    3bf6:	b1 1c       	adc	r11, r1
    3bf8:	f6 01       	movw	r30, r12
    3bfa:	60 81       	ld	r22, Z
    3bfc:	71 81       	ldd	r23, Z+1	; 0x01
    3bfe:	80 e0       	ldi	r24, 0x00	; 0
    3c00:	90 e0       	ldi	r25, 0x00	; 0
    3c02:	a3 01       	movw	r20, r6
    3c04:	0e 94 82 21 	call	0x4304	; 0x4304 <__ultoa_invert>
    3c08:	c8 2e       	mov	r12, r24
    3c0a:	c6 18       	sub	r12, r6
    3c0c:	0f 77       	andi	r16, 0x7F	; 127
    3c0e:	90 2e       	mov	r9, r16
    3c10:	96 fe       	sbrs	r9, 6
    3c12:	0b c0       	rjmp	.+22     	; 0x3c2a <vfprintf+0x594>
    3c14:	09 2d       	mov	r16, r9
    3c16:	0e 7f       	andi	r16, 0xFE	; 254
    3c18:	c1 16       	cp	r12, r17
    3c1a:	50 f4       	brcc	.+20     	; 0x3c30 <vfprintf+0x59a>
    3c1c:	94 fe       	sbrs	r9, 4
    3c1e:	0a c0       	rjmp	.+20     	; 0x3c34 <vfprintf+0x59e>
    3c20:	92 fc       	sbrc	r9, 2
    3c22:	08 c0       	rjmp	.+16     	; 0x3c34 <vfprintf+0x59e>
    3c24:	09 2d       	mov	r16, r9
    3c26:	0e 7e       	andi	r16, 0xEE	; 238
    3c28:	05 c0       	rjmp	.+10     	; 0x3c34 <vfprintf+0x59e>
    3c2a:	dc 2c       	mov	r13, r12
    3c2c:	09 2d       	mov	r16, r9
    3c2e:	03 c0       	rjmp	.+6      	; 0x3c36 <vfprintf+0x5a0>
    3c30:	dc 2c       	mov	r13, r12
    3c32:	01 c0       	rjmp	.+2      	; 0x3c36 <vfprintf+0x5a0>
    3c34:	d1 2e       	mov	r13, r17
    3c36:	04 ff       	sbrs	r16, 4
    3c38:	0d c0       	rjmp	.+26     	; 0x3c54 <vfprintf+0x5be>
    3c3a:	fe 01       	movw	r30, r28
    3c3c:	ec 0d       	add	r30, r12
    3c3e:	f1 1d       	adc	r31, r1
    3c40:	80 81       	ld	r24, Z
    3c42:	80 33       	cpi	r24, 0x30	; 48
    3c44:	11 f4       	brne	.+4      	; 0x3c4a <vfprintf+0x5b4>
    3c46:	09 7e       	andi	r16, 0xE9	; 233
    3c48:	09 c0       	rjmp	.+18     	; 0x3c5c <vfprintf+0x5c6>
    3c4a:	02 ff       	sbrs	r16, 2
    3c4c:	06 c0       	rjmp	.+12     	; 0x3c5a <vfprintf+0x5c4>
    3c4e:	d3 94       	inc	r13
    3c50:	d3 94       	inc	r13
    3c52:	04 c0       	rjmp	.+8      	; 0x3c5c <vfprintf+0x5c6>
    3c54:	80 2f       	mov	r24, r16
    3c56:	86 78       	andi	r24, 0x86	; 134
    3c58:	09 f0       	breq	.+2      	; 0x3c5c <vfprintf+0x5c6>
    3c5a:	d3 94       	inc	r13
    3c5c:	03 fd       	sbrc	r16, 3
    3c5e:	11 c0       	rjmp	.+34     	; 0x3c82 <vfprintf+0x5ec>
    3c60:	00 ff       	sbrs	r16, 0
    3c62:	06 c0       	rjmp	.+12     	; 0x3c70 <vfprintf+0x5da>
    3c64:	1c 2d       	mov	r17, r12
    3c66:	d5 14       	cp	r13, r5
    3c68:	80 f4       	brcc	.+32     	; 0x3c8a <vfprintf+0x5f4>
    3c6a:	15 0d       	add	r17, r5
    3c6c:	1d 19       	sub	r17, r13
    3c6e:	0d c0       	rjmp	.+26     	; 0x3c8a <vfprintf+0x5f4>
    3c70:	d5 14       	cp	r13, r5
    3c72:	58 f4       	brcc	.+22     	; 0x3c8a <vfprintf+0x5f4>
    3c74:	b7 01       	movw	r22, r14
    3c76:	80 e2       	ldi	r24, 0x20	; 32
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3c7e:	d3 94       	inc	r13
    3c80:	f7 cf       	rjmp	.-18     	; 0x3c70 <vfprintf+0x5da>
    3c82:	d5 14       	cp	r13, r5
    3c84:	10 f4       	brcc	.+4      	; 0x3c8a <vfprintf+0x5f4>
    3c86:	5d 18       	sub	r5, r13
    3c88:	01 c0       	rjmp	.+2      	; 0x3c8c <vfprintf+0x5f6>
    3c8a:	51 2c       	mov	r5, r1
    3c8c:	04 ff       	sbrs	r16, 4
    3c8e:	10 c0       	rjmp	.+32     	; 0x3cb0 <vfprintf+0x61a>
    3c90:	b7 01       	movw	r22, r14
    3c92:	80 e3       	ldi	r24, 0x30	; 48
    3c94:	90 e0       	ldi	r25, 0x00	; 0
    3c96:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3c9a:	02 ff       	sbrs	r16, 2
    3c9c:	17 c0       	rjmp	.+46     	; 0x3ccc <vfprintf+0x636>
    3c9e:	01 fd       	sbrc	r16, 1
    3ca0:	03 c0       	rjmp	.+6      	; 0x3ca8 <vfprintf+0x612>
    3ca2:	88 e7       	ldi	r24, 0x78	; 120
    3ca4:	90 e0       	ldi	r25, 0x00	; 0
    3ca6:	02 c0       	rjmp	.+4      	; 0x3cac <vfprintf+0x616>
    3ca8:	88 e5       	ldi	r24, 0x58	; 88
    3caa:	90 e0       	ldi	r25, 0x00	; 0
    3cac:	b7 01       	movw	r22, r14
    3cae:	0c c0       	rjmp	.+24     	; 0x3cc8 <vfprintf+0x632>
    3cb0:	80 2f       	mov	r24, r16
    3cb2:	86 78       	andi	r24, 0x86	; 134
    3cb4:	59 f0       	breq	.+22     	; 0x3ccc <vfprintf+0x636>
    3cb6:	01 ff       	sbrs	r16, 1
    3cb8:	02 c0       	rjmp	.+4      	; 0x3cbe <vfprintf+0x628>
    3cba:	8b e2       	ldi	r24, 0x2B	; 43
    3cbc:	01 c0       	rjmp	.+2      	; 0x3cc0 <vfprintf+0x62a>
    3cbe:	80 e2       	ldi	r24, 0x20	; 32
    3cc0:	07 fd       	sbrc	r16, 7
    3cc2:	8d e2       	ldi	r24, 0x2D	; 45
    3cc4:	b7 01       	movw	r22, r14
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3ccc:	c1 16       	cp	r12, r17
    3cce:	38 f4       	brcc	.+14     	; 0x3cde <vfprintf+0x648>
    3cd0:	b7 01       	movw	r22, r14
    3cd2:	80 e3       	ldi	r24, 0x30	; 48
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3cda:	11 50       	subi	r17, 0x01	; 1
    3cdc:	f7 cf       	rjmp	.-18     	; 0x3ccc <vfprintf+0x636>
    3cde:	ca 94       	dec	r12
    3ce0:	f3 01       	movw	r30, r6
    3ce2:	ec 0d       	add	r30, r12
    3ce4:	f1 1d       	adc	r31, r1
    3ce6:	80 81       	ld	r24, Z
    3ce8:	b7 01       	movw	r22, r14
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3cf0:	c1 10       	cpse	r12, r1
    3cf2:	f5 cf       	rjmp	.-22     	; 0x3cde <vfprintf+0x648>
    3cf4:	15 c0       	rjmp	.+42     	; 0x3d20 <vfprintf+0x68a>
    3cf6:	f4 e0       	ldi	r31, 0x04	; 4
    3cf8:	f5 15       	cp	r31, r5
    3cfa:	60 f5       	brcc	.+88     	; 0x3d54 <vfprintf+0x6be>
    3cfc:	84 e0       	ldi	r24, 0x04	; 4
    3cfe:	58 1a       	sub	r5, r24
    3d00:	93 fe       	sbrs	r9, 3
    3d02:	1f c0       	rjmp	.+62     	; 0x3d42 <vfprintf+0x6ac>
    3d04:	01 11       	cpse	r16, r1
    3d06:	27 c0       	rjmp	.+78     	; 0x3d56 <vfprintf+0x6c0>
    3d08:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d0a:	23 ff       	sbrs	r18, 3
    3d0c:	2a c0       	rjmp	.+84     	; 0x3d62 <vfprintf+0x6cc>
    3d0e:	06 ee       	ldi	r16, 0xE6	; 230
    3d10:	10 e0       	ldi	r17, 0x00	; 0
    3d12:	39 2d       	mov	r19, r9
    3d14:	30 71       	andi	r19, 0x10	; 16
    3d16:	93 2e       	mov	r9, r19
    3d18:	f8 01       	movw	r30, r16
    3d1a:	84 91       	lpm	r24, Z
    3d1c:	81 11       	cpse	r24, r1
    3d1e:	24 c0       	rjmp	.+72     	; 0x3d68 <vfprintf+0x6d2>
    3d20:	55 20       	and	r5, r5
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <vfprintf+0x690>
    3d24:	e4 cc       	rjmp	.-1592   	; 0x36ee <vfprintf+0x58>
    3d26:	b7 01       	movw	r22, r14
    3d28:	80 e2       	ldi	r24, 0x20	; 32
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3d30:	5a 94       	dec	r5
    3d32:	f6 cf       	rjmp	.-20     	; 0x3d20 <vfprintf+0x68a>
    3d34:	f7 01       	movw	r30, r14
    3d36:	86 81       	ldd	r24, Z+6	; 0x06
    3d38:	97 81       	ldd	r25, Z+7	; 0x07
    3d3a:	26 c0       	rjmp	.+76     	; 0x3d88 <vfprintf+0x6f2>
    3d3c:	8f ef       	ldi	r24, 0xFF	; 255
    3d3e:	9f ef       	ldi	r25, 0xFF	; 255
    3d40:	23 c0       	rjmp	.+70     	; 0x3d88 <vfprintf+0x6f2>
    3d42:	b7 01       	movw	r22, r14
    3d44:	80 e2       	ldi	r24, 0x20	; 32
    3d46:	90 e0       	ldi	r25, 0x00	; 0
    3d48:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3d4c:	5a 94       	dec	r5
    3d4e:	51 10       	cpse	r5, r1
    3d50:	f8 cf       	rjmp	.-16     	; 0x3d42 <vfprintf+0x6ac>
    3d52:	d8 cf       	rjmp	.-80     	; 0x3d04 <vfprintf+0x66e>
    3d54:	51 2c       	mov	r5, r1
    3d56:	b7 01       	movw	r22, r14
    3d58:	80 2f       	mov	r24, r16
    3d5a:	90 e0       	ldi	r25, 0x00	; 0
    3d5c:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3d60:	d3 cf       	rjmp	.-90     	; 0x3d08 <vfprintf+0x672>
    3d62:	0a ee       	ldi	r16, 0xEA	; 234
    3d64:	10 e0       	ldi	r17, 0x00	; 0
    3d66:	d5 cf       	rjmp	.-86     	; 0x3d12 <vfprintf+0x67c>
    3d68:	91 10       	cpse	r9, r1
    3d6a:	80 52       	subi	r24, 0x20	; 32
    3d6c:	b7 01       	movw	r22, r14
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	0e 94 24 21 	call	0x4248	; 0x4248 <fputc>
    3d74:	0f 5f       	subi	r16, 0xFF	; 255
    3d76:	1f 4f       	sbci	r17, 0xFF	; 255
    3d78:	cf cf       	rjmp	.-98     	; 0x3d18 <vfprintf+0x682>
    3d7a:	23 e0       	ldi	r18, 0x03	; 3
    3d7c:	25 15       	cp	r18, r5
    3d7e:	10 f4       	brcc	.+4      	; 0x3d84 <vfprintf+0x6ee>
    3d80:	83 e0       	ldi	r24, 0x03	; 3
    3d82:	bd cf       	rjmp	.-134    	; 0x3cfe <vfprintf+0x668>
    3d84:	51 2c       	mov	r5, r1
    3d86:	c0 cf       	rjmp	.-128    	; 0x3d08 <vfprintf+0x672>
    3d88:	60 96       	adiw	r28, 0x10	; 16
    3d8a:	e2 e1       	ldi	r30, 0x12	; 18
    3d8c:	0c 94 ea 1e 	jmp	0x3dd4	; 0x3dd4 <__epilogue_restores__>

00003d90 <__tablejump2__>:
    3d90:	ee 0f       	add	r30, r30
    3d92:	ff 1f       	adc	r31, r31
    3d94:	05 90       	lpm	r0, Z+
    3d96:	f4 91       	lpm	r31, Z
    3d98:	e0 2d       	mov	r30, r0
    3d9a:	09 94       	ijmp

00003d9c <__prologue_saves__>:
    3d9c:	2f 92       	push	r2
    3d9e:	3f 92       	push	r3
    3da0:	4f 92       	push	r4
    3da2:	5f 92       	push	r5
    3da4:	6f 92       	push	r6
    3da6:	7f 92       	push	r7
    3da8:	8f 92       	push	r8
    3daa:	9f 92       	push	r9
    3dac:	af 92       	push	r10
    3dae:	bf 92       	push	r11
    3db0:	cf 92       	push	r12
    3db2:	df 92       	push	r13
    3db4:	ef 92       	push	r14
    3db6:	ff 92       	push	r15
    3db8:	0f 93       	push	r16
    3dba:	1f 93       	push	r17
    3dbc:	cf 93       	push	r28
    3dbe:	df 93       	push	r29
    3dc0:	cd b7       	in	r28, 0x3d	; 61
    3dc2:	de b7       	in	r29, 0x3e	; 62
    3dc4:	ca 1b       	sub	r28, r26
    3dc6:	db 0b       	sbc	r29, r27
    3dc8:	0f b6       	in	r0, 0x3f	; 63
    3dca:	f8 94       	cli
    3dcc:	de bf       	out	0x3e, r29	; 62
    3dce:	0f be       	out	0x3f, r0	; 63
    3dd0:	cd bf       	out	0x3d, r28	; 61
    3dd2:	09 94       	ijmp

00003dd4 <__epilogue_restores__>:
    3dd4:	2a 88       	ldd	r2, Y+18	; 0x12
    3dd6:	39 88       	ldd	r3, Y+17	; 0x11
    3dd8:	48 88       	ldd	r4, Y+16	; 0x10
    3dda:	5f 84       	ldd	r5, Y+15	; 0x0f
    3ddc:	6e 84       	ldd	r6, Y+14	; 0x0e
    3dde:	7d 84       	ldd	r7, Y+13	; 0x0d
    3de0:	8c 84       	ldd	r8, Y+12	; 0x0c
    3de2:	9b 84       	ldd	r9, Y+11	; 0x0b
    3de4:	aa 84       	ldd	r10, Y+10	; 0x0a
    3de6:	b9 84       	ldd	r11, Y+9	; 0x09
    3de8:	c8 84       	ldd	r12, Y+8	; 0x08
    3dea:	df 80       	ldd	r13, Y+7	; 0x07
    3dec:	ee 80       	ldd	r14, Y+6	; 0x06
    3dee:	fd 80       	ldd	r15, Y+5	; 0x05
    3df0:	0c 81       	ldd	r16, Y+4	; 0x04
    3df2:	1b 81       	ldd	r17, Y+3	; 0x03
    3df4:	aa 81       	ldd	r26, Y+2	; 0x02
    3df6:	b9 81       	ldd	r27, Y+1	; 0x01
    3df8:	ce 0f       	add	r28, r30
    3dfa:	d1 1d       	adc	r29, r1
    3dfc:	0f b6       	in	r0, 0x3f	; 63
    3dfe:	f8 94       	cli
    3e00:	de bf       	out	0x3e, r29	; 62
    3e02:	0f be       	out	0x3f, r0	; 63
    3e04:	cd bf       	out	0x3d, r28	; 61
    3e06:	ed 01       	movw	r28, r26
    3e08:	08 95       	ret

00003e0a <malloc>:
    3e0a:	0f 93       	push	r16
    3e0c:	1f 93       	push	r17
    3e0e:	cf 93       	push	r28
    3e10:	df 93       	push	r29
    3e12:	82 30       	cpi	r24, 0x02	; 2
    3e14:	91 05       	cpc	r25, r1
    3e16:	10 f4       	brcc	.+4      	; 0x3e1c <malloc+0x12>
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	e0 91 57 02 	lds	r30, 0x0257	; 0x800257 <__flp>
    3e20:	f0 91 58 02 	lds	r31, 0x0258	; 0x800258 <__flp+0x1>
    3e24:	20 e0       	ldi	r18, 0x00	; 0
    3e26:	30 e0       	ldi	r19, 0x00	; 0
    3e28:	a0 e0       	ldi	r26, 0x00	; 0
    3e2a:	b0 e0       	ldi	r27, 0x00	; 0
    3e2c:	30 97       	sbiw	r30, 0x00	; 0
    3e2e:	19 f1       	breq	.+70     	; 0x3e76 <malloc+0x6c>
    3e30:	40 81       	ld	r20, Z
    3e32:	51 81       	ldd	r21, Z+1	; 0x01
    3e34:	02 81       	ldd	r16, Z+2	; 0x02
    3e36:	13 81       	ldd	r17, Z+3	; 0x03
    3e38:	48 17       	cp	r20, r24
    3e3a:	59 07       	cpc	r21, r25
    3e3c:	c8 f0       	brcs	.+50     	; 0x3e70 <malloc+0x66>
    3e3e:	84 17       	cp	r24, r20
    3e40:	95 07       	cpc	r25, r21
    3e42:	69 f4       	brne	.+26     	; 0x3e5e <malloc+0x54>
    3e44:	10 97       	sbiw	r26, 0x00	; 0
    3e46:	31 f0       	breq	.+12     	; 0x3e54 <malloc+0x4a>
    3e48:	12 96       	adiw	r26, 0x02	; 2
    3e4a:	0c 93       	st	X, r16
    3e4c:	12 97       	sbiw	r26, 0x02	; 2
    3e4e:	13 96       	adiw	r26, 0x03	; 3
    3e50:	1c 93       	st	X, r17
    3e52:	27 c0       	rjmp	.+78     	; 0x3ea2 <malloc+0x98>
    3e54:	00 93 57 02 	sts	0x0257, r16	; 0x800257 <__flp>
    3e58:	10 93 58 02 	sts	0x0258, r17	; 0x800258 <__flp+0x1>
    3e5c:	22 c0       	rjmp	.+68     	; 0x3ea2 <malloc+0x98>
    3e5e:	21 15       	cp	r18, r1
    3e60:	31 05       	cpc	r19, r1
    3e62:	19 f0       	breq	.+6      	; 0x3e6a <malloc+0x60>
    3e64:	42 17       	cp	r20, r18
    3e66:	53 07       	cpc	r21, r19
    3e68:	18 f4       	brcc	.+6      	; 0x3e70 <malloc+0x66>
    3e6a:	9a 01       	movw	r18, r20
    3e6c:	bd 01       	movw	r22, r26
    3e6e:	ef 01       	movw	r28, r30
    3e70:	df 01       	movw	r26, r30
    3e72:	f8 01       	movw	r30, r16
    3e74:	db cf       	rjmp	.-74     	; 0x3e2c <malloc+0x22>
    3e76:	21 15       	cp	r18, r1
    3e78:	31 05       	cpc	r19, r1
    3e7a:	f9 f0       	breq	.+62     	; 0x3eba <malloc+0xb0>
    3e7c:	28 1b       	sub	r18, r24
    3e7e:	39 0b       	sbc	r19, r25
    3e80:	24 30       	cpi	r18, 0x04	; 4
    3e82:	31 05       	cpc	r19, r1
    3e84:	80 f4       	brcc	.+32     	; 0x3ea6 <malloc+0x9c>
    3e86:	8a 81       	ldd	r24, Y+2	; 0x02
    3e88:	9b 81       	ldd	r25, Y+3	; 0x03
    3e8a:	61 15       	cp	r22, r1
    3e8c:	71 05       	cpc	r23, r1
    3e8e:	21 f0       	breq	.+8      	; 0x3e98 <malloc+0x8e>
    3e90:	fb 01       	movw	r30, r22
    3e92:	93 83       	std	Z+3, r25	; 0x03
    3e94:	82 83       	std	Z+2, r24	; 0x02
    3e96:	04 c0       	rjmp	.+8      	; 0x3ea0 <malloc+0x96>
    3e98:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <__flp+0x1>
    3e9c:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <__flp>
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	32 96       	adiw	r30, 0x02	; 2
    3ea4:	44 c0       	rjmp	.+136    	; 0x3f2e <malloc+0x124>
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	e2 0f       	add	r30, r18
    3eaa:	f3 1f       	adc	r31, r19
    3eac:	81 93       	st	Z+, r24
    3eae:	91 93       	st	Z+, r25
    3eb0:	22 50       	subi	r18, 0x02	; 2
    3eb2:	31 09       	sbc	r19, r1
    3eb4:	39 83       	std	Y+1, r19	; 0x01
    3eb6:	28 83       	st	Y, r18
    3eb8:	3a c0       	rjmp	.+116    	; 0x3f2e <malloc+0x124>
    3eba:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__brkval>
    3ebe:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__brkval+0x1>
    3ec2:	23 2b       	or	r18, r19
    3ec4:	41 f4       	brne	.+16     	; 0x3ed6 <malloc+0xcc>
    3ec6:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3eca:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3ece:	30 93 56 02 	sts	0x0256, r19	; 0x800256 <__brkval+0x1>
    3ed2:	20 93 55 02 	sts	0x0255, r18	; 0x800255 <__brkval>
    3ed6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3eda:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3ede:	21 15       	cp	r18, r1
    3ee0:	31 05       	cpc	r19, r1
    3ee2:	41 f4       	brne	.+16     	; 0x3ef4 <malloc+0xea>
    3ee4:	2d b7       	in	r18, 0x3d	; 61
    3ee6:	3e b7       	in	r19, 0x3e	; 62
    3ee8:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3eec:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3ef0:	24 1b       	sub	r18, r20
    3ef2:	35 0b       	sbc	r19, r21
    3ef4:	e0 91 55 02 	lds	r30, 0x0255	; 0x800255 <__brkval>
    3ef8:	f0 91 56 02 	lds	r31, 0x0256	; 0x800256 <__brkval+0x1>
    3efc:	e2 17       	cp	r30, r18
    3efe:	f3 07       	cpc	r31, r19
    3f00:	a0 f4       	brcc	.+40     	; 0x3f2a <malloc+0x120>
    3f02:	2e 1b       	sub	r18, r30
    3f04:	3f 0b       	sbc	r19, r31
    3f06:	28 17       	cp	r18, r24
    3f08:	39 07       	cpc	r19, r25
    3f0a:	78 f0       	brcs	.+30     	; 0x3f2a <malloc+0x120>
    3f0c:	ac 01       	movw	r20, r24
    3f0e:	4e 5f       	subi	r20, 0xFE	; 254
    3f10:	5f 4f       	sbci	r21, 0xFF	; 255
    3f12:	24 17       	cp	r18, r20
    3f14:	35 07       	cpc	r19, r21
    3f16:	48 f0       	brcs	.+18     	; 0x3f2a <malloc+0x120>
    3f18:	4e 0f       	add	r20, r30
    3f1a:	5f 1f       	adc	r21, r31
    3f1c:	50 93 56 02 	sts	0x0256, r21	; 0x800256 <__brkval+0x1>
    3f20:	40 93 55 02 	sts	0x0255, r20	; 0x800255 <__brkval>
    3f24:	81 93       	st	Z+, r24
    3f26:	91 93       	st	Z+, r25
    3f28:	02 c0       	rjmp	.+4      	; 0x3f2e <malloc+0x124>
    3f2a:	e0 e0       	ldi	r30, 0x00	; 0
    3f2c:	f0 e0       	ldi	r31, 0x00	; 0
    3f2e:	cf 01       	movw	r24, r30
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	1f 91       	pop	r17
    3f36:	0f 91       	pop	r16
    3f38:	08 95       	ret

00003f3a <free>:
    3f3a:	cf 93       	push	r28
    3f3c:	df 93       	push	r29
    3f3e:	00 97       	sbiw	r24, 0x00	; 0
    3f40:	09 f4       	brne	.+2      	; 0x3f44 <free+0xa>
    3f42:	81 c0       	rjmp	.+258    	; 0x4046 <free+0x10c>
    3f44:	fc 01       	movw	r30, r24
    3f46:	32 97       	sbiw	r30, 0x02	; 2
    3f48:	13 82       	std	Z+3, r1	; 0x03
    3f4a:	12 82       	std	Z+2, r1	; 0x02
    3f4c:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <__flp>
    3f50:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <__flp+0x1>
    3f54:	10 97       	sbiw	r26, 0x00	; 0
    3f56:	81 f4       	brne	.+32     	; 0x3f78 <free+0x3e>
    3f58:	20 81       	ld	r18, Z
    3f5a:	31 81       	ldd	r19, Z+1	; 0x01
    3f5c:	82 0f       	add	r24, r18
    3f5e:	93 1f       	adc	r25, r19
    3f60:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__brkval>
    3f64:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__brkval+0x1>
    3f68:	28 17       	cp	r18, r24
    3f6a:	39 07       	cpc	r19, r25
    3f6c:	51 f5       	brne	.+84     	; 0x3fc2 <free+0x88>
    3f6e:	f0 93 56 02 	sts	0x0256, r31	; 0x800256 <__brkval+0x1>
    3f72:	e0 93 55 02 	sts	0x0255, r30	; 0x800255 <__brkval>
    3f76:	67 c0       	rjmp	.+206    	; 0x4046 <free+0x10c>
    3f78:	ed 01       	movw	r28, r26
    3f7a:	20 e0       	ldi	r18, 0x00	; 0
    3f7c:	30 e0       	ldi	r19, 0x00	; 0
    3f7e:	ce 17       	cp	r28, r30
    3f80:	df 07       	cpc	r29, r31
    3f82:	40 f4       	brcc	.+16     	; 0x3f94 <free+0x5a>
    3f84:	4a 81       	ldd	r20, Y+2	; 0x02
    3f86:	5b 81       	ldd	r21, Y+3	; 0x03
    3f88:	9e 01       	movw	r18, r28
    3f8a:	41 15       	cp	r20, r1
    3f8c:	51 05       	cpc	r21, r1
    3f8e:	f1 f0       	breq	.+60     	; 0x3fcc <free+0x92>
    3f90:	ea 01       	movw	r28, r20
    3f92:	f5 cf       	rjmp	.-22     	; 0x3f7e <free+0x44>
    3f94:	d3 83       	std	Z+3, r29	; 0x03
    3f96:	c2 83       	std	Z+2, r28	; 0x02
    3f98:	40 81       	ld	r20, Z
    3f9a:	51 81       	ldd	r21, Z+1	; 0x01
    3f9c:	84 0f       	add	r24, r20
    3f9e:	95 1f       	adc	r25, r21
    3fa0:	c8 17       	cp	r28, r24
    3fa2:	d9 07       	cpc	r29, r25
    3fa4:	59 f4       	brne	.+22     	; 0x3fbc <free+0x82>
    3fa6:	88 81       	ld	r24, Y
    3fa8:	99 81       	ldd	r25, Y+1	; 0x01
    3faa:	84 0f       	add	r24, r20
    3fac:	95 1f       	adc	r25, r21
    3fae:	02 96       	adiw	r24, 0x02	; 2
    3fb0:	91 83       	std	Z+1, r25	; 0x01
    3fb2:	80 83       	st	Z, r24
    3fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    3fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    3fb8:	93 83       	std	Z+3, r25	; 0x03
    3fba:	82 83       	std	Z+2, r24	; 0x02
    3fbc:	21 15       	cp	r18, r1
    3fbe:	31 05       	cpc	r19, r1
    3fc0:	29 f4       	brne	.+10     	; 0x3fcc <free+0x92>
    3fc2:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <__flp+0x1>
    3fc6:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <__flp>
    3fca:	3d c0       	rjmp	.+122    	; 0x4046 <free+0x10c>
    3fcc:	e9 01       	movw	r28, r18
    3fce:	fb 83       	std	Y+3, r31	; 0x03
    3fd0:	ea 83       	std	Y+2, r30	; 0x02
    3fd2:	49 91       	ld	r20, Y+
    3fd4:	59 91       	ld	r21, Y+
    3fd6:	c4 0f       	add	r28, r20
    3fd8:	d5 1f       	adc	r29, r21
    3fda:	ec 17       	cp	r30, r28
    3fdc:	fd 07       	cpc	r31, r29
    3fde:	61 f4       	brne	.+24     	; 0x3ff8 <free+0xbe>
    3fe0:	80 81       	ld	r24, Z
    3fe2:	91 81       	ldd	r25, Z+1	; 0x01
    3fe4:	84 0f       	add	r24, r20
    3fe6:	95 1f       	adc	r25, r21
    3fe8:	02 96       	adiw	r24, 0x02	; 2
    3fea:	e9 01       	movw	r28, r18
    3fec:	99 83       	std	Y+1, r25	; 0x01
    3fee:	88 83       	st	Y, r24
    3ff0:	82 81       	ldd	r24, Z+2	; 0x02
    3ff2:	93 81       	ldd	r25, Z+3	; 0x03
    3ff4:	9b 83       	std	Y+3, r25	; 0x03
    3ff6:	8a 83       	std	Y+2, r24	; 0x02
    3ff8:	e0 e0       	ldi	r30, 0x00	; 0
    3ffa:	f0 e0       	ldi	r31, 0x00	; 0
    3ffc:	12 96       	adiw	r26, 0x02	; 2
    3ffe:	8d 91       	ld	r24, X+
    4000:	9c 91       	ld	r25, X
    4002:	13 97       	sbiw	r26, 0x03	; 3
    4004:	00 97       	sbiw	r24, 0x00	; 0
    4006:	19 f0       	breq	.+6      	; 0x400e <free+0xd4>
    4008:	fd 01       	movw	r30, r26
    400a:	dc 01       	movw	r26, r24
    400c:	f7 cf       	rjmp	.-18     	; 0x3ffc <free+0xc2>
    400e:	8d 91       	ld	r24, X+
    4010:	9c 91       	ld	r25, X
    4012:	11 97       	sbiw	r26, 0x01	; 1
    4014:	9d 01       	movw	r18, r26
    4016:	2e 5f       	subi	r18, 0xFE	; 254
    4018:	3f 4f       	sbci	r19, 0xFF	; 255
    401a:	82 0f       	add	r24, r18
    401c:	93 1f       	adc	r25, r19
    401e:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <__brkval>
    4022:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <__brkval+0x1>
    4026:	28 17       	cp	r18, r24
    4028:	39 07       	cpc	r19, r25
    402a:	69 f4       	brne	.+26     	; 0x4046 <free+0x10c>
    402c:	30 97       	sbiw	r30, 0x00	; 0
    402e:	29 f4       	brne	.+10     	; 0x403a <free+0x100>
    4030:	10 92 58 02 	sts	0x0258, r1	; 0x800258 <__flp+0x1>
    4034:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <__flp>
    4038:	02 c0       	rjmp	.+4      	; 0x403e <free+0x104>
    403a:	13 82       	std	Z+3, r1	; 0x03
    403c:	12 82       	std	Z+2, r1	; 0x02
    403e:	b0 93 56 02 	sts	0x0256, r27	; 0x800256 <__brkval+0x1>
    4042:	a0 93 55 02 	sts	0x0255, r26	; 0x800255 <__brkval>
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	08 95       	ret

0000404c <__ftoa_engine>:
    404c:	28 30       	cpi	r18, 0x08	; 8
    404e:	08 f0       	brcs	.+2      	; 0x4052 <__ftoa_engine+0x6>
    4050:	27 e0       	ldi	r18, 0x07	; 7
    4052:	33 27       	eor	r19, r19
    4054:	da 01       	movw	r26, r20
    4056:	99 0f       	add	r25, r25
    4058:	31 1d       	adc	r19, r1
    405a:	87 fd       	sbrc	r24, 7
    405c:	91 60       	ori	r25, 0x01	; 1
    405e:	00 96       	adiw	r24, 0x00	; 0
    4060:	61 05       	cpc	r22, r1
    4062:	71 05       	cpc	r23, r1
    4064:	39 f4       	brne	.+14     	; 0x4074 <__ftoa_engine+0x28>
    4066:	32 60       	ori	r19, 0x02	; 2
    4068:	2e 5f       	subi	r18, 0xFE	; 254
    406a:	3d 93       	st	X+, r19
    406c:	30 e3       	ldi	r19, 0x30	; 48
    406e:	2a 95       	dec	r18
    4070:	e1 f7       	brne	.-8      	; 0x406a <__ftoa_engine+0x1e>
    4072:	08 95       	ret
    4074:	9f 3f       	cpi	r25, 0xFF	; 255
    4076:	30 f0       	brcs	.+12     	; 0x4084 <__ftoa_engine+0x38>
    4078:	80 38       	cpi	r24, 0x80	; 128
    407a:	71 05       	cpc	r23, r1
    407c:	61 05       	cpc	r22, r1
    407e:	09 f0       	breq	.+2      	; 0x4082 <__ftoa_engine+0x36>
    4080:	3c 5f       	subi	r19, 0xFC	; 252
    4082:	3c 5f       	subi	r19, 0xFC	; 252
    4084:	3d 93       	st	X+, r19
    4086:	91 30       	cpi	r25, 0x01	; 1
    4088:	08 f0       	brcs	.+2      	; 0x408c <__ftoa_engine+0x40>
    408a:	80 68       	ori	r24, 0x80	; 128
    408c:	91 1d       	adc	r25, r1
    408e:	df 93       	push	r29
    4090:	cf 93       	push	r28
    4092:	1f 93       	push	r17
    4094:	0f 93       	push	r16
    4096:	ff 92       	push	r15
    4098:	ef 92       	push	r14
    409a:	19 2f       	mov	r17, r25
    409c:	98 7f       	andi	r25, 0xF8	; 248
    409e:	96 95       	lsr	r25
    40a0:	e9 2f       	mov	r30, r25
    40a2:	96 95       	lsr	r25
    40a4:	96 95       	lsr	r25
    40a6:	e9 0f       	add	r30, r25
    40a8:	ff 27       	eor	r31, r31
    40aa:	e8 5b       	subi	r30, 0xB8	; 184
    40ac:	fe 4f       	sbci	r31, 0xFE	; 254
    40ae:	99 27       	eor	r25, r25
    40b0:	33 27       	eor	r19, r19
    40b2:	ee 24       	eor	r14, r14
    40b4:	ff 24       	eor	r15, r15
    40b6:	a7 01       	movw	r20, r14
    40b8:	e7 01       	movw	r28, r14
    40ba:	05 90       	lpm	r0, Z+
    40bc:	08 94       	sec
    40be:	07 94       	ror	r0
    40c0:	28 f4       	brcc	.+10     	; 0x40cc <__ftoa_engine+0x80>
    40c2:	36 0f       	add	r19, r22
    40c4:	e7 1e       	adc	r14, r23
    40c6:	f8 1e       	adc	r15, r24
    40c8:	49 1f       	adc	r20, r25
    40ca:	51 1d       	adc	r21, r1
    40cc:	66 0f       	add	r22, r22
    40ce:	77 1f       	adc	r23, r23
    40d0:	88 1f       	adc	r24, r24
    40d2:	99 1f       	adc	r25, r25
    40d4:	06 94       	lsr	r0
    40d6:	a1 f7       	brne	.-24     	; 0x40c0 <__ftoa_engine+0x74>
    40d8:	05 90       	lpm	r0, Z+
    40da:	07 94       	ror	r0
    40dc:	28 f4       	brcc	.+10     	; 0x40e8 <__ftoa_engine+0x9c>
    40de:	e7 0e       	add	r14, r23
    40e0:	f8 1e       	adc	r15, r24
    40e2:	49 1f       	adc	r20, r25
    40e4:	56 1f       	adc	r21, r22
    40e6:	c1 1d       	adc	r28, r1
    40e8:	77 0f       	add	r23, r23
    40ea:	88 1f       	adc	r24, r24
    40ec:	99 1f       	adc	r25, r25
    40ee:	66 1f       	adc	r22, r22
    40f0:	06 94       	lsr	r0
    40f2:	a1 f7       	brne	.-24     	; 0x40dc <__ftoa_engine+0x90>
    40f4:	05 90       	lpm	r0, Z+
    40f6:	07 94       	ror	r0
    40f8:	28 f4       	brcc	.+10     	; 0x4104 <__ftoa_engine+0xb8>
    40fa:	f8 0e       	add	r15, r24
    40fc:	49 1f       	adc	r20, r25
    40fe:	56 1f       	adc	r21, r22
    4100:	c7 1f       	adc	r28, r23
    4102:	d1 1d       	adc	r29, r1
    4104:	88 0f       	add	r24, r24
    4106:	99 1f       	adc	r25, r25
    4108:	66 1f       	adc	r22, r22
    410a:	77 1f       	adc	r23, r23
    410c:	06 94       	lsr	r0
    410e:	a1 f7       	brne	.-24     	; 0x40f8 <__ftoa_engine+0xac>
    4110:	05 90       	lpm	r0, Z+
    4112:	07 94       	ror	r0
    4114:	20 f4       	brcc	.+8      	; 0x411e <__ftoa_engine+0xd2>
    4116:	49 0f       	add	r20, r25
    4118:	56 1f       	adc	r21, r22
    411a:	c7 1f       	adc	r28, r23
    411c:	d8 1f       	adc	r29, r24
    411e:	99 0f       	add	r25, r25
    4120:	66 1f       	adc	r22, r22
    4122:	77 1f       	adc	r23, r23
    4124:	88 1f       	adc	r24, r24
    4126:	06 94       	lsr	r0
    4128:	a9 f7       	brne	.-22     	; 0x4114 <__ftoa_engine+0xc8>
    412a:	84 91       	lpm	r24, Z
    412c:	10 95       	com	r17
    412e:	17 70       	andi	r17, 0x07	; 7
    4130:	41 f0       	breq	.+16     	; 0x4142 <__ftoa_engine+0xf6>
    4132:	d6 95       	lsr	r29
    4134:	c7 95       	ror	r28
    4136:	57 95       	ror	r21
    4138:	47 95       	ror	r20
    413a:	f7 94       	ror	r15
    413c:	e7 94       	ror	r14
    413e:	1a 95       	dec	r17
    4140:	c1 f7       	brne	.-16     	; 0x4132 <__ftoa_engine+0xe6>
    4142:	ee ee       	ldi	r30, 0xEE	; 238
    4144:	f0 e0       	ldi	r31, 0x00	; 0
    4146:	68 94       	set
    4148:	15 90       	lpm	r1, Z+
    414a:	15 91       	lpm	r17, Z+
    414c:	35 91       	lpm	r19, Z+
    414e:	65 91       	lpm	r22, Z+
    4150:	95 91       	lpm	r25, Z+
    4152:	05 90       	lpm	r0, Z+
    4154:	7f e2       	ldi	r23, 0x2F	; 47
    4156:	73 95       	inc	r23
    4158:	e1 18       	sub	r14, r1
    415a:	f1 0a       	sbc	r15, r17
    415c:	43 0b       	sbc	r20, r19
    415e:	56 0b       	sbc	r21, r22
    4160:	c9 0b       	sbc	r28, r25
    4162:	d0 09       	sbc	r29, r0
    4164:	c0 f7       	brcc	.-16     	; 0x4156 <__ftoa_engine+0x10a>
    4166:	e1 0c       	add	r14, r1
    4168:	f1 1e       	adc	r15, r17
    416a:	43 1f       	adc	r20, r19
    416c:	56 1f       	adc	r21, r22
    416e:	c9 1f       	adc	r28, r25
    4170:	d0 1d       	adc	r29, r0
    4172:	7e f4       	brtc	.+30     	; 0x4192 <__ftoa_engine+0x146>
    4174:	70 33       	cpi	r23, 0x30	; 48
    4176:	11 f4       	brne	.+4      	; 0x417c <__ftoa_engine+0x130>
    4178:	8a 95       	dec	r24
    417a:	e6 cf       	rjmp	.-52     	; 0x4148 <__ftoa_engine+0xfc>
    417c:	e8 94       	clt
    417e:	01 50       	subi	r16, 0x01	; 1
    4180:	30 f0       	brcs	.+12     	; 0x418e <__ftoa_engine+0x142>
    4182:	08 0f       	add	r16, r24
    4184:	0a f4       	brpl	.+2      	; 0x4188 <__ftoa_engine+0x13c>
    4186:	00 27       	eor	r16, r16
    4188:	02 17       	cp	r16, r18
    418a:	08 f4       	brcc	.+2      	; 0x418e <__ftoa_engine+0x142>
    418c:	20 2f       	mov	r18, r16
    418e:	23 95       	inc	r18
    4190:	02 2f       	mov	r16, r18
    4192:	7a 33       	cpi	r23, 0x3A	; 58
    4194:	28 f0       	brcs	.+10     	; 0x41a0 <__ftoa_engine+0x154>
    4196:	79 e3       	ldi	r23, 0x39	; 57
    4198:	7d 93       	st	X+, r23
    419a:	2a 95       	dec	r18
    419c:	e9 f7       	brne	.-6      	; 0x4198 <__ftoa_engine+0x14c>
    419e:	10 c0       	rjmp	.+32     	; 0x41c0 <__ftoa_engine+0x174>
    41a0:	7d 93       	st	X+, r23
    41a2:	2a 95       	dec	r18
    41a4:	89 f6       	brne	.-94     	; 0x4148 <__ftoa_engine+0xfc>
    41a6:	06 94       	lsr	r0
    41a8:	97 95       	ror	r25
    41aa:	67 95       	ror	r22
    41ac:	37 95       	ror	r19
    41ae:	17 95       	ror	r17
    41b0:	17 94       	ror	r1
    41b2:	e1 18       	sub	r14, r1
    41b4:	f1 0a       	sbc	r15, r17
    41b6:	43 0b       	sbc	r20, r19
    41b8:	56 0b       	sbc	r21, r22
    41ba:	c9 0b       	sbc	r28, r25
    41bc:	d0 09       	sbc	r29, r0
    41be:	98 f0       	brcs	.+38     	; 0x41e6 <__ftoa_engine+0x19a>
    41c0:	23 95       	inc	r18
    41c2:	7e 91       	ld	r23, -X
    41c4:	73 95       	inc	r23
    41c6:	7a 33       	cpi	r23, 0x3A	; 58
    41c8:	08 f0       	brcs	.+2      	; 0x41cc <__ftoa_engine+0x180>
    41ca:	70 e3       	ldi	r23, 0x30	; 48
    41cc:	7c 93       	st	X, r23
    41ce:	20 13       	cpse	r18, r16
    41d0:	b8 f7       	brcc	.-18     	; 0x41c0 <__ftoa_engine+0x174>
    41d2:	7e 91       	ld	r23, -X
    41d4:	70 61       	ori	r23, 0x10	; 16
    41d6:	7d 93       	st	X+, r23
    41d8:	30 f0       	brcs	.+12     	; 0x41e6 <__ftoa_engine+0x19a>
    41da:	83 95       	inc	r24
    41dc:	71 e3       	ldi	r23, 0x31	; 49
    41de:	7d 93       	st	X+, r23
    41e0:	70 e3       	ldi	r23, 0x30	; 48
    41e2:	2a 95       	dec	r18
    41e4:	e1 f7       	brne	.-8      	; 0x41de <__ftoa_engine+0x192>
    41e6:	11 24       	eor	r1, r1
    41e8:	ef 90       	pop	r14
    41ea:	ff 90       	pop	r15
    41ec:	0f 91       	pop	r16
    41ee:	1f 91       	pop	r17
    41f0:	cf 91       	pop	r28
    41f2:	df 91       	pop	r29
    41f4:	99 27       	eor	r25, r25
    41f6:	87 fd       	sbrc	r24, 7
    41f8:	90 95       	com	r25
    41fa:	08 95       	ret

000041fc <strnlen_P>:
    41fc:	fc 01       	movw	r30, r24
    41fe:	05 90       	lpm	r0, Z+
    4200:	61 50       	subi	r22, 0x01	; 1
    4202:	70 40       	sbci	r23, 0x00	; 0
    4204:	01 10       	cpse	r0, r1
    4206:	d8 f7       	brcc	.-10     	; 0x41fe <strnlen_P+0x2>
    4208:	80 95       	com	r24
    420a:	90 95       	com	r25
    420c:	8e 0f       	add	r24, r30
    420e:	9f 1f       	adc	r25, r31
    4210:	08 95       	ret

00004212 <memcpy>:
    4212:	fb 01       	movw	r30, r22
    4214:	dc 01       	movw	r26, r24
    4216:	02 c0       	rjmp	.+4      	; 0x421c <memcpy+0xa>
    4218:	01 90       	ld	r0, Z+
    421a:	0d 92       	st	X+, r0
    421c:	41 50       	subi	r20, 0x01	; 1
    421e:	50 40       	sbci	r21, 0x00	; 0
    4220:	d8 f7       	brcc	.-10     	; 0x4218 <memcpy+0x6>
    4222:	08 95       	ret

00004224 <memset>:
    4224:	dc 01       	movw	r26, r24
    4226:	01 c0       	rjmp	.+2      	; 0x422a <memset+0x6>
    4228:	6d 93       	st	X+, r22
    422a:	41 50       	subi	r20, 0x01	; 1
    422c:	50 40       	sbci	r21, 0x00	; 0
    422e:	e0 f7       	brcc	.-8      	; 0x4228 <memset+0x4>
    4230:	08 95       	ret

00004232 <strnlen>:
    4232:	fc 01       	movw	r30, r24
    4234:	61 50       	subi	r22, 0x01	; 1
    4236:	70 40       	sbci	r23, 0x00	; 0
    4238:	01 90       	ld	r0, Z+
    423a:	01 10       	cpse	r0, r1
    423c:	d8 f7       	brcc	.-10     	; 0x4234 <strnlen+0x2>
    423e:	80 95       	com	r24
    4240:	90 95       	com	r25
    4242:	8e 0f       	add	r24, r30
    4244:	9f 1f       	adc	r25, r31
    4246:	08 95       	ret

00004248 <fputc>:
    4248:	0f 93       	push	r16
    424a:	1f 93       	push	r17
    424c:	cf 93       	push	r28
    424e:	df 93       	push	r29
    4250:	fb 01       	movw	r30, r22
    4252:	23 81       	ldd	r18, Z+3	; 0x03
    4254:	21 fd       	sbrc	r18, 1
    4256:	03 c0       	rjmp	.+6      	; 0x425e <fputc+0x16>
    4258:	8f ef       	ldi	r24, 0xFF	; 255
    425a:	9f ef       	ldi	r25, 0xFF	; 255
    425c:	2c c0       	rjmp	.+88     	; 0x42b6 <fputc+0x6e>
    425e:	22 ff       	sbrs	r18, 2
    4260:	16 c0       	rjmp	.+44     	; 0x428e <fputc+0x46>
    4262:	46 81       	ldd	r20, Z+6	; 0x06
    4264:	57 81       	ldd	r21, Z+7	; 0x07
    4266:	24 81       	ldd	r18, Z+4	; 0x04
    4268:	35 81       	ldd	r19, Z+5	; 0x05
    426a:	42 17       	cp	r20, r18
    426c:	53 07       	cpc	r21, r19
    426e:	44 f4       	brge	.+16     	; 0x4280 <fputc+0x38>
    4270:	a0 81       	ld	r26, Z
    4272:	b1 81       	ldd	r27, Z+1	; 0x01
    4274:	9d 01       	movw	r18, r26
    4276:	2f 5f       	subi	r18, 0xFF	; 255
    4278:	3f 4f       	sbci	r19, 0xFF	; 255
    427a:	31 83       	std	Z+1, r19	; 0x01
    427c:	20 83       	st	Z, r18
    427e:	8c 93       	st	X, r24
    4280:	26 81       	ldd	r18, Z+6	; 0x06
    4282:	37 81       	ldd	r19, Z+7	; 0x07
    4284:	2f 5f       	subi	r18, 0xFF	; 255
    4286:	3f 4f       	sbci	r19, 0xFF	; 255
    4288:	37 83       	std	Z+7, r19	; 0x07
    428a:	26 83       	std	Z+6, r18	; 0x06
    428c:	14 c0       	rjmp	.+40     	; 0x42b6 <fputc+0x6e>
    428e:	8b 01       	movw	r16, r22
    4290:	ec 01       	movw	r28, r24
    4292:	fb 01       	movw	r30, r22
    4294:	00 84       	ldd	r0, Z+8	; 0x08
    4296:	f1 85       	ldd	r31, Z+9	; 0x09
    4298:	e0 2d       	mov	r30, r0
    429a:	09 95       	icall
    429c:	89 2b       	or	r24, r25
    429e:	e1 f6       	brne	.-72     	; 0x4258 <fputc+0x10>
    42a0:	d8 01       	movw	r26, r16
    42a2:	16 96       	adiw	r26, 0x06	; 6
    42a4:	8d 91       	ld	r24, X+
    42a6:	9c 91       	ld	r25, X
    42a8:	17 97       	sbiw	r26, 0x07	; 7
    42aa:	01 96       	adiw	r24, 0x01	; 1
    42ac:	17 96       	adiw	r26, 0x07	; 7
    42ae:	9c 93       	st	X, r25
    42b0:	8e 93       	st	-X, r24
    42b2:	16 97       	sbiw	r26, 0x06	; 6
    42b4:	ce 01       	movw	r24, r28
    42b6:	df 91       	pop	r29
    42b8:	cf 91       	pop	r28
    42ba:	1f 91       	pop	r17
    42bc:	0f 91       	pop	r16
    42be:	08 95       	ret

000042c0 <sprintf>:
    42c0:	ae e0       	ldi	r26, 0x0E	; 14
    42c2:	b0 e0       	ldi	r27, 0x00	; 0
    42c4:	e6 e6       	ldi	r30, 0x66	; 102
    42c6:	f1 e2       	ldi	r31, 0x21	; 33
    42c8:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__prologue_saves__+0x1c>
    42cc:	0d 89       	ldd	r16, Y+21	; 0x15
    42ce:	1e 89       	ldd	r17, Y+22	; 0x16
    42d0:	86 e0       	ldi	r24, 0x06	; 6
    42d2:	8c 83       	std	Y+4, r24	; 0x04
    42d4:	1a 83       	std	Y+2, r17	; 0x02
    42d6:	09 83       	std	Y+1, r16	; 0x01
    42d8:	8f ef       	ldi	r24, 0xFF	; 255
    42da:	9f e7       	ldi	r25, 0x7F	; 127
    42dc:	9e 83       	std	Y+6, r25	; 0x06
    42de:	8d 83       	std	Y+5, r24	; 0x05
    42e0:	ae 01       	movw	r20, r28
    42e2:	47 5e       	subi	r20, 0xE7	; 231
    42e4:	5f 4f       	sbci	r21, 0xFF	; 255
    42e6:	6f 89       	ldd	r22, Y+23	; 0x17
    42e8:	78 8d       	ldd	r23, Y+24	; 0x18
    42ea:	ce 01       	movw	r24, r28
    42ec:	01 96       	adiw	r24, 0x01	; 1
    42ee:	0e 94 4b 1b 	call	0x3696	; 0x3696 <vfprintf>
    42f2:	ef 81       	ldd	r30, Y+7	; 0x07
    42f4:	f8 85       	ldd	r31, Y+8	; 0x08
    42f6:	e0 0f       	add	r30, r16
    42f8:	f1 1f       	adc	r31, r17
    42fa:	10 82       	st	Z, r1
    42fc:	2e 96       	adiw	r28, 0x0e	; 14
    42fe:	e4 e0       	ldi	r30, 0x04	; 4
    4300:	0c 94 f8 1e 	jmp	0x3df0	; 0x3df0 <__epilogue_restores__+0x1c>

00004304 <__ultoa_invert>:
    4304:	fa 01       	movw	r30, r20
    4306:	aa 27       	eor	r26, r26
    4308:	28 30       	cpi	r18, 0x08	; 8
    430a:	51 f1       	breq	.+84     	; 0x4360 <__ultoa_invert+0x5c>
    430c:	20 31       	cpi	r18, 0x10	; 16
    430e:	81 f1       	breq	.+96     	; 0x4370 <__ultoa_invert+0x6c>
    4310:	e8 94       	clt
    4312:	6f 93       	push	r22
    4314:	6e 7f       	andi	r22, 0xFE	; 254
    4316:	6e 5f       	subi	r22, 0xFE	; 254
    4318:	7f 4f       	sbci	r23, 0xFF	; 255
    431a:	8f 4f       	sbci	r24, 0xFF	; 255
    431c:	9f 4f       	sbci	r25, 0xFF	; 255
    431e:	af 4f       	sbci	r26, 0xFF	; 255
    4320:	b1 e0       	ldi	r27, 0x01	; 1
    4322:	3e d0       	rcall	.+124    	; 0x43a0 <__ultoa_invert+0x9c>
    4324:	b4 e0       	ldi	r27, 0x04	; 4
    4326:	3c d0       	rcall	.+120    	; 0x43a0 <__ultoa_invert+0x9c>
    4328:	67 0f       	add	r22, r23
    432a:	78 1f       	adc	r23, r24
    432c:	89 1f       	adc	r24, r25
    432e:	9a 1f       	adc	r25, r26
    4330:	a1 1d       	adc	r26, r1
    4332:	68 0f       	add	r22, r24
    4334:	79 1f       	adc	r23, r25
    4336:	8a 1f       	adc	r24, r26
    4338:	91 1d       	adc	r25, r1
    433a:	a1 1d       	adc	r26, r1
    433c:	6a 0f       	add	r22, r26
    433e:	71 1d       	adc	r23, r1
    4340:	81 1d       	adc	r24, r1
    4342:	91 1d       	adc	r25, r1
    4344:	a1 1d       	adc	r26, r1
    4346:	20 d0       	rcall	.+64     	; 0x4388 <__ultoa_invert+0x84>
    4348:	09 f4       	brne	.+2      	; 0x434c <__ultoa_invert+0x48>
    434a:	68 94       	set
    434c:	3f 91       	pop	r19
    434e:	2a e0       	ldi	r18, 0x0A	; 10
    4350:	26 9f       	mul	r18, r22
    4352:	11 24       	eor	r1, r1
    4354:	30 19       	sub	r19, r0
    4356:	30 5d       	subi	r19, 0xD0	; 208
    4358:	31 93       	st	Z+, r19
    435a:	de f6       	brtc	.-74     	; 0x4312 <__ultoa_invert+0xe>
    435c:	cf 01       	movw	r24, r30
    435e:	08 95       	ret
    4360:	46 2f       	mov	r20, r22
    4362:	47 70       	andi	r20, 0x07	; 7
    4364:	40 5d       	subi	r20, 0xD0	; 208
    4366:	41 93       	st	Z+, r20
    4368:	b3 e0       	ldi	r27, 0x03	; 3
    436a:	0f d0       	rcall	.+30     	; 0x438a <__ultoa_invert+0x86>
    436c:	c9 f7       	brne	.-14     	; 0x4360 <__ultoa_invert+0x5c>
    436e:	f6 cf       	rjmp	.-20     	; 0x435c <__ultoa_invert+0x58>
    4370:	46 2f       	mov	r20, r22
    4372:	4f 70       	andi	r20, 0x0F	; 15
    4374:	40 5d       	subi	r20, 0xD0	; 208
    4376:	4a 33       	cpi	r20, 0x3A	; 58
    4378:	18 f0       	brcs	.+6      	; 0x4380 <__ultoa_invert+0x7c>
    437a:	49 5d       	subi	r20, 0xD9	; 217
    437c:	31 fd       	sbrc	r19, 1
    437e:	40 52       	subi	r20, 0x20	; 32
    4380:	41 93       	st	Z+, r20
    4382:	02 d0       	rcall	.+4      	; 0x4388 <__ultoa_invert+0x84>
    4384:	a9 f7       	brne	.-22     	; 0x4370 <__ultoa_invert+0x6c>
    4386:	ea cf       	rjmp	.-44     	; 0x435c <__ultoa_invert+0x58>
    4388:	b4 e0       	ldi	r27, 0x04	; 4
    438a:	a6 95       	lsr	r26
    438c:	97 95       	ror	r25
    438e:	87 95       	ror	r24
    4390:	77 95       	ror	r23
    4392:	67 95       	ror	r22
    4394:	ba 95       	dec	r27
    4396:	c9 f7       	brne	.-14     	; 0x438a <__ultoa_invert+0x86>
    4398:	00 97       	sbiw	r24, 0x00	; 0
    439a:	61 05       	cpc	r22, r1
    439c:	71 05       	cpc	r23, r1
    439e:	08 95       	ret
    43a0:	9b 01       	movw	r18, r22
    43a2:	ac 01       	movw	r20, r24
    43a4:	0a 2e       	mov	r0, r26
    43a6:	06 94       	lsr	r0
    43a8:	57 95       	ror	r21
    43aa:	47 95       	ror	r20
    43ac:	37 95       	ror	r19
    43ae:	27 95       	ror	r18
    43b0:	ba 95       	dec	r27
    43b2:	c9 f7       	brne	.-14     	; 0x43a6 <__ultoa_invert+0xa2>
    43b4:	62 0f       	add	r22, r18
    43b6:	73 1f       	adc	r23, r19
    43b8:	84 1f       	adc	r24, r20
    43ba:	95 1f       	adc	r25, r21
    43bc:	a0 1d       	adc	r26, r0
    43be:	08 95       	ret

000043c0 <_exit>:
    43c0:	f8 94       	cli

000043c2 <__stop_program>:
    43c2:	ff cf       	rjmp	.-2      	; 0x43c2 <__stop_program>
