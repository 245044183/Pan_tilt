
Pantilt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  000043e6  0000447a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000043e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000fd  0080017c  0080017c  000044f6  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000044f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004554  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b8  00000000  00000000  00004594  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006e5d  00000000  00000000  00004b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001ad2  00000000  00000000  0000b9a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003c2c  00000000  00000000  0000d47b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011e0  00000000  00000000  000110a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001fdb  00000000  00000000  00012288  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006523  00000000  00000000  00014263  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000630  00000000  00000000  0001a786  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f4 00 	jmp	0x1e8	; 0x1e8 <__ctors_end>
       4:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       8:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
       c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      10:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      14:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      18:	0c 94 f3 0c 	jmp	0x19e6	; 0x19e6 <__vector_6>
      1c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      20:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      24:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      28:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      2c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      30:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      34:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      38:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      3c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      40:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      44:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      48:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      4c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      50:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      54:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      58:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      5c:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      60:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      64:	0c 94 11 01 	jmp	0x222	; 0x222 <__bad_interrupt>
      68:	9b 16       	cp	r9, r27
      6a:	9b 16       	cp	r9, r27
      6c:	9b 16       	cp	r9, r27
      6e:	cb 16       	cp	r12, r27
      70:	d3 16       	cp	r13, r19
      72:	e3 16       	cp	r14, r19
      74:	9b 16       	cp	r9, r27
      76:	9b 16       	cp	r9, r27
      78:	cb 16       	cp	r12, r27
      7a:	d3 16       	cp	r13, r19
      7c:	03 6e       	ori	r16, 0xE3	; 227
      7e:	db 36       	cpi	r29, 0x6B	; 107
      80:	3d 9a       	sbi	0x07, 5	; 7
      82:	99 99       	sbic	0x13, 1	; 19
      84:	99 3d       	cpi	r25, 0xD9	; 217
      86:	ab aa       	std	Y+51, r10	; 0x33
      88:	aa 2a       	or	r10, r26
      8a:	3e 00       	.word	0x003e	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	08 4a       	sbci	r16, 0xA8	; 168
      92:	d7 3b       	cpi	r29, 0xB7	; 183
      94:	3b ce       	rjmp	.-906    	; 0xfffffd0c <__eeprom_end+0xff7efd0c>
      96:	01 6e       	ori	r16, 0xE1	; 225
      98:	84 bc       	out	0x24, r8	; 36
      9a:	bf fd       	.word	0xfdbf	; ????
      9c:	c1 2f       	mov	r28, r17
      9e:	3d 6c       	ori	r19, 0xCD	; 205
      a0:	74 31       	cpi	r23, 0x14	; 20
      a2:	9a bd       	out	0x2a, r25	; 42
      a4:	56 83       	std	Z+6, r21	; 0x06
      a6:	3d da       	rcall	.-2950   	; 0xfffff522 <__eeprom_end+0xff7ef522>
      a8:	3d 00       	.word	0x003d	; ????
      aa:	c7 7f       	andi	r28, 0xF7	; 247
      ac:	11 be       	out	0x31, r1	; 49
      ae:	d9 e4       	ldi	r29, 0x49	; 73
      b0:	bb 4c       	sbci	r27, 0xCB	; 203
      b2:	3e 91       	ld	r19, -X
      b4:	6b aa       	std	Y+51, r6	; 0x33
      b6:	aa be       	out	0x3a, r10	; 58
      b8:	00 00       	nop
      ba:	00 80       	ld	r0, Z
      bc:	3f 07       	cpc	r19, r31
      be:	2c 7a       	andi	r18, 0xAC	; 172
      c0:	a5 ba       	out	0x15, r10	; 21
      c2:	6c c5       	rjmp	.+2776   	; 0xb9c <__stack+0x29d>
      c4:	90 da       	rcall	.-2784   	; 0xfffff5e6 <__eeprom_end+0xff7ef5e6>
      c6:	3b 93       	.word	0x933b	; ????
      c8:	65 fc       	sbrc	r6, 5
      ca:	8b bc       	out	0x2b, r8	; 43
      cc:	53 f8       	bld	r5, 3
      ce:	10 fd       	sbrc	r17, 0
      d0:	3c 56       	subi	r19, 0x6C	; 108
      d2:	92 83       	std	Z+2, r25	; 0x02
      d4:	4d bd       	out	0x2d, r20	; 45
      d6:	87 9d       	mul	r24, r7
      d8:	3a b6       	in	r3, 0x3a	; 58
      da:	3d cb       	rjmp	.-2438   	; 0xfffff756 <__eeprom_end+0xff7ef756>
      dc:	c9 bf       	out	0x39, r28	; 57
      de:	5b be       	out	0x3b, r5	; 59
      e0:	73 da       	rcall	.-2842   	; 0xfffff5c8 <__eeprom_end+0xff7ef5c8>
      e2:	0f c9       	rjmp	.-3554   	; 0xfffff302 <__eeprom_end+0xff7ef302>
      e4:	3f 00       	.word	0x003f	; ????

000000e6 <__trampolines_end>:
      e6:	6e 61       	ori	r22, 0x1E	; 30
      e8:	6e 00       	.word	0x006e	; ????

000000ea <__c.2332>:
      ea:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
      fa:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     10a:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     11a:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     12a:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     13a:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     14a:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     15a:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     16a:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     17a:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     18a:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     19a:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1aa:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     1ba:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     1ca:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     1da:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

000001e8 <__ctors_end>:
     1e8:	11 24       	eor	r1, r1
     1ea:	1f be       	out	0x3f, r1	; 63
     1ec:	cf ef       	ldi	r28, 0xFF	; 255
     1ee:	d8 e0       	ldi	r29, 0x08	; 8
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	cd bf       	out	0x3d, r28	; 61

000001f4 <__do_copy_data>:
     1f4:	11 e0       	ldi	r17, 0x01	; 1
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b1 e0       	ldi	r27, 0x01	; 1
     1fa:	e6 ee       	ldi	r30, 0xE6	; 230
     1fc:	f3 e4       	ldi	r31, 0x43	; 67
     1fe:	02 c0       	rjmp	.+4      	; 0x204 <__do_copy_data+0x10>
     200:	05 90       	lpm	r0, Z+
     202:	0d 92       	st	X+, r0
     204:	ac 37       	cpi	r26, 0x7C	; 124
     206:	b1 07       	cpc	r27, r17
     208:	d9 f7       	brne	.-10     	; 0x200 <__do_copy_data+0xc>

0000020a <__do_clear_bss>:
     20a:	22 e0       	ldi	r18, 0x02	; 2
     20c:	ac e7       	ldi	r26, 0x7C	; 124
     20e:	b1 e0       	ldi	r27, 0x01	; 1
     210:	01 c0       	rjmp	.+2      	; 0x214 <.do_clear_bss_start>

00000212 <.do_clear_bss_loop>:
     212:	1d 92       	st	X+, r1

00000214 <.do_clear_bss_start>:
     214:	a9 37       	cpi	r26, 0x79	; 121
     216:	b2 07       	cpc	r27, r18
     218:	e1 f7       	brne	.-8      	; 0x212 <.do_clear_bss_loop>
     21a:	0e 94 13 01 	call	0x226	; 0x226 <main>
     21e:	0c 94 f1 21 	jmp	0x43e2	; 0x43e2 <_exit>

00000222 <__bad_interrupt>:
     222:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000226 <main>:
char MyString[10];
/*-----------------------------------------------------*/
int main(void)
{
	/* Replace with your application code */
	UART_init(BAUD_PRESCALER);
     226:	87 e6       	ldi	r24, 0x67	; 103
     228:	90 e0       	ldi	r25, 0x00	; 0
     22a:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <UART_init>
	I2C_Init();
     22e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <I2C_Init>
	MPU_Init();
     232:	0e 94 c5 0a 	call	0x158a	; 0x158a <MPU_Init>
	ADC_Init();
     236:	0e 94 33 01 	call	0x266	; 0x266 <ADC_Init>
	initialize_pwm_2servos();
     23a:	0e 94 a5 01 	call	0x34a	; 0x34a <initialize_pwm_2servos>
	initialize_pwm_joyservo();
     23e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <initialize_pwm_joyservo>
	sprintf(MyString,"Init OK");
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	e2 e2       	ldi	r30, 0x22	; 34
     246:	f1 e0       	ldi	r31, 0x01	; 1
     248:	af e3       	ldi	r26, 0x3F	; 63
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	01 90       	ld	r0, Z+
     24e:	0d 92       	st	X+, r0
     250:	8a 95       	dec	r24
     252:	e1 f7       	brne	.-8      	; 0x24c <main+0x26>
	UART_putstring(MyString);
     254:	8f e3       	ldi	r24, 0x3F	; 63
     256:	92 e0       	ldi	r25, 0x02	; 2
     258:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <UART_putstring>
	
	MytaskCreate();
     25c:	0e 94 39 03 	call	0x672	; 0x672 <MytaskCreate>
	vTaskStartScheduler();
     260:	0e 94 90 11 	call	0x2320	; 0x2320 <vTaskStartScheduler>
     264:	ff cf       	rjmp	.-2      	; 0x264 <main+0x3e>

00000266 <ADC_Init>:
	OCR0A=80;
	OCR0B=OCR0A/2;
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM0B1);
	sei(); //Enable global interrupts
     266:	f8 94       	cli
     268:	e4 e6       	ldi	r30, 0x64	; 100
     26a:	f0 e0       	ldi	r31, 0x00	; 0
     26c:	80 81       	ld	r24, Z
     26e:	8e 7f       	andi	r24, 0xFE	; 254
     270:	80 83       	st	Z, r24
     272:	ac e7       	ldi	r26, 0x7C	; 124
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	8c 91       	ld	r24, X
     278:	80 64       	ori	r24, 0x40	; 64
     27a:	8c 93       	st	X, r24
     27c:	8c 91       	ld	r24, X
     27e:	8f 77       	andi	r24, 0x7F	; 127
     280:	8c 93       	st	X, r24
     282:	ea e7       	ldi	r30, 0x7A	; 122
     284:	f0 e0       	ldi	r31, 0x00	; 0
     286:	80 81       	ld	r24, Z
     288:	84 60       	ori	r24, 0x04	; 4
     28a:	80 83       	st	Z, r24
     28c:	80 81       	ld	r24, Z
     28e:	82 60       	ori	r24, 0x02	; 2
     290:	80 83       	st	Z, r24
     292:	80 81       	ld	r24, Z
     294:	81 60       	ori	r24, 0x01	; 1
     296:	80 83       	st	Z, r24
     298:	8c 91       	ld	r24, X
     29a:	8e 7f       	andi	r24, 0xFE	; 254
     29c:	8c 93       	st	X, r24
     29e:	8c 91       	ld	r24, X
     2a0:	8d 7f       	andi	r24, 0xFD	; 253
     2a2:	8c 93       	st	X, r24
     2a4:	8c 91       	ld	r24, X
     2a6:	8b 7f       	andi	r24, 0xFB	; 251
     2a8:	8c 93       	st	X, r24
     2aa:	8c 91       	ld	r24, X
     2ac:	87 7f       	andi	r24, 0xF7	; 247
     2ae:	8c 93       	st	X, r24
     2b0:	80 81       	ld	r24, Z
     2b2:	80 62       	ori	r24, 0x20	; 32
     2b4:	80 83       	st	Z, r24
     2b6:	ab e7       	ldi	r26, 0x7B	; 123
     2b8:	b0 e0       	ldi	r27, 0x00	; 0
     2ba:	8c 91       	ld	r24, X
     2bc:	8e 7f       	andi	r24, 0xFE	; 254
     2be:	8c 93       	st	X, r24
     2c0:	8c 91       	ld	r24, X
     2c2:	8e 7f       	andi	r24, 0xFE	; 254
     2c4:	8c 93       	st	X, r24
     2c6:	8c 91       	ld	r24, X
     2c8:	8e 7f       	andi	r24, 0xFE	; 254
     2ca:	8c 93       	st	X, r24
     2cc:	ae e7       	ldi	r26, 0x7E	; 126
     2ce:	b0 e0       	ldi	r27, 0x00	; 0
     2d0:	8c 91       	ld	r24, X
     2d2:	81 60       	ori	r24, 0x01	; 1
     2d4:	8c 93       	st	X, r24
     2d6:	80 81       	ld	r24, Z
     2d8:	80 68       	ori	r24, 0x80	; 128
     2da:	80 83       	st	Z, r24
     2dc:	80 81       	ld	r24, Z
     2de:	80 64       	ori	r24, 0x40	; 64
     2e0:	80 83       	st	Z, r24
     2e2:	78 94       	sei
     2e4:	08 95       	ret

000002e6 <deg_to_servo1>:
}


//servo1 is on PB1
void deg_to_servo1 (int deg){
	OCR1A=(deg*2.7778)+125;
     2e6:	bc 01       	movw	r22, r24
     2e8:	99 0f       	add	r25, r25
     2ea:	88 0b       	sbc	r24, r24
     2ec:	99 0b       	sbc	r25, r25
     2ee:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
     2f2:	2a e7       	ldi	r18, 0x7A	; 122
     2f4:	37 ec       	ldi	r19, 0xC7	; 199
     2f6:	41 e3       	ldi	r20, 0x31	; 49
     2f8:	50 e4       	ldi	r21, 0x40	; 64
     2fa:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     2fe:	20 e0       	ldi	r18, 0x00	; 0
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	4a ef       	ldi	r20, 0xFA	; 250
     304:	52 e4       	ldi	r21, 0x42	; 66
     306:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     30a:	0e 94 4c 19 	call	0x3298	; 0x3298 <__fixunssfsi>
     30e:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     312:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
     316:	08 95       	ret

00000318 <deg_to_servo2>:
}
//servo2 is on PB2
void deg_to_servo2 (int deg){
	OCR1B=(deg*2.7778)+125;
     318:	bc 01       	movw	r22, r24
     31a:	99 0f       	add	r25, r25
     31c:	88 0b       	sbc	r24, r24
     31e:	99 0b       	sbc	r25, r25
     320:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
     324:	2a e7       	ldi	r18, 0x7A	; 122
     326:	37 ec       	ldi	r19, 0xC7	; 199
     328:	41 e3       	ldi	r20, 0x31	; 49
     32a:	50 e4       	ldi	r21, 0x40	; 64
     32c:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	4a ef       	ldi	r20, 0xFA	; 250
     336:	52 e4       	ldi	r21, 0x42	; 66
     338:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     33c:	0e 94 4c 19 	call	0x3298	; 0x3298 <__fixunssfsi>
     340:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     344:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
     348:	08 95       	ret

0000034a <initialize_pwm_2servos>:
}
void initialize_pwm_2servos (){
	cli();
     34a:	f8 94       	cli
	DDRB |= (1<<DDB1)|(1<<DDB2);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     34c:	84 b1       	in	r24, 0x04	; 4
     34e:	86 60       	ori	r24, 0x06	; 6
     350:	84 b9       	out	0x04, r24	; 4
	TCNT1 = 0;		/* Set timer1 count zero */
     352:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
     356:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
	ICR1 = 4999;		/* Set TOP count for timer1 in ICR1 register */
     35a:	87 e8       	ldi	r24, 0x87	; 135
     35c:	93 e1       	ldi	r25, 0x13	; 19
     35e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
     362:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	/* Set Fast PWM, TOP in ICR1, Clear OC1A on compare match, clk/64 */
	//TCCR1A = (1<<WGM11)|(1<<COM1A1);
	//TCCR1B = (1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11);
	//clear OC1A/OC1B on compare match
	//for servo1
	TCCR1A |= (1<<COM1A1);
     366:	e0 e8       	ldi	r30, 0x80	; 128
     368:	f0 e0       	ldi	r31, 0x00	; 0
     36a:	80 81       	ld	r24, Z
     36c:	80 68       	ori	r24, 0x80	; 128
     36e:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1A0);
     370:	80 81       	ld	r24, Z
     372:	8f 7b       	andi	r24, 0xBF	; 191
     374:	80 83       	st	Z, r24
	//for servo2
	TCCR1A |= (1<<COM1B1);
     376:	80 81       	ld	r24, Z
     378:	80 62       	ori	r24, 0x20	; 32
     37a:	80 83       	st	Z, r24
	TCCR1A &= ~(1<<COM1B0);
     37c:	80 81       	ld	r24, Z
     37e:	8f 7e       	andi	r24, 0xEF	; 239
     380:	80 83       	st	Z, r24
	//Fast PWM Mode
	TCCR1A &= ~(1<<WGM10);
     382:	80 81       	ld	r24, Z
     384:	8e 7f       	andi	r24, 0xFE	; 254
     386:	80 83       	st	Z, r24
	TCCR1A |= (1<<WGM11);
     388:	80 81       	ld	r24, Z
     38a:	82 60       	ori	r24, 0x02	; 2
     38c:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM12);
     38e:	e1 e8       	ldi	r30, 0x81	; 129
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	88 60       	ori	r24, 0x08	; 8
     396:	80 83       	st	Z, r24
	TCCR1B |= (1<<WGM13);
     398:	80 81       	ld	r24, Z
     39a:	80 61       	ori	r24, 0x10	; 16
     39c:	80 83       	st	Z, r24
	//Configure timer pre-scaler (011) /64
	TCCR1B |= (1<<CS10);
     39e:	80 81       	ld	r24, Z
     3a0:	81 60       	ori	r24, 0x01	; 1
     3a2:	80 83       	st	Z, r24
	TCCR1B |= (1<<CS11);
     3a4:	80 81       	ld	r24, Z
     3a6:	82 60       	ori	r24, 0x02	; 2
     3a8:	80 83       	st	Z, r24
	TCCR1B &= ~(1<<CS12);
     3aa:	80 81       	ld	r24, Z
     3ac:	8b 7f       	andi	r24, 0xFB	; 251
     3ae:	80 83       	st	Z, r24
	sei();
     3b0:	78 94       	sei
     3b2:	08 95       	ret

000003b4 <initialize_pwm_joyservo>:
}
void initialize_pwm_joyservo (){
	cli();//disable all interrupts
     3b4:	f8 94       	cli
	DDRD |= (1<<DDD5);	/* Make OC1A pin (~D9) OC1B (~D10) as output */
     3b6:	55 9a       	sbi	0x0a, 5	; 10
	//Use Timer 0 for joystick to servo
	//prescale of 1024 (101)
	TCCR0B |= (1<<CS02);
     3b8:	85 b5       	in	r24, 0x25	; 37
     3ba:	84 60       	ori	r24, 0x04	; 4
     3bc:	85 bd       	out	0x25, r24	; 37
	TCCR0B &= ~(1<<CS01);
     3be:	85 b5       	in	r24, 0x25	; 37
     3c0:	8d 7f       	andi	r24, 0xFD	; 253
     3c2:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= (1<<CS00);
     3c4:	85 b5       	in	r24, 0x25	; 37
     3c6:	81 60       	ori	r24, 0x01	; 1
     3c8:	85 bd       	out	0x25, r24	; 37
	
	//Fast PWM mode
	TCCR0A |= (1<<WGM00);
     3ca:	84 b5       	in	r24, 0x24	; 36
     3cc:	81 60       	ori	r24, 0x01	; 1
     3ce:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1<<WGM01);
     3d0:	84 b5       	in	r24, 0x24	; 36
     3d2:	82 60       	ori	r24, 0x02	; 2
     3d4:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1<<WGM02);
     3d6:	85 b5       	in	r24, 0x25	; 37
     3d8:	88 60       	ori	r24, 0x08	; 8
     3da:	85 bd       	out	0x25, r24	; 37
	
	//OCR0A sets frequency
	//OCR0B sets duty cycle
	OCR0A=255;
     3dc:	8f ef       	ldi	r24, 0xFF	; 255
     3de:	87 bd       	out	0x27, r24	; 39
	OCR0B=OCR0A/2;
     3e0:	87 b5       	in	r24, 0x27	; 39
     3e2:	86 95       	lsr	r24
     3e4:	88 bd       	out	0x28, r24	; 40
	
	//Non-inverting mode
	//Clear on compare match
	TCCR0A |= (1<<COM1B1);
     3e6:	84 b5       	in	r24, 0x24	; 36
     3e8:	80 62       	ori	r24, 0x20	; 32
     3ea:	84 bd       	out	0x24, r24	; 36
	sei(); //Enable global interrupts
     3ec:	78 94       	sei
     3ee:	08 95       	ret

000003f0 <vMahonyTaskFunction>:
float ADC_Value;
// static TickType_t time1;
// static TickType_t time2;
// static int period;
void vMahonyTaskFunction( void *pvParameters )
{
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <vMahonyTaskFunction+0x6>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMahony;
		const TickType_t xPeriodFrequencyMahony = 1;// 15ms per tick

		xLastWakeTimeMahony = xTaskGetTickCount();
     3fa:	0e 94 c4 11 	call	0x2388	; 0x2388 <xTaskGetTickCount>
     3fe:	9a 83       	std	Y+2, r25	; 0x02
     400:	89 83       	std	Y+1, r24	; 0x01
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     402:	0f 2e       	mov	r0, r31
     404:	f6 e1       	ldi	r31, 0x16	; 22
     406:	8f 2e       	mov	r8, r31
     408:	f1 e0       	ldi	r31, 0x01	; 1
     40a:	9f 2e       	mov	r9, r31
     40c:	f0 2d       	mov	r31, r0
     40e:	0f 2e       	mov	r0, r31
     410:	fa e0       	ldi	r31, 0x0A	; 10
     412:	4f 2e       	mov	r4, r31
     414:	f1 e0       	ldi	r31, 0x01	; 1
     416:	5f 2e       	mov	r5, r31
     418:	f0 2d       	mov	r31, r0
			q2Angle(Angle);
			sprintf(MyString,"Angle x: %f ms\n",Angle[0]);
     41a:	0f 2e       	mov	r0, r31
     41c:	fa e2       	ldi	r31, 0x2A	; 42
     41e:	2f 2e       	mov	r2, r31
     420:	f1 e0       	ldi	r31, 0x01	; 1
     422:	3f 2e       	mov	r3, r31
     424:	f0 2d       	mov	r31, r0
     426:	0f 2e       	mov	r0, r31
     428:	ff e3       	ldi	r31, 0x3F	; 63
     42a:	6f 2e       	mov	r6, r31
     42c:	f2 e0       	ldi	r31, 0x02	; 2
     42e:	7f 2e       	mov	r7, r31
     430:	f0 2d       	mov	r31, r0

		xLastWakeTimeMahony = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMahony, xPeriodFrequencyMahony );
     432:	61 e0       	ldi	r22, 0x01	; 1
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	ce 01       	movw	r24, r28
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	0e 94 10 13 	call	0x2620	; 0x2620 <vTaskDelayUntil>
// 			time1 = xTaskGetTickCount();
// 			sprintf(MyString,"time1: %i ms\n",time1);
// 			UART_putstring(MyString);
			MahonyAHRSupdateIMU(GyroData[0],GyroData[1],GyroData[2],AccData[0],AccData[1],AccData[2]);
     43e:	d4 01       	movw	r26, r8
     440:	ad 90       	ld	r10, X+
     442:	bd 90       	ld	r11, X+
     444:	cd 90       	ld	r12, X+
     446:	dc 90       	ld	r13, X
     448:	13 97       	sbiw	r26, 0x03	; 3
     44a:	f2 01       	movw	r30, r4
     44c:	e0 84       	ldd	r14, Z+8	; 0x08
     44e:	f1 84       	ldd	r15, Z+9	; 0x09
     450:	02 85       	ldd	r16, Z+10	; 0x0a
     452:	13 85       	ldd	r17, Z+11	; 0x0b
     454:	24 81       	ldd	r18, Z+4	; 0x04
     456:	35 81       	ldd	r19, Z+5	; 0x05
     458:	46 81       	ldd	r20, Z+6	; 0x06
     45a:	57 81       	ldd	r21, Z+7	; 0x07
     45c:	60 81       	ld	r22, Z
     45e:	71 81       	ldd	r23, Z+1	; 0x01
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	1b 96       	adiw	r26, 0x0b	; 11
     466:	ec 91       	ld	r30, X
     468:	1b 97       	sbiw	r26, 0x0b	; 11
     46a:	ef 93       	push	r30
     46c:	1a 96       	adiw	r26, 0x0a	; 10
     46e:	ec 91       	ld	r30, X
     470:	1a 97       	sbiw	r26, 0x0a	; 10
     472:	ef 93       	push	r30
     474:	19 96       	adiw	r26, 0x09	; 9
     476:	ec 91       	ld	r30, X
     478:	19 97       	sbiw	r26, 0x09	; 9
     47a:	ef 93       	push	r30
     47c:	18 96       	adiw	r26, 0x08	; 8
     47e:	ec 91       	ld	r30, X
     480:	18 97       	sbiw	r26, 0x08	; 8
     482:	ef 93       	push	r30
     484:	17 96       	adiw	r26, 0x07	; 7
     486:	ec 91       	ld	r30, X
     488:	17 97       	sbiw	r26, 0x07	; 7
     48a:	ef 93       	push	r30
     48c:	16 96       	adiw	r26, 0x06	; 6
     48e:	ec 91       	ld	r30, X
     490:	16 97       	sbiw	r26, 0x06	; 6
     492:	ef 93       	push	r30
     494:	15 96       	adiw	r26, 0x05	; 5
     496:	ec 91       	ld	r30, X
     498:	15 97       	sbiw	r26, 0x05	; 5
     49a:	ef 93       	push	r30
     49c:	14 96       	adiw	r26, 0x04	; 4
     49e:	ec 91       	ld	r30, X
     4a0:	ef 93       	push	r30
     4a2:	0e 94 53 04 	call	0x8a6	; 0x8a6 <MahonyAHRSupdateIMU>
			q2Angle(Angle);
     4a6:	8d e4       	ldi	r24, 0x4D	; 77
     4a8:	92 e0       	ldi	r25, 0x02	; 2
     4aa:	0e 94 97 07 	call	0xf2e	; 0xf2e <q2Angle>
			sprintf(MyString,"Angle x: %f ms\n",Angle[0]);
     4ae:	0d e4       	ldi	r16, 0x4D	; 77
     4b0:	12 e0       	ldi	r17, 0x02	; 2
     4b2:	d8 01       	movw	r26, r16
     4b4:	13 96       	adiw	r26, 0x03	; 3
     4b6:	8c 91       	ld	r24, X
     4b8:	13 97       	sbiw	r26, 0x03	; 3
     4ba:	8f 93       	push	r24
     4bc:	12 96       	adiw	r26, 0x02	; 2
     4be:	8c 91       	ld	r24, X
     4c0:	12 97       	sbiw	r26, 0x02	; 2
     4c2:	8f 93       	push	r24
     4c4:	11 96       	adiw	r26, 0x01	; 1
     4c6:	8c 91       	ld	r24, X
     4c8:	11 97       	sbiw	r26, 0x01	; 1
     4ca:	8f 93       	push	r24
     4cc:	8c 91       	ld	r24, X
     4ce:	8f 93       	push	r24
     4d0:	3f 92       	push	r3
     4d2:	2f 92       	push	r2
     4d4:	7f 92       	push	r7
     4d6:	6f 92       	push	r6
     4d8:	0e 94 71 21 	call	0x42e2	; 0x42e2 <sprintf>
			UART_putstring(MyString);
     4dc:	c3 01       	movw	r24, r6
     4de:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <UART_putstring>
			sprintf(MyString,"Angle y: %f ms\n",Angle[1]);
     4e2:	f8 01       	movw	r30, r16
     4e4:	87 81       	ldd	r24, Z+7	; 0x07
     4e6:	8f 93       	push	r24
     4e8:	86 81       	ldd	r24, Z+6	; 0x06
     4ea:	8f 93       	push	r24
     4ec:	85 81       	ldd	r24, Z+5	; 0x05
     4ee:	8f 93       	push	r24
     4f0:	84 81       	ldd	r24, Z+4	; 0x04
     4f2:	8f 93       	push	r24
     4f4:	8a e3       	ldi	r24, 0x3A	; 58
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	9f 93       	push	r25
     4fa:	8f 93       	push	r24
     4fc:	7f 92       	push	r7
     4fe:	6f 92       	push	r6
     500:	0e 94 71 21 	call	0x42e2	; 0x42e2 <sprintf>
			UART_putstring(MyString);
     504:	c3 01       	movw	r24, r6
     506:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <UART_putstring>
     50a:	0f b6       	in	r0, 0x3f	; 63
     50c:	f8 94       	cli
     50e:	de bf       	out	0x3e, r29	; 62
     510:	0f be       	out	0x3f, r0	; 63
     512:	cd bf       	out	0x3d, r28	; 61
     514:	8e cf       	rjmp	.-228    	; 0x432 <__LOCK_REGION_LENGTH__+0x32>

00000516 <vADCTaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vADCTaskFunction( void *pvParameters )
{
     516:	cf 93       	push	r28
     518:	df 93       	push	r29
     51a:	00 d0       	rcall	.+0      	; 0x51c <vADCTaskFunction+0x6>
     51c:	cd b7       	in	r28, 0x3d	; 61
     51e:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeADC;
		const TickType_t xPeriodFrequencyADC = 1;// 15ms per tick  15ms*93 = 1395
		
		xLastWakeTimeADC = xTaskGetTickCount();
     520:	0e 94 c4 11 	call	0x2388	; 0x2388 <xTaskGetTickCount>
     524:	9a 83       	std	Y+2, r25	; 0x02
     526:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
			//ADC
			ADC_Value = ADC;
     528:	0f 2e       	mov	r0, r31
     52a:	f8 e7       	ldi	r31, 0x78	; 120
     52c:	cf 2e       	mov	r12, r31
     52e:	d1 2c       	mov	r13, r1
     530:	f0 2d       	mov	r31, r0
			}
			else if (OCR0B<=10){
				OCR0B=11;
			}
			else if (OCR0B>=40){
				OCR0B=39;
     532:	0f 2e       	mov	r0, r31
     534:	f7 e2       	ldi	r31, 0x27	; 39
     536:	af 2e       	mov	r10, r31
     538:	f0 2d       	mov	r31, r0
					OCR0B++;

				}
			}
			else if (OCR0B<=10){
				OCR0B=11;
     53a:	0f 2e       	mov	r0, r31
     53c:	fb e0       	ldi	r31, 0x0B	; 11
     53e:	bf 2e       	mov	r11, r31
     540:	f0 2d       	mov	r31, r0
			}
			else if (OCR0B>=40){
				OCR0B=39;
			}
			sprintf(MyString,"Task ADC:%f\n",ADC_Value);
     542:	0f 2e       	mov	r0, r31
     544:	fa e4       	ldi	r31, 0x4A	; 74
     546:	ef 2e       	mov	r14, r31
     548:	f1 e0       	ldi	r31, 0x01	; 1
     54a:	ff 2e       	mov	r15, r31
     54c:	f0 2d       	mov	r31, r0
     54e:	0f e3       	ldi	r16, 0x3F	; 63
     550:	12 e0       	ldi	r17, 0x02	; 2
		
		xLastWakeTimeADC = xTaskGetTickCount();

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeADC, xPeriodFrequencyADC);
     552:	61 e0       	ldi	r22, 0x01	; 1
     554:	70 e0       	ldi	r23, 0x00	; 0
     556:	ce 01       	movw	r24, r28
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	0e 94 10 13 	call	0x2620	; 0x2620 <vTaskDelayUntil>
			//ADC
			ADC_Value = ADC;
     55e:	f6 01       	movw	r30, r12
     560:	60 81       	ld	r22, Z
     562:	71 81       	ldd	r23, Z+1	; 0x01
     564:	80 e0       	ldi	r24, 0x00	; 0
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__floatunsisf>
     56c:	60 93 49 02 	sts	0x0249, r22	; 0x800249 <ADC_Value>
     570:	70 93 4a 02 	sts	0x024A, r23	; 0x80024a <ADC_Value+0x1>
     574:	80 93 4b 02 	sts	0x024B, r24	; 0x80024b <ADC_Value+0x2>
     578:	90 93 4c 02 	sts	0x024C, r25	; 0x80024c <ADC_Value+0x3>
			if(OCR0B>10&&OCR0B<40){
     57c:	28 b5       	in	r18, 0x28	; 40
     57e:	2b 30       	cpi	r18, 0x0B	; 11
     580:	50 f1       	brcs	.+84     	; 0x5d6 <vADCTaskFunction+0xc0>
     582:	28 b5       	in	r18, 0x28	; 40
     584:	28 32       	cpi	r18, 0x28	; 40
     586:	38 f5       	brcc	.+78     	; 0x5d6 <vADCTaskFunction+0xc0>
				if ((ADC_Value*5/1024)==0){
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	40 ea       	ldi	r20, 0xA0	; 160
     58e:	50 e4       	ldi	r21, 0x40	; 64
     590:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     594:	20 e0       	ldi	r18, 0x00	; 0
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	40 e8       	ldi	r20, 0x80	; 128
     59a:	5a e3       	ldi	r21, 0x3A	; 58
     59c:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     5a0:	2b 01       	movw	r4, r22
     5a2:	3c 01       	movw	r6, r24
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	a9 01       	movw	r20, r18
     5aa:	0e 94 ce 18 	call	0x319c	; 0x319c <__cmpsf2>
     5ae:	81 11       	cpse	r24, r1
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <vADCTaskFunction+0xa4>
					OCR0B--;
     5b2:	88 b5       	in	r24, 0x28	; 40
     5b4:	81 50       	subi	r24, 0x01	; 1
     5b6:	88 bd       	out	0x28, r24	; 40
     5b8:	17 c0       	rjmp	.+46     	; 0x5e8 <vADCTaskFunction+0xd2>
				}
				else if ((ADC_Value*5/1024)==4){
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	40 e8       	ldi	r20, 0x80	; 128
     5c0:	50 e4       	ldi	r21, 0x40	; 64
     5c2:	c3 01       	movw	r24, r6
     5c4:	b2 01       	movw	r22, r4
     5c6:	0e 94 ce 18 	call	0x319c	; 0x319c <__cmpsf2>
     5ca:	81 11       	cpse	r24, r1
     5cc:	0d c0       	rjmp	.+26     	; 0x5e8 <vADCTaskFunction+0xd2>
					OCR0B++;
     5ce:	88 b5       	in	r24, 0x28	; 40
     5d0:	8f 5f       	subi	r24, 0xFF	; 255
     5d2:	88 bd       	out	0x28, r24	; 40
     5d4:	09 c0       	rjmp	.+18     	; 0x5e8 <vADCTaskFunction+0xd2>

				}
			}
			else if (OCR0B<=10){
     5d6:	88 b5       	in	r24, 0x28	; 40
     5d8:	8b 30       	cpi	r24, 0x0B	; 11
     5da:	10 f4       	brcc	.+4      	; 0x5e0 <vADCTaskFunction+0xca>
				OCR0B=11;
     5dc:	b8 bc       	out	0x28, r11	; 40
     5de:	04 c0       	rjmp	.+8      	; 0x5e8 <vADCTaskFunction+0xd2>
			}
			else if (OCR0B>=40){
     5e0:	88 b5       	in	r24, 0x28	; 40
     5e2:	88 32       	cpi	r24, 0x28	; 40
     5e4:	08 f0       	brcs	.+2      	; 0x5e8 <vADCTaskFunction+0xd2>
				OCR0B=39;
     5e6:	a8 bc       	out	0x28, r10	; 40
			}
			sprintf(MyString,"Task ADC:%f\n",ADC_Value);
     5e8:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <ADC_Value+0x3>
     5ec:	8f 93       	push	r24
     5ee:	80 91 4b 02 	lds	r24, 0x024B	; 0x80024b <ADC_Value+0x2>
     5f2:	8f 93       	push	r24
     5f4:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <ADC_Value+0x1>
     5f8:	8f 93       	push	r24
     5fa:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <ADC_Value>
     5fe:	8f 93       	push	r24
     600:	ff 92       	push	r15
     602:	ef 92       	push	r14
     604:	1f 93       	push	r17
     606:	0f 93       	push	r16
     608:	0e 94 71 21 	call	0x42e2	; 0x42e2 <sprintf>
			UART_putstring(MyString);
     60c:	c8 01       	movw	r24, r16
     60e:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <UART_putstring>
// 			
		}
     612:	0f b6       	in	r0, 0x3f	; 63
     614:	f8 94       	cli
     616:	de bf       	out	0x3e, r29	; 62
     618:	0f be       	out	0x3f, r0	; 63
     61a:	cd bf       	out	0x3d, r28	; 61
     61c:	9a cf       	rjmp	.-204    	; 0x552 <vADCTaskFunction+0x3c>

0000061e <vMPU6050TaskFunction>:
		}
	}
	vTaskDelete( NULL );
}
void vMPU6050TaskFunction( void *pvParameters )
{
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	00 d0       	rcall	.+0      	; 0x624 <vMPU6050TaskFunction+0x6>
     624:	cd b7       	in	r28, 0x3d	; 61
     626:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeMPU;
		const TickType_t xPeriodFrequencyMPU = 1;// 15ms per tick
		
		xLastWakeTimeMPU = xTaskGetTickCount();
     628:	0e 94 c4 11 	call	0x2388	; 0x2388 <xTaskGetTickCount>
     62c:	9a 83       	std	Y+2, r25	; 0x02
     62e:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeMPU, xPeriodFrequencyMPU );
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	ce 01       	movw	r24, r28
     636:	01 96       	adiw	r24, 0x01	; 1
     638:	0e 94 10 13 	call	0x2620	; 0x2620 <vTaskDelayUntil>
//			TickType_t time1 = xTaskGetTickCount();
			MPU_read(AccData,GyroData);
     63c:	6a e0       	ldi	r22, 0x0A	; 10
     63e:	71 e0       	ldi	r23, 0x01	; 1
     640:	86 e1       	ldi	r24, 0x16	; 22
     642:	91 e0       	ldi	r25, 0x01	; 1
     644:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <MPU_read>
     648:	f3 cf       	rjmp	.-26     	; 0x630 <vMPU6050TaskFunction+0x12>

0000064a <vControlTaskFunction>:
	vTaskDelete( NULL );
}

// Task C for control
void vControlTaskFunction( void *pvParameters )
{
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	00 d0       	rcall	.+0      	; 0x650 <vControlTaskFunction+0x6>
     650:	cd b7       	in	r28, 0x3d	; 61
     652:	de b7       	in	r29, 0x3e	; 62
	for( ;; )
	{
		TickType_t xLastWakeTimeControl;
		const TickType_t xPeriodFrequencyControl = 1;// 15ms per tick  15ms*93 = 1395
		
		xLastWakeTimeControl = xTaskGetTickCount();
     654:	0e 94 c4 11 	call	0x2388	; 0x2388 <xTaskGetTickCount>
     658:	9a 83       	std	Y+2, r25	; 0x02
     65a:	89 83       	std	Y+1, r24	; 0x01

		for( ;; )
		{
			vTaskDelayUntil( &xLastWakeTimeControl, xPeriodFrequencyControl );
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	70 e0       	ldi	r23, 0x00	; 0
     660:	ce 01       	movw	r24, r28
     662:	01 96       	adiw	r24, 0x01	; 1
     664:	0e 94 10 13 	call	0x2620	; 0x2620 <vTaskDelayUntil>
			BalanceControl(Angle);
     668:	8d e4       	ldi	r24, 0x4D	; 77
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <BalanceControl>
     670:	f5 cf       	rjmp	.-22     	; 0x65c <vControlTaskFunction+0x12>

00000672 <MytaskCreate>:
	}
	vTaskDelete( NULL );
}
//
void MytaskCreate(void)
{
     672:	ef 92       	push	r14
     674:	ff 92       	push	r15
     676:	0f 93       	push	r16
	/* Create tasks and make some magic*/

	xTaskCreate( vMahonyTaskFunction,"TASKA",256,NULL,3,NULL);
     678:	e1 2c       	mov	r14, r1
     67a:	f1 2c       	mov	r15, r1
     67c:	03 e0       	ldi	r16, 0x03	; 3
     67e:	20 e0       	ldi	r18, 0x00	; 0
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	40 e0       	ldi	r20, 0x00	; 0
     684:	51 e0       	ldi	r21, 0x01	; 1
     686:	67 e5       	ldi	r22, 0x57	; 87
     688:	71 e0       	ldi	r23, 0x01	; 1
     68a:	88 ef       	ldi	r24, 0xF8	; 248
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskCreate>
	xTaskCreate( vMPU6050TaskFunction,"TASKB",256,NULL,2,NULL);
     692:	02 e0       	ldi	r16, 0x02	; 2
     694:	20 e0       	ldi	r18, 0x00	; 0
     696:	30 e0       	ldi	r19, 0x00	; 0
     698:	40 e0       	ldi	r20, 0x00	; 0
     69a:	51 e0       	ldi	r21, 0x01	; 1
     69c:	6d e5       	ldi	r22, 0x5D	; 93
     69e:	71 e0       	ldi	r23, 0x01	; 1
     6a0:	8f e0       	ldi	r24, 0x0F	; 15
     6a2:	93 e0       	ldi	r25, 0x03	; 3
     6a4:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskCreate>
	xTaskCreate( vControlTaskFunction,"TASKC",256,NULL,1,NULL);
     6a8:	01 e0       	ldi	r16, 0x01	; 1
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	30 e0       	ldi	r19, 0x00	; 0
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	51 e0       	ldi	r21, 0x01	; 1
     6b2:	63 e6       	ldi	r22, 0x63	; 99
     6b4:	71 e0       	ldi	r23, 0x01	; 1
     6b6:	85 e2       	ldi	r24, 0x25	; 37
     6b8:	93 e0       	ldi	r25, 0x03	; 3
     6ba:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskCreate>
	xTaskCreate( vADCTaskFunction,"TASKD",256,NULL,4,NULL);
     6be:	04 e0       	ldi	r16, 0x04	; 4
     6c0:	20 e0       	ldi	r18, 0x00	; 0
     6c2:	30 e0       	ldi	r19, 0x00	; 0
     6c4:	40 e0       	ldi	r20, 0x00	; 0
     6c6:	51 e0       	ldi	r21, 0x01	; 1
     6c8:	69 e6       	ldi	r22, 0x69	; 105
     6ca:	71 e0       	ldi	r23, 0x01	; 1
     6cc:	8b e8       	ldi	r24, 0x8B	; 139
     6ce:	92 e0       	ldi	r25, 0x02	; 2
     6d0:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskCreate>
	
}
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	08 95       	ret

000006dc <BalanceControl>:
	Parameter.increment_error += error;
	return output;
}

void BalanceControl(float pAngle[3])
{
     6dc:	4f 92       	push	r4
     6de:	5f 92       	push	r5
     6e0:	6f 92       	push	r6
     6e2:	7f 92       	push	r7
     6e4:	8f 92       	push	r8
     6e6:	9f 92       	push	r9
     6e8:	af 92       	push	r10
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
	float x_error = pAngle[0] - 0;
     6f8:	fc 01       	movw	r30, r24
     6fa:	80 80       	ld	r8, Z
     6fc:	91 80       	ldd	r9, Z+1	; 0x01
     6fe:	a2 80       	ldd	r10, Z+2	; 0x02
     700:	b3 80       	ldd	r11, Z+3	; 0x03
	float y_error = pAngle[1] - 0;	
     702:	c4 80       	ldd	r12, Z+4	; 0x04
     704:	d5 80       	ldd	r13, Z+5	; 0x05
     706:	e6 80       	ldd	r14, Z+6	; 0x06
     708:	f7 80       	ldd	r15, Z+7	; 0x07
     70a:	c4 e8       	ldi	r28, 0x84	; 132
     70c:	d1 e0       	ldi	r29, 0x01	; 1
	deg_to_servo1(PID(x_error,PID_Freq,PIDParaX));
     70e:	2f e6       	ldi	r18, 0x6F	; 111
     710:	32 e1       	ldi	r19, 0x12	; 18
     712:	43 e8       	ldi	r20, 0x83	; 131
     714:	5a e3       	ldi	r21, 0x3A	; 58
     716:	6c 81       	ldd	r22, Y+4	; 0x04
     718:	7d 81       	ldd	r23, Y+5	; 0x05
     71a:	8e 81       	ldd	r24, Y+6	; 0x06
     71c:	9f 81       	ldd	r25, Y+7	; 0x07
     71e:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     722:	26 e6       	ldi	r18, 0x66	; 102
     724:	36 e6       	ldi	r19, 0x66	; 102
     726:	45 e8       	ldi	r20, 0x85	; 133
     728:	52 e4       	ldi	r21, 0x42	; 66
     72a:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__divsf3>
     72e:	2b 01       	movw	r4, r22
     730:	3c 01       	movw	r6, r24
     732:	20 e0       	ldi	r18, 0x00	; 0
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	40 e0       	ldi	r20, 0x00	; 0
     738:	5f e3       	ldi	r21, 0x3F	; 63
     73a:	c5 01       	movw	r24, r10
     73c:	b4 01       	movw	r22, r8
     73e:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     742:	9b 01       	movw	r18, r22
     744:	ac 01       	movw	r20, r24
     746:	c3 01       	movw	r24, r6
     748:	b2 01       	movw	r22, r4
     74a:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     74e:	2b 01       	movw	r4, r22
     750:	3c 01       	movw	r6, r24
     752:	28 81       	ld	r18, Y
     754:	39 81       	ldd	r19, Y+1	; 0x01
     756:	4a 81       	ldd	r20, Y+2	; 0x02
     758:	5b 81       	ldd	r21, Y+3	; 0x03
     75a:	c5 01       	movw	r24, r10
     75c:	b4 01       	movw	r22, r8
     75e:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	a9 01       	movw	r20, r18
     768:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     76c:	26 e6       	ldi	r18, 0x66	; 102
     76e:	36 e6       	ldi	r19, 0x66	; 102
     770:	45 e8       	ldi	r20, 0x85	; 133
     772:	52 e4       	ldi	r21, 0x42	; 66
     774:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     778:	9b 01       	movw	r18, r22
     77a:	ac 01       	movw	r20, r24
     77c:	c3 01       	movw	r24, r6
     77e:	b2 01       	movw	r22, r4
     780:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     784:	0e 94 45 19 	call	0x328a	; 0x328a <__fixsfsi>
     788:	cb 01       	movw	r24, r22
     78a:	0e 94 73 01 	call	0x2e6	; 0x2e6 <deg_to_servo1>
     78e:	cc e7       	ldi	r28, 0x7C	; 124
     790:	d1 e0       	ldi	r29, 0x01	; 1
	deg_to_servo2(PID(y_error,PID_Freq,PIDParaY));	
     792:	2f e6       	ldi	r18, 0x6F	; 111
     794:	32 e1       	ldi	r19, 0x12	; 18
     796:	43 e8       	ldi	r20, 0x83	; 131
     798:	5a e3       	ldi	r21, 0x3A	; 58
     79a:	6c 81       	ldd	r22, Y+4	; 0x04
     79c:	7d 81       	ldd	r23, Y+5	; 0x05
     79e:	8e 81       	ldd	r24, Y+6	; 0x06
     7a0:	9f 81       	ldd	r25, Y+7	; 0x07
     7a2:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     7a6:	26 e6       	ldi	r18, 0x66	; 102
     7a8:	36 e6       	ldi	r19, 0x66	; 102
     7aa:	45 e8       	ldi	r20, 0x85	; 133
     7ac:	52 e4       	ldi	r21, 0x42	; 66
     7ae:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__divsf3>
     7b2:	4b 01       	movw	r8, r22
     7b4:	5c 01       	movw	r10, r24
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e0       	ldi	r20, 0x00	; 0
     7bc:	5f e3       	ldi	r21, 0x3F	; 63
     7be:	c7 01       	movw	r24, r14
     7c0:	b6 01       	movw	r22, r12
     7c2:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     7c6:	9b 01       	movw	r18, r22
     7c8:	ac 01       	movw	r20, r24
     7ca:	c5 01       	movw	r24, r10
     7cc:	b4 01       	movw	r22, r8
     7ce:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     7d2:	4b 01       	movw	r8, r22
     7d4:	5c 01       	movw	r10, r24
     7d6:	28 81       	ld	r18, Y
     7d8:	39 81       	ldd	r19, Y+1	; 0x01
     7da:	4a 81       	ldd	r20, Y+2	; 0x02
     7dc:	5b 81       	ldd	r21, Y+3	; 0x03
     7de:	c7 01       	movw	r24, r14
     7e0:	b6 01       	movw	r22, r12
     7e2:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	a9 01       	movw	r20, r18
     7ec:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     7f0:	26 e6       	ldi	r18, 0x66	; 102
     7f2:	36 e6       	ldi	r19, 0x66	; 102
     7f4:	45 e8       	ldi	r20, 0x85	; 133
     7f6:	52 e4       	ldi	r21, 0x42	; 66
     7f8:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     7fc:	9b 01       	movw	r18, r22
     7fe:	ac 01       	movw	r20, r24
     800:	c5 01       	movw	r24, r10
     802:	b4 01       	movw	r22, r8
     804:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     808:	0e 94 45 19 	call	0x328a	; 0x328a <__fixsfsi>
     80c:	cb 01       	movw	r24, r22
     80e:	0e 94 8c 01 	call	0x318	; 0x318 <deg_to_servo2>
	
     812:	df 91       	pop	r29
     814:	cf 91       	pop	r28
     816:	ff 90       	pop	r15
     818:	ef 90       	pop	r14
     81a:	df 90       	pop	r13
     81c:	cf 90       	pop	r12
     81e:	bf 90       	pop	r11
     820:	af 90       	pop	r10
     822:	9f 90       	pop	r9
     824:	8f 90       	pop	r8
     826:	7f 90       	pop	r7
     828:	6f 90       	pop	r6
     82a:	5f 90       	pop	r5
     82c:	4f 90       	pop	r4
     82e:	08 95       	ret

00000830 <invSqrt>:
float integralFBx = 0;
float integralFBy = 0;
float integralFBz = 0;

float invSqrt( float number )
{
     830:	cf 92       	push	r12
     832:	df 92       	push	r13
     834:	ef 92       	push	r14
     836:	ff 92       	push	r15
     838:	0f 93       	push	r16
     83a:	1f 93       	push	r17

	x2 = number * 0.5F;
	y  = number;
	i  = * ( long * ) &y;                       
	i  = 0x5f3759df - ( i >> 1 );               
	y  = * ( float * ) &i;
     83c:	8b 01       	movw	r16, r22
     83e:	9c 01       	movw	r18, r24
     840:	35 95       	asr	r19
     842:	27 95       	ror	r18
     844:	17 95       	ror	r17
     846:	07 95       	ror	r16
     848:	0f 2e       	mov	r0, r31
     84a:	ff ed       	ldi	r31, 0xDF	; 223
     84c:	cf 2e       	mov	r12, r31
     84e:	f9 e5       	ldi	r31, 0x59	; 89
     850:	df 2e       	mov	r13, r31
     852:	f7 e3       	ldi	r31, 0x37	; 55
     854:	ef 2e       	mov	r14, r31
     856:	ff e5       	ldi	r31, 0x5F	; 95
     858:	ff 2e       	mov	r15, r31
     85a:	f0 2d       	mov	r31, r0
     85c:	c0 1a       	sub	r12, r16
     85e:	d1 0a       	sbc	r13, r17
     860:	e2 0a       	sbc	r14, r18
     862:	f3 0a       	sbc	r15, r19
	y  = y * ( threehalfs - ( x2 * y * y ) );   

	return y;
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e0       	ldi	r20, 0x00	; 0
     86a:	5f e3       	ldi	r21, 0x3F	; 63
     86c:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     870:	a7 01       	movw	r20, r14
     872:	96 01       	movw	r18, r12
     874:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     878:	a7 01       	movw	r20, r14
     87a:	96 01       	movw	r18, r12
     87c:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     880:	9b 01       	movw	r18, r22
     882:	ac 01       	movw	r20, r24
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	70 e0       	ldi	r23, 0x00	; 0
     888:	80 ec       	ldi	r24, 0xC0	; 192
     88a:	9f e3       	ldi	r25, 0x3F	; 63
     88c:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     890:	a7 01       	movw	r20, r14
     892:	96 01       	movw	r18, r12
     894:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
}
     898:	1f 91       	pop	r17
     89a:	0f 91       	pop	r16
     89c:	ff 90       	pop	r15
     89e:	ef 90       	pop	r14
     8a0:	df 90       	pop	r13
     8a2:	cf 90       	pop	r12
     8a4:	08 95       	ret

000008a6 <MahonyAHRSupdateIMU>:

void MahonyAHRSupdateIMU(float gx, float gy, float gz, float ax, float ay, float az) 
{
     8a6:	4f 92       	push	r4
     8a8:	5f 92       	push	r5
     8aa:	6f 92       	push	r6
     8ac:	7f 92       	push	r7
     8ae:	8f 92       	push	r8
     8b0:	9f 92       	push	r9
     8b2:	af 92       	push	r10
     8b4:	bf 92       	push	r11
     8b6:	cf 92       	push	r12
     8b8:	df 92       	push	r13
     8ba:	ef 92       	push	r14
     8bc:	ff 92       	push	r15
     8be:	0f 93       	push	r16
     8c0:	1f 93       	push	r17
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
     8c6:	cd b7       	in	r28, 0x3d	; 61
     8c8:	de b7       	in	r29, 0x3e	; 62
     8ca:	a0 97       	sbiw	r28, 0x20	; 32
     8cc:	0f b6       	in	r0, 0x3f	; 63
     8ce:	f8 94       	cli
     8d0:	de bf       	out	0x3e, r29	; 62
     8d2:	0f be       	out	0x3f, r0	; 63
     8d4:	cd bf       	out	0x3d, r28	; 61
     8d6:	69 87       	std	Y+9, r22	; 0x09
     8d8:	7a 87       	std	Y+10, r23	; 0x0a
     8da:	8b 87       	std	Y+11, r24	; 0x0b
     8dc:	9c 87       	std	Y+12, r25	; 0x0c
     8de:	2d 87       	std	Y+13, r18	; 0x0d
     8e0:	3e 87       	std	Y+14, r19	; 0x0e
     8e2:	4f 87       	std	Y+15, r20	; 0x0f
     8e4:	58 8b       	std	Y+16, r21	; 0x10
     8e6:	e9 8a       	std	Y+17, r14	; 0x11
     8e8:	fa 8a       	std	Y+18, r15	; 0x12
     8ea:	0b 8b       	std	Y+19, r16	; 0x13
     8ec:	1c 8b       	std	Y+20, r17	; 0x14

	float qa, qb, qc;
	
	// Compute feedback only if accelerometer measurement valid (avoids NaN in accelerometer normalisation)

	if(!((ax == 0.0f) && (ay == 0.0f) && (az == 0.0f))) {
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	a9 01       	movw	r20, r18
     8f4:	c6 01       	movw	r24, r12
     8f6:	b5 01       	movw	r22, r10
     8f8:	0e 94 ce 18 	call	0x319c	; 0x319c <__cmpsf2>
     8fc:	81 11       	cpse	r24, r1
     8fe:	17 c0       	rjmp	.+46     	; 0x92e <__stack+0x2f>
     900:	20 e0       	ldi	r18, 0x00	; 0
     902:	30 e0       	ldi	r19, 0x00	; 0
     904:	a9 01       	movw	r20, r18
     906:	6b a9       	ldd	r22, Y+51	; 0x33
     908:	7c a9       	ldd	r23, Y+52	; 0x34
     90a:	8d a9       	ldd	r24, Y+53	; 0x35
     90c:	9e a9       	ldd	r25, Y+54	; 0x36
     90e:	0e 94 ce 18 	call	0x319c	; 0x319c <__cmpsf2>
     912:	81 11       	cpse	r24, r1
     914:	0c c0       	rjmp	.+24     	; 0x92e <__stack+0x2f>
     916:	20 e0       	ldi	r18, 0x00	; 0
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	a9 01       	movw	r20, r18
     91c:	6f a9       	ldd	r22, Y+55	; 0x37
     91e:	78 ad       	ldd	r23, Y+56	; 0x38
     920:	89 ad       	ldd	r24, Y+57	; 0x39
     922:	9a ad       	ldd	r25, Y+58	; 0x3a
     924:	0e 94 ce 18 	call	0x319c	; 0x319c <__cmpsf2>
     928:	88 23       	and	r24, r24
     92a:	09 f4       	brne	.+2      	; 0x92e <__stack+0x2f>
     92c:	50 c1       	rjmp	.+672    	; 0xbce <__stack+0x2cf>

		// Normalise accelerometer measurement

		recipNorm = invSqrt(ax * ax + ay * ay + az * az);
     92e:	a6 01       	movw	r20, r12
     930:	95 01       	movw	r18, r10
     932:	c6 01       	movw	r24, r12
     934:	b5 01       	movw	r22, r10
     936:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     93a:	2b 01       	movw	r4, r22
     93c:	3c 01       	movw	r6, r24
     93e:	2b a9       	ldd	r18, Y+51	; 0x33
     940:	3c a9       	ldd	r19, Y+52	; 0x34
     942:	4d a9       	ldd	r20, Y+53	; 0x35
     944:	5e a9       	ldd	r21, Y+54	; 0x36
     946:	ca 01       	movw	r24, r20
     948:	b9 01       	movw	r22, r18
     94a:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	c3 01       	movw	r24, r6
     954:	b2 01       	movw	r22, r4
     956:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     95a:	2b 01       	movw	r4, r22
     95c:	3c 01       	movw	r6, r24
     95e:	2f a9       	ldd	r18, Y+55	; 0x37
     960:	38 ad       	ldd	r19, Y+56	; 0x38
     962:	49 ad       	ldd	r20, Y+57	; 0x39
     964:	5a ad       	ldd	r21, Y+58	; 0x3a
     966:	ca 01       	movw	r24, r20
     968:	b9 01       	movw	r22, r18
     96a:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     96e:	9b 01       	movw	r18, r22
     970:	ac 01       	movw	r20, r24
     972:	c3 01       	movw	r24, r6
     974:	b2 01       	movw	r22, r4
     976:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     97a:	0e 94 18 04 	call	0x830	; 0x830 <invSqrt>
     97e:	2b 01       	movw	r4, r22
     980:	3c 01       	movw	r6, r24

		ax *= recipNorm;
     982:	9b 01       	movw	r18, r22
     984:	ac 01       	movw	r20, r24
     986:	c6 01       	movw	r24, r12
     988:	b5 01       	movw	r22, r10
     98a:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     98e:	69 8f       	std	Y+25, r22	; 0x19
     990:	7a 8f       	std	Y+26, r23	; 0x1a
     992:	8b 8f       	std	Y+27, r24	; 0x1b
     994:	9c 8f       	std	Y+28, r25	; 0x1c

		ay *= recipNorm;
     996:	a3 01       	movw	r20, r6
     998:	92 01       	movw	r18, r4
     99a:	6b a9       	ldd	r22, Y+51	; 0x33
     99c:	7c a9       	ldd	r23, Y+52	; 0x34
     99e:	8d a9       	ldd	r24, Y+53	; 0x35
     9a0:	9e a9       	ldd	r25, Y+54	; 0x36
     9a2:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     9a6:	6d 8f       	std	Y+29, r22	; 0x1d
     9a8:	7e 8f       	std	Y+30, r23	; 0x1e
     9aa:	8f 8f       	std	Y+31, r24	; 0x1f
     9ac:	98 a3       	std	Y+32, r25	; 0x20

		az *= recipNorm;
     9ae:	a3 01       	movw	r20, r6
     9b0:	92 01       	movw	r18, r4
     9b2:	6f a9       	ldd	r22, Y+55	; 0x37
     9b4:	78 ad       	ldd	r23, Y+56	; 0x38
     9b6:	89 ad       	ldd	r24, Y+57	; 0x39
     9b8:	9a ad       	ldd	r25, Y+58	; 0x3a
     9ba:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     9be:	6d 83       	std	Y+5, r22	; 0x05
     9c0:	7e 83       	std	Y+6, r23	; 0x06
     9c2:	8f 83       	std	Y+7, r24	; 0x07
     9c4:	98 87       	std	Y+8, r25	; 0x08

		// Estimated direction of gravity and vector perpendicular to magnetic flux

		halfvx = q1 * q3 - q0 * q2;
     9c6:	80 90 a0 01 	lds	r8, 0x01A0	; 0x8001a0 <q1>
     9ca:	90 90 a1 01 	lds	r9, 0x01A1	; 0x8001a1 <q1+0x1>
     9ce:	a0 90 a2 01 	lds	r10, 0x01A2	; 0x8001a2 <q1+0x2>
     9d2:	b0 90 a3 01 	lds	r11, 0x01A3	; 0x8001a3 <q1+0x3>
     9d6:	40 90 98 01 	lds	r4, 0x0198	; 0x800198 <q3>
     9da:	50 90 99 01 	lds	r5, 0x0199	; 0x800199 <q3+0x1>
     9de:	60 90 9a 01 	lds	r6, 0x019A	; 0x80019a <q3+0x2>
     9e2:	70 90 9b 01 	lds	r7, 0x019B	; 0x80019b <q3+0x3>
     9e6:	c0 90 06 01 	lds	r12, 0x0106	; 0x800106 <q0>
     9ea:	d0 90 07 01 	lds	r13, 0x0107	; 0x800107 <q0+0x1>
     9ee:	e0 90 08 01 	lds	r14, 0x0108	; 0x800108 <q0+0x2>
     9f2:	f0 90 09 01 	lds	r15, 0x0109	; 0x800109 <q0+0x3>
     9f6:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <q2>
     9fa:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <q2+0x1>
     9fe:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <q2+0x2>
     a02:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <q2+0x3>
     a06:	89 83       	std	Y+1, r24	; 0x01
     a08:	9a 83       	std	Y+2, r25	; 0x02
     a0a:	ab 83       	std	Y+3, r26	; 0x03
     a0c:	bc 83       	std	Y+4, r27	; 0x04
     a0e:	a3 01       	movw	r20, r6
     a10:	92 01       	movw	r18, r4
     a12:	c5 01       	movw	r24, r10
     a14:	b4 01       	movw	r22, r8
     a16:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     a1a:	6d 8b       	std	Y+21, r22	; 0x15
     a1c:	7e 8b       	std	Y+22, r23	; 0x16
     a1e:	8f 8b       	std	Y+23, r24	; 0x17
     a20:	98 8f       	std	Y+24, r25	; 0x18
     a22:	29 81       	ldd	r18, Y+1	; 0x01
     a24:	3a 81       	ldd	r19, Y+2	; 0x02
     a26:	4b 81       	ldd	r20, Y+3	; 0x03
     a28:	5c 81       	ldd	r21, Y+4	; 0x04
     a2a:	c7 01       	movw	r24, r14
     a2c:	b6 01       	movw	r22, r12
     a2e:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     a32:	9b 01       	movw	r18, r22
     a34:	ac 01       	movw	r20, r24
     a36:	6d 89       	ldd	r22, Y+21	; 0x15
     a38:	7e 89       	ldd	r23, Y+22	; 0x16
     a3a:	8f 89       	ldd	r24, Y+23	; 0x17
     a3c:	98 8d       	ldd	r25, Y+24	; 0x18
     a3e:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     a42:	6d 8b       	std	Y+21, r22	; 0x15
     a44:	7e 8b       	std	Y+22, r23	; 0x16
     a46:	8f 8b       	std	Y+23, r24	; 0x17
     a48:	98 8f       	std	Y+24, r25	; 0x18

		halfvy = q0 * q1 + q2 * q3;
     a4a:	a7 01       	movw	r20, r14
     a4c:	96 01       	movw	r18, r12
     a4e:	c5 01       	movw	r24, r10
     a50:	b4 01       	movw	r22, r8
     a52:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     a56:	4b 01       	movw	r8, r22
     a58:	5c 01       	movw	r10, r24
     a5a:	29 81       	ldd	r18, Y+1	; 0x01
     a5c:	3a 81       	ldd	r19, Y+2	; 0x02
     a5e:	4b 81       	ldd	r20, Y+3	; 0x03
     a60:	5c 81       	ldd	r21, Y+4	; 0x04
     a62:	c3 01       	movw	r24, r6
     a64:	b2 01       	movw	r22, r4
     a66:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     a6a:	9b 01       	movw	r18, r22
     a6c:	ac 01       	movw	r20, r24
     a6e:	c5 01       	movw	r24, r10
     a70:	b4 01       	movw	r22, r8
     a72:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     a76:	69 83       	std	Y+1, r22	; 0x01
     a78:	7a 83       	std	Y+2, r23	; 0x02
     a7a:	8b 83       	std	Y+3, r24	; 0x03
     a7c:	9c 83       	std	Y+4, r25	; 0x04

		halfvz = q0 * q0 - 0.5f + q3 * q3;
     a7e:	a7 01       	movw	r20, r14
     a80:	96 01       	movw	r18, r12
     a82:	c7 01       	movw	r24, r14
     a84:	b6 01       	movw	r22, r12
     a86:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e0       	ldi	r20, 0x00	; 0
     a90:	5f e3       	ldi	r21, 0x3F	; 63
     a92:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     a96:	6b 01       	movw	r12, r22
     a98:	7c 01       	movw	r14, r24
     a9a:	a3 01       	movw	r20, r6
     a9c:	92 01       	movw	r18, r4
     a9e:	c3 01       	movw	r24, r6
     aa0:	b2 01       	movw	r22, r4
     aa2:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     aa6:	9b 01       	movw	r18, r22
     aa8:	ac 01       	movw	r20, r24
     aaa:	c7 01       	movw	r24, r14
     aac:	b6 01       	movw	r22, r12
     aae:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24

		}

		else {

			integralFBx = 0.0f; // prevent integral windup
     ab6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <integralFBx>
     aba:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <integralFBx+0x1>
     abe:	10 92 96 01 	sts	0x0196, r1	; 0x800196 <integralFBx+0x2>
     ac2:	10 92 97 01 	sts	0x0197, r1	; 0x800197 <integralFBx+0x3>

			integralFBy = 0.0f;
     ac6:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <integralFBy>
     aca:	10 92 91 01 	sts	0x0191, r1	; 0x800191 <integralFBy+0x1>
     ace:	10 92 92 01 	sts	0x0192, r1	; 0x800192 <integralFBy+0x2>
     ad2:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <integralFBy+0x3>

			integralFBz = 0.0f;
     ad6:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <integralFBz>
     ada:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <integralFBz+0x1>
     ade:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <integralFBz+0x2>
     ae2:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <integralFBz+0x3>

		}

		// Apply proportional feedback

		gx += twoKp * halfex;
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	6d 8d       	ldd	r22, Y+29	; 0x1d
     aec:	7e 8d       	ldd	r23, Y+30	; 0x1e
     aee:	8f 8d       	ldd	r24, Y+31	; 0x1f
     af0:	98 a1       	ldd	r25, Y+32	; 0x20
     af2:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     af6:	4b 01       	movw	r8, r22
     af8:	5c 01       	movw	r10, r24
     afa:	29 81       	ldd	r18, Y+1	; 0x01
     afc:	3a 81       	ldd	r19, Y+2	; 0x02
     afe:	4b 81       	ldd	r20, Y+3	; 0x03
     b00:	5c 81       	ldd	r21, Y+4	; 0x04
     b02:	6d 81       	ldd	r22, Y+5	; 0x05
     b04:	7e 81       	ldd	r23, Y+6	; 0x06
     b06:	8f 81       	ldd	r24, Y+7	; 0x07
     b08:	98 85       	ldd	r25, Y+8	; 0x08
     b0a:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c5 01       	movw	r24, r10
     b14:	b4 01       	movw	r22, r8
     b16:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     b1a:	9b 01       	movw	r18, r22
     b1c:	ac 01       	movw	r20, r24
     b1e:	69 85       	ldd	r22, Y+9	; 0x09
     b20:	7a 85       	ldd	r23, Y+10	; 0x0a
     b22:	8b 85       	ldd	r24, Y+11	; 0x0b
     b24:	9c 85       	ldd	r25, Y+12	; 0x0c
     b26:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     b2a:	69 87       	std	Y+9, r22	; 0x09
     b2c:	7a 87       	std	Y+10, r23	; 0x0a
     b2e:	8b 87       	std	Y+11, r24	; 0x0b
     b30:	9c 87       	std	Y+12, r25	; 0x0c

		gy += twoKp * halfey;
     b32:	2d 89       	ldd	r18, Y+21	; 0x15
     b34:	3e 89       	ldd	r19, Y+22	; 0x16
     b36:	4f 89       	ldd	r20, Y+23	; 0x17
     b38:	58 8d       	ldd	r21, Y+24	; 0x18
     b3a:	6d 81       	ldd	r22, Y+5	; 0x05
     b3c:	7e 81       	ldd	r23, Y+6	; 0x06
     b3e:	8f 81       	ldd	r24, Y+7	; 0x07
     b40:	98 85       	ldd	r25, Y+8	; 0x08
     b42:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     b46:	4b 01       	movw	r8, r22
     b48:	5c 01       	movw	r10, r24
     b4a:	a7 01       	movw	r20, r14
     b4c:	96 01       	movw	r18, r12
     b4e:	69 8d       	ldd	r22, Y+25	; 0x19
     b50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b56:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     b5a:	9b 01       	movw	r18, r22
     b5c:	ac 01       	movw	r20, r24
     b5e:	c5 01       	movw	r24, r10
     b60:	b4 01       	movw	r22, r8
     b62:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
     b6a:	6d 85       	ldd	r22, Y+13	; 0x0d
     b6c:	7e 85       	ldd	r23, Y+14	; 0x0e
     b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
     b70:	98 89       	ldd	r25, Y+16	; 0x10
     b72:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     b76:	6d 87       	std	Y+13, r22	; 0x0d
     b78:	7e 87       	std	Y+14, r23	; 0x0e
     b7a:	8f 87       	std	Y+15, r24	; 0x0f
     b7c:	98 8b       	std	Y+16, r25	; 0x10

		gz += twoKp * halfez;
     b7e:	29 81       	ldd	r18, Y+1	; 0x01
     b80:	3a 81       	ldd	r19, Y+2	; 0x02
     b82:	4b 81       	ldd	r20, Y+3	; 0x03
     b84:	5c 81       	ldd	r21, Y+4	; 0x04
     b86:	69 8d       	ldd	r22, Y+25	; 0x19
     b88:	7a 8d       	ldd	r23, Y+26	; 0x1a
     b8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     b8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     b8e:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     b92:	6b 01       	movw	r12, r22
     b94:	7c 01       	movw	r14, r24
     b96:	2d 89       	ldd	r18, Y+21	; 0x15
     b98:	3e 89       	ldd	r19, Y+22	; 0x16
     b9a:	4f 89       	ldd	r20, Y+23	; 0x17
     b9c:	58 8d       	ldd	r21, Y+24	; 0x18
     b9e:	6d 8d       	ldd	r22, Y+29	; 0x1d
     ba0:	7e 8d       	ldd	r23, Y+30	; 0x1e
     ba2:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ba4:	98 a1       	ldd	r25, Y+32	; 0x20
     ba6:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
     bae:	c7 01       	movw	r24, r14
     bb0:	b6 01       	movw	r22, r12
     bb2:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
     bba:	69 89       	ldd	r22, Y+17	; 0x11
     bbc:	7a 89       	ldd	r23, Y+18	; 0x12
     bbe:	8b 89       	ldd	r24, Y+19	; 0x13
     bc0:	9c 89       	ldd	r25, Y+20	; 0x14
     bc2:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     bc6:	69 8b       	std	Y+17, r22	; 0x11
     bc8:	7a 8b       	std	Y+18, r23	; 0x12
     bca:	8b 8b       	std	Y+19, r24	; 0x13
     bcc:	9c 8b       	std	Y+20, r25	; 0x14

	}

	// Integrate rate of change of quaternion

	gx *= (0.5f * (1.0f / sampleFreq)); // pre-multiply common factors
     bce:	2f e1       	ldi	r18, 0x1F	; 31
     bd0:	33 ea       	ldi	r19, 0xA3	; 163
     bd2:	45 ef       	ldi	r20, 0xF5	; 245
     bd4:	5b e3       	ldi	r21, 0x3B	; 59
     bd6:	69 85       	ldd	r22, Y+9	; 0x09
     bd8:	7a 85       	ldd	r23, Y+10	; 0x0a
     bda:	8b 85       	ldd	r24, Y+11	; 0x0b
     bdc:	9c 85       	ldd	r25, Y+12	; 0x0c
     bde:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     be2:	69 87       	std	Y+9, r22	; 0x09
     be4:	7a 87       	std	Y+10, r23	; 0x0a
     be6:	8b 87       	std	Y+11, r24	; 0x0b
     be8:	9c 87       	std	Y+12, r25	; 0x0c

	gy *= (0.5f * (1.0f / sampleFreq));
     bea:	2f e1       	ldi	r18, 0x1F	; 31
     bec:	33 ea       	ldi	r19, 0xA3	; 163
     bee:	45 ef       	ldi	r20, 0xF5	; 245
     bf0:	5b e3       	ldi	r21, 0x3B	; 59
     bf2:	6d 85       	ldd	r22, Y+13	; 0x0d
     bf4:	7e 85       	ldd	r23, Y+14	; 0x0e
     bf6:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf8:	98 89       	ldd	r25, Y+16	; 0x10
     bfa:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     bfe:	6d 87       	std	Y+13, r22	; 0x0d
     c00:	7e 87       	std	Y+14, r23	; 0x0e
     c02:	8f 87       	std	Y+15, r24	; 0x0f
     c04:	98 8b       	std	Y+16, r25	; 0x10

	gz *= (0.5f * (1.0f / sampleFreq));
     c06:	2f e1       	ldi	r18, 0x1F	; 31
     c08:	33 ea       	ldi	r19, 0xA3	; 163
     c0a:	45 ef       	ldi	r20, 0xF5	; 245
     c0c:	5b e3       	ldi	r21, 0x3B	; 59
     c0e:	69 89       	ldd	r22, Y+17	; 0x11
     c10:	7a 89       	ldd	r23, Y+18	; 0x12
     c12:	8b 89       	ldd	r24, Y+19	; 0x13
     c14:	9c 89       	ldd	r25, Y+20	; 0x14
     c16:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     c1a:	69 8b       	std	Y+17, r22	; 0x11
     c1c:	7a 8b       	std	Y+18, r23	; 0x12
     c1e:	8b 8b       	std	Y+19, r24	; 0x13
     c20:	9c 8b       	std	Y+20, r25	; 0x14

	qa = q0;
     c22:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <q0>
     c26:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <q0+0x1>
     c2a:	a0 91 08 01 	lds	r26, 0x0108	; 0x800108 <q0+0x2>
     c2e:	b0 91 09 01 	lds	r27, 0x0109	; 0x800109 <q0+0x3>
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	9a 83       	std	Y+2, r25	; 0x02
     c36:	ab 83       	std	Y+3, r26	; 0x03
     c38:	bc 83       	std	Y+4, r27	; 0x04

	qb = q1;
     c3a:	c0 90 a0 01 	lds	r12, 0x01A0	; 0x8001a0 <q1>
     c3e:	d0 90 a1 01 	lds	r13, 0x01A1	; 0x8001a1 <q1+0x1>
     c42:	e0 90 a2 01 	lds	r14, 0x01A2	; 0x8001a2 <q1+0x2>
     c46:	f0 90 a3 01 	lds	r15, 0x01A3	; 0x8001a3 <q1+0x3>

	qc = q2;
     c4a:	80 91 9c 01 	lds	r24, 0x019C	; 0x80019c <q2>
     c4e:	90 91 9d 01 	lds	r25, 0x019D	; 0x80019d <q2+0x1>
     c52:	a0 91 9e 01 	lds	r26, 0x019E	; 0x80019e <q2+0x2>
     c56:	b0 91 9f 01 	lds	r27, 0x019F	; 0x80019f <q2+0x3>
     c5a:	8d 83       	std	Y+5, r24	; 0x05
     c5c:	9e 83       	std	Y+6, r25	; 0x06
     c5e:	af 83       	std	Y+7, r26	; 0x07
     c60:	b8 87       	std	Y+8, r27	; 0x08

	//update

	q0 += (-qb * gx - qc * gy - q3 * gz);
     c62:	40 90 98 01 	lds	r4, 0x0198	; 0x800198 <q3>
     c66:	50 90 99 01 	lds	r5, 0x0199	; 0x800199 <q3+0x1>
     c6a:	60 90 9a 01 	lds	r6, 0x019A	; 0x80019a <q3+0x2>
     c6e:	70 90 9b 01 	lds	r7, 0x019B	; 0x80019b <q3+0x3>
     c72:	c7 01       	movw	r24, r14
     c74:	b6 01       	movw	r22, r12
     c76:	90 58       	subi	r25, 0x80	; 128
     c78:	29 85       	ldd	r18, Y+9	; 0x09
     c7a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c7c:	4b 85       	ldd	r20, Y+11	; 0x0b
     c7e:	5c 85       	ldd	r21, Y+12	; 0x0c
     c80:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     c84:	4b 01       	movw	r8, r22
     c86:	5c 01       	movw	r10, r24
     c88:	2d 81       	ldd	r18, Y+5	; 0x05
     c8a:	3e 81       	ldd	r19, Y+6	; 0x06
     c8c:	4f 81       	ldd	r20, Y+7	; 0x07
     c8e:	58 85       	ldd	r21, Y+8	; 0x08
     c90:	6d 85       	ldd	r22, Y+13	; 0x0d
     c92:	7e 85       	ldd	r23, Y+14	; 0x0e
     c94:	8f 85       	ldd	r24, Y+15	; 0x0f
     c96:	98 89       	ldd	r25, Y+16	; 0x10
     c98:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     c9c:	9b 01       	movw	r18, r22
     c9e:	ac 01       	movw	r20, r24
     ca0:	c5 01       	movw	r24, r10
     ca2:	b4 01       	movw	r22, r8
     ca4:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     ca8:	4b 01       	movw	r8, r22
     caa:	5c 01       	movw	r10, r24
     cac:	a3 01       	movw	r20, r6
     cae:	92 01       	movw	r18, r4
     cb0:	69 89       	ldd	r22, Y+17	; 0x11
     cb2:	7a 89       	ldd	r23, Y+18	; 0x12
     cb4:	8b 89       	ldd	r24, Y+19	; 0x13
     cb6:	9c 89       	ldd	r25, Y+20	; 0x14
     cb8:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     cbc:	9b 01       	movw	r18, r22
     cbe:	ac 01       	movw	r20, r24
     cc0:	c5 01       	movw	r24, r10
     cc2:	b4 01       	movw	r22, r8
     cc4:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     cc8:	29 81       	ldd	r18, Y+1	; 0x01
     cca:	3a 81       	ldd	r19, Y+2	; 0x02
     ccc:	4b 81       	ldd	r20, Y+3	; 0x03
     cce:	5c 81       	ldd	r21, Y+4	; 0x04
     cd0:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     cd4:	69 8f       	std	Y+25, r22	; 0x19
     cd6:	7a 8f       	std	Y+26, r23	; 0x1a
     cd8:	8b 8f       	std	Y+27, r24	; 0x1b
     cda:	9c 8f       	std	Y+28, r25	; 0x1c

	q1 += (qa * gx + qc * gz - q3 * gy);
     cdc:	29 81       	ldd	r18, Y+1	; 0x01
     cde:	3a 81       	ldd	r19, Y+2	; 0x02
     ce0:	4b 81       	ldd	r20, Y+3	; 0x03
     ce2:	5c 81       	ldd	r21, Y+4	; 0x04
     ce4:	69 85       	ldd	r22, Y+9	; 0x09
     ce6:	7a 85       	ldd	r23, Y+10	; 0x0a
     ce8:	8b 85       	ldd	r24, Y+11	; 0x0b
     cea:	9c 85       	ldd	r25, Y+12	; 0x0c
     cec:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     cf0:	4b 01       	movw	r8, r22
     cf2:	5c 01       	movw	r10, r24
     cf4:	2d 81       	ldd	r18, Y+5	; 0x05
     cf6:	3e 81       	ldd	r19, Y+6	; 0x06
     cf8:	4f 81       	ldd	r20, Y+7	; 0x07
     cfa:	58 85       	ldd	r21, Y+8	; 0x08
     cfc:	69 89       	ldd	r22, Y+17	; 0x11
     cfe:	7a 89       	ldd	r23, Y+18	; 0x12
     d00:	8b 89       	ldd	r24, Y+19	; 0x13
     d02:	9c 89       	ldd	r25, Y+20	; 0x14
     d04:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     d08:	9b 01       	movw	r18, r22
     d0a:	ac 01       	movw	r20, r24
     d0c:	c5 01       	movw	r24, r10
     d0e:	b4 01       	movw	r22, r8
     d10:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     d14:	4b 01       	movw	r8, r22
     d16:	5c 01       	movw	r10, r24
     d18:	a3 01       	movw	r20, r6
     d1a:	92 01       	movw	r18, r4
     d1c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d1e:	7e 85       	ldd	r23, Y+14	; 0x0e
     d20:	8f 85       	ldd	r24, Y+15	; 0x0f
     d22:	98 89       	ldd	r25, Y+16	; 0x10
     d24:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     d28:	9b 01       	movw	r18, r22
     d2a:	ac 01       	movw	r20, r24
     d2c:	c5 01       	movw	r24, r10
     d2e:	b4 01       	movw	r22, r8
     d30:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     d34:	a7 01       	movw	r20, r14
     d36:	96 01       	movw	r18, r12
     d38:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     d3c:	6d 8f       	std	Y+29, r22	; 0x1d
     d3e:	7e 8f       	std	Y+30, r23	; 0x1e
     d40:	8f 8f       	std	Y+31, r24	; 0x1f
     d42:	98 a3       	std	Y+32, r25	; 0x20

	q2 += (qa * gy - qb * gz + q3 * gx);
     d44:	29 81       	ldd	r18, Y+1	; 0x01
     d46:	3a 81       	ldd	r19, Y+2	; 0x02
     d48:	4b 81       	ldd	r20, Y+3	; 0x03
     d4a:	5c 81       	ldd	r21, Y+4	; 0x04
     d4c:	6d 85       	ldd	r22, Y+13	; 0x0d
     d4e:	7e 85       	ldd	r23, Y+14	; 0x0e
     d50:	8f 85       	ldd	r24, Y+15	; 0x0f
     d52:	98 89       	ldd	r25, Y+16	; 0x10
     d54:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     d58:	4b 01       	movw	r8, r22
     d5a:	5c 01       	movw	r10, r24
     d5c:	a7 01       	movw	r20, r14
     d5e:	96 01       	movw	r18, r12
     d60:	69 89       	ldd	r22, Y+17	; 0x11
     d62:	7a 89       	ldd	r23, Y+18	; 0x12
     d64:	8b 89       	ldd	r24, Y+19	; 0x13
     d66:	9c 89       	ldd	r25, Y+20	; 0x14
     d68:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     d6c:	9b 01       	movw	r18, r22
     d6e:	ac 01       	movw	r20, r24
     d70:	c5 01       	movw	r24, r10
     d72:	b4 01       	movw	r22, r8
     d74:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     d78:	4b 01       	movw	r8, r22
     d7a:	5c 01       	movw	r10, r24
     d7c:	a3 01       	movw	r20, r6
     d7e:	92 01       	movw	r18, r4
     d80:	69 85       	ldd	r22, Y+9	; 0x09
     d82:	7a 85       	ldd	r23, Y+10	; 0x0a
     d84:	8b 85       	ldd	r24, Y+11	; 0x0b
     d86:	9c 85       	ldd	r25, Y+12	; 0x0c
     d88:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     d8c:	9b 01       	movw	r18, r22
     d8e:	ac 01       	movw	r20, r24
     d90:	c5 01       	movw	r24, r10
     d92:	b4 01       	movw	r22, r8
     d94:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     d98:	2d 81       	ldd	r18, Y+5	; 0x05
     d9a:	3e 81       	ldd	r19, Y+6	; 0x06
     d9c:	4f 81       	ldd	r20, Y+7	; 0x07
     d9e:	58 85       	ldd	r21, Y+8	; 0x08
     da0:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     da4:	6d 8b       	std	Y+21, r22	; 0x15
     da6:	7e 8b       	std	Y+22, r23	; 0x16
     da8:	8f 8b       	std	Y+23, r24	; 0x17
     daa:	98 8f       	std	Y+24, r25	; 0x18

	q3 += (qa * gz + qb * gy - qc * gx);
     dac:	29 81       	ldd	r18, Y+1	; 0x01
     dae:	3a 81       	ldd	r19, Y+2	; 0x02
     db0:	4b 81       	ldd	r20, Y+3	; 0x03
     db2:	5c 81       	ldd	r21, Y+4	; 0x04
     db4:	69 89       	ldd	r22, Y+17	; 0x11
     db6:	7a 89       	ldd	r23, Y+18	; 0x12
     db8:	8b 89       	ldd	r24, Y+19	; 0x13
     dba:	9c 89       	ldd	r25, Y+20	; 0x14
     dbc:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     dc0:	4b 01       	movw	r8, r22
     dc2:	5c 01       	movw	r10, r24
     dc4:	a7 01       	movw	r20, r14
     dc6:	96 01       	movw	r18, r12
     dc8:	6d 85       	ldd	r22, Y+13	; 0x0d
     dca:	7e 85       	ldd	r23, Y+14	; 0x0e
     dcc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dce:	98 89       	ldd	r25, Y+16	; 0x10
     dd0:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     dd4:	9b 01       	movw	r18, r22
     dd6:	ac 01       	movw	r20, r24
     dd8:	c5 01       	movw	r24, r10
     dda:	b4 01       	movw	r22, r8
     ddc:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     de0:	6b 01       	movw	r12, r22
     de2:	7c 01       	movw	r14, r24
     de4:	2d 81       	ldd	r18, Y+5	; 0x05
     de6:	3e 81       	ldd	r19, Y+6	; 0x06
     de8:	4f 81       	ldd	r20, Y+7	; 0x07
     dea:	58 85       	ldd	r21, Y+8	; 0x08
     dec:	69 85       	ldd	r22, Y+9	; 0x09
     dee:	7a 85       	ldd	r23, Y+10	; 0x0a
     df0:	8b 85       	ldd	r24, Y+11	; 0x0b
     df2:	9c 85       	ldd	r25, Y+12	; 0x0c
     df4:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     df8:	9b 01       	movw	r18, r22
     dfa:	ac 01       	movw	r20, r24
     dfc:	c7 01       	movw	r24, r14
     dfe:	b6 01       	movw	r22, r12
     e00:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     e04:	a3 01       	movw	r20, r6
     e06:	92 01       	movw	r18, r4
     e08:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     e0c:	4b 01       	movw	r8, r22
     e0e:	5c 01       	movw	r10, r24

	// Normalise quaternion

	recipNorm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
     e10:	29 8d       	ldd	r18, Y+25	; 0x19
     e12:	3a 8d       	ldd	r19, Y+26	; 0x1a
     e14:	4b 8d       	ldd	r20, Y+27	; 0x1b
     e16:	5c 8d       	ldd	r21, Y+28	; 0x1c
     e18:	ca 01       	movw	r24, r20
     e1a:	b9 01       	movw	r22, r18
     e1c:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     e20:	6b 01       	movw	r12, r22
     e22:	7c 01       	movw	r14, r24
     e24:	2d 8d       	ldd	r18, Y+29	; 0x1d
     e26:	3e 8d       	ldd	r19, Y+30	; 0x1e
     e28:	4f 8d       	ldd	r20, Y+31	; 0x1f
     e2a:	58 a1       	ldd	r21, Y+32	; 0x20
     e2c:	ca 01       	movw	r24, r20
     e2e:	b9 01       	movw	r22, r18
     e30:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     e34:	9b 01       	movw	r18, r22
     e36:	ac 01       	movw	r20, r24
     e38:	c7 01       	movw	r24, r14
     e3a:	b6 01       	movw	r22, r12
     e3c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     e40:	6b 01       	movw	r12, r22
     e42:	7c 01       	movw	r14, r24
     e44:	2d 89       	ldd	r18, Y+21	; 0x15
     e46:	3e 89       	ldd	r19, Y+22	; 0x16
     e48:	4f 89       	ldd	r20, Y+23	; 0x17
     e4a:	58 8d       	ldd	r21, Y+24	; 0x18
     e4c:	ca 01       	movw	r24, r20
     e4e:	b9 01       	movw	r22, r18
     e50:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     e54:	9b 01       	movw	r18, r22
     e56:	ac 01       	movw	r20, r24
     e58:	c7 01       	movw	r24, r14
     e5a:	b6 01       	movw	r22, r12
     e5c:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     e60:	6b 01       	movw	r12, r22
     e62:	7c 01       	movw	r14, r24
     e64:	a5 01       	movw	r20, r10
     e66:	94 01       	movw	r18, r8
     e68:	c5 01       	movw	r24, r10
     e6a:	b4 01       	movw	r22, r8
     e6c:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
     e74:	c7 01       	movw	r24, r14
     e76:	b6 01       	movw	r22, r12
     e78:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     e7c:	0e 94 18 04 	call	0x830	; 0x830 <invSqrt>
     e80:	6b 01       	movw	r12, r22
     e82:	7c 01       	movw	r14, r24

	q0 *= recipNorm;
     e84:	9b 01       	movw	r18, r22
     e86:	ac 01       	movw	r20, r24
     e88:	69 8d       	ldd	r22, Y+25	; 0x19
     e8a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e8c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e8e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e90:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     e94:	60 93 06 01 	sts	0x0106, r22	; 0x800106 <q0>
     e98:	70 93 07 01 	sts	0x0107, r23	; 0x800107 <q0+0x1>
     e9c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <q0+0x2>
     ea0:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <q0+0x3>

	q1 *= recipNorm;
     ea4:	a7 01       	movw	r20, r14
     ea6:	96 01       	movw	r18, r12
     ea8:	6d 8d       	ldd	r22, Y+29	; 0x1d
     eaa:	7e 8d       	ldd	r23, Y+30	; 0x1e
     eac:	8f 8d       	ldd	r24, Y+31	; 0x1f
     eae:	98 a1       	ldd	r25, Y+32	; 0x20
     eb0:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     eb4:	60 93 a0 01 	sts	0x01A0, r22	; 0x8001a0 <q1>
     eb8:	70 93 a1 01 	sts	0x01A1, r23	; 0x8001a1 <q1+0x1>
     ebc:	80 93 a2 01 	sts	0x01A2, r24	; 0x8001a2 <q1+0x2>
     ec0:	90 93 a3 01 	sts	0x01A3, r25	; 0x8001a3 <q1+0x3>

	q2 *= recipNorm;
     ec4:	a7 01       	movw	r20, r14
     ec6:	96 01       	movw	r18, r12
     ec8:	6d 89       	ldd	r22, Y+21	; 0x15
     eca:	7e 89       	ldd	r23, Y+22	; 0x16
     ecc:	8f 89       	ldd	r24, Y+23	; 0x17
     ece:	98 8d       	ldd	r25, Y+24	; 0x18
     ed0:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     ed4:	60 93 9c 01 	sts	0x019C, r22	; 0x80019c <q2>
     ed8:	70 93 9d 01 	sts	0x019D, r23	; 0x80019d <q2+0x1>
     edc:	80 93 9e 01 	sts	0x019E, r24	; 0x80019e <q2+0x2>
     ee0:	90 93 9f 01 	sts	0x019F, r25	; 0x80019f <q2+0x3>

	q3 *= recipNorm;
     ee4:	a7 01       	movw	r20, r14
     ee6:	96 01       	movw	r18, r12
     ee8:	c5 01       	movw	r24, r10
     eea:	b4 01       	movw	r22, r8
     eec:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     ef0:	60 93 98 01 	sts	0x0198, r22	; 0x800198 <q3>
     ef4:	70 93 99 01 	sts	0x0199, r23	; 0x800199 <q3+0x1>
     ef8:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <q3+0x2>
     efc:	90 93 9b 01 	sts	0x019B, r25	; 0x80019b <q3+0x3>

}
     f00:	a0 96       	adiw	r28, 0x20	; 32
     f02:	0f b6       	in	r0, 0x3f	; 63
     f04:	f8 94       	cli
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	0f be       	out	0x3f, r0	; 63
     f0a:	cd bf       	out	0x3d, r28	; 61
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	1f 91       	pop	r17
     f12:	0f 91       	pop	r16
     f14:	ff 90       	pop	r15
     f16:	ef 90       	pop	r14
     f18:	df 90       	pop	r13
     f1a:	cf 90       	pop	r12
     f1c:	bf 90       	pop	r11
     f1e:	af 90       	pop	r10
     f20:	9f 90       	pop	r9
     f22:	8f 90       	pop	r8
     f24:	7f 90       	pop	r7
     f26:	6f 90       	pop	r6
     f28:	5f 90       	pop	r5
     f2a:	4f 90       	pop	r4
     f2c:	08 95       	ret

00000f2e <q2Angle>:

void q2Angle(float angle[3])
{
     f2e:	4f 92       	push	r4
     f30:	5f 92       	push	r5
     f32:	6f 92       	push	r6
     f34:	7f 92       	push	r7
     f36:	8f 92       	push	r8
     f38:	9f 92       	push	r9
     f3a:	af 92       	push	r10
     f3c:	bf 92       	push	r11
     f3e:	cf 92       	push	r12
     f40:	df 92       	push	r13
     f42:	ef 92       	push	r14
     f44:	ff 92       	push	r15
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	cd b7       	in	r28, 0x3d	; 61
     f4c:	de b7       	in	r29, 0x3e	; 62
     f4e:	2e 97       	sbiw	r28, 0x0e	; 14
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	9e 87       	std	Y+14, r25	; 0x0e
     f5c:	8d 87       	std	Y+13, r24	; 0x0d
	angle[2] = atan2(2 * q1 * q2 + 2 * q0 * q3, -2 * q2*q2 - 2 * q3* q3 + 1)* 57.3; // yaw
     f5e:	c0 90 9c 01 	lds	r12, 0x019C	; 0x80019c <q2>
     f62:	d0 90 9d 01 	lds	r13, 0x019D	; 0x80019d <q2+0x1>
     f66:	e0 90 9e 01 	lds	r14, 0x019E	; 0x80019e <q2+0x2>
     f6a:	f0 90 9f 01 	lds	r15, 0x019F	; 0x80019f <q2+0x3>
     f6e:	80 90 98 01 	lds	r8, 0x0198	; 0x800198 <q3>
     f72:	90 90 99 01 	lds	r9, 0x0199	; 0x800199 <q3+0x1>
     f76:	a0 90 9a 01 	lds	r10, 0x019A	; 0x80019a <q3+0x2>
     f7a:	b0 90 9b 01 	lds	r11, 0x019B	; 0x80019b <q3+0x3>
     f7e:	40 90 a0 01 	lds	r4, 0x01A0	; 0x8001a0 <q1>
     f82:	50 90 a1 01 	lds	r5, 0x01A1	; 0x8001a1 <q1+0x1>
     f86:	60 90 a2 01 	lds	r6, 0x01A2	; 0x8001a2 <q1+0x2>
     f8a:	70 90 a3 01 	lds	r7, 0x01A3	; 0x8001a3 <q1+0x3>
     f8e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <q0>
     f92:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <q0+0x1>
     f96:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <q0+0x2>
     f9a:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <q0+0x3>
     f9e:	9b 01       	movw	r18, r22
     fa0:	ac 01       	movw	r20, r24
     fa2:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     fa6:	69 87       	std	Y+9, r22	; 0x09
     fa8:	7a 87       	std	Y+10, r23	; 0x0a
     faa:	8b 87       	std	Y+11, r24	; 0x0b
     fac:	9c 87       	std	Y+12, r25	; 0x0c
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	50 ec       	ldi	r21, 0xC0	; 192
     fb6:	c7 01       	movw	r24, r14
     fb8:	b6 01       	movw	r22, r12
     fba:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     fbe:	a7 01       	movw	r20, r14
     fc0:	96 01       	movw	r18, r12
     fc2:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     fc6:	69 83       	std	Y+1, r22	; 0x01
     fc8:	7a 83       	std	Y+2, r23	; 0x02
     fca:	8b 83       	std	Y+3, r24	; 0x03
     fcc:	9c 83       	std	Y+4, r25	; 0x04
     fce:	a5 01       	movw	r20, r10
     fd0:	94 01       	movw	r18, r8
     fd2:	c5 01       	movw	r24, r10
     fd4:	b4 01       	movw	r22, r8
     fd6:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     fda:	a5 01       	movw	r20, r10
     fdc:	94 01       	movw	r18, r8
     fde:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	69 81       	ldd	r22, Y+1	; 0x01
     fe8:	7a 81       	ldd	r23, Y+2	; 0x02
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
     ffe:	69 83       	std	Y+1, r22	; 0x01
    1000:	7a 83       	std	Y+2, r23	; 0x02
    1002:	8b 83       	std	Y+3, r24	; 0x03
    1004:	9c 83       	std	Y+4, r25	; 0x04
    1006:	a3 01       	movw	r20, r6
    1008:	92 01       	movw	r18, r4
    100a:	c3 01       	movw	r24, r6
    100c:	b2 01       	movw	r22, r4
    100e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
    1012:	a7 01       	movw	r20, r14
    1014:	96 01       	movw	r18, r12
    1016:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    101a:	6d 83       	std	Y+5, r22	; 0x05
    101c:	7e 83       	std	Y+6, r23	; 0x06
    101e:	8f 83       	std	Y+7, r24	; 0x07
    1020:	98 87       	std	Y+8, r25	; 0x08
    1022:	29 85       	ldd	r18, Y+9	; 0x09
    1024:	3a 85       	ldd	r19, Y+10	; 0x0a
    1026:	4b 85       	ldd	r20, Y+11	; 0x0b
    1028:	5c 85       	ldd	r21, Y+12	; 0x0c
    102a:	c5 01       	movw	r24, r10
    102c:	b4 01       	movw	r22, r8
    102e:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    1032:	9b 01       	movw	r18, r22
    1034:	ac 01       	movw	r20, r24
    1036:	6d 81       	ldd	r22, Y+5	; 0x05
    1038:	7e 81       	ldd	r23, Y+6	; 0x06
    103a:	8f 81       	ldd	r24, Y+7	; 0x07
    103c:	98 85       	ldd	r25, Y+8	; 0x08
    103e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
    1042:	29 81       	ldd	r18, Y+1	; 0x01
    1044:	3a 81       	ldd	r19, Y+2	; 0x02
    1046:	4b 81       	ldd	r20, Y+3	; 0x03
    1048:	5c 81       	ldd	r21, Y+4	; 0x04
    104a:	0e 94 6f 18 	call	0x30de	; 0x30de <atan2>
    104e:	23 e3       	ldi	r18, 0x33	; 51
    1050:	33 e3       	ldi	r19, 0x33	; 51
    1052:	45 e6       	ldi	r20, 0x65	; 101
    1054:	52 e4       	ldi	r21, 0x42	; 66
    1056:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    105a:	ed 85       	ldd	r30, Y+13	; 0x0d
    105c:	fe 85       	ldd	r31, Y+14	; 0x0e
    105e:	60 87       	std	Z+8, r22	; 0x08
    1060:	71 87       	std	Z+9, r23	; 0x09
    1062:	82 87       	std	Z+10, r24	; 0x0a
    1064:	93 87       	std	Z+11, r25	; 0x0b

	angle[1] = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; // pitch
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	30 e0       	ldi	r19, 0x00	; 0
    106a:	40 e0       	ldi	r20, 0x00	; 0
    106c:	50 ec       	ldi	r21, 0xC0	; 192
    106e:	c3 01       	movw	r24, r6
    1070:	b2 01       	movw	r22, r4
    1072:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    1076:	69 83       	std	Y+1, r22	; 0x01
    1078:	7a 83       	std	Y+2, r23	; 0x02
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	9c 83       	std	Y+4, r25	; 0x04
    107e:	9b 01       	movw	r18, r22
    1080:	ac 01       	movw	r20, r24
    1082:	c5 01       	movw	r24, r10
    1084:	b4 01       	movw	r22, r8
    1086:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    108a:	6d 83       	std	Y+5, r22	; 0x05
    108c:	7e 83       	std	Y+6, r23	; 0x06
    108e:	8f 83       	std	Y+7, r24	; 0x07
    1090:	98 87       	std	Y+8, r25	; 0x08
    1092:	29 85       	ldd	r18, Y+9	; 0x09
    1094:	3a 85       	ldd	r19, Y+10	; 0x0a
    1096:	4b 85       	ldd	r20, Y+11	; 0x0b
    1098:	5c 85       	ldd	r21, Y+12	; 0x0c
    109a:	c7 01       	movw	r24, r14
    109c:	b6 01       	movw	r22, r12
    109e:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    10a2:	9b 01       	movw	r18, r22
    10a4:	ac 01       	movw	r20, r24
    10a6:	6d 81       	ldd	r22, Y+5	; 0x05
    10a8:	7e 81       	ldd	r23, Y+6	; 0x06
    10aa:	8f 81       	ldd	r24, Y+7	; 0x07
    10ac:	98 85       	ldd	r25, Y+8	; 0x08
    10ae:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
    10b2:	0e 94 41 18 	call	0x3082	; 0x3082 <asin>
    10b6:	23 e3       	ldi	r18, 0x33	; 51
    10b8:	33 e3       	ldi	r19, 0x33	; 51
    10ba:	45 e6       	ldi	r20, 0x65	; 101
    10bc:	52 e4       	ldi	r21, 0x42	; 66
    10be:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    10c2:	ed 85       	ldd	r30, Y+13	; 0x0d
    10c4:	fe 85       	ldd	r31, Y+14	; 0x0e
    10c6:	64 83       	std	Z+4, r22	; 0x04
    10c8:	75 83       	std	Z+5, r23	; 0x05
    10ca:	86 83       	std	Z+6, r24	; 0x06
    10cc:	97 83       	std	Z+7, r25	; 0x07

	angle[0] = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
    10ce:	a7 01       	movw	r20, r14
    10d0:	96 01       	movw	r18, r12
    10d2:	c7 01       	movw	r24, r14
    10d4:	b6 01       	movw	r22, r12
    10d6:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
    10da:	6d 83       	std	Y+5, r22	; 0x05
    10dc:	7e 83       	std	Y+6, r23	; 0x06
    10de:	8f 83       	std	Y+7, r24	; 0x07
    10e0:	98 87       	std	Y+8, r25	; 0x08
    10e2:	29 81       	ldd	r18, Y+1	; 0x01
    10e4:	3a 81       	ldd	r19, Y+2	; 0x02
    10e6:	4b 81       	ldd	r20, Y+3	; 0x03
    10e8:	5c 81       	ldd	r21, Y+4	; 0x04
    10ea:	c3 01       	movw	r24, r6
    10ec:	b2 01       	movw	r22, r4
    10ee:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    10f2:	69 83       	std	Y+1, r22	; 0x01
    10f4:	7a 83       	std	Y+2, r23	; 0x02
    10f6:	8b 83       	std	Y+3, r24	; 0x03
    10f8:	9c 83       	std	Y+4, r25	; 0x04
    10fa:	2d 81       	ldd	r18, Y+5	; 0x05
    10fc:	3e 81       	ldd	r19, Y+6	; 0x06
    10fe:	4f 81       	ldd	r20, Y+7	; 0x07
    1100:	58 85       	ldd	r21, Y+8	; 0x08
    1102:	c7 01       	movw	r24, r14
    1104:	b6 01       	movw	r22, r12
    1106:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    110a:	9b 01       	movw	r18, r22
    110c:	ac 01       	movw	r20, r24
    110e:	69 81       	ldd	r22, Y+1	; 0x01
    1110:	7a 81       	ldd	r23, Y+2	; 0x02
    1112:	8b 81       	ldd	r24, Y+3	; 0x03
    1114:	9c 81       	ldd	r25, Y+4	; 0x04
    1116:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	40 e8       	ldi	r20, 0x80	; 128
    1120:	5f e3       	ldi	r21, 0x3F	; 63
    1122:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
    1126:	6b 01       	movw	r12, r22
    1128:	7c 01       	movw	r14, r24
    112a:	2d 81       	ldd	r18, Y+5	; 0x05
    112c:	3e 81       	ldd	r19, Y+6	; 0x06
    112e:	4f 81       	ldd	r20, Y+7	; 0x07
    1130:	58 85       	ldd	r21, Y+8	; 0x08
    1132:	c5 01       	movw	r24, r10
    1134:	b4 01       	movw	r22, r8
    1136:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    113a:	4b 01       	movw	r8, r22
    113c:	5c 01       	movw	r10, r24
    113e:	29 85       	ldd	r18, Y+9	; 0x09
    1140:	3a 85       	ldd	r19, Y+10	; 0x0a
    1142:	4b 85       	ldd	r20, Y+11	; 0x0b
    1144:	5c 85       	ldd	r21, Y+12	; 0x0c
    1146:	c3 01       	movw	r24, r6
    1148:	b2 01       	movw	r22, r4
    114a:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    114e:	9b 01       	movw	r18, r22
    1150:	ac 01       	movw	r20, r24
    1152:	c5 01       	movw	r24, r10
    1154:	b4 01       	movw	r22, r8
    1156:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
    115a:	a7 01       	movw	r20, r14
    115c:	96 01       	movw	r18, r12
    115e:	0e 94 6f 18 	call	0x30de	; 0x30de <atan2>
    1162:	23 e3       	ldi	r18, 0x33	; 51
    1164:	33 e3       	ldi	r19, 0x33	; 51
    1166:	45 e6       	ldi	r20, 0x65	; 101
    1168:	52 e4       	ldi	r21, 0x42	; 66
    116a:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    116e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1170:	fe 85       	ldd	r31, Y+14	; 0x0e
    1172:	60 83       	st	Z, r22
    1174:	71 83       	std	Z+1, r23	; 0x01
    1176:	82 83       	std	Z+2, r24	; 0x02
    1178:	93 83       	std	Z+3, r25	; 0x03
    117a:	2e 96       	adiw	r28, 0x0e	; 14
    117c:	0f b6       	in	r0, 0x3f	; 63
    117e:	f8 94       	cli
    1180:	de bf       	out	0x3e, r29	; 62
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	cd bf       	out	0x3d, r28	; 61
    1186:	df 91       	pop	r29
    1188:	cf 91       	pop	r28
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	bf 90       	pop	r11
    1194:	af 90       	pop	r10
    1196:	9f 90       	pop	r9
    1198:	8f 90       	pop	r8
    119a:	7f 90       	pop	r7
    119c:	6f 90       	pop	r6
    119e:	5f 90       	pop	r5
    11a0:	4f 90       	pop	r4
    11a2:	08 95       	ret

000011a4 <MPU_Start_Loc>:
	MPU_Calib(AccData,GyroData);
}

void MPU_Start_Loc(void)
{
	I2C_Start_Wait(MPU6050_addr);								/* I2C start with device write address */
    11a4:	80 ed       	ldi	r24, 0xD0	; 208
    11a6:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <I2C_Start_Wait>
	I2C_Write(0x3B);							/* Write start location address from where to read */
    11aa:	8b e3       	ldi	r24, 0x3B	; 59
    11ac:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Repeated_Start(0xD1);							/* I2C start with device read address */
    11b0:	81 ed       	ldi	r24, 0xD1	; 209
    11b2:	0e 94 16 17 	call	0x2e2c	; 0x2e2c <I2C_Repeated_Start>
    11b6:	08 95       	ret

000011b8 <MPU_read>:
}
void MPU_read(float Acc[3], float Gyro[3])
{
    11b8:	4f 92       	push	r4
    11ba:	5f 92       	push	r5
    11bc:	6f 92       	push	r6
    11be:	7f 92       	push	r7
    11c0:	af 92       	push	r10
    11c2:	bf 92       	push	r11
    11c4:	cf 92       	push	r12
    11c6:	df 92       	push	r13
    11c8:	ef 92       	push	r14
    11ca:	ff 92       	push	r15
    11cc:	0f 93       	push	r16
    11ce:	1f 93       	push	r17
    11d0:	cf 93       	push	r28
    11d2:	df 93       	push	r29
    11d4:	8c 01       	movw	r16, r24
    11d6:	eb 01       	movw	r28, r22
	MPU_Start_Loc();									/* Read Gyro values */
    11d8:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <MPU_Start_Loc>
	Acc[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    11dc:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    11e0:	f8 2e       	mov	r15, r24
    11e2:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    11e6:	6f 2d       	mov	r22, r15
    11e8:	70 e0       	ldi	r23, 0x00	; 0
    11ea:	76 2f       	mov	r23, r22
    11ec:	66 27       	eor	r22, r22
    11ee:	68 2b       	or	r22, r24
    11f0:	07 2e       	mov	r0, r23
    11f2:	00 0c       	add	r0, r0
    11f4:	88 0b       	sbc	r24, r24
    11f6:	99 0b       	sbc	r25, r25
    11f8:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    11fc:	f8 01       	movw	r30, r16
    11fe:	60 83       	st	Z, r22
    1200:	71 83       	std	Z+1, r23	; 0x01
    1202:	82 83       	std	Z+2, r24	; 0x02
    1204:	93 83       	std	Z+3, r25	; 0x03
	Acc[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1206:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    120a:	f8 2e       	mov	r15, r24
    120c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    1210:	6f 2d       	mov	r22, r15
    1212:	70 e0       	ldi	r23, 0x00	; 0
    1214:	76 2f       	mov	r23, r22
    1216:	66 27       	eor	r22, r22
    1218:	68 2b       	or	r22, r24
    121a:	07 2e       	mov	r0, r23
    121c:	00 0c       	add	r0, r0
    121e:	88 0b       	sbc	r24, r24
    1220:	99 0b       	sbc	r25, r25
    1222:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    1226:	f8 01       	movw	r30, r16
    1228:	64 83       	std	Z+4, r22	; 0x04
    122a:	75 83       	std	Z+5, r23	; 0x05
    122c:	86 83       	std	Z+6, r24	; 0x06
    122e:	97 83       	std	Z+7, r25	; 0x07
	Acc[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    1230:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    1234:	f8 2e       	mov	r15, r24
    1236:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    123a:	6f 2d       	mov	r22, r15
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	76 2f       	mov	r23, r22
    1240:	66 27       	eor	r22, r22
    1242:	68 2b       	or	r22, r24
    1244:	07 2e       	mov	r0, r23
    1246:	00 0c       	add	r0, r0
    1248:	88 0b       	sbc	r24, r24
    124a:	99 0b       	sbc	r25, r25
    124c:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    1250:	f8 01       	movw	r30, r16
    1252:	60 87       	std	Z+8, r22	; 0x08
    1254:	71 87       	std	Z+9, r23	; 0x09
    1256:	82 87       	std	Z+10, r24	; 0x0a
    1258:	93 87       	std	Z+11, r25	; 0x0b
	Temperature = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    125a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    125e:	f8 2e       	mov	r15, r24
    1260:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    1264:	6f 2d       	mov	r22, r15
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	76 2f       	mov	r23, r22
    126a:	66 27       	eor	r22, r22
    126c:	68 2b       	or	r22, r24
    126e:	07 2e       	mov	r0, r23
    1270:	00 0c       	add	r0, r0
    1272:	88 0b       	sbc	r24, r24
    1274:	99 0b       	sbc	r25, r25
    1276:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    127a:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <Temperature>
    127e:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <Temperature+0x1>
    1282:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <Temperature+0x2>
    1286:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <Temperature+0x3>
	Gyro[0] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    128a:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    128e:	f8 2e       	mov	r15, r24
    1290:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    1294:	6f 2d       	mov	r22, r15
    1296:	70 e0       	ldi	r23, 0x00	; 0
    1298:	76 2f       	mov	r23, r22
    129a:	66 27       	eor	r22, r22
    129c:	68 2b       	or	r22, r24
    129e:	07 2e       	mov	r0, r23
    12a0:	00 0c       	add	r0, r0
    12a2:	88 0b       	sbc	r24, r24
    12a4:	99 0b       	sbc	r25, r25
    12a6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    12aa:	68 83       	st	Y, r22
    12ac:	79 83       	std	Y+1, r23	; 0x01
    12ae:	8a 83       	std	Y+2, r24	; 0x02
    12b0:	9b 83       	std	Y+3, r25	; 0x03
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
    12b2:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    12b6:	f8 2e       	mov	r15, r24
    12b8:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    12bc:	6f 2d       	mov	r22, r15
    12be:	70 e0       	ldi	r23, 0x00	; 0
    12c0:	76 2f       	mov	r23, r22
    12c2:	66 27       	eor	r22, r22
    12c4:	68 2b       	or	r22, r24
    12c6:	07 2e       	mov	r0, r23
    12c8:	00 0c       	add	r0, r0
    12ca:	88 0b       	sbc	r24, r24
    12cc:	99 0b       	sbc	r25, r25
    12ce:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    12d2:	6c 83       	std	Y+4, r22	; 0x04
    12d4:	7d 83       	std	Y+5, r23	; 0x05
    12d6:	8e 83       	std	Y+6, r24	; 0x06
    12d8:	9f 83       	std	Y+7, r25	; 0x07
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
    12da:	0e 94 98 17 	call	0x2f30	; 0x2f30 <I2C_Read_Ack>
    12de:	f8 2e       	mov	r15, r24
    12e0:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <I2C_Read_Nack>
    12e4:	6f 2d       	mov	r22, r15
    12e6:	70 e0       	ldi	r23, 0x00	; 0
    12e8:	76 2f       	mov	r23, r22
    12ea:	66 27       	eor	r22, r22
    12ec:	68 2b       	or	r22, r24
    12ee:	07 2e       	mov	r0, r23
    12f0:	00 0c       	add	r0, r0
    12f2:	88 0b       	sbc	r24, r24
    12f4:	99 0b       	sbc	r25, r25
    12f6:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__floatsisf>
    12fa:	68 87       	std	Y+8, r22	; 0x08
    12fc:	79 87       	std	Y+9, r23	; 0x09
    12fe:	8a 87       	std	Y+10, r24	; 0x0a
    1300:	9b 87       	std	Y+11, r25	; 0x0b
	I2C_Stop();
    1302:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_Stop>
    1306:	0f 2e       	mov	r0, r31
    1308:	fd e5       	ldi	r31, 0x5D	; 93
    130a:	ef 2e       	mov	r14, r31
    130c:	f2 e0       	ldi	r31, 0x02	; 2
    130e:	ff 2e       	mov	r15, r31
    1310:	f0 2d       	mov	r31, r0
    1312:	0f 2e       	mov	r0, r31
    1314:	f9 e6       	ldi	r31, 0x69	; 105
    1316:	cf 2e       	mov	r12, r31
    1318:	f2 e0       	ldi	r31, 0x02	; 2
    131a:	df 2e       	mov	r13, r31
    131c:	f0 2d       	mov	r31, r0
    131e:	0f 2e       	mov	r0, r31
    1320:	f9 e6       	ldi	r31, 0x69	; 105
    1322:	af 2e       	mov	r10, r31
    1324:	f2 e0       	ldi	r31, 0x02	; 2
    1326:	bf 2e       	mov	r11, r31
    1328:	f0 2d       	mov	r31, r0
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
    132a:	f7 01       	movw	r30, r14
    132c:	41 90       	ld	r4, Z+
    132e:	51 90       	ld	r5, Z+
    1330:	61 90       	ld	r6, Z+
    1332:	71 90       	ld	r7, Z+
    1334:	7f 01       	movw	r14, r30
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e0       	ldi	r20, 0x00	; 0
    133c:	51 e4       	ldi	r21, 0x41	; 65
    133e:	f8 01       	movw	r30, r16
    1340:	60 81       	ld	r22, Z
    1342:	71 81       	ldd	r23, Z+1	; 0x01
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	93 81       	ldd	r25, Z+3	; 0x03
    1348:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    134c:	2d ec       	ldi	r18, 0xCD	; 205
    134e:	3c ec       	ldi	r19, 0xCC	; 204
    1350:	4c e1       	ldi	r20, 0x1C	; 28
    1352:	51 e4       	ldi	r21, 0x41	; 65
    1354:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	40 e0       	ldi	r20, 0x00	; 0
    135e:	58 e3       	ldi	r21, 0x38	; 56
    1360:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    1364:	a3 01       	movw	r20, r6
    1366:	92 01       	movw	r18, r4
    1368:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
    136c:	f8 01       	movw	r30, r16
    136e:	61 93       	st	Z+, r22
    1370:	71 93       	st	Z+, r23
    1372:	81 93       	st	Z+, r24
    1374:	91 93       	st	Z+, r25
    1376:	8f 01       	movw	r16, r30
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
    1378:	f6 01       	movw	r30, r12
    137a:	41 90       	ld	r4, Z+
    137c:	51 90       	ld	r5, Z+
    137e:	61 90       	ld	r6, Z+
    1380:	71 90       	ld	r7, Z+
    1382:	6f 01       	movw	r12, r30
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	4a e7       	ldi	r20, 0x7A	; 122
    138a:	54 e4       	ldi	r21, 0x44	; 68
    138c:	68 81       	ld	r22, Y
    138e:	79 81       	ldd	r23, Y+1	; 0x01
    1390:	8a 81       	ldd	r24, Y+2	; 0x02
    1392:	9b 81       	ldd	r25, Y+3	; 0x03
    1394:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	40 e0       	ldi	r20, 0x00	; 0
    139e:	58 e3       	ldi	r21, 0x38	; 56
    13a0:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    13a4:	20 e0       	ldi	r18, 0x00	; 0
    13a6:	30 e0       	ldi	r19, 0x00	; 0
    13a8:	44 e3       	ldi	r20, 0x34	; 52
    13aa:	53 e4       	ldi	r21, 0x43	; 67
    13ac:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__divsf3>
    13b0:	23 ec       	ldi	r18, 0xC3	; 195
    13b2:	35 ef       	ldi	r19, 0xF5	; 245
    13b4:	48 e4       	ldi	r20, 0x48	; 72
    13b6:	50 e4       	ldi	r21, 0x40	; 64
    13b8:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    13bc:	a3 01       	movw	r20, r6
    13be:	92 01       	movw	r18, r4
    13c0:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
    13c4:	69 93       	st	Y+, r22
    13c6:	79 93       	st	Y+, r23
    13c8:	89 93       	st	Y+, r24
    13ca:	99 93       	st	Y+, r25
	Gyro[1] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Ack());
	Gyro[2] = (((int)I2C_Read_Ack()<<8) | (int)I2C_Read_Nack());
	I2C_Stop();
	//_delay_ms(10);
	//transform the raw data to corresponding range
	for (int i=0;i<3;i++)
    13cc:	ea 14       	cp	r14, r10
    13ce:	fb 04       	cpc	r15, r11
    13d0:	09 f0       	breq	.+2      	; 0x13d4 <MPU_read+0x21c>
    13d2:	ab cf       	rjmp	.-170    	; 0x132a <MPU_read+0x172>
	{
		Acc[i] =  Acc[i]*8*9.8/32768 - acc_calib[i]; //range of +- 8g
		Gyro[i] = Gyro[i]*1000/32768/180*3.14 - gyro_calib[i]; //range of +- 1000 degrees /180*pi 
	}
}
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	7f 90       	pop	r7
    13ea:	6f 90       	pop	r6
    13ec:	5f 90       	pop	r5
    13ee:	4f 90       	pop	r4
    13f0:	08 95       	ret

000013f2 <MPU_Calib>:

void MPU_Calib(float Acc[3], float Gyro[3])
{
    13f2:	2f 92       	push	r2
    13f4:	3f 92       	push	r3
    13f6:	4f 92       	push	r4
    13f8:	5f 92       	push	r5
    13fa:	6f 92       	push	r6
    13fc:	7f 92       	push	r7
    13fe:	8f 92       	push	r8
    1400:	9f 92       	push	r9
    1402:	af 92       	push	r10
    1404:	bf 92       	push	r11
    1406:	cf 92       	push	r12
    1408:	df 92       	push	r13
    140a:	ef 92       	push	r14
    140c:	ff 92       	push	r15
    140e:	0f 93       	push	r16
    1410:	1f 93       	push	r17
    1412:	cf 93       	push	r28
    1414:	df 93       	push	r29
    1416:	00 d0       	rcall	.+0      	; 0x1418 <MPU_Calib+0x26>
    1418:	00 d0       	rcall	.+0      	; 0x141a <MPU_Calib+0x28>
    141a:	cd b7       	in	r28, 0x3d	; 61
    141c:	de b7       	in	r29, 0x3e	; 62
    141e:	1c 01       	movw	r2, r24
    1420:	69 83       	std	Y+1, r22	; 0x01
    1422:	7a 83       	std	Y+2, r23	; 0x02
    1424:	81 2c       	mov	r8, r1
    1426:	91 2c       	mov	r9, r1
    1428:	5c 01       	movw	r10, r24
    142a:	8c e0       	ldi	r24, 0x0C	; 12
    142c:	a8 0e       	add	r10, r24
    142e:	b1 1c       	adc	r11, r1
	static float calib_loops = 100;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
    1430:	69 81       	ldd	r22, Y+1	; 0x01
    1432:	7a 81       	ldd	r23, Y+2	; 0x02
    1434:	c1 01       	movw	r24, r2
    1436:	0e 94 dc 08 	call	0x11b8	; 0x11b8 <MPU_read>
    143a:	71 01       	movw	r14, r2
    143c:	0f 2e       	mov	r0, r31
    143e:	f0 eb       	ldi	r31, 0xB0	; 176
    1440:	6f 2e       	mov	r6, r31
    1442:	f1 e0       	ldi	r31, 0x01	; 1
    1444:	7f 2e       	mov	r7, r31
    1446:	f0 2d       	mov	r31, r0
    1448:	c9 80       	ldd	r12, Y+1	; 0x01
    144a:	da 80       	ldd	r13, Y+2	; 0x02
    144c:	0f 2e       	mov	r0, r31
    144e:	f4 ea       	ldi	r31, 0xA4	; 164
    1450:	4f 2e       	mov	r4, r31
    1452:	f1 e0       	ldi	r31, 0x01	; 1
    1454:	5f 2e       	mov	r5, r31
    1456:	f0 2d       	mov	r31, r0
    1458:	82 01       	movw	r16, r4
    145a:	7c 82       	std	Y+4, r7	; 0x04
    145c:	6b 82       	std	Y+3, r6	; 0x03
		for (int j=0;j<3;j++)
		{
			sum_acc_cal_sum[j] += Acc[j];
    145e:	f7 01       	movw	r30, r14
    1460:	21 91       	ld	r18, Z+
    1462:	31 91       	ld	r19, Z+
    1464:	41 91       	ld	r20, Z+
    1466:	51 91       	ld	r21, Z+
    1468:	7f 01       	movw	r14, r30
    146a:	eb 81       	ldd	r30, Y+3	; 0x03
    146c:	fc 81       	ldd	r31, Y+4	; 0x04
    146e:	60 81       	ld	r22, Z
    1470:	71 81       	ldd	r23, Z+1	; 0x01
    1472:	82 81       	ldd	r24, Z+2	; 0x02
    1474:	93 81       	ldd	r25, Z+3	; 0x03
    1476:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
    147a:	eb 81       	ldd	r30, Y+3	; 0x03
    147c:	fc 81       	ldd	r31, Y+4	; 0x04
    147e:	61 93       	st	Z+, r22
    1480:	71 93       	st	Z+, r23
    1482:	81 93       	st	Z+, r24
    1484:	91 93       	st	Z+, r25
    1486:	fc 83       	std	Y+4, r31	; 0x04
    1488:	eb 83       	std	Y+3, r30	; 0x03
			sum_gyro_cal_sum[j] += Gyro[j];
    148a:	f6 01       	movw	r30, r12
    148c:	21 91       	ld	r18, Z+
    148e:	31 91       	ld	r19, Z+
    1490:	41 91       	ld	r20, Z+
    1492:	51 91       	ld	r21, Z+
    1494:	6f 01       	movw	r12, r30
    1496:	f8 01       	movw	r30, r16
    1498:	60 81       	ld	r22, Z
    149a:	71 81       	ldd	r23, Z+1	; 0x01
    149c:	82 81       	ldd	r24, Z+2	; 0x02
    149e:	93 81       	ldd	r25, Z+3	; 0x03
    14a0:	0e 94 d5 17 	call	0x2faa	; 0x2faa <__addsf3>
    14a4:	f8 01       	movw	r30, r16
    14a6:	61 93       	st	Z+, r22
    14a8:	71 93       	st	Z+, r23
    14aa:	81 93       	st	Z+, r24
    14ac:	91 93       	st	Z+, r25
    14ae:	8f 01       	movw	r16, r30
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
	{ 
		MPU_read(Acc,Gyro);
		for (int j=0;j<3;j++)
    14b0:	ea 14       	cp	r14, r10
    14b2:	fb 04       	cpc	r15, r11
    14b4:	a1 f6       	brne	.-88     	; 0x145e <MPU_Calib+0x6c>
void MPU_Calib(float Acc[3], float Gyro[3])
{
	static float calib_loops = 100;
	static float sum_acc_cal_sum[3]={0,0,0};
	static float sum_gyro_cal_sum[3]={0,0,0};
	for (int i =0;i<calib_loops;i++)
    14b6:	ff ef       	ldi	r31, 0xFF	; 255
    14b8:	8f 1a       	sub	r8, r31
    14ba:	9f 0a       	sbc	r9, r31
    14bc:	84 e6       	ldi	r24, 0x64	; 100
    14be:	88 16       	cp	r8, r24
    14c0:	91 04       	cpc	r9, r1
    14c2:	09 f0       	breq	.+2      	; 0x14c6 <MPU_Calib+0xd4>
    14c4:	b5 cf       	rjmp	.-150    	; 0x1430 <MPU_Calib+0x3e>
    14c6:	0d e5       	ldi	r16, 0x5D	; 93
    14c8:	12 e0       	ldi	r17, 0x02	; 2
    14ca:	e9 e6       	ldi	r30, 0x69	; 105
    14cc:	f2 e0       	ldi	r31, 0x02	; 2
    14ce:	fc 83       	std	Y+4, r31	; 0x04
    14d0:	eb 83       	std	Y+3, r30	; 0x03
    14d2:	0f 2e       	mov	r0, r31
    14d4:	fc eb       	ldi	r31, 0xBC	; 188
    14d6:	ef 2e       	mov	r14, r31
    14d8:	f1 e0       	ldi	r31, 0x01	; 1
    14da:	ff 2e       	mov	r15, r31
    14dc:	f0 2d       	mov	r31, r0
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
    14de:	f3 01       	movw	r30, r6
    14e0:	61 91       	ld	r22, Z+
    14e2:	71 91       	ld	r23, Z+
    14e4:	81 91       	ld	r24, Z+
    14e6:	91 91       	ld	r25, Z+
    14e8:	3f 01       	movw	r6, r30
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	48 ec       	ldi	r20, 0xC8	; 200
    14f0:	52 e4       	ldi	r21, 0x42	; 66
    14f2:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__divsf3>
    14f6:	f8 01       	movw	r30, r16
    14f8:	61 93       	st	Z+, r22
    14fa:	71 93       	st	Z+, r23
    14fc:	81 93       	st	Z+, r24
    14fe:	91 93       	st	Z+, r25
    1500:	8f 01       	movw	r16, r30
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
    1502:	f2 01       	movw	r30, r4
    1504:	61 91       	ld	r22, Z+
    1506:	71 91       	ld	r23, Z+
    1508:	81 91       	ld	r24, Z+
    150a:	91 91       	ld	r25, Z+
    150c:	2f 01       	movw	r4, r30
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	48 ec       	ldi	r20, 0xC8	; 200
    1514:	52 e4       	ldi	r21, 0x42	; 66
    1516:	0e 94 d3 18 	call	0x31a6	; 0x31a6 <__divsf3>
    151a:	eb 81       	ldd	r30, Y+3	; 0x03
    151c:	fc 81       	ldd	r31, Y+4	; 0x04
    151e:	61 93       	st	Z+, r22
    1520:	71 93       	st	Z+, r23
    1522:	81 93       	st	Z+, r24
    1524:	91 93       	st	Z+, r25
    1526:	fc 83       	std	Y+4, r31	; 0x04
    1528:	eb 83       	std	Y+3, r30	; 0x03
		{
			sum_acc_cal_sum[j] += Acc[j];
			sum_gyro_cal_sum[j] += Gyro[j];
		}
	}
	for (int j=0;j<3;j++)
    152a:	6e 14       	cp	r6, r14
    152c:	7f 04       	cpc	r7, r15
    152e:	b9 f6       	brne	.-82     	; 0x14de <MPU_Calib+0xec>
	{
		acc_calib[j] =  sum_acc_cal_sum[j]/(float)calib_loops;
		gyro_calib[j] = sum_gyro_cal_sum[j]/(float)calib_loops;
	}
	acc_calib[2] -= 10;
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e2       	ldi	r20, 0x20	; 32
    1536:	51 e4       	ldi	r21, 0x41	; 65
    1538:	60 91 65 02 	lds	r22, 0x0265	; 0x800265 <acc_calib+0x8>
    153c:	70 91 66 02 	lds	r23, 0x0266	; 0x800266 <acc_calib+0x9>
    1540:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <acc_calib+0xa>
    1544:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <acc_calib+0xb>
    1548:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
    154c:	60 93 65 02 	sts	0x0265, r22	; 0x800265 <acc_calib+0x8>
    1550:	70 93 66 02 	sts	0x0266, r23	; 0x800266 <acc_calib+0x9>
    1554:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <acc_calib+0xa>
    1558:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <acc_calib+0xb>
}
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	0f 90       	pop	r0
    1564:	df 91       	pop	r29
    1566:	cf 91       	pop	r28
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <MPU_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    158a:	8b e7       	ldi	r24, 0x7B	; 123
    158c:	92 e9       	ldi	r25, 0x92	; 146
    158e:	01 97       	sbiw	r24, 0x01	; 1
    1590:	f1 f7       	brne	.-4      	; 0x158e <MPU_Init+0x4>
    1592:	00 c0       	rjmp	.+0      	; 0x1594 <MPU_Init+0xa>
    1594:	00 00       	nop
void MPU_Init(void)
{
	//
	_delay_ms(150);										/* Power up time >100ms */
	//0x68
	I2C_Start_Wait(MPU6050_addr);
    1596:	80 ed       	ldi	r24, 0xD0	; 208
    1598:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <I2C_Start_Wait>
	I2C_Write(0x6B);								/* Write to power management register */
    159c:	8b e6       	ldi	r24, 0x6B	; 107
    159e:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Write(0x01);									//select the clock X-axis 
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Stop();
    15a8:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_Stop>

	I2C_Start_Wait(MPU6050_addr);
    15ac:	80 ed       	ldi	r24, 0xD0	; 208
    15ae:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <I2C_Start_Wait>
	I2C_Write(0x1A);								//Low pass digital filter
    15b2:	8a e1       	ldi	r24, 0x1A	; 26
    15b4:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Write(0x05);									
    15b8:	85 e0       	ldi	r24, 0x05	; 5
    15ba:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Stop();
    15be:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_Stop>
	00	+- 250 degrees/s
	01	+- 500 degrees/s
	10	+- 1000 degrees/s
	11	+- 2000 degrees/s
	*/
	I2C_Start_Wait(MPU6050_addr);
    15c2:	80 ed       	ldi	r24, 0xD0	; 208
    15c4:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <I2C_Start_Wait>
	I2C_Write(0x1B);			
    15c8:	8b e1       	ldi	r24, 0x1B	; 27
    15ca:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Write(0x08);
    15ce:	88 e0       	ldi	r24, 0x08	; 8
    15d0:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Stop();
    15d4:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_Stop>
	00	+- 2 g
	01	+- 4 g
	10	+- 8 g
	11	+- 16 g
	*/
	I2C_Start_Wait(MPU6050_addr);
    15d8:	80 ed       	ldi	r24, 0xD0	; 208
    15da:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <I2C_Start_Wait>
	I2C_Write(0x1C);
    15de:	8c e1       	ldi	r24, 0x1C	; 28
    15e0:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Write(0x10);
    15e4:	80 e1       	ldi	r24, 0x10	; 16
    15e6:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Stop();
    15ea:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_Stop>
	//disable INT 
	I2C_Start_Wait(MPU6050_addr);
    15ee:	80 ed       	ldi	r24, 0xD0	; 208
    15f0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <I2C_Start_Wait>
	I2C_Write(0x38);								/* Write to interrupt enable register */
    15f4:	88 e3       	ldi	r24, 0x38	; 56
    15f6:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Write(0x01);
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Stop();
    1600:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_Stop>
	//
	I2C_Start_Wait(0xD0);								/* Start with device write address */
    1604:	80 ed       	ldi	r24, 0xD0	; 208
    1606:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <I2C_Start_Wait>
	I2C_Write(0x19);								/* Write to sample rate register */
    160a:	89 e1       	ldi	r24, 0x19	; 25
    160c:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Write(0x07);									/* 1KHz sample rate */
    1610:	87 e0       	ldi	r24, 0x07	; 7
    1612:	0e 94 81 17 	call	0x2f02	; 0x2f02 <I2C_Write>
	I2C_Stop();
    1616:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_Stop>
	
	MPU_Calib(AccData,GyroData);
    161a:	6a e0       	ldi	r22, 0x0A	; 10
    161c:	71 e0       	ldi	r23, 0x01	; 1
    161e:	86 e1       	ldi	r24, 0x16	; 22
    1620:	91 e0       	ldi	r25, 0x01	; 1
    1622:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <MPU_Calib>
    1626:	08 95       	ret

00001628 <pvPortMalloc>:
#if( configSUPPORT_DYNAMIC_ALLOCATION > 0 )

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	ec 01       	movw	r28, r24
void *pvReturn;

    vTaskSuspendAll();
    162e:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskSuspendAll>
    {
        pvReturn = malloc( xWantedSize );
    1632:	ce 01       	movw	r24, r28
    1634:	0e 94 16 1f 	call	0x3e2c	; 0x3e2c <malloc>
    1638:	ec 01       	movw	r28, r24
        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
    163a:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>

    #if( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
    163e:	20 97       	sbiw	r28, 0x00	; 0
    1640:	11 f4       	brne	.+4      	; 0x1646 <pvPortMalloc+0x1e>
        {
            extern void vApplicationMallocFailedHook( void );
            vApplicationMallocFailedHook();
    1642:	0e 94 52 0b 	call	0x16a4	; 0x16a4 <vApplicationMallocFailedHook>
        }
    }
    #endif

    return pvReturn;
}
    1646:	ce 01       	movw	r24, r28
    1648:	df 91       	pop	r29
    164a:	cf 91       	pop	r28
    164c:	08 95       	ret

0000164e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    164e:	cf 93       	push	r28
    1650:	df 93       	push	r29
    if( pv )
    1652:	00 97       	sbiw	r24, 0x00	; 0
    1654:	41 f0       	breq	.+16     	; 0x1666 <vPortFree+0x18>
    1656:	ec 01       	movw	r28, r24
    {
        vTaskSuspendAll();
    1658:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskSuspendAll>
        {
            free( pv );
    165c:	ce 01       	movw	r24, r28
    165e:	0e 94 ae 1f 	call	0x3f5c	; 0x3f5c <free>
            traceFREE( pv, 0 );
        }
        ( void ) xTaskResumeAll();
    1662:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    }
}
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <vApplicationIdleHook>:

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // with 1284p
    DIDR0 = 0xFF;

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino with 328p
    DIDR0 = 0x3F;
    166c:	8f e3       	ldi	r24, 0x3F	; 63
    166e:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
    // When the ACD bit is written logic one, the power to the Analogue Comparator is switched off.
    // This bit can be set at any time to turn off the Analogue Comparator.
    // This will Yellowuce power consumption in Active and Idle mode.
    // When changing the ACD bit, the Analogue Comparator Interrupt must be disabled by clearing the ACIE bit in ACSR.
    // Otherwise an interrupt can occur when the ACD bit is changed.
    ACSR &= ~_BV(ACIE);
    1672:	80 b7       	in	r24, 0x30	; 48
    1674:	87 7f       	andi	r24, 0xF7	; 247
    1676:	80 bf       	out	0x30, r24	; 48
    ACSR |=  _BV(ACD);
    1678:	80 b7       	in	r24, 0x30	; 48
    167a:	80 68       	ori	r24, 0x80	; 128
    167c:	80 bf       	out	0x30, r24	; 48
    // SLEEP_MODE_PWR_DOWN     _BV(SM1)
    // SLEEP_MODE_PWR_SAVE     (_BV(SM0) | _BV(SM1))
    // SLEEP_MODE_STANDBY      (_BV(SM1) | _BV(SM2))
    // SLEEP_MODE_EXT_STANDBY  (_BV(SM0) | _BV(SM1) | _BV(SM2))

    set_sleep_mode( SLEEP_MODE_IDLE );
    167e:	83 b7       	in	r24, 0x33	; 51
    1680:	81 7f       	andi	r24, 0xF1	; 241
    1682:	83 bf       	out	0x33, r24	; 51

    portENTER_CRITICAL();
    1684:	0f b6       	in	r0, 0x3f	; 63
    1686:	f8 94       	cli
    1688:	0f 92       	push	r0
    sleep_enable();
    168a:	83 b7       	in	r24, 0x33	; 51
    168c:	81 60       	ori	r24, 0x01	; 1
    168e:	83 bf       	out	0x33, r24	; 51

#if defined(BODS) && defined(BODSE) // only if there is support to disable the BOD.
    sleep_bod_disable();
    1690:	85 b7       	in	r24, 0x35	; 53
    1692:	80 66       	ori	r24, 0x60	; 96
    1694:	85 bf       	out	0x35, r24	; 53
    1696:	8f 7d       	andi	r24, 0xDF	; 223
    1698:	85 bf       	out	0x35, r24	; 53
#endif

    portEXIT_CRITICAL();
    169a:	0f 90       	pop	r0
    169c:	0f be       	out	0x3f, r0	; 63
    sleep_cpu();            // good night.
    169e:	88 95       	sleep

    sleep_reset();          // reset the sleep_mode() faster than sleep_disable();
    16a0:	13 be       	out	0x33, r1	; 51
    16a2:	08 95       	ret

000016a4 <vApplicationMallocFailedHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    16a4:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    16a6:	2d 9a       	sbi	0x05, 5	; 5
    16a8:	83 ed       	ldi	r24, 0xD3	; 211
    16aa:	90 e3       	ldi	r25, 0x30	; 48
    16ac:	01 97       	sbiw	r24, 0x01	; 1
    16ae:	f1 f7       	brne	.-4      	; 0x16ac <vApplicationMallocFailedHook+0x8>
    16b0:	00 c0       	rjmp	.+0      	; 0x16b2 <vApplicationMallocFailedHook+0xe>
    16b2:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED fast blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED fast blink.
    16b4:	1d 9a       	sbi	0x03, 5	; 3
    16b6:	f8 cf       	rjmp	.-16     	; 0x16a8 <vApplicationMallocFailedHook+0x4>

000016b8 <vApplicationStackOverflowHook>:
#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
    DDRB  |= _BV(DDB7);
    PORTB |= _BV(PORTB7);       // Main (Yellow PB7) LED on. Main LED on.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
    DDRB  |= _BV(DDB5);
    16b8:	25 9a       	sbi	0x04, 5	; 4
    PORTB |= _BV(PORTB5);       // Main (Yellow PB5) LED on. Main LED on.
    16ba:	2d 9a       	sbi	0x05, 5	; 5
    16bc:	2f e7       	ldi	r18, 0x7F	; 127
    16be:	8a e1       	ldi	r24, 0x1A	; 26
    16c0:	96 e0       	ldi	r25, 0x06	; 6
    16c2:	21 50       	subi	r18, 0x01	; 1
    16c4:	80 40       	sbci	r24, 0x00	; 0
    16c6:	90 40       	sbci	r25, 0x00	; 0
    16c8:	e1 f7       	brne	.-8      	; 0x16c2 <vApplicationStackOverflowHook+0xa>
    16ca:	00 c0       	rjmp	.+0      	; 0x16cc <vApplicationStackOverflowHook+0x14>
    16cc:	00 00       	nop

#elif defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega1284PA__) // Seeed Goldilocks with 1284p
        PINB  |= _BV(PINB7);       // Main (Yellow PB7) LED toggle. Main LED slow blink.

#elif defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__) || defined(__AVR_ATmega8__) // assume we're using an Arduino Uno with 328p
        PINB  |= _BV(PINB5);       // Main (Yellow PB5) LED toggle. Main LED slow blink.
    16ce:	1d 9a       	sbi	0x03, 5	; 3
    16d0:	f5 cf       	rjmp	.-22     	; 0x16bc <vApplicationStackOverflowHook+0x4>

000016d2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    16d2:	fc 01       	movw	r30, r24
    /* The list structure contains a list item which is used to mark the
    end of the list.  To initialise the list the list end is inserted
    as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );            /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16d4:	03 96       	adiw	r24, 0x03	; 3
    16d6:	92 83       	std	Z+2, r25	; 0x02
    16d8:	81 83       	std	Z+1, r24	; 0x01

    /* The list end value is the highest possible value in the list to
    ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
    16da:	2f ef       	ldi	r18, 0xFF	; 255
    16dc:	3f ef       	ldi	r19, 0xFF	; 255
    16de:	34 83       	std	Z+4, r19	; 0x04
    16e0:	23 83       	std	Z+3, r18	; 0x03

    /* The list end next and previous pointers point to itself so we know
    when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );    /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16e2:	96 83       	std	Z+6, r25	; 0x06
    16e4:	85 83       	std	Z+5, r24	; 0x05
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    16e6:	90 87       	std	Z+8, r25	; 0x08
    16e8:	87 83       	std	Z+7, r24	; 0x07

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    16ea:	10 82       	st	Z, r1
    16ec:	08 95       	ret

000016ee <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
    16ee:	fc 01       	movw	r30, r24
    16f0:	11 86       	std	Z+9, r1	; 0x09
    16f2:	10 86       	std	Z+8, r1	; 0x08
    16f4:	08 95       	ret

000016f6 <vListInsertEnd>:
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	9c 01       	movw	r18, r24
    16fc:	fb 01       	movw	r30, r22
ListItem_t * const pxIndex = pxList->pxIndex;
    16fe:	dc 01       	movw	r26, r24
    1700:	11 96       	adiw	r26, 0x01	; 1
    1702:	cd 91       	ld	r28, X+
    1704:	dc 91       	ld	r29, X
    1706:	12 97       	sbiw	r26, 0x02	; 2
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
    makes the new list item the last item to be removed by a call to
    listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    1708:	d3 83       	std	Z+3, r29	; 0x03
    170a:	c2 83       	std	Z+2, r28	; 0x02
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	95 83       	std	Z+5, r25	; 0x05
    1712:	84 83       	std	Z+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
    1714:	8c 81       	ldd	r24, Y+4	; 0x04
    1716:	9d 81       	ldd	r25, Y+5	; 0x05
    1718:	dc 01       	movw	r26, r24
    171a:	13 96       	adiw	r26, 0x03	; 3
    171c:	7c 93       	st	X, r23
    171e:	6e 93       	st	-X, r22
    1720:	12 97       	sbiw	r26, 0x02	; 2
    pxIndex->pxPrevious = pxNewListItem;
    1722:	7d 83       	std	Y+5, r23	; 0x05
    1724:	6c 83       	std	Y+4, r22	; 0x04

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
    1726:	31 87       	std	Z+9, r19	; 0x09
    1728:	20 87       	std	Z+8, r18	; 0x08

    ( pxList->uxNumberOfItems )++;
    172a:	f9 01       	movw	r30, r18
    172c:	80 81       	ld	r24, Z
    172e:	8f 5f       	subi	r24, 0xFF	; 255
    1730:	80 83       	st	Z, r24
}
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1738:	cf 93       	push	r28
    173a:	df 93       	push	r29
    173c:	eb 01       	movw	r28, r22
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    173e:	48 81       	ld	r20, Y
    1740:	59 81       	ldd	r21, Y+1	; 0x01
    new list item should be placed after it.  This ensures that TCBs which are
    stoYellow in ready lists (all of which have the same xItemValue value) get a
    share of the CPU.  However, if the xItemValue is the same as the back marker
    the iteration loop below will not end.  Therefore the value is checked
    first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
    1742:	4f 3f       	cpi	r20, 0xFF	; 255
    1744:	2f ef       	ldi	r18, 0xFF	; 255
    1746:	52 07       	cpc	r21, r18
    1748:	21 f4       	brne	.+8      	; 0x1752 <vListInsert+0x1a>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
    174a:	fc 01       	movw	r30, r24
    174c:	a7 81       	ldd	r26, Z+7	; 0x07
    174e:	b0 85       	ldd	r27, Z+8	; 0x08
    1750:	0d c0       	rjmp	.+26     	; 0x176c <vListInsert+0x34>
            4) Using a queue or semaphore before it has been initialised or
               before the scheduler has been started (are interrupts firing
               before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
    1752:	dc 01       	movw	r26, r24
    1754:	13 96       	adiw	r26, 0x03	; 3
    1756:	01 c0       	rjmp	.+2      	; 0x175a <vListInsert+0x22>
    1758:	df 01       	movw	r26, r30
    175a:	12 96       	adiw	r26, 0x02	; 2
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	13 97       	sbiw	r26, 0x03	; 3
    1762:	20 81       	ld	r18, Z
    1764:	31 81       	ldd	r19, Z+1	; 0x01
    1766:	42 17       	cp	r20, r18
    1768:	53 07       	cpc	r21, r19
    176a:	b0 f7       	brcc	.-20     	; 0x1758 <vListInsert+0x20>
            /* There is nothing to do here, just iterating to the wanted
            insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	ed 91       	ld	r30, X+
    1770:	fc 91       	ld	r31, X
    1772:	13 97       	sbiw	r26, 0x03	; 3
    1774:	fb 83       	std	Y+3, r31	; 0x03
    1776:	ea 83       	std	Y+2, r30	; 0x02
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1778:	d5 83       	std	Z+5, r29	; 0x05
    177a:	c4 83       	std	Z+4, r28	; 0x04
    pxNewListItem->pxPrevious = pxIterator;
    177c:	bd 83       	std	Y+5, r27	; 0x05
    177e:	ac 83       	std	Y+4, r26	; 0x04
    pxIterator->pxNext = pxNewListItem;
    1780:	13 96       	adiw	r26, 0x03	; 3
    1782:	dc 93       	st	X, r29
    1784:	ce 93       	st	-X, r28
    1786:	12 97       	sbiw	r26, 0x02	; 2

    /* Remember which list the item is in.  This allows fast removal of the
    item later. */
    pxNewListItem->pxContainer = pxList;
    1788:	99 87       	std	Y+9, r25	; 0x09
    178a:	88 87       	std	Y+8, r24	; 0x08

    ( pxList->uxNumberOfItems )++;
    178c:	fc 01       	movw	r30, r24
    178e:	20 81       	ld	r18, Z
    1790:	2f 5f       	subi	r18, 0xFF	; 255
    1792:	20 83       	st	Z, r18
}
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
    17a0:	a0 85       	ldd	r26, Z+8	; 0x08
    17a2:	b1 85       	ldd	r27, Z+9	; 0x09

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    17a4:	c2 81       	ldd	r28, Z+2	; 0x02
    17a6:	d3 81       	ldd	r29, Z+3	; 0x03
    17a8:	84 81       	ldd	r24, Z+4	; 0x04
    17aa:	95 81       	ldd	r25, Z+5	; 0x05
    17ac:	9d 83       	std	Y+5, r25	; 0x05
    17ae:	8c 83       	std	Y+4, r24	; 0x04
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    17b0:	c4 81       	ldd	r28, Z+4	; 0x04
    17b2:	d5 81       	ldd	r29, Z+5	; 0x05
    17b4:	82 81       	ldd	r24, Z+2	; 0x02
    17b6:	93 81       	ldd	r25, Z+3	; 0x03
    17b8:	9b 83       	std	Y+3, r25	; 0x03
    17ba:	8a 83       	std	Y+2, r24	; 0x02

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
    17bc:	11 96       	adiw	r26, 0x01	; 1
    17be:	8d 91       	ld	r24, X+
    17c0:	9c 91       	ld	r25, X
    17c2:	12 97       	sbiw	r26, 0x02	; 2
    17c4:	e8 17       	cp	r30, r24
    17c6:	f9 07       	cpc	r31, r25
    17c8:	31 f4       	brne	.+12     	; 0x17d6 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
    17ca:	84 81       	ldd	r24, Z+4	; 0x04
    17cc:	95 81       	ldd	r25, Z+5	; 0x05
    17ce:	12 96       	adiw	r26, 0x02	; 2
    17d0:	9c 93       	st	X, r25
    17d2:	8e 93       	st	-X, r24
    17d4:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
    17d6:	11 86       	std	Z+9, r1	; 0x09
    17d8:	10 86       	std	Z+8, r1	; 0x08
    ( pxList->uxNumberOfItems )--;
    17da:	8c 91       	ld	r24, X
    17dc:	81 50       	subi	r24, 0x01	; 1
    17de:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
    17e0:	8c 91       	ld	r24, X
}
    17e2:	df 91       	pop	r29
    17e4:	cf 91       	pop	r28
    17e6:	08 95       	ret

000017e8 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
    17e8:	fc 01       	movw	r30, r24
    17ea:	60 83       	st	Z, r22
    17ec:	31 97       	sbiw	r30, 0x01	; 1
    17ee:	70 83       	st	Z, r23
    17f0:	31 97       	sbiw	r30, 0x01	; 1
    17f2:	10 82       	st	Z, r1
    17f4:	31 97       	sbiw	r30, 0x01	; 1
    17f6:	20 e8       	ldi	r18, 0x80	; 128
    17f8:	20 83       	st	Z, r18
    17fa:	31 97       	sbiw	r30, 0x01	; 1
    17fc:	10 82       	st	Z, r1
    17fe:	77 97       	sbiw	r30, 0x17	; 23
    1800:	40 83       	st	Z, r20
    1802:	31 97       	sbiw	r30, 0x01	; 1
    1804:	50 83       	st	Z, r21
    1806:	83 97       	sbiw	r24, 0x23	; 35
    1808:	08 95       	ret

0000180a <xPortStartScheduler>:
    180a:	a8 95       	wdr
    180c:	90 ec       	ldi	r25, 0xC0	; 192
    180e:	88 e1       	ldi	r24, 0x18	; 24
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	a8 95       	wdr
    1816:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    181a:	0f be       	out	0x3f, r0	; 63
    181c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    1820:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <pxCurrentTCB>
    1824:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    1828:	cd 91       	ld	r28, X+
    182a:	cd bf       	out	0x3d, r28	; 61
    182c:	dd 91       	ld	r29, X+
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	ff 91       	pop	r31
    1832:	ef 91       	pop	r30
    1834:	df 91       	pop	r29
    1836:	cf 91       	pop	r28
    1838:	bf 91       	pop	r27
    183a:	af 91       	pop	r26
    183c:	9f 91       	pop	r25
    183e:	8f 91       	pop	r24
    1840:	7f 91       	pop	r23
    1842:	6f 91       	pop	r22
    1844:	5f 91       	pop	r21
    1846:	4f 91       	pop	r20
    1848:	3f 91       	pop	r19
    184a:	2f 91       	pop	r18
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	9f 90       	pop	r9
    185e:	8f 90       	pop	r8
    1860:	7f 90       	pop	r7
    1862:	6f 90       	pop	r6
    1864:	5f 90       	pop	r5
    1866:	4f 90       	pop	r4
    1868:	3f 90       	pop	r3
    186a:	2f 90       	pop	r2
    186c:	1f 90       	pop	r1
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0f 90       	pop	r0
    1874:	08 95       	ret
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	08 95       	ret

0000187a <vPortYield>:
    187a:	0f 92       	push	r0
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	0f 92       	push	r0
    1882:	1f 92       	push	r1
    1884:	11 24       	eor	r1, r1
    1886:	2f 92       	push	r2
    1888:	3f 92       	push	r3
    188a:	4f 92       	push	r4
    188c:	5f 92       	push	r5
    188e:	6f 92       	push	r6
    1890:	7f 92       	push	r7
    1892:	8f 92       	push	r8
    1894:	9f 92       	push	r9
    1896:	af 92       	push	r10
    1898:	bf 92       	push	r11
    189a:	cf 92       	push	r12
    189c:	df 92       	push	r13
    189e:	ef 92       	push	r14
    18a0:	ff 92       	push	r15
    18a2:	0f 93       	push	r16
    18a4:	1f 93       	push	r17
    18a6:	2f 93       	push	r18
    18a8:	3f 93       	push	r19
    18aa:	4f 93       	push	r20
    18ac:	5f 93       	push	r21
    18ae:	6f 93       	push	r22
    18b0:	7f 93       	push	r23
    18b2:	8f 93       	push	r24
    18b4:	9f 93       	push	r25
    18b6:	af 93       	push	r26
    18b8:	bf 93       	push	r27
    18ba:	cf 93       	push	r28
    18bc:	df 93       	push	r29
    18be:	ef 93       	push	r30
    18c0:	ff 93       	push	r31
    18c2:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <pxCurrentTCB>
    18c6:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    18ca:	0d b6       	in	r0, 0x3d	; 61
    18cc:	0d 92       	st	X+, r0
    18ce:	0e b6       	in	r0, 0x3e	; 62
    18d0:	0d 92       	st	X+, r0
    18d2:	0e 94 4e 13 	call	0x269c	; 0x269c <vTaskSwitchContext>
    18d6:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <pxCurrentTCB>
    18da:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    18de:	cd 91       	ld	r28, X+
    18e0:	cd bf       	out	0x3d, r28	; 61
    18e2:	dd 91       	ld	r29, X+
    18e4:	de bf       	out	0x3e, r29	; 62
    18e6:	ff 91       	pop	r31
    18e8:	ef 91       	pop	r30
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	bf 91       	pop	r27
    18f0:	af 91       	pop	r26
    18f2:	9f 91       	pop	r25
    18f4:	8f 91       	pop	r24
    18f6:	7f 91       	pop	r23
    18f8:	6f 91       	pop	r22
    18fa:	5f 91       	pop	r21
    18fc:	4f 91       	pop	r20
    18fe:	3f 91       	pop	r19
    1900:	2f 91       	pop	r18
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	ff 90       	pop	r15
    1908:	ef 90       	pop	r14
    190a:	df 90       	pop	r13
    190c:	cf 90       	pop	r12
    190e:	bf 90       	pop	r11
    1910:	af 90       	pop	r10
    1912:	9f 90       	pop	r9
    1914:	8f 90       	pop	r8
    1916:	7f 90       	pop	r7
    1918:	6f 90       	pop	r6
    191a:	5f 90       	pop	r5
    191c:	4f 90       	pop	r4
    191e:	3f 90       	pop	r3
    1920:	2f 90       	pop	r2
    1922:	1f 90       	pop	r1
    1924:	0f 90       	pop	r0
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	0f 90       	pop	r0
    192a:	08 95       	ret

0000192c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
    192c:	0f 92       	push	r0
    192e:	0f b6       	in	r0, 0x3f	; 63
    1930:	f8 94       	cli
    1932:	0f 92       	push	r0
    1934:	1f 92       	push	r1
    1936:	11 24       	eor	r1, r1
    1938:	2f 92       	push	r2
    193a:	3f 92       	push	r3
    193c:	4f 92       	push	r4
    193e:	5f 92       	push	r5
    1940:	6f 92       	push	r6
    1942:	7f 92       	push	r7
    1944:	8f 92       	push	r8
    1946:	9f 92       	push	r9
    1948:	af 92       	push	r10
    194a:	bf 92       	push	r11
    194c:	cf 92       	push	r12
    194e:	df 92       	push	r13
    1950:	ef 92       	push	r14
    1952:	ff 92       	push	r15
    1954:	0f 93       	push	r16
    1956:	1f 93       	push	r17
    1958:	2f 93       	push	r18
    195a:	3f 93       	push	r19
    195c:	4f 93       	push	r20
    195e:	5f 93       	push	r21
    1960:	6f 93       	push	r22
    1962:	7f 93       	push	r23
    1964:	8f 93       	push	r24
    1966:	9f 93       	push	r25
    1968:	af 93       	push	r26
    196a:	bf 93       	push	r27
    196c:	cf 93       	push	r28
    196e:	df 93       	push	r29
    1970:	ef 93       	push	r30
    1972:	ff 93       	push	r31
    1974:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <pxCurrentTCB>
    1978:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    197c:	0d b6       	in	r0, 0x3d	; 61
    197e:	0d 92       	st	X+, r0
    1980:	0e b6       	in	r0, 0x3e	; 62
    1982:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
    1984:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
    1986:	0e 94 ce 11 	call	0x239c	; 0x239c <xTaskIncrementTick>
    198a:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
    198c:	0e 94 4e 13 	call	0x269c	; 0x269c <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
    1990:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <pxCurrentTCB>
    1994:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    1998:	cd 91       	ld	r28, X+
    199a:	cd bf       	out	0x3d, r28	; 61
    199c:	dd 91       	ld	r29, X+
    199e:	de bf       	out	0x3e, r29	; 62
    19a0:	ff 91       	pop	r31
    19a2:	ef 91       	pop	r30
    19a4:	df 91       	pop	r29
    19a6:	cf 91       	pop	r28
    19a8:	bf 91       	pop	r27
    19aa:	af 91       	pop	r26
    19ac:	9f 91       	pop	r25
    19ae:	8f 91       	pop	r24
    19b0:	7f 91       	pop	r23
    19b2:	6f 91       	pop	r22
    19b4:	5f 91       	pop	r21
    19b6:	4f 91       	pop	r20
    19b8:	3f 91       	pop	r19
    19ba:	2f 91       	pop	r18
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	ff 90       	pop	r15
    19c2:	ef 90       	pop	r14
    19c4:	df 90       	pop	r13
    19c6:	cf 90       	pop	r12
    19c8:	bf 90       	pop	r11
    19ca:	af 90       	pop	r10
    19cc:	9f 90       	pop	r9
    19ce:	8f 90       	pop	r8
    19d0:	7f 90       	pop	r7
    19d2:	6f 90       	pop	r6
    19d4:	5f 90       	pop	r5
    19d6:	4f 90       	pop	r4
    19d8:	3f 90       	pop	r3
    19da:	2f 90       	pop	r2
    19dc:	1f 90       	pop	r1
    19de:	0f 90       	pop	r0
    19e0:	0f be       	out	0x3f, r0	; 63
    19e2:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
    19e4:	08 95       	ret

000019e6 <__vector_6>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
    19e6:	0e 94 96 0c 	call	0x192c	; 0x192c <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
    19ea:	18 95       	reti

000019ec <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    19ec:	0f b6       	in	r0, 0x3f	; 63
    19ee:	f8 94       	cli
    19f0:	0f 92       	push	r0
    19f2:	fc 01       	movw	r30, r24
    19f4:	92 8d       	ldd	r25, Z+26	; 0x1a
    19f6:	0f 90       	pop	r0
    19f8:	0f be       	out	0x3f, r0	; 63
    19fa:	81 e0       	ldi	r24, 0x01	; 1
    19fc:	91 11       	cpse	r25, r1
    19fe:	80 e0       	ldi	r24, 0x00	; 0
    1a00:	08 95       	ret

00001a02 <prvCopyDataToQueue>:
    1a02:	0f 93       	push	r16
    1a04:	1f 93       	push	r17
    1a06:	cf 93       	push	r28
    1a08:	df 93       	push	r29
    1a0a:	ec 01       	movw	r28, r24
    1a0c:	04 2f       	mov	r16, r20
    1a0e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    1a10:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1a12:	41 11       	cpse	r20, r1
    1a14:	0c c0       	rjmp	.+24     	; 0x1a2e <prvCopyDataToQueue+0x2c>
    1a16:	88 81       	ld	r24, Y
    1a18:	99 81       	ldd	r25, Y+1	; 0x01
    1a1a:	89 2b       	or	r24, r25
    1a1c:	09 f0       	breq	.+2      	; 0x1a20 <prvCopyDataToQueue+0x1e>
    1a1e:	42 c0       	rjmp	.+132    	; 0x1aa4 <prvCopyDataToQueue+0xa2>
    1a20:	8c 81       	ldd	r24, Y+4	; 0x04
    1a22:	9d 81       	ldd	r25, Y+5	; 0x05
    1a24:	0e 94 95 14 	call	0x292a	; 0x292a <xTaskPriorityDisinherit>
    1a28:	1d 82       	std	Y+5, r1	; 0x05
    1a2a:	1c 82       	std	Y+4, r1	; 0x04
    1a2c:	42 c0       	rjmp	.+132    	; 0x1ab2 <prvCopyDataToQueue+0xb0>
    1a2e:	01 11       	cpse	r16, r1
    1a30:	17 c0       	rjmp	.+46     	; 0x1a60 <prvCopyDataToQueue+0x5e>
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	8a 81       	ldd	r24, Y+2	; 0x02
    1a36:	9b 81       	ldd	r25, Y+3	; 0x03
    1a38:	0e 94 1a 21 	call	0x4234	; 0x4234 <memcpy>
    1a3c:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	9b 81       	ldd	r25, Y+3	; 0x03
    1a42:	82 0f       	add	r24, r18
    1a44:	91 1d       	adc	r25, r1
    1a46:	9b 83       	std	Y+3, r25	; 0x03
    1a48:	8a 83       	std	Y+2, r24	; 0x02
    1a4a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a4c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a4e:	82 17       	cp	r24, r18
    1a50:	93 07       	cpc	r25, r19
    1a52:	50 f1       	brcs	.+84     	; 0x1aa8 <prvCopyDataToQueue+0xa6>
    1a54:	88 81       	ld	r24, Y
    1a56:	99 81       	ldd	r25, Y+1	; 0x01
    1a58:	9b 83       	std	Y+3, r25	; 0x03
    1a5a:	8a 83       	std	Y+2, r24	; 0x02
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	29 c0       	rjmp	.+82     	; 0x1ab2 <prvCopyDataToQueue+0xb0>
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	8e 81       	ldd	r24, Y+6	; 0x06
    1a64:	9f 81       	ldd	r25, Y+7	; 0x07
    1a66:	0e 94 1a 21 	call	0x4234	; 0x4234 <memcpy>
    1a6a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	91 95       	neg	r25
    1a70:	81 95       	neg	r24
    1a72:	91 09       	sbc	r25, r1
    1a74:	2e 81       	ldd	r18, Y+6	; 0x06
    1a76:	3f 81       	ldd	r19, Y+7	; 0x07
    1a78:	28 0f       	add	r18, r24
    1a7a:	39 1f       	adc	r19, r25
    1a7c:	3f 83       	std	Y+7, r19	; 0x07
    1a7e:	2e 83       	std	Y+6, r18	; 0x06
    1a80:	48 81       	ld	r20, Y
    1a82:	59 81       	ldd	r21, Y+1	; 0x01
    1a84:	24 17       	cp	r18, r20
    1a86:	35 07       	cpc	r19, r21
    1a88:	30 f4       	brcc	.+12     	; 0x1a96 <prvCopyDataToQueue+0x94>
    1a8a:	2c 81       	ldd	r18, Y+4	; 0x04
    1a8c:	3d 81       	ldd	r19, Y+5	; 0x05
    1a8e:	82 0f       	add	r24, r18
    1a90:	93 1f       	adc	r25, r19
    1a92:	9f 83       	std	Y+7, r25	; 0x07
    1a94:	8e 83       	std	Y+6, r24	; 0x06
    1a96:	02 30       	cpi	r16, 0x02	; 2
    1a98:	49 f4       	brne	.+18     	; 0x1aac <prvCopyDataToQueue+0xaa>
    1a9a:	11 23       	and	r17, r17
    1a9c:	49 f0       	breq	.+18     	; 0x1ab0 <prvCopyDataToQueue+0xae>
    1a9e:	11 50       	subi	r17, 0x01	; 1
    1aa0:	80 e0       	ldi	r24, 0x00	; 0
    1aa2:	07 c0       	rjmp	.+14     	; 0x1ab2 <prvCopyDataToQueue+0xb0>
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	05 c0       	rjmp	.+10     	; 0x1ab2 <prvCopyDataToQueue+0xb0>
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	03 c0       	rjmp	.+6      	; 0x1ab2 <prvCopyDataToQueue+0xb0>
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <prvCopyDataToQueue+0xb0>
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	1f 5f       	subi	r17, 0xFF	; 255
    1ab4:	1a 8f       	std	Y+26, r17	; 0x1a
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	08 95       	ret

00001ac0 <prvCopyDataFromQueue>:
    1ac0:	fc 01       	movw	r30, r24
    1ac2:	44 8d       	ldd	r20, Z+28	; 0x1c
    1ac4:	44 23       	and	r20, r20
    1ac6:	a9 f0       	breq	.+42     	; 0x1af2 <prvCopyDataFromQueue+0x32>
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	26 81       	ldd	r18, Z+6	; 0x06
    1acc:	37 81       	ldd	r19, Z+7	; 0x07
    1ace:	24 0f       	add	r18, r20
    1ad0:	35 1f       	adc	r19, r21
    1ad2:	37 83       	std	Z+7, r19	; 0x07
    1ad4:	26 83       	std	Z+6, r18	; 0x06
    1ad6:	84 81       	ldd	r24, Z+4	; 0x04
    1ad8:	95 81       	ldd	r25, Z+5	; 0x05
    1ada:	28 17       	cp	r18, r24
    1adc:	39 07       	cpc	r19, r25
    1ade:	20 f0       	brcs	.+8      	; 0x1ae8 <prvCopyDataFromQueue+0x28>
    1ae0:	80 81       	ld	r24, Z
    1ae2:	91 81       	ldd	r25, Z+1	; 0x01
    1ae4:	97 83       	std	Z+7, r25	; 0x07
    1ae6:	86 83       	std	Z+6, r24	; 0x06
    1ae8:	cb 01       	movw	r24, r22
    1aea:	66 81       	ldd	r22, Z+6	; 0x06
    1aec:	77 81       	ldd	r23, Z+7	; 0x07
    1aee:	0e 94 1a 21 	call	0x4234	; 0x4234 <memcpy>
    1af2:	08 95       	ret

00001af4 <prvUnlockQueue>:
    1af4:	ef 92       	push	r14
    1af6:	ff 92       	push	r15
    1af8:	0f 93       	push	r16
    1afa:	1f 93       	push	r17
    1afc:	cf 93       	push	r28
    1afe:	8c 01       	movw	r16, r24
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	0f 92       	push	r0
    1b06:	fc 01       	movw	r30, r24
    1b08:	c6 8d       	ldd	r28, Z+30	; 0x1e
    1b0a:	1c 16       	cp	r1, r28
    1b0c:	ac f4       	brge	.+42     	; 0x1b38 <prvUnlockQueue+0x44>
    1b0e:	81 89       	ldd	r24, Z+17	; 0x11
    1b10:	81 11       	cpse	r24, r1
    1b12:	06 c0       	rjmp	.+12     	; 0x1b20 <prvUnlockQueue+0x2c>
    1b14:	11 c0       	rjmp	.+34     	; 0x1b38 <prvUnlockQueue+0x44>
    1b16:	f8 01       	movw	r30, r16
    1b18:	81 89       	ldd	r24, Z+17	; 0x11
    1b1a:	81 11       	cpse	r24, r1
    1b1c:	05 c0       	rjmp	.+10     	; 0x1b28 <prvUnlockQueue+0x34>
    1b1e:	0c c0       	rjmp	.+24     	; 0x1b38 <prvUnlockQueue+0x44>
    1b20:	78 01       	movw	r14, r16
    1b22:	f1 e1       	ldi	r31, 0x11	; 17
    1b24:	ef 0e       	add	r14, r31
    1b26:	f1 1c       	adc	r15, r1
    1b28:	c7 01       	movw	r24, r14
    1b2a:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <xTaskRemoveFromEventList>
    1b2e:	81 11       	cpse	r24, r1
    1b30:	0e 94 83 14 	call	0x2906	; 0x2906 <vTaskMissedYield>
    1b34:	c1 50       	subi	r28, 0x01	; 1
    1b36:	79 f7       	brne	.-34     	; 0x1b16 <prvUnlockQueue+0x22>
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	86 8f       	std	Z+30, r24	; 0x1e
    1b3e:	0f 90       	pop	r0
    1b40:	0f be       	out	0x3f, r0	; 63
    1b42:	0f b6       	in	r0, 0x3f	; 63
    1b44:	f8 94       	cli
    1b46:	0f 92       	push	r0
    1b48:	c5 8d       	ldd	r28, Z+29	; 0x1d
    1b4a:	1c 16       	cp	r1, r28
    1b4c:	ac f4       	brge	.+42     	; 0x1b78 <prvUnlockQueue+0x84>
    1b4e:	80 85       	ldd	r24, Z+8	; 0x08
    1b50:	81 11       	cpse	r24, r1
    1b52:	06 c0       	rjmp	.+12     	; 0x1b60 <prvUnlockQueue+0x6c>
    1b54:	11 c0       	rjmp	.+34     	; 0x1b78 <prvUnlockQueue+0x84>
    1b56:	f8 01       	movw	r30, r16
    1b58:	80 85       	ldd	r24, Z+8	; 0x08
    1b5a:	81 11       	cpse	r24, r1
    1b5c:	05 c0       	rjmp	.+10     	; 0x1b68 <prvUnlockQueue+0x74>
    1b5e:	0c c0       	rjmp	.+24     	; 0x1b78 <prvUnlockQueue+0x84>
    1b60:	78 01       	movw	r14, r16
    1b62:	f8 e0       	ldi	r31, 0x08	; 8
    1b64:	ef 0e       	add	r14, r31
    1b66:	f1 1c       	adc	r15, r1
    1b68:	c7 01       	movw	r24, r14
    1b6a:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <xTaskRemoveFromEventList>
    1b6e:	81 11       	cpse	r24, r1
    1b70:	0e 94 83 14 	call	0x2906	; 0x2906 <vTaskMissedYield>
    1b74:	c1 50       	subi	r28, 0x01	; 1
    1b76:	79 f7       	brne	.-34     	; 0x1b56 <prvUnlockQueue+0x62>
    1b78:	8f ef       	ldi	r24, 0xFF	; 255
    1b7a:	f8 01       	movw	r30, r16
    1b7c:	85 8f       	std	Z+29, r24	; 0x1d
    1b7e:	0f 90       	pop	r0
    1b80:	0f be       	out	0x3f, r0	; 63
    1b82:	cf 91       	pop	r28
    1b84:	1f 91       	pop	r17
    1b86:	0f 91       	pop	r16
    1b88:	ff 90       	pop	r15
    1b8a:	ef 90       	pop	r14
    1b8c:	08 95       	ret

00001b8e <xQueueGenericReset>:
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
    1b94:	0f b6       	in	r0, 0x3f	; 63
    1b96:	f8 94       	cli
    1b98:	0f 92       	push	r0
    1b9a:	e8 81       	ld	r30, Y
    1b9c:	f9 81       	ldd	r31, Y+1	; 0x01
    1b9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ba0:	2c 8d       	ldd	r18, Y+28	; 0x1c
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	82 9f       	mul	r24, r18
    1ba8:	a0 01       	movw	r20, r0
    1baa:	83 9f       	mul	r24, r19
    1bac:	50 0d       	add	r21, r0
    1bae:	92 9f       	mul	r25, r18
    1bb0:	50 0d       	add	r21, r0
    1bb2:	11 24       	eor	r1, r1
    1bb4:	4e 0f       	add	r20, r30
    1bb6:	5f 1f       	adc	r21, r31
    1bb8:	5d 83       	std	Y+5, r21	; 0x05
    1bba:	4c 83       	std	Y+4, r20	; 0x04
    1bbc:	1a 8e       	std	Y+26, r1	; 0x1a
    1bbe:	fb 83       	std	Y+3, r31	; 0x03
    1bc0:	ea 83       	std	Y+2, r30	; 0x02
    1bc2:	01 97       	sbiw	r24, 0x01	; 1
    1bc4:	82 9f       	mul	r24, r18
    1bc6:	a0 01       	movw	r20, r0
    1bc8:	83 9f       	mul	r24, r19
    1bca:	50 0d       	add	r21, r0
    1bcc:	92 9f       	mul	r25, r18
    1bce:	50 0d       	add	r21, r0
    1bd0:	11 24       	eor	r1, r1
    1bd2:	cf 01       	movw	r24, r30
    1bd4:	84 0f       	add	r24, r20
    1bd6:	95 1f       	adc	r25, r21
    1bd8:	9f 83       	std	Y+7, r25	; 0x07
    1bda:	8e 83       	std	Y+6, r24	; 0x06
    1bdc:	8f ef       	ldi	r24, 0xFF	; 255
    1bde:	8d 8f       	std	Y+29, r24	; 0x1d
    1be0:	8e 8f       	std	Y+30, r24	; 0x1e
    1be2:	61 11       	cpse	r22, r1
    1be4:	0c c0       	rjmp	.+24     	; 0x1bfe <xQueueGenericReset+0x70>
    1be6:	88 85       	ldd	r24, Y+8	; 0x08
    1be8:	88 23       	and	r24, r24
    1bea:	89 f0       	breq	.+34     	; 0x1c0e <xQueueGenericReset+0x80>
    1bec:	ce 01       	movw	r24, r28
    1bee:	08 96       	adiw	r24, 0x08	; 8
    1bf0:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <xTaskRemoveFromEventList>
    1bf4:	88 23       	and	r24, r24
    1bf6:	59 f0       	breq	.+22     	; 0x1c0e <xQueueGenericReset+0x80>
    1bf8:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    1bfc:	08 c0       	rjmp	.+16     	; 0x1c0e <xQueueGenericReset+0x80>
    1bfe:	ce 01       	movw	r24, r28
    1c00:	08 96       	adiw	r24, 0x08	; 8
    1c02:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    1c06:	ce 01       	movw	r24, r28
    1c08:	41 96       	adiw	r24, 0x11	; 17
    1c0a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    1c0e:	0f 90       	pop	r0
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <xQueueGenericCreate>:
    1c1a:	0f 93       	push	r16
    1c1c:	1f 93       	push	r17
    1c1e:	cf 93       	push	r28
    1c20:	df 93       	push	r29
    1c22:	08 2f       	mov	r16, r24
    1c24:	16 2f       	mov	r17, r22
    1c26:	86 9f       	mul	r24, r22
    1c28:	c0 01       	movw	r24, r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	4f 96       	adiw	r24, 0x1f	; 31
    1c2e:	0e 94 14 0b 	call	0x1628	; 0x1628 <pvPortMalloc>
    1c32:	ec 01       	movw	r28, r24
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	71 f0       	breq	.+28     	; 0x1c54 <xQueueGenericCreate+0x3a>
    1c38:	11 11       	cpse	r17, r1
    1c3a:	03 c0       	rjmp	.+6      	; 0x1c42 <xQueueGenericCreate+0x28>
    1c3c:	99 83       	std	Y+1, r25	; 0x01
    1c3e:	88 83       	st	Y, r24
    1c40:	03 c0       	rjmp	.+6      	; 0x1c48 <xQueueGenericCreate+0x2e>
    1c42:	4f 96       	adiw	r24, 0x1f	; 31
    1c44:	99 83       	std	Y+1, r25	; 0x01
    1c46:	88 83       	st	Y, r24
    1c48:	0b 8f       	std	Y+27, r16	; 0x1b
    1c4a:	1c 8f       	std	Y+28, r17	; 0x1c
    1c4c:	61 e0       	ldi	r22, 0x01	; 1
    1c4e:	ce 01       	movw	r24, r28
    1c50:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <xQueueGenericReset>
    1c54:	ce 01       	movw	r24, r28
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	08 95       	ret

00001c60 <xQueueGenericSend>:
    1c60:	9f 92       	push	r9
    1c62:	af 92       	push	r10
    1c64:	bf 92       	push	r11
    1c66:	cf 92       	push	r12
    1c68:	df 92       	push	r13
    1c6a:	ef 92       	push	r14
    1c6c:	ff 92       	push	r15
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <xQueueGenericSend+0x18>
    1c78:	00 d0       	rcall	.+0      	; 0x1c7a <xQueueGenericSend+0x1a>
    1c7a:	1f 92       	push	r1
    1c7c:	cd b7       	in	r28, 0x3d	; 61
    1c7e:	de b7       	in	r29, 0x3e	; 62
    1c80:	8c 01       	movw	r16, r24
    1c82:	6b 01       	movw	r12, r22
    1c84:	5d 83       	std	Y+5, r21	; 0x05
    1c86:	4c 83       	std	Y+4, r20	; 0x04
    1c88:	a2 2e       	mov	r10, r18
    1c8a:	b1 2c       	mov	r11, r1
    1c8c:	99 24       	eor	r9, r9
    1c8e:	93 94       	inc	r9
    1c90:	7c 01       	movw	r14, r24
    1c92:	88 e0       	ldi	r24, 0x08	; 8
    1c94:	e8 0e       	add	r14, r24
    1c96:	f1 1c       	adc	r15, r1
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	0f 92       	push	r0
    1c9e:	f8 01       	movw	r30, r16
    1ca0:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ca2:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ca4:	98 17       	cp	r25, r24
    1ca6:	18 f0       	brcs	.+6      	; 0x1cae <xQueueGenericSend+0x4e>
    1ca8:	f2 e0       	ldi	r31, 0x02	; 2
    1caa:	af 12       	cpse	r10, r31
    1cac:	19 c0       	rjmp	.+50     	; 0x1ce0 <xQueueGenericSend+0x80>
    1cae:	4a 2d       	mov	r20, r10
    1cb0:	b6 01       	movw	r22, r12
    1cb2:	c8 01       	movw	r24, r16
    1cb4:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <prvCopyDataToQueue>
    1cb8:	f8 01       	movw	r30, r16
    1cba:	91 89       	ldd	r25, Z+17	; 0x11
    1cbc:	99 23       	and	r25, r25
    1cbe:	49 f0       	breq	.+18     	; 0x1cd2 <xQueueGenericSend+0x72>
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	41 96       	adiw	r24, 0x11	; 17
    1cc4:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <xTaskRemoveFromEventList>
    1cc8:	88 23       	and	r24, r24
    1cca:	31 f0       	breq	.+12     	; 0x1cd8 <xQueueGenericSend+0x78>
    1ccc:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    1cd0:	03 c0       	rjmp	.+6      	; 0x1cd8 <xQueueGenericSend+0x78>
    1cd2:	81 11       	cpse	r24, r1
    1cd4:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    1cd8:	0f 90       	pop	r0
    1cda:	0f be       	out	0x3f, r0	; 63
    1cdc:	81 e0       	ldi	r24, 0x01	; 1
    1cde:	50 c0       	rjmp	.+160    	; 0x1d80 <xQueueGenericSend+0x120>
    1ce0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ce2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ce4:	89 2b       	or	r24, r25
    1ce6:	21 f4       	brne	.+8      	; 0x1cf0 <xQueueGenericSend+0x90>
    1ce8:	0f 90       	pop	r0
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	48 c0       	rjmp	.+144    	; 0x1d80 <xQueueGenericSend+0x120>
    1cf0:	b1 10       	cpse	r11, r1
    1cf2:	05 c0       	rjmp	.+10     	; 0x1cfe <xQueueGenericSend+0x9e>
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	0e 94 42 14 	call	0x2884	; 0x2884 <vTaskInternalSetTimeOutState>
    1cfc:	b9 2c       	mov	r11, r9
    1cfe:	0f 90       	pop	r0
    1d00:	0f be       	out	0x3f, r0	; 63
    1d02:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskSuspendAll>
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	0f 92       	push	r0
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d10:	8f 3f       	cpi	r24, 0xFF	; 255
    1d12:	09 f4       	brne	.+2      	; 0x1d16 <xQueueGenericSend+0xb6>
    1d14:	15 8e       	std	Z+29, r1	; 0x1d
    1d16:	f8 01       	movw	r30, r16
    1d18:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d1a:	8f 3f       	cpi	r24, 0xFF	; 255
    1d1c:	09 f4       	brne	.+2      	; 0x1d20 <xQueueGenericSend+0xc0>
    1d1e:	16 8e       	std	Z+30, r1	; 0x1e
    1d20:	0f 90       	pop	r0
    1d22:	0f be       	out	0x3f, r0	; 63
    1d24:	be 01       	movw	r22, r28
    1d26:	6c 5f       	subi	r22, 0xFC	; 252
    1d28:	7f 4f       	sbci	r23, 0xFF	; 255
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	01 96       	adiw	r24, 0x01	; 1
    1d2e:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskCheckForTimeOut>
    1d32:	81 11       	cpse	r24, r1
    1d34:	1f c0       	rjmp	.+62     	; 0x1d74 <xQueueGenericSend+0x114>
    1d36:	0f b6       	in	r0, 0x3f	; 63
    1d38:	f8 94       	cli
    1d3a:	0f 92       	push	r0
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	92 8d       	ldd	r25, Z+26	; 0x1a
    1d40:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d42:	0f 90       	pop	r0
    1d44:	0f be       	out	0x3f, r0	; 63
    1d46:	98 13       	cpse	r25, r24
    1d48:	0f c0       	rjmp	.+30     	; 0x1d68 <xQueueGenericSend+0x108>
    1d4a:	6c 81       	ldd	r22, Y+4	; 0x04
    1d4c:	7d 81       	ldd	r23, Y+5	; 0x05
    1d4e:	c7 01       	movw	r24, r14
    1d50:	0e 94 cf 13 	call	0x279e	; 0x279e <vTaskPlaceOnEventList>
    1d54:	c8 01       	movw	r24, r16
    1d56:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvUnlockQueue>
    1d5a:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    1d5e:	81 11       	cpse	r24, r1
    1d60:	9b cf       	rjmp	.-202    	; 0x1c98 <xQueueGenericSend+0x38>
    1d62:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    1d66:	98 cf       	rjmp	.-208    	; 0x1c98 <xQueueGenericSend+0x38>
    1d68:	c8 01       	movw	r24, r16
    1d6a:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvUnlockQueue>
    1d6e:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    1d72:	92 cf       	rjmp	.-220    	; 0x1c98 <xQueueGenericSend+0x38>
    1d74:	c8 01       	movw	r24, r16
    1d76:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvUnlockQueue>
    1d7a:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	1f 91       	pop	r17
    1d90:	0f 91       	pop	r16
    1d92:	ff 90       	pop	r15
    1d94:	ef 90       	pop	r14
    1d96:	df 90       	pop	r13
    1d98:	cf 90       	pop	r12
    1d9a:	bf 90       	pop	r11
    1d9c:	af 90       	pop	r10
    1d9e:	9f 90       	pop	r9
    1da0:	08 95       	ret

00001da2 <xQueueGenericSendFromISR>:
    1da2:	ef 92       	push	r14
    1da4:	ff 92       	push	r15
    1da6:	0f 93       	push	r16
    1da8:	1f 93       	push	r17
    1daa:	cf 93       	push	r28
    1dac:	df 93       	push	r29
    1dae:	8a 01       	movw	r16, r20
    1db0:	fc 01       	movw	r30, r24
    1db2:	52 8d       	ldd	r21, Z+26	; 0x1a
    1db4:	33 8d       	ldd	r19, Z+27	; 0x1b
    1db6:	53 17       	cp	r21, r19
    1db8:	10 f0       	brcs	.+4      	; 0x1dbe <xQueueGenericSendFromISR+0x1c>
    1dba:	22 30       	cpi	r18, 0x02	; 2
    1dbc:	01 f5       	brne	.+64     	; 0x1dfe <xQueueGenericSendFromISR+0x5c>
    1dbe:	42 2f       	mov	r20, r18
    1dc0:	78 01       	movw	r14, r16
    1dc2:	ec 01       	movw	r28, r24
    1dc4:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1dc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1dc8:	ce 01       	movw	r24, r28
    1dca:	0e 94 01 0d 	call	0x1a02	; 0x1a02 <prvCopyDataToQueue>
    1dce:	1f 3f       	cpi	r17, 0xFF	; 255
    1dd0:	81 f4       	brne	.+32     	; 0x1df2 <xQueueGenericSendFromISR+0x50>
    1dd2:	89 89       	ldd	r24, Y+17	; 0x11
    1dd4:	88 23       	and	r24, r24
    1dd6:	a9 f0       	breq	.+42     	; 0x1e02 <xQueueGenericSendFromISR+0x60>
    1dd8:	ce 01       	movw	r24, r28
    1dda:	41 96       	adiw	r24, 0x11	; 17
    1ddc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <xTaskRemoveFromEventList>
    1de0:	88 23       	and	r24, r24
    1de2:	89 f0       	breq	.+34     	; 0x1e06 <xQueueGenericSendFromISR+0x64>
    1de4:	e1 14       	cp	r14, r1
    1de6:	f1 04       	cpc	r15, r1
    1de8:	81 f0       	breq	.+32     	; 0x1e0a <xQueueGenericSendFromISR+0x68>
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	f7 01       	movw	r30, r14
    1dee:	80 83       	st	Z, r24
    1df0:	0d c0       	rjmp	.+26     	; 0x1e0c <xQueueGenericSendFromISR+0x6a>
    1df2:	ff 24       	eor	r15, r15
    1df4:	f3 94       	inc	r15
    1df6:	f1 0e       	add	r15, r17
    1df8:	fe 8e       	std	Y+30, r15	; 0x1e
    1dfa:	81 e0       	ldi	r24, 0x01	; 1
    1dfc:	07 c0       	rjmp	.+14     	; 0x1e0c <xQueueGenericSendFromISR+0x6a>
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	05 c0       	rjmp	.+10     	; 0x1e0c <xQueueGenericSendFromISR+0x6a>
    1e02:	81 e0       	ldi	r24, 0x01	; 1
    1e04:	03 c0       	rjmp	.+6      	; 0x1e0c <xQueueGenericSendFromISR+0x6a>
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	01 c0       	rjmp	.+2      	; 0x1e0c <xQueueGenericSendFromISR+0x6a>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	df 91       	pop	r29
    1e0e:	cf 91       	pop	r28
    1e10:	1f 91       	pop	r17
    1e12:	0f 91       	pop	r16
    1e14:	ff 90       	pop	r15
    1e16:	ef 90       	pop	r14
    1e18:	08 95       	ret

00001e1a <xQueueReceive>:
    1e1a:	9f 92       	push	r9
    1e1c:	af 92       	push	r10
    1e1e:	bf 92       	push	r11
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	cf 93       	push	r28
    1e2e:	df 93       	push	r29
    1e30:	00 d0       	rcall	.+0      	; 0x1e32 <xQueueReceive+0x18>
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <xQueueReceive+0x1a>
    1e34:	1f 92       	push	r1
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	8c 01       	movw	r16, r24
    1e3c:	5b 01       	movw	r10, r22
    1e3e:	5d 83       	std	Y+5, r21	; 0x05
    1e40:	4c 83       	std	Y+4, r20	; 0x04
    1e42:	e1 2c       	mov	r14, r1
    1e44:	99 24       	eor	r9, r9
    1e46:	93 94       	inc	r9
    1e48:	6c 01       	movw	r12, r24
    1e4a:	81 e1       	ldi	r24, 0x11	; 17
    1e4c:	c8 0e       	add	r12, r24
    1e4e:	d1 1c       	adc	r13, r1
    1e50:	0f b6       	in	r0, 0x3f	; 63
    1e52:	f8 94       	cli
    1e54:	0f 92       	push	r0
    1e56:	f8 01       	movw	r30, r16
    1e58:	f2 8c       	ldd	r15, Z+26	; 0x1a
    1e5a:	ff 20       	and	r15, r15
    1e5c:	a9 f0       	breq	.+42     	; 0x1e88 <xQueueReceive+0x6e>
    1e5e:	b5 01       	movw	r22, r10
    1e60:	c8 01       	movw	r24, r16
    1e62:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <prvCopyDataFromQueue>
    1e66:	fa 94       	dec	r15
    1e68:	f8 01       	movw	r30, r16
    1e6a:	f2 8e       	std	Z+26, r15	; 0x1a
    1e6c:	80 85       	ldd	r24, Z+8	; 0x08
    1e6e:	88 23       	and	r24, r24
    1e70:	39 f0       	breq	.+14     	; 0x1e80 <xQueueReceive+0x66>
    1e72:	c8 01       	movw	r24, r16
    1e74:	08 96       	adiw	r24, 0x08	; 8
    1e76:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <xTaskRemoveFromEventList>
    1e7a:	81 11       	cpse	r24, r1
    1e7c:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    1e80:	0f 90       	pop	r0
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	51 c0       	rjmp	.+162    	; 0x1f2a <xQueueReceive+0x110>
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	89 2b       	or	r24, r25
    1e8e:	21 f4       	brne	.+8      	; 0x1e98 <xQueueReceive+0x7e>
    1e90:	0f 90       	pop	r0
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	49 c0       	rjmp	.+146    	; 0x1f2a <xQueueReceive+0x110>
    1e98:	e1 10       	cpse	r14, r1
    1e9a:	05 c0       	rjmp	.+10     	; 0x1ea6 <xQueueReceive+0x8c>
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	0e 94 42 14 	call	0x2884	; 0x2884 <vTaskInternalSetTimeOutState>
    1ea4:	e9 2c       	mov	r14, r9
    1ea6:	0f 90       	pop	r0
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskSuspendAll>
    1eae:	0f b6       	in	r0, 0x3f	; 63
    1eb0:	f8 94       	cli
    1eb2:	0f 92       	push	r0
    1eb4:	f8 01       	movw	r30, r16
    1eb6:	85 8d       	ldd	r24, Z+29	; 0x1d
    1eb8:	8f 3f       	cpi	r24, 0xFF	; 255
    1eba:	09 f4       	brne	.+2      	; 0x1ebe <xQueueReceive+0xa4>
    1ebc:	15 8e       	std	Z+29, r1	; 0x1d
    1ebe:	f8 01       	movw	r30, r16
    1ec0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1ec2:	8f 3f       	cpi	r24, 0xFF	; 255
    1ec4:	09 f4       	brne	.+2      	; 0x1ec8 <xQueueReceive+0xae>
    1ec6:	16 8e       	std	Z+30, r1	; 0x1e
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	be 01       	movw	r22, r28
    1ece:	6c 5f       	subi	r22, 0xFC	; 252
    1ed0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	0e 94 4d 14 	call	0x289a	; 0x289a <xTaskCheckForTimeOut>
    1eda:	81 11       	cpse	r24, r1
    1edc:	1a c0       	rjmp	.+52     	; 0x1f12 <xQueueReceive+0xf8>
    1ede:	c8 01       	movw	r24, r16
    1ee0:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <prvIsQueueEmpty>
    1ee4:	88 23       	and	r24, r24
    1ee6:	79 f0       	breq	.+30     	; 0x1f06 <xQueueReceive+0xec>
    1ee8:	6c 81       	ldd	r22, Y+4	; 0x04
    1eea:	7d 81       	ldd	r23, Y+5	; 0x05
    1eec:	c6 01       	movw	r24, r12
    1eee:	0e 94 cf 13 	call	0x279e	; 0x279e <vTaskPlaceOnEventList>
    1ef2:	c8 01       	movw	r24, r16
    1ef4:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvUnlockQueue>
    1ef8:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    1efc:	81 11       	cpse	r24, r1
    1efe:	a8 cf       	rjmp	.-176    	; 0x1e50 <xQueueReceive+0x36>
    1f00:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    1f04:	a5 cf       	rjmp	.-182    	; 0x1e50 <xQueueReceive+0x36>
    1f06:	c8 01       	movw	r24, r16
    1f08:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvUnlockQueue>
    1f0c:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    1f10:	9f cf       	rjmp	.-194    	; 0x1e50 <xQueueReceive+0x36>
    1f12:	c8 01       	movw	r24, r16
    1f14:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvUnlockQueue>
    1f18:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    1f1c:	c8 01       	movw	r24, r16
    1f1e:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <prvIsQueueEmpty>
    1f22:	88 23       	and	r24, r24
    1f24:	09 f4       	brne	.+2      	; 0x1f28 <xQueueReceive+0x10e>
    1f26:	94 cf       	rjmp	.-216    	; 0x1e50 <xQueueReceive+0x36>
    1f28:	80 e0       	ldi	r24, 0x00	; 0
    1f2a:	0f 90       	pop	r0
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	ff 90       	pop	r15
    1f3e:	ef 90       	pop	r14
    1f40:	df 90       	pop	r13
    1f42:	cf 90       	pop	r12
    1f44:	bf 90       	pop	r11
    1f46:	af 90       	pop	r10
    1f48:	9f 90       	pop	r9
    1f4a:	08 95       	ret

00001f4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
    {
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	ec 01       	movw	r28, r24
        will not actually cause the task to block, just place it on a blocked
        list.  It will not block until the scheduler is unlocked - at which
        time a yield will be performed.  If an item is added to the queue while
        the queue is locked, and the calling task blocks on the queue, then the
        calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	0f 92       	push	r0
    1f58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f5a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <vQueueWaitForMessageRestricted+0x14>
    1f5e:	1d 8e       	std	Y+29, r1	; 0x1d
    1f60:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f62:	8f 3f       	cpi	r24, 0xFF	; 255
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <vQueueWaitForMessageRestricted+0x1c>
    1f66:	1e 8e       	std	Y+30, r1	; 0x1e
    1f68:	0f 90       	pop	r0
    1f6a:	0f be       	out	0x3f, r0	; 63
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1f6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1f6e:	81 11       	cpse	r24, r1
    1f70:	04 c0       	rjmp	.+8      	; 0x1f7a <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1f72:	ce 01       	movw	r24, r28
    1f74:	41 96       	adiw	r24, 0x11	; 17
    1f76:	0e 94 e1 13 	call	0x27c2	; 0x27c2 <vTaskPlaceOnEventListRestricted>
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
        prvUnlockQueue( pxQueue );
    1f7a:	ce 01       	movw	r24, r28
    1f7c:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <prvUnlockQueue>
    }
    1f80:	df 91       	pop	r29
    1f82:	cf 91       	pop	r28
    1f84:	08 95       	ret

00001f86 <prvResetNextTaskUnblockTime>:
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    1f86:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <pxDelayedTaskList>
    1f8a:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <pxDelayedTaskList+0x1>
    1f8e:	80 81       	ld	r24, Z
    1f90:	81 11       	cpse	r24, r1
    1f92:	07 c0       	rjmp	.+14     	; 0x1fa2 <prvResetNextTaskUnblockTime+0x1c>
    1f94:	8f ef       	ldi	r24, 0xFF	; 255
    1f96:	9f ef       	ldi	r25, 0xFF	; 255
    1f98:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <xNextTaskUnblockTime+0x1>
    1f9c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <xNextTaskUnblockTime>
    1fa0:	08 95       	ret
    1fa2:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <pxDelayedTaskList>
    1fa6:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <pxDelayedTaskList+0x1>
    1faa:	05 80       	ldd	r0, Z+5	; 0x05
    1fac:	f6 81       	ldd	r31, Z+6	; 0x06
    1fae:	e0 2d       	mov	r30, r0
    1fb0:	06 80       	ldd	r0, Z+6	; 0x06
    1fb2:	f7 81       	ldd	r31, Z+7	; 0x07
    1fb4:	e0 2d       	mov	r30, r0
    1fb6:	82 81       	ldd	r24, Z+2	; 0x02
    1fb8:	93 81       	ldd	r25, Z+3	; 0x03
    1fba:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <xNextTaskUnblockTime+0x1>
    1fbe:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <xNextTaskUnblockTime>
    1fc2:	08 95       	ret

00001fc4 <prvAddCurrentTaskToDelayedList>:
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	ec 01       	movw	r28, r24
    1fd0:	f6 2e       	mov	r15, r22
    1fd2:	00 91 c8 01 	lds	r16, 0x01C8	; 0x8001c8 <xTickCount>
    1fd6:	10 91 c9 01 	lds	r17, 0x01C9	; 0x8001c9 <xTickCount+0x1>
    1fda:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <pxCurrentTCB>
    1fde:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    1fe2:	02 96       	adiw	r24, 0x02	; 2
    1fe4:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    1fe8:	cf 3f       	cpi	r28, 0xFF	; 255
    1fea:	8f ef       	ldi	r24, 0xFF	; 255
    1fec:	d8 07       	cpc	r29, r24
    1fee:	69 f4       	brne	.+26     	; 0x200a <prvAddCurrentTaskToDelayedList+0x46>
    1ff0:	ff 20       	and	r15, r15
    1ff2:	59 f0       	breq	.+22     	; 0x200a <prvAddCurrentTaskToDelayedList+0x46>
    1ff4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <pxCurrentTCB>
    1ff8:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    1ffc:	6e 5f       	subi	r22, 0xFE	; 254
    1ffe:	7f 4f       	sbci	r23, 0xFF	; 255
    2000:	8b ec       	ldi	r24, 0xCB	; 203
    2002:	91 e0       	ldi	r25, 0x01	; 1
    2004:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vListInsertEnd>
    2008:	2f c0       	rjmp	.+94     	; 0x2068 <prvAddCurrentTaskToDelayedList+0xa4>
    200a:	c0 0f       	add	r28, r16
    200c:	d1 1f       	adc	r29, r17
    200e:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <pxCurrentTCB>
    2012:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    2016:	d3 83       	std	Z+3, r29	; 0x03
    2018:	c2 83       	std	Z+2, r28	; 0x02
    201a:	c0 17       	cp	r28, r16
    201c:	d1 07       	cpc	r29, r17
    201e:	68 f4       	brcc	.+26     	; 0x203a <prvAddCurrentTaskToDelayedList+0x76>
    2020:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <pxCurrentTCB>
    2024:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    2028:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <pxOverflowDelayedTaskList>
    202c:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <pxOverflowDelayedTaskList+0x1>
    2030:	6e 5f       	subi	r22, 0xFE	; 254
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsert>
    2038:	17 c0       	rjmp	.+46     	; 0x2068 <prvAddCurrentTaskToDelayedList+0xa4>
    203a:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <pxCurrentTCB>
    203e:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    2042:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <pxDelayedTaskList>
    2046:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <pxDelayedTaskList+0x1>
    204a:	6e 5f       	subi	r22, 0xFE	; 254
    204c:	7f 4f       	sbci	r23, 0xFF	; 255
    204e:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsert>
    2052:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <xNextTaskUnblockTime>
    2056:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <xNextTaskUnblockTime+0x1>
    205a:	c8 17       	cp	r28, r24
    205c:	d9 07       	cpc	r29, r25
    205e:	20 f4       	brcc	.+8      	; 0x2068 <prvAddCurrentTaskToDelayedList+0xa4>
    2060:	d0 93 c0 01 	sts	0x01C0, r29	; 0x8001c0 <xNextTaskUnblockTime+0x1>
    2064:	c0 93 bf 01 	sts	0x01BF, r28	; 0x8001bf <xNextTaskUnblockTime>
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	1f 91       	pop	r17
    206e:	0f 91       	pop	r16
    2070:	ff 90       	pop	r15
    2072:	08 95       	ret

00002074 <prvIdleTask>:
    2074:	05 ed       	ldi	r16, 0xD5	; 213
    2076:	11 e0       	ldi	r17, 0x01	; 1
    2078:	0f 2e       	mov	r0, r31
    207a:	fd ef       	ldi	r31, 0xFD	; 253
    207c:	ef 2e       	mov	r14, r31
    207e:	f1 e0       	ldi	r31, 0x01	; 1
    2080:	ff 2e       	mov	r15, r31
    2082:	f0 2d       	mov	r31, r0
    2084:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <uxDeletedTasksWaitingCleanUp>
    2088:	88 23       	and	r24, r24
    208a:	29 f1       	breq	.+74     	; 0x20d6 <prvIdleTask+0x62>
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	0f 92       	push	r0
    2092:	d8 01       	movw	r26, r16
    2094:	15 96       	adiw	r26, 0x05	; 5
    2096:	ed 91       	ld	r30, X+
    2098:	fc 91       	ld	r31, X
    209a:	16 97       	sbiw	r26, 0x06	; 6
    209c:	c6 81       	ldd	r28, Z+6	; 0x06
    209e:	d7 81       	ldd	r29, Z+7	; 0x07
    20a0:	ce 01       	movw	r24, r28
    20a2:	02 96       	adiw	r24, 0x02	; 2
    20a4:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    20a8:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uxCurrentNumberOfTasks>
    20ac:	81 50       	subi	r24, 0x01	; 1
    20ae:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <uxCurrentNumberOfTasks>
    20b2:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <uxDeletedTasksWaitingCleanUp>
    20b6:	81 50       	subi	r24, 0x01	; 1
    20b8:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <uxDeletedTasksWaitingCleanUp>
    20bc:	0f 90       	pop	r0
    20be:	0f be       	out	0x3f, r0	; 63
    20c0:	8f 89       	ldd	r24, Y+23	; 0x17
    20c2:	98 8d       	ldd	r25, Y+24	; 0x18
    20c4:	0e 94 27 0b 	call	0x164e	; 0x164e <vPortFree>
    20c8:	ce 01       	movw	r24, r28
    20ca:	0e 94 27 0b 	call	0x164e	; 0x164e <vPortFree>
    20ce:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <uxDeletedTasksWaitingCleanUp>
    20d2:	81 11       	cpse	r24, r1
    20d4:	db cf       	rjmp	.-74     	; 0x208c <prvIdleTask+0x18>
    20d6:	f7 01       	movw	r30, r14
    20d8:	80 81       	ld	r24, Z
    20da:	82 30       	cpi	r24, 0x02	; 2
    20dc:	10 f0       	brcs	.+4      	; 0x20e2 <prvIdleTask+0x6e>
    20de:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    20e2:	0e 94 36 0b 	call	0x166c	; 0x166c <vApplicationIdleHook>
    20e6:	ce cf       	rjmp	.-100    	; 0x2084 <prvIdleTask+0x10>

000020e8 <xTaskCreate>:
    20e8:	4f 92       	push	r4
    20ea:	5f 92       	push	r5
    20ec:	6f 92       	push	r6
    20ee:	7f 92       	push	r7
    20f0:	8f 92       	push	r8
    20f2:	9f 92       	push	r9
    20f4:	af 92       	push	r10
    20f6:	bf 92       	push	r11
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	0f 93       	push	r16
    2102:	cf 93       	push	r28
    2104:	df 93       	push	r29
    2106:	4c 01       	movw	r8, r24
    2108:	6b 01       	movw	r12, r22
    210a:	5a 01       	movw	r10, r20
    210c:	29 01       	movw	r4, r18
    210e:	ca 01       	movw	r24, r20
    2110:	0e 94 14 0b 	call	0x1628	; 0x1628 <pvPortMalloc>
    2114:	3c 01       	movw	r6, r24
    2116:	89 2b       	or	r24, r25
    2118:	09 f4       	brne	.+2      	; 0x211c <xTaskCreate+0x34>
    211a:	f1 c0       	rjmp	.+482    	; 0x22fe <xTaskCreate+0x216>
    211c:	88 e2       	ldi	r24, 0x28	; 40
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	0e 94 14 0b 	call	0x1628	; 0x1628 <pvPortMalloc>
    2124:	ec 01       	movw	r28, r24
    2126:	89 2b       	or	r24, r25
    2128:	99 f0       	breq	.+38     	; 0x2150 <xTaskCreate+0x68>
    212a:	78 8e       	std	Y+24, r7	; 0x18
    212c:	6f 8a       	std	Y+23, r6	; 0x17
    212e:	a5 01       	movw	r20, r10
    2130:	65 ea       	ldi	r22, 0xA5	; 165
    2132:	70 e0       	ldi	r23, 0x00	; 0
    2134:	c3 01       	movw	r24, r6
    2136:	0e 94 23 21 	call	0x4246	; 0x4246 <memset>
    213a:	81 e0       	ldi	r24, 0x01	; 1
    213c:	a8 1a       	sub	r10, r24
    213e:	b1 08       	sbc	r11, r1
    2140:	8f 89       	ldd	r24, Y+23	; 0x17
    2142:	98 8d       	ldd	r25, Y+24	; 0x18
    2144:	a8 0e       	add	r10, r24
    2146:	b9 1e       	adc	r11, r25
    2148:	c1 14       	cp	r12, r1
    214a:	d1 04       	cpc	r13, r1
    214c:	29 f4       	brne	.+10     	; 0x2158 <xTaskCreate+0x70>
    214e:	20 c0       	rjmp	.+64     	; 0x2190 <xTaskCreate+0xa8>
    2150:	c3 01       	movw	r24, r6
    2152:	0e 94 27 0b 	call	0x164e	; 0x164e <vPortFree>
    2156:	d3 c0       	rjmp	.+422    	; 0x22fe <xTaskCreate+0x216>
    2158:	d6 01       	movw	r26, r12
    215a:	8c 91       	ld	r24, X
    215c:	89 8f       	std	Y+25, r24	; 0x19
    215e:	8c 91       	ld	r24, X
    2160:	88 23       	and	r24, r24
    2162:	a1 f0       	breq	.+40     	; 0x218c <xTaskCreate+0xa4>
    2164:	ae 01       	movw	r20, r28
    2166:	46 5e       	subi	r20, 0xE6	; 230
    2168:	5f 4f       	sbci	r21, 0xFF	; 255
    216a:	f6 01       	movw	r30, r12
    216c:	31 96       	adiw	r30, 0x01	; 1
    216e:	b8 e0       	ldi	r27, 0x08	; 8
    2170:	cb 0e       	add	r12, r27
    2172:	d1 1c       	adc	r13, r1
    2174:	cf 01       	movw	r24, r30
    2176:	21 91       	ld	r18, Z+
    2178:	da 01       	movw	r26, r20
    217a:	2d 93       	st	X+, r18
    217c:	ad 01       	movw	r20, r26
    217e:	dc 01       	movw	r26, r24
    2180:	8c 91       	ld	r24, X
    2182:	88 23       	and	r24, r24
    2184:	19 f0       	breq	.+6      	; 0x218c <xTaskCreate+0xa4>
    2186:	ec 15       	cp	r30, r12
    2188:	fd 05       	cpc	r31, r13
    218a:	a1 f7       	brne	.-24     	; 0x2174 <xTaskCreate+0x8c>
    218c:	18 a2       	std	Y+32, r1	; 0x20
    218e:	01 c0       	rjmp	.+2      	; 0x2192 <xTaskCreate+0xaa>
    2190:	19 8e       	std	Y+25, r1	; 0x19
    2192:	04 30       	cpi	r16, 0x04	; 4
    2194:	08 f0       	brcs	.+2      	; 0x2198 <xTaskCreate+0xb0>
    2196:	03 e0       	ldi	r16, 0x03	; 3
    2198:	0e 8b       	std	Y+22, r16	; 0x16
    219a:	09 a3       	std	Y+33, r16	; 0x21
    219c:	1a a2       	std	Y+34, r1	; 0x22
    219e:	6e 01       	movw	r12, r28
    21a0:	b2 e0       	ldi	r27, 0x02	; 2
    21a2:	cb 0e       	add	r12, r27
    21a4:	d1 1c       	adc	r13, r1
    21a6:	c6 01       	movw	r24, r12
    21a8:	0e 94 77 0b 	call	0x16ee	; 0x16ee <vListInitialiseItem>
    21ac:	ce 01       	movw	r24, r28
    21ae:	0c 96       	adiw	r24, 0x0c	; 12
    21b0:	0e 94 77 0b 	call	0x16ee	; 0x16ee <vListInitialiseItem>
    21b4:	d9 87       	std	Y+9, r29	; 0x09
    21b6:	c8 87       	std	Y+8, r28	; 0x08
    21b8:	84 e0       	ldi	r24, 0x04	; 4
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	80 1b       	sub	r24, r16
    21be:	91 09       	sbc	r25, r1
    21c0:	9d 87       	std	Y+13, r25	; 0x0d
    21c2:	8c 87       	std	Y+12, r24	; 0x0c
    21c4:	db 8b       	std	Y+19, r29	; 0x13
    21c6:	ca 8b       	std	Y+18, r28	; 0x12
    21c8:	1b a2       	std	Y+35, r1	; 0x23
    21ca:	1c a2       	std	Y+36, r1	; 0x24
    21cc:	1d a2       	std	Y+37, r1	; 0x25
    21ce:	1e a2       	std	Y+38, r1	; 0x26
    21d0:	1f a2       	std	Y+39, r1	; 0x27
    21d2:	a2 01       	movw	r20, r4
    21d4:	b4 01       	movw	r22, r8
    21d6:	c5 01       	movw	r24, r10
    21d8:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <pxPortInitialiseStack>
    21dc:	99 83       	std	Y+1, r25	; 0x01
    21de:	88 83       	st	Y, r24
    21e0:	e1 14       	cp	r14, r1
    21e2:	f1 04       	cpc	r15, r1
    21e4:	19 f0       	breq	.+6      	; 0x21ec <xTaskCreate+0x104>
    21e6:	f7 01       	movw	r30, r14
    21e8:	d1 83       	std	Z+1, r29	; 0x01
    21ea:	c0 83       	st	Z, r28
    21ec:	0f b6       	in	r0, 0x3f	; 63
    21ee:	f8 94       	cli
    21f0:	0f 92       	push	r0
    21f2:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uxCurrentNumberOfTasks>
    21f6:	8f 5f       	subi	r24, 0xFF	; 255
    21f8:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <uxCurrentNumberOfTasks>
    21fc:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <pxCurrentTCB>
    2200:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    2204:	89 2b       	or	r24, r25
    2206:	d1 f5       	brne	.+116    	; 0x227c <xTaskCreate+0x194>
    2208:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <pxCurrentTCB+0x1>
    220c:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <pxCurrentTCB>
    2210:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uxCurrentNumberOfTasks>
    2214:	81 30       	cpi	r24, 0x01	; 1
    2216:	09 f0       	breq	.+2      	; 0x221a <xTaskCreate+0x132>
    2218:	41 c0       	rjmp	.+130    	; 0x229c <xTaskCreate+0x1b4>
    221a:	8d ef       	ldi	r24, 0xFD	; 253
    221c:	91 e0       	ldi	r25, 0x01	; 1
    221e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    2222:	86 e0       	ldi	r24, 0x06	; 6
    2224:	92 e0       	ldi	r25, 0x02	; 2
    2226:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    222a:	8f e0       	ldi	r24, 0x0F	; 15
    222c:	92 e0       	ldi	r25, 0x02	; 2
    222e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    2232:	88 e1       	ldi	r24, 0x18	; 24
    2234:	92 e0       	ldi	r25, 0x02	; 2
    2236:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    223a:	84 ef       	ldi	r24, 0xF4	; 244
    223c:	91 e0       	ldi	r25, 0x01	; 1
    223e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    2242:	8b ee       	ldi	r24, 0xEB	; 235
    2244:	91 e0       	ldi	r25, 0x01	; 1
    2246:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    224a:	8e ed       	ldi	r24, 0xDE	; 222
    224c:	91 e0       	ldi	r25, 0x01	; 1
    224e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    2252:	85 ed       	ldi	r24, 0xD5	; 213
    2254:	91 e0       	ldi	r25, 0x01	; 1
    2256:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    225a:	8b ec       	ldi	r24, 0xCB	; 203
    225c:	91 e0       	ldi	r25, 0x01	; 1
    225e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    2262:	84 ef       	ldi	r24, 0xF4	; 244
    2264:	91 e0       	ldi	r25, 0x01	; 1
    2266:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <pxDelayedTaskList+0x1>
    226a:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <pxDelayedTaskList>
    226e:	8b ee       	ldi	r24, 0xEB	; 235
    2270:	91 e0       	ldi	r25, 0x01	; 1
    2272:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <pxOverflowDelayedTaskList+0x1>
    2276:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <pxOverflowDelayedTaskList>
    227a:	10 c0       	rjmp	.+32     	; 0x229c <xTaskCreate+0x1b4>
    227c:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <xSchedulerRunning>
    2280:	81 11       	cpse	r24, r1
    2282:	0c c0       	rjmp	.+24     	; 0x229c <xTaskCreate+0x1b4>
    2284:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <pxCurrentTCB>
    2288:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    228c:	96 89       	ldd	r25, Z+22	; 0x16
    228e:	8e 89       	ldd	r24, Y+22	; 0x16
    2290:	89 17       	cp	r24, r25
    2292:	20 f0       	brcs	.+8      	; 0x229c <xTaskCreate+0x1b4>
    2294:	d0 93 22 02 	sts	0x0222, r29	; 0x800222 <pxCurrentTCB+0x1>
    2298:	c0 93 21 02 	sts	0x0221, r28	; 0x800221 <pxCurrentTCB>
    229c:	80 91 c1 01 	lds	r24, 0x01C1	; 0x8001c1 <uxTaskNumber>
    22a0:	8f 5f       	subi	r24, 0xFF	; 255
    22a2:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <uxTaskNumber>
    22a6:	8e 89       	ldd	r24, Y+22	; 0x16
    22a8:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <uxTopReadyPriority>
    22ac:	98 17       	cp	r25, r24
    22ae:	10 f4       	brcc	.+4      	; 0x22b4 <xTaskCreate+0x1cc>
    22b0:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <uxTopReadyPriority>
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	9c 01       	movw	r18, r24
    22b8:	22 0f       	add	r18, r18
    22ba:	33 1f       	adc	r19, r19
    22bc:	22 0f       	add	r18, r18
    22be:	33 1f       	adc	r19, r19
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	82 0f       	add	r24, r18
    22c6:	93 1f       	adc	r25, r19
    22c8:	b6 01       	movw	r22, r12
    22ca:	83 50       	subi	r24, 0x03	; 3
    22cc:	9e 4f       	sbci	r25, 0xFE	; 254
    22ce:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vListInsertEnd>
    22d2:	0f 90       	pop	r0
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <xSchedulerRunning>
    22da:	88 23       	and	r24, r24
    22dc:	61 f0       	breq	.+24     	; 0x22f6 <xTaskCreate+0x20e>
    22de:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <pxCurrentTCB>
    22e2:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    22e6:	96 89       	ldd	r25, Z+22	; 0x16
    22e8:	8e 89       	ldd	r24, Y+22	; 0x16
    22ea:	98 17       	cp	r25, r24
    22ec:	30 f4       	brcc	.+12     	; 0x22fa <xTaskCreate+0x212>
    22ee:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	05 c0       	rjmp	.+10     	; 0x2300 <xTaskCreate+0x218>
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	03 c0       	rjmp	.+6      	; 0x2300 <xTaskCreate+0x218>
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	01 c0       	rjmp	.+2      	; 0x2300 <xTaskCreate+0x218>
    22fe:	8f ef       	ldi	r24, 0xFF	; 255
    2300:	df 91       	pop	r29
    2302:	cf 91       	pop	r28
    2304:	0f 91       	pop	r16
    2306:	ff 90       	pop	r15
    2308:	ef 90       	pop	r14
    230a:	df 90       	pop	r13
    230c:	cf 90       	pop	r12
    230e:	bf 90       	pop	r11
    2310:	af 90       	pop	r10
    2312:	9f 90       	pop	r9
    2314:	8f 90       	pop	r8
    2316:	7f 90       	pop	r7
    2318:	6f 90       	pop	r6
    231a:	5f 90       	pop	r5
    231c:	4f 90       	pop	r4
    231e:	08 95       	ret

00002320 <vTaskStartScheduler>:
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	0f 93       	push	r16
    2326:	0f 2e       	mov	r0, r31
    2328:	fd eb       	ldi	r31, 0xBD	; 189
    232a:	ef 2e       	mov	r14, r31
    232c:	f1 e0       	ldi	r31, 0x01	; 1
    232e:	ff 2e       	mov	r15, r31
    2330:	f0 2d       	mov	r31, r0
    2332:	00 e0       	ldi	r16, 0x00	; 0
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	45 e5       	ldi	r20, 0x55	; 85
    233a:	50 e0       	ldi	r21, 0x00	; 0
    233c:	6f e6       	ldi	r22, 0x6F	; 111
    233e:	71 e0       	ldi	r23, 0x01	; 1
    2340:	8a e3       	ldi	r24, 0x3A	; 58
    2342:	90 e1       	ldi	r25, 0x10	; 16
    2344:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskCreate>
    2348:	81 30       	cpi	r24, 0x01	; 1
    234a:	a1 f4       	brne	.+40     	; 0x2374 <vTaskStartScheduler+0x54>
    234c:	0e 94 2d 15 	call	0x2a5a	; 0x2a5a <xTimerCreateTimerTask>
    2350:	81 30       	cpi	r24, 0x01	; 1
    2352:	81 f4       	brne	.+32     	; 0x2374 <vTaskStartScheduler+0x54>
    2354:	f8 94       	cli
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	9f ef       	ldi	r25, 0xFF	; 255
    235a:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <xNextTaskUnblockTime+0x1>
    235e:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <xNextTaskUnblockTime>
    2362:	81 e0       	ldi	r24, 0x01	; 1
    2364:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <xSchedulerRunning>
    2368:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <xTickCount+0x1>
    236c:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <xTickCount>
    2370:	0e 94 05 0c 	call	0x180a	; 0x180a <xPortStartScheduler>
    2374:	0f 91       	pop	r16
    2376:	ff 90       	pop	r15
    2378:	ef 90       	pop	r14
    237a:	08 95       	ret

0000237c <vTaskSuspendAll>:
    237c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxSchedulerSuspended>
    2380:	8f 5f       	subi	r24, 0xFF	; 255
    2382:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <uxSchedulerSuspended>
    2386:	08 95       	ret

00002388 <xTaskGetTickCount>:
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	0f 92       	push	r0
    238e:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <xTickCount>
    2392:	90 91 c9 01 	lds	r25, 0x01C9	; 0x8001c9 <xTickCount+0x1>
    2396:	0f 90       	pop	r0
    2398:	0f be       	out	0x3f, r0	; 63
    239a:	08 95       	ret

0000239c <xTaskIncrementTick>:
    239c:	cf 92       	push	r12
    239e:	df 92       	push	r13
    23a0:	ef 92       	push	r14
    23a2:	ff 92       	push	r15
    23a4:	0f 93       	push	r16
    23a6:	1f 93       	push	r17
    23a8:	cf 93       	push	r28
    23aa:	df 93       	push	r29
    23ac:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxSchedulerSuspended>
    23b0:	81 11       	cpse	r24, r1
    23b2:	9f c0       	rjmp	.+318    	; 0x24f2 <xTaskIncrementTick+0x156>
    23b4:	e0 90 c8 01 	lds	r14, 0x01C8	; 0x8001c8 <xTickCount>
    23b8:	f0 90 c9 01 	lds	r15, 0x01C9	; 0x8001c9 <xTickCount+0x1>
    23bc:	8f ef       	ldi	r24, 0xFF	; 255
    23be:	e8 1a       	sub	r14, r24
    23c0:	f8 0a       	sbc	r15, r24
    23c2:	f0 92 c9 01 	sts	0x01C9, r15	; 0x8001c9 <xTickCount+0x1>
    23c6:	e0 92 c8 01 	sts	0x01C8, r14	; 0x8001c8 <xTickCount>
    23ca:	e1 14       	cp	r14, r1
    23cc:	f1 04       	cpc	r15, r1
    23ce:	b9 f4       	brne	.+46     	; 0x23fe <xTaskIncrementTick+0x62>
    23d0:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <pxDelayedTaskList>
    23d4:	90 91 ea 01 	lds	r25, 0x01EA	; 0x8001ea <pxDelayedTaskList+0x1>
    23d8:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <pxOverflowDelayedTaskList>
    23dc:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <pxOverflowDelayedTaskList+0x1>
    23e0:	30 93 ea 01 	sts	0x01EA, r19	; 0x8001ea <pxDelayedTaskList+0x1>
    23e4:	20 93 e9 01 	sts	0x01E9, r18	; 0x8001e9 <pxDelayedTaskList>
    23e8:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <pxOverflowDelayedTaskList+0x1>
    23ec:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <pxOverflowDelayedTaskList>
    23f0:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <xNumOfOverflows>
    23f4:	8f 5f       	subi	r24, 0xFF	; 255
    23f6:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <xNumOfOverflows>
    23fa:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <prvResetNextTaskUnblockTime>
    23fe:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <xNextTaskUnblockTime>
    2402:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <xNextTaskUnblockTime+0x1>
    2406:	e8 16       	cp	r14, r24
    2408:	f9 06       	cpc	r15, r25
    240a:	10 f4       	brcc	.+4      	; 0x2410 <xTaskIncrementTick+0x74>
    240c:	d1 2c       	mov	r13, r1
    240e:	53 c0       	rjmp	.+166    	; 0x24b6 <xTaskIncrementTick+0x11a>
    2410:	d1 2c       	mov	r13, r1
    2412:	cc 24       	eor	r12, r12
    2414:	c3 94       	inc	r12
    2416:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <pxDelayedTaskList>
    241a:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <pxDelayedTaskList+0x1>
    241e:	80 81       	ld	r24, Z
    2420:	81 11       	cpse	r24, r1
    2422:	07 c0       	rjmp	.+14     	; 0x2432 <xTaskIncrementTick+0x96>
    2424:	8f ef       	ldi	r24, 0xFF	; 255
    2426:	9f ef       	ldi	r25, 0xFF	; 255
    2428:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <xNextTaskUnblockTime+0x1>
    242c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <xNextTaskUnblockTime>
    2430:	42 c0       	rjmp	.+132    	; 0x24b6 <xTaskIncrementTick+0x11a>
    2432:	e0 91 e9 01 	lds	r30, 0x01E9	; 0x8001e9 <pxDelayedTaskList>
    2436:	f0 91 ea 01 	lds	r31, 0x01EA	; 0x8001ea <pxDelayedTaskList+0x1>
    243a:	05 80       	ldd	r0, Z+5	; 0x05
    243c:	f6 81       	ldd	r31, Z+6	; 0x06
    243e:	e0 2d       	mov	r30, r0
    2440:	c6 81       	ldd	r28, Z+6	; 0x06
    2442:	d7 81       	ldd	r29, Z+7	; 0x07
    2444:	8a 81       	ldd	r24, Y+2	; 0x02
    2446:	9b 81       	ldd	r25, Y+3	; 0x03
    2448:	e8 16       	cp	r14, r24
    244a:	f9 06       	cpc	r15, r25
    244c:	28 f4       	brcc	.+10     	; 0x2458 <xTaskIncrementTick+0xbc>
    244e:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <xNextTaskUnblockTime+0x1>
    2452:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <xNextTaskUnblockTime>
    2456:	2f c0       	rjmp	.+94     	; 0x24b6 <xTaskIncrementTick+0x11a>
    2458:	8e 01       	movw	r16, r28
    245a:	0e 5f       	subi	r16, 0xFE	; 254
    245c:	1f 4f       	sbci	r17, 0xFF	; 255
    245e:	c8 01       	movw	r24, r16
    2460:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    2464:	8c 89       	ldd	r24, Y+20	; 0x14
    2466:	9d 89       	ldd	r25, Y+21	; 0x15
    2468:	89 2b       	or	r24, r25
    246a:	21 f0       	breq	.+8      	; 0x2474 <xTaskIncrementTick+0xd8>
    246c:	ce 01       	movw	r24, r28
    246e:	0c 96       	adiw	r24, 0x0c	; 12
    2470:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    2474:	8e 89       	ldd	r24, Y+22	; 0x16
    2476:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <uxTopReadyPriority>
    247a:	98 17       	cp	r25, r24
    247c:	10 f4       	brcc	.+4      	; 0x2482 <xTaskIncrementTick+0xe6>
    247e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <uxTopReadyPriority>
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	9c 01       	movw	r18, r24
    2486:	22 0f       	add	r18, r18
    2488:	33 1f       	adc	r19, r19
    248a:	22 0f       	add	r18, r18
    248c:	33 1f       	adc	r19, r19
    248e:	22 0f       	add	r18, r18
    2490:	33 1f       	adc	r19, r19
    2492:	82 0f       	add	r24, r18
    2494:	93 1f       	adc	r25, r19
    2496:	b8 01       	movw	r22, r16
    2498:	83 50       	subi	r24, 0x03	; 3
    249a:	9e 4f       	sbci	r25, 0xFE	; 254
    249c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vListInsertEnd>
    24a0:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <pxCurrentTCB>
    24a4:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    24a8:	9e 89       	ldd	r25, Y+22	; 0x16
    24aa:	86 89       	ldd	r24, Z+22	; 0x16
    24ac:	98 17       	cp	r25, r24
    24ae:	08 f4       	brcc	.+2      	; 0x24b2 <xTaskIncrementTick+0x116>
    24b0:	b2 cf       	rjmp	.-156    	; 0x2416 <xTaskIncrementTick+0x7a>
    24b2:	dc 2c       	mov	r13, r12
    24b4:	b0 cf       	rjmp	.-160    	; 0x2416 <xTaskIncrementTick+0x7a>
    24b6:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <pxCurrentTCB>
    24ba:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    24be:	86 89       	ldd	r24, Z+22	; 0x16
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	fc 01       	movw	r30, r24
    24c4:	ee 0f       	add	r30, r30
    24c6:	ff 1f       	adc	r31, r31
    24c8:	ee 0f       	add	r30, r30
    24ca:	ff 1f       	adc	r31, r31
    24cc:	ee 0f       	add	r30, r30
    24ce:	ff 1f       	adc	r31, r31
    24d0:	8e 0f       	add	r24, r30
    24d2:	9f 1f       	adc	r25, r31
    24d4:	fc 01       	movw	r30, r24
    24d6:	e3 50       	subi	r30, 0x03	; 3
    24d8:	fe 4f       	sbci	r31, 0xFE	; 254
    24da:	80 81       	ld	r24, Z
    24dc:	82 30       	cpi	r24, 0x02	; 2
    24de:	10 f0       	brcs	.+4      	; 0x24e4 <xTaskIncrementTick+0x148>
    24e0:	dd 24       	eor	r13, r13
    24e2:	d3 94       	inc	r13
    24e4:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <xYieldPending>
    24e8:	88 23       	and	r24, r24
    24ea:	69 f0       	breq	.+26     	; 0x2506 <xTaskIncrementTick+0x16a>
    24ec:	dd 24       	eor	r13, r13
    24ee:	d3 94       	inc	r13
    24f0:	0a c0       	rjmp	.+20     	; 0x2506 <xTaskIncrementTick+0x16a>
    24f2:	80 91 c4 01 	lds	r24, 0x01C4	; 0x8001c4 <xPendedTicks>
    24f6:	90 91 c5 01 	lds	r25, 0x01C5	; 0x8001c5 <xPendedTicks+0x1>
    24fa:	01 96       	adiw	r24, 0x01	; 1
    24fc:	90 93 c5 01 	sts	0x01C5, r25	; 0x8001c5 <xPendedTicks+0x1>
    2500:	80 93 c4 01 	sts	0x01C4, r24	; 0x8001c4 <xPendedTicks>
    2504:	d1 2c       	mov	r13, r1
    2506:	8d 2d       	mov	r24, r13
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	08 95       	ret

0000251a <xTaskResumeAll>:
    251a:	df 92       	push	r13
    251c:	ef 92       	push	r14
    251e:	ff 92       	push	r15
    2520:	0f 93       	push	r16
    2522:	1f 93       	push	r17
    2524:	cf 93       	push	r28
    2526:	df 93       	push	r29
    2528:	0f b6       	in	r0, 0x3f	; 63
    252a:	f8 94       	cli
    252c:	0f 92       	push	r0
    252e:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxSchedulerSuspended>
    2532:	81 50       	subi	r24, 0x01	; 1
    2534:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <uxSchedulerSuspended>
    2538:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxSchedulerSuspended>
    253c:	81 11       	cpse	r24, r1
    253e:	63 c0       	rjmp	.+198    	; 0x2606 <xTaskResumeAll+0xec>
    2540:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <uxCurrentNumberOfTasks>
    2544:	81 11       	cpse	r24, r1
    2546:	33 c0       	rjmp	.+102    	; 0x25ae <xTaskResumeAll+0x94>
    2548:	61 c0       	rjmp	.+194    	; 0x260c <xTaskResumeAll+0xf2>
    254a:	d7 01       	movw	r26, r14
    254c:	15 96       	adiw	r26, 0x05	; 5
    254e:	ed 91       	ld	r30, X+
    2550:	fc 91       	ld	r31, X
    2552:	16 97       	sbiw	r26, 0x06	; 6
    2554:	c6 81       	ldd	r28, Z+6	; 0x06
    2556:	d7 81       	ldd	r29, Z+7	; 0x07
    2558:	ce 01       	movw	r24, r28
    255a:	0c 96       	adiw	r24, 0x0c	; 12
    255c:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    2560:	8e 01       	movw	r16, r28
    2562:	0e 5f       	subi	r16, 0xFE	; 254
    2564:	1f 4f       	sbci	r17, 0xFF	; 255
    2566:	c8 01       	movw	r24, r16
    2568:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    256c:	8e 89       	ldd	r24, Y+22	; 0x16
    256e:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <uxTopReadyPriority>
    2572:	98 17       	cp	r25, r24
    2574:	10 f4       	brcc	.+4      	; 0x257a <xTaskResumeAll+0x60>
    2576:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <uxTopReadyPriority>
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	9c 01       	movw	r18, r24
    257e:	22 0f       	add	r18, r18
    2580:	33 1f       	adc	r19, r19
    2582:	22 0f       	add	r18, r18
    2584:	33 1f       	adc	r19, r19
    2586:	22 0f       	add	r18, r18
    2588:	33 1f       	adc	r19, r19
    258a:	82 0f       	add	r24, r18
    258c:	93 1f       	adc	r25, r19
    258e:	b8 01       	movw	r22, r16
    2590:	83 50       	subi	r24, 0x03	; 3
    2592:	9e 4f       	sbci	r25, 0xFE	; 254
    2594:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vListInsertEnd>
    2598:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <pxCurrentTCB>
    259c:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    25a0:	9e 89       	ldd	r25, Y+22	; 0x16
    25a2:	86 89       	ldd	r24, Z+22	; 0x16
    25a4:	98 17       	cp	r25, r24
    25a6:	68 f0       	brcs	.+26     	; 0x25c2 <xTaskResumeAll+0xa8>
    25a8:	d0 92 c3 01 	sts	0x01C3, r13	; 0x8001c3 <xYieldPending>
    25ac:	0a c0       	rjmp	.+20     	; 0x25c2 <xTaskResumeAll+0xa8>
    25ae:	c0 e0       	ldi	r28, 0x00	; 0
    25b0:	d0 e0       	ldi	r29, 0x00	; 0
    25b2:	0f 2e       	mov	r0, r31
    25b4:	fe ed       	ldi	r31, 0xDE	; 222
    25b6:	ef 2e       	mov	r14, r31
    25b8:	f1 e0       	ldi	r31, 0x01	; 1
    25ba:	ff 2e       	mov	r15, r31
    25bc:	f0 2d       	mov	r31, r0
    25be:	dd 24       	eor	r13, r13
    25c0:	d3 94       	inc	r13
    25c2:	f7 01       	movw	r30, r14
    25c4:	80 81       	ld	r24, Z
    25c6:	81 11       	cpse	r24, r1
    25c8:	c0 cf       	rjmp	.-128    	; 0x254a <xTaskResumeAll+0x30>
    25ca:	cd 2b       	or	r28, r29
    25cc:	11 f0       	breq	.+4      	; 0x25d2 <xTaskResumeAll+0xb8>
    25ce:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <prvResetNextTaskUnblockTime>
    25d2:	c0 91 c4 01 	lds	r28, 0x01C4	; 0x8001c4 <xPendedTicks>
    25d6:	d0 91 c5 01 	lds	r29, 0x01C5	; 0x8001c5 <xPendedTicks+0x1>
    25da:	20 97       	sbiw	r28, 0x00	; 0
    25dc:	61 f0       	breq	.+24     	; 0x25f6 <xTaskResumeAll+0xdc>
    25de:	11 e0       	ldi	r17, 0x01	; 1
    25e0:	0e 94 ce 11 	call	0x239c	; 0x239c <xTaskIncrementTick>
    25e4:	81 11       	cpse	r24, r1
    25e6:	10 93 c3 01 	sts	0x01C3, r17	; 0x8001c3 <xYieldPending>
    25ea:	21 97       	sbiw	r28, 0x01	; 1
    25ec:	c9 f7       	brne	.-14     	; 0x25e0 <xTaskResumeAll+0xc6>
    25ee:	10 92 c5 01 	sts	0x01C5, r1	; 0x8001c5 <xPendedTicks+0x1>
    25f2:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <xPendedTicks>
    25f6:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <xYieldPending>
    25fa:	88 23       	and	r24, r24
    25fc:	31 f0       	breq	.+12     	; 0x260a <xTaskResumeAll+0xf0>
    25fe:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	03 c0       	rjmp	.+6      	; 0x260c <xTaskResumeAll+0xf2>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	01 c0       	rjmp	.+2      	; 0x260c <xTaskResumeAll+0xf2>
    260a:	80 e0       	ldi	r24, 0x00	; 0
    260c:	0f 90       	pop	r0
    260e:	0f be       	out	0x3f, r0	; 63
    2610:	df 91       	pop	r29
    2612:	cf 91       	pop	r28
    2614:	1f 91       	pop	r17
    2616:	0f 91       	pop	r16
    2618:	ff 90       	pop	r15
    261a:	ef 90       	pop	r14
    261c:	df 90       	pop	r13
    261e:	08 95       	ret

00002620 <vTaskDelayUntil>:
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	8c 01       	movw	r16, r24
    262a:	eb 01       	movw	r28, r22
    262c:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskSuspendAll>
    2630:	40 91 c8 01 	lds	r20, 0x01C8	; 0x8001c8 <xTickCount>
    2634:	50 91 c9 01 	lds	r21, 0x01C9	; 0x8001c9 <xTickCount+0x1>
    2638:	f8 01       	movw	r30, r16
    263a:	20 81       	ld	r18, Z
    263c:	31 81       	ldd	r19, Z+1	; 0x01
    263e:	c9 01       	movw	r24, r18
    2640:	8c 0f       	add	r24, r28
    2642:	9d 1f       	adc	r25, r29
    2644:	42 17       	cp	r20, r18
    2646:	53 07       	cpc	r21, r19
    2648:	48 f4       	brcc	.+18     	; 0x265c <vTaskDelayUntil+0x3c>
    264a:	82 17       	cp	r24, r18
    264c:	93 07       	cpc	r25, r19
    264e:	e8 f4       	brcc	.+58     	; 0x268a <vTaskDelayUntil+0x6a>
    2650:	91 83       	std	Z+1, r25	; 0x01
    2652:	80 83       	st	Z, r24
    2654:	48 17       	cp	r20, r24
    2656:	59 07       	cpc	r21, r25
    2658:	68 f4       	brcc	.+26     	; 0x2674 <vTaskDelayUntil+0x54>
    265a:	07 c0       	rjmp	.+14     	; 0x266a <vTaskDelayUntil+0x4a>
    265c:	82 17       	cp	r24, r18
    265e:	93 07       	cpc	r25, r19
    2660:	80 f0       	brcs	.+32     	; 0x2682 <vTaskDelayUntil+0x62>
    2662:	48 17       	cp	r20, r24
    2664:	59 07       	cpc	r21, r25
    2666:	68 f0       	brcs	.+26     	; 0x2682 <vTaskDelayUntil+0x62>
    2668:	10 c0       	rjmp	.+32     	; 0x268a <vTaskDelayUntil+0x6a>
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	84 1b       	sub	r24, r20
    266e:	95 0b       	sbc	r25, r21
    2670:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <prvAddCurrentTaskToDelayedList>
    2674:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    2678:	81 11       	cpse	r24, r1
    267a:	0b c0       	rjmp	.+22     	; 0x2692 <vTaskDelayUntil+0x72>
    267c:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    2680:	08 c0       	rjmp	.+16     	; 0x2692 <vTaskDelayUntil+0x72>
    2682:	f8 01       	movw	r30, r16
    2684:	91 83       	std	Z+1, r25	; 0x01
    2686:	80 83       	st	Z, r24
    2688:	f0 cf       	rjmp	.-32     	; 0x266a <vTaskDelayUntil+0x4a>
    268a:	f8 01       	movw	r30, r16
    268c:	91 83       	std	Z+1, r25	; 0x01
    268e:	80 83       	st	Z, r24
    2690:	f1 cf       	rjmp	.-30     	; 0x2674 <vTaskDelayUntil+0x54>
    2692:	df 91       	pop	r29
    2694:	cf 91       	pop	r28
    2696:	1f 91       	pop	r17
    2698:	0f 91       	pop	r16
    269a:	08 95       	ret

0000269c <vTaskSwitchContext>:
    269c:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxSchedulerSuspended>
    26a0:	88 23       	and	r24, r24
    26a2:	21 f0       	breq	.+8      	; 0x26ac <vTaskSwitchContext+0x10>
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <xYieldPending>
    26aa:	08 95       	ret
    26ac:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <xYieldPending>
    26b0:	a0 91 21 02 	lds	r26, 0x0221	; 0x800221 <pxCurrentTCB>
    26b4:	b0 91 22 02 	lds	r27, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    26b8:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <pxCurrentTCB>
    26bc:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    26c0:	2d 91       	ld	r18, X+
    26c2:	3c 91       	ld	r19, X
    26c4:	87 89       	ldd	r24, Z+23	; 0x17
    26c6:	90 8d       	ldd	r25, Z+24	; 0x18
    26c8:	82 17       	cp	r24, r18
    26ca:	93 07       	cpc	r25, r19
    26cc:	60 f0       	brcs	.+24     	; 0x26e6 <vTaskSwitchContext+0x4a>
    26ce:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <pxCurrentTCB>
    26d2:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    26d6:	80 91 21 02 	lds	r24, 0x0221	; 0x800221 <pxCurrentTCB>
    26da:	90 91 22 02 	lds	r25, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    26de:	67 5e       	subi	r22, 0xE7	; 231
    26e0:	7f 4f       	sbci	r23, 0xFF	; 255
    26e2:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <vApplicationStackOverflowHook>
    26e6:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <uxTopReadyPriority>
    26ea:	82 2f       	mov	r24, r18
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	fc 01       	movw	r30, r24
    26f0:	ee 0f       	add	r30, r30
    26f2:	ff 1f       	adc	r31, r31
    26f4:	ee 0f       	add	r30, r30
    26f6:	ff 1f       	adc	r31, r31
    26f8:	ee 0f       	add	r30, r30
    26fa:	ff 1f       	adc	r31, r31
    26fc:	e8 0f       	add	r30, r24
    26fe:	f9 1f       	adc	r31, r25
    2700:	e3 50       	subi	r30, 0x03	; 3
    2702:	fe 4f       	sbci	r31, 0xFE	; 254
    2704:	30 81       	ld	r19, Z
    2706:	31 11       	cpse	r19, r1
    2708:	11 c0       	rjmp	.+34     	; 0x272c <vTaskSwitchContext+0x90>
    270a:	21 50       	subi	r18, 0x01	; 1
    270c:	82 2f       	mov	r24, r18
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	fc 01       	movw	r30, r24
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	ee 0f       	add	r30, r30
    2718:	ff 1f       	adc	r31, r31
    271a:	ee 0f       	add	r30, r30
    271c:	ff 1f       	adc	r31, r31
    271e:	e8 0f       	add	r30, r24
    2720:	f9 1f       	adc	r31, r25
    2722:	e3 50       	subi	r30, 0x03	; 3
    2724:	fe 4f       	sbci	r31, 0xFE	; 254
    2726:	30 81       	ld	r19, Z
    2728:	33 23       	and	r19, r19
    272a:	79 f3       	breq	.-34     	; 0x270a <vTaskSwitchContext+0x6e>
    272c:	ac 01       	movw	r20, r24
    272e:	44 0f       	add	r20, r20
    2730:	55 1f       	adc	r21, r21
    2732:	44 0f       	add	r20, r20
    2734:	55 1f       	adc	r21, r21
    2736:	44 0f       	add	r20, r20
    2738:	55 1f       	adc	r21, r21
    273a:	48 0f       	add	r20, r24
    273c:	59 1f       	adc	r21, r25
    273e:	da 01       	movw	r26, r20
    2740:	a3 50       	subi	r26, 0x03	; 3
    2742:	be 4f       	sbci	r27, 0xFE	; 254
    2744:	11 96       	adiw	r26, 0x01	; 1
    2746:	ed 91       	ld	r30, X+
    2748:	fc 91       	ld	r31, X
    274a:	12 97       	sbiw	r26, 0x02	; 2
    274c:	02 80       	ldd	r0, Z+2	; 0x02
    274e:	f3 81       	ldd	r31, Z+3	; 0x03
    2750:	e0 2d       	mov	r30, r0
    2752:	12 96       	adiw	r26, 0x02	; 2
    2754:	fc 93       	st	X, r31
    2756:	ee 93       	st	-X, r30
    2758:	11 97       	sbiw	r26, 0x01	; 1
    275a:	40 50       	subi	r20, 0x00	; 0
    275c:	5e 4f       	sbci	r21, 0xFE	; 254
    275e:	e4 17       	cp	r30, r20
    2760:	f5 07       	cpc	r31, r21
    2762:	29 f4       	brne	.+10     	; 0x276e <vTaskSwitchContext+0xd2>
    2764:	42 81       	ldd	r20, Z+2	; 0x02
    2766:	53 81       	ldd	r21, Z+3	; 0x03
    2768:	fd 01       	movw	r30, r26
    276a:	52 83       	std	Z+2, r21	; 0x02
    276c:	41 83       	std	Z+1, r20	; 0x01
    276e:	fc 01       	movw	r30, r24
    2770:	ee 0f       	add	r30, r30
    2772:	ff 1f       	adc	r31, r31
    2774:	ee 0f       	add	r30, r30
    2776:	ff 1f       	adc	r31, r31
    2778:	ee 0f       	add	r30, r30
    277a:	ff 1f       	adc	r31, r31
    277c:	8e 0f       	add	r24, r30
    277e:	9f 1f       	adc	r25, r31
    2780:	fc 01       	movw	r30, r24
    2782:	e3 50       	subi	r30, 0x03	; 3
    2784:	fe 4f       	sbci	r31, 0xFE	; 254
    2786:	01 80       	ldd	r0, Z+1	; 0x01
    2788:	f2 81       	ldd	r31, Z+2	; 0x02
    278a:	e0 2d       	mov	r30, r0
    278c:	86 81       	ldd	r24, Z+6	; 0x06
    278e:	97 81       	ldd	r25, Z+7	; 0x07
    2790:	90 93 22 02 	sts	0x0222, r25	; 0x800222 <pxCurrentTCB+0x1>
    2794:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <pxCurrentTCB>
    2798:	20 93 c7 01 	sts	0x01C7, r18	; 0x8001c7 <uxTopReadyPriority>
    279c:	08 95       	ret

0000279e <vTaskPlaceOnEventList>:
    279e:	cf 93       	push	r28
    27a0:	df 93       	push	r29
    27a2:	eb 01       	movw	r28, r22
    27a4:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <pxCurrentTCB>
    27a8:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    27ac:	64 5f       	subi	r22, 0xF4	; 244
    27ae:	7f 4f       	sbci	r23, 0xFF	; 255
    27b0:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsert>
    27b4:	61 e0       	ldi	r22, 0x01	; 1
    27b6:	ce 01       	movw	r24, r28
    27b8:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <prvAddCurrentTaskToDelayedList>
    27bc:	df 91       	pop	r29
    27be:	cf 91       	pop	r28
    27c0:	08 95       	ret

000027c2 <vTaskPlaceOnEventListRestricted>:
    27c2:	0f 93       	push	r16
    27c4:	1f 93       	push	r17
    27c6:	cf 93       	push	r28
    27c8:	8b 01       	movw	r16, r22
    27ca:	c4 2f       	mov	r28, r20
    27cc:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <pxCurrentTCB>
    27d0:	70 91 22 02 	lds	r23, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    27d4:	64 5f       	subi	r22, 0xF4	; 244
    27d6:	7f 4f       	sbci	r23, 0xFF	; 255
    27d8:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vListInsertEnd>
    27dc:	cc 23       	and	r28, r28
    27de:	11 f0       	breq	.+4      	; 0x27e4 <vTaskPlaceOnEventListRestricted+0x22>
    27e0:	0f ef       	ldi	r16, 0xFF	; 255
    27e2:	1f ef       	ldi	r17, 0xFF	; 255
    27e4:	6c 2f       	mov	r22, r28
    27e6:	c8 01       	movw	r24, r16
    27e8:	0e 94 e2 0f 	call	0x1fc4	; 0x1fc4 <prvAddCurrentTaskToDelayedList>
    27ec:	cf 91       	pop	r28
    27ee:	1f 91       	pop	r17
    27f0:	0f 91       	pop	r16
    27f2:	08 95       	ret

000027f4 <xTaskRemoveFromEventList>:
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	dc 01       	movw	r26, r24
    27fe:	15 96       	adiw	r26, 0x05	; 5
    2800:	ed 91       	ld	r30, X+
    2802:	fc 91       	ld	r31, X
    2804:	16 97       	sbiw	r26, 0x06	; 6
    2806:	c6 81       	ldd	r28, Z+6	; 0x06
    2808:	d7 81       	ldd	r29, Z+7	; 0x07
    280a:	8e 01       	movw	r16, r28
    280c:	04 5f       	subi	r16, 0xF4	; 244
    280e:	1f 4f       	sbci	r17, 0xFF	; 255
    2810:	c8 01       	movw	r24, r16
    2812:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    2816:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxSchedulerSuspended>
    281a:	81 11       	cpse	r24, r1
    281c:	1c c0       	rjmp	.+56     	; 0x2856 <xTaskRemoveFromEventList+0x62>
    281e:	0a 50       	subi	r16, 0x0A	; 10
    2820:	11 09       	sbc	r17, r1
    2822:	c8 01       	movw	r24, r16
    2824:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    2828:	8e 89       	ldd	r24, Y+22	; 0x16
    282a:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <uxTopReadyPriority>
    282e:	98 17       	cp	r25, r24
    2830:	10 f4       	brcc	.+4      	; 0x2836 <xTaskRemoveFromEventList+0x42>
    2832:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <uxTopReadyPriority>
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9c 01       	movw	r18, r24
    283a:	22 0f       	add	r18, r18
    283c:	33 1f       	adc	r19, r19
    283e:	22 0f       	add	r18, r18
    2840:	33 1f       	adc	r19, r19
    2842:	22 0f       	add	r18, r18
    2844:	33 1f       	adc	r19, r19
    2846:	82 0f       	add	r24, r18
    2848:	93 1f       	adc	r25, r19
    284a:	b8 01       	movw	r22, r16
    284c:	83 50       	subi	r24, 0x03	; 3
    284e:	9e 4f       	sbci	r25, 0xFE	; 254
    2850:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vListInsertEnd>
    2854:	05 c0       	rjmp	.+10     	; 0x2860 <xTaskRemoveFromEventList+0x6c>
    2856:	b8 01       	movw	r22, r16
    2858:	8e ed       	ldi	r24, 0xDE	; 222
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vListInsertEnd>
    2860:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <pxCurrentTCB>
    2864:	f0 91 22 02 	lds	r31, 0x0222	; 0x800222 <pxCurrentTCB+0x1>
    2868:	9e 89       	ldd	r25, Y+22	; 0x16
    286a:	86 89       	ldd	r24, Z+22	; 0x16
    286c:	89 17       	cp	r24, r25
    286e:	20 f4       	brcc	.+8      	; 0x2878 <xTaskRemoveFromEventList+0x84>
    2870:	81 e0       	ldi	r24, 0x01	; 1
    2872:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <xYieldPending>
    2876:	01 c0       	rjmp	.+2      	; 0x287a <xTaskRemoveFromEventList+0x86>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	df 91       	pop	r29
    287c:	cf 91       	pop	r28
    287e:	1f 91       	pop	r17
    2880:	0f 91       	pop	r16
    2882:	08 95       	ret

00002884 <vTaskInternalSetTimeOutState>:
    2884:	20 91 c2 01 	lds	r18, 0x01C2	; 0x8001c2 <xNumOfOverflows>
    2888:	fc 01       	movw	r30, r24
    288a:	20 83       	st	Z, r18
    288c:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <xTickCount>
    2890:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <xTickCount+0x1>
    2894:	32 83       	std	Z+2, r19	; 0x02
    2896:	21 83       	std	Z+1, r18	; 0x01
    2898:	08 95       	ret

0000289a <xTaskCheckForTimeOut>:
    289a:	cf 93       	push	r28
    289c:	df 93       	push	r29
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	0f 92       	push	r0
    28a4:	20 91 c8 01 	lds	r18, 0x01C8	; 0x8001c8 <xTickCount>
    28a8:	30 91 c9 01 	lds	r19, 0x01C9	; 0x8001c9 <xTickCount+0x1>
    28ac:	db 01       	movw	r26, r22
    28ae:	4d 91       	ld	r20, X+
    28b0:	5c 91       	ld	r21, X
    28b2:	4f 3f       	cpi	r20, 0xFF	; 255
    28b4:	bf ef       	ldi	r27, 0xFF	; 255
    28b6:	5b 07       	cpc	r21, r27
    28b8:	f1 f0       	breq	.+60     	; 0x28f6 <xTaskCheckForTimeOut+0x5c>
    28ba:	ec 01       	movw	r28, r24
    28bc:	e9 81       	ldd	r30, Y+1	; 0x01
    28be:	fa 81       	ldd	r31, Y+2	; 0x02
    28c0:	a0 91 c2 01 	lds	r26, 0x01C2	; 0x8001c2 <xNumOfOverflows>
    28c4:	b8 81       	ld	r27, Y
    28c6:	ba 17       	cp	r27, r26
    28c8:	19 f0       	breq	.+6      	; 0x28d0 <xTaskCheckForTimeOut+0x36>
    28ca:	2e 17       	cp	r18, r30
    28cc:	3f 07       	cpc	r19, r31
    28ce:	a8 f4       	brcc	.+42     	; 0x28fa <xTaskCheckForTimeOut+0x60>
    28d0:	2e 1b       	sub	r18, r30
    28d2:	3f 0b       	sbc	r19, r31
    28d4:	24 17       	cp	r18, r20
    28d6:	35 07       	cpc	r19, r21
    28d8:	48 f4       	brcc	.+18     	; 0x28ec <xTaskCheckForTimeOut+0x52>
    28da:	fb 01       	movw	r30, r22
    28dc:	42 1b       	sub	r20, r18
    28de:	53 0b       	sbc	r21, r19
    28e0:	51 83       	std	Z+1, r21	; 0x01
    28e2:	40 83       	st	Z, r20
    28e4:	0e 94 42 14 	call	0x2884	; 0x2884 <vTaskInternalSetTimeOutState>
    28e8:	80 e0       	ldi	r24, 0x00	; 0
    28ea:	08 c0       	rjmp	.+16     	; 0x28fc <xTaskCheckForTimeOut+0x62>
    28ec:	fb 01       	movw	r30, r22
    28ee:	11 82       	std	Z+1, r1	; 0x01
    28f0:	10 82       	st	Z, r1
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    28f4:	03 c0       	rjmp	.+6      	; 0x28fc <xTaskCheckForTimeOut+0x62>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	01 c0       	rjmp	.+2      	; 0x28fc <xTaskCheckForTimeOut+0x62>
    28fa:	81 e0       	ldi	r24, 0x01	; 1
    28fc:	0f 90       	pop	r0
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	df 91       	pop	r29
    2902:	cf 91       	pop	r28
    2904:	08 95       	ret

00002906 <vTaskMissedYield>:
    2906:	81 e0       	ldi	r24, 0x01	; 1
    2908:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <xYieldPending>
    290c:	08 95       	ret

0000290e <xTaskGetSchedulerState>:
    290e:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <xSchedulerRunning>
    2912:	88 23       	and	r24, r24
    2914:	31 f0       	breq	.+12     	; 0x2922 <xTaskGetSchedulerState+0x14>
    2916:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <uxSchedulerSuspended>
    291a:	88 23       	and	r24, r24
    291c:	21 f0       	breq	.+8      	; 0x2926 <xTaskGetSchedulerState+0x18>
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	08 95       	ret
    2922:	81 e0       	ldi	r24, 0x01	; 1
    2924:	08 95       	ret
    2926:	82 e0       	ldi	r24, 0x02	; 2
    2928:	08 95       	ret

0000292a <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	cf 93       	push	r28
    2930:	df 93       	push	r29
    2932:	fc 01       	movw	r30, r24
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;

        if( pxMutexHolder != NULL )
    2934:	89 2b       	or	r24, r25
    2936:	79 f1       	breq	.+94     	; 0x2996 <xTaskPriorityDisinherit+0x6c>
            If the mutex is held by a task then it cannot be given from an
            interrupt, and if a mutex is given by the holding task then it must
            be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
            configASSERT( pxTCB->uxMutexesHeld );
            ( pxTCB->uxMutexesHeld )--;
    2938:	82 a1       	ldd	r24, Z+34	; 0x22
    293a:	81 50       	subi	r24, 0x01	; 1
    293c:	82 a3       	std	Z+34, r24	; 0x22

            /* Has the holder of the mutex inherited the priority of another
            task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
    293e:	26 89       	ldd	r18, Z+22	; 0x16
    2940:	91 a1       	ldd	r25, Z+33	; 0x21
    2942:	29 17       	cp	r18, r25
    2944:	51 f1       	breq	.+84     	; 0x299a <xTaskPriorityDisinherit+0x70>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
    2946:	81 11       	cpse	r24, r1
    2948:	2a c0       	rjmp	.+84     	; 0x299e <xTaskPriorityDisinherit+0x74>
    294a:	ef 01       	movw	r28, r30
                    /* A task can only have an inherited priority if it holds
                    the mutex.  If the mutex is held by a task then it cannot be
                    given from an interrupt, and if a mutex is given by the
                    holding task then it must be the running state task.  Remove
                    the holding task from the ready/delayed list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    294c:	8f 01       	movw	r16, r30
    294e:	0e 5f       	subi	r16, 0xFE	; 254
    2950:	1f 4f       	sbci	r17, 0xFF	; 255
    2952:	c8 01       	movw	r24, r16
    2954:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
                    }

                    /* Disinherit the priority before adding the task into the
                    new    ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
    2958:	89 a1       	ldd	r24, Y+33	; 0x21
    295a:	8e 8b       	std	Y+22, r24	; 0x16

                    /* Reset the event list item value.  It cannot be in use for
                    any other purpose if this task is running, and it must be
                    running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only Yellowundant for some ports. */
    295c:	24 e0       	ldi	r18, 0x04	; 4
    295e:	30 e0       	ldi	r19, 0x00	; 0
    2960:	28 1b       	sub	r18, r24
    2962:	31 09       	sbc	r19, r1
    2964:	3d 87       	std	Y+13, r19	; 0x0d
    2966:	2c 87       	std	Y+12, r18	; 0x0c
                    prvAddTaskToReadyList( pxTCB );
    2968:	90 91 c7 01 	lds	r25, 0x01C7	; 0x8001c7 <uxTopReadyPriority>
    296c:	98 17       	cp	r25, r24
    296e:	10 f4       	brcc	.+4      	; 0x2974 <xTaskPriorityDisinherit+0x4a>
    2970:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <uxTopReadyPriority>
    2974:	90 e0       	ldi	r25, 0x00	; 0
    2976:	9c 01       	movw	r18, r24
    2978:	22 0f       	add	r18, r18
    297a:	33 1f       	adc	r19, r19
    297c:	22 0f       	add	r18, r18
    297e:	33 1f       	adc	r19, r19
    2980:	22 0f       	add	r18, r18
    2982:	33 1f       	adc	r19, r19
    2984:	82 0f       	add	r24, r18
    2986:	93 1f       	adc	r25, r19
    2988:	b8 01       	movw	r22, r16
    298a:	83 50       	subi	r24, 0x03	; 3
    298c:	9e 4f       	sbci	r25, 0xFE	; 254
    298e:	0e 94 7b 0b 	call	0x16f6	; 0x16f6 <vListInsertEnd>
                    in an order different to that in which they were taken.
                    If a context switch did not occur when the first mutex was
                    returned, even if a task was waiting on it, then a context
                    switch should occur when the last mutex is returned whether
                    a task is waiting on it or not. */
                    xReturn = pdTRUE;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	05 c0       	rjmp	.+10     	; 0x29a0 <xTaskPriorityDisinherit+0x76>
#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
    TCB_t * const pxTCB = pxMutexHolder;
    BaseType_t xReturn = pdFALSE;
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	03 c0       	rjmp	.+6      	; 0x29a0 <xTaskPriorityDisinherit+0x76>
    299a:	80 e0       	ldi	r24, 0x00	; 0
    299c:	01 c0       	rjmp	.+2      	; 0x29a0 <xTaskPriorityDisinherit+0x76>
    299e:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    29a0:	df 91       	pop	r29
    29a2:	cf 91       	pop	r28
    29a4:	1f 91       	pop	r17
    29a6:	0f 91       	pop	r16
    29a8:	08 95       	ret

000029aa <prvInsertTimerInActiveList>:
            pxNewTimer->ucStatus = 0x00;
            prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
        }

        return pxNewTimer;
    }
    29aa:	fc 01       	movw	r30, r24
    29ac:	73 83       	std	Z+3, r23	; 0x03
    29ae:	62 83       	std	Z+2, r22	; 0x02
    29b0:	91 87       	std	Z+9, r25	; 0x09
    29b2:	80 87       	std	Z+8, r24	; 0x08
    29b4:	46 17       	cp	r20, r22
    29b6:	57 07       	cpc	r21, r23
    29b8:	90 f0       	brcs	.+36     	; 0x29de <prvInsertTimerInActiveList+0x34>
    29ba:	42 1b       	sub	r20, r18
    29bc:	53 0b       	sbc	r21, r19
    29be:	84 85       	ldd	r24, Z+12	; 0x0c
    29c0:	95 85       	ldd	r25, Z+13	; 0x0d
    29c2:	48 17       	cp	r20, r24
    29c4:	59 07       	cpc	r21, r25
    29c6:	e0 f4       	brcc	.+56     	; 0x2a00 <prvInsertTimerInActiveList+0x56>
    29c8:	bf 01       	movw	r22, r30
    29ca:	6e 5f       	subi	r22, 0xFE	; 254
    29cc:	7f 4f       	sbci	r23, 0xFF	; 255
    29ce:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <pxOverflowTimerList>
    29d2:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <pxOverflowTimerList+0x1>
    29d6:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsert>
    29da:	80 e0       	ldi	r24, 0x00	; 0
    29dc:	08 95       	ret
    29de:	42 17       	cp	r20, r18
    29e0:	53 07       	cpc	r21, r19
    29e2:	18 f4       	brcc	.+6      	; 0x29ea <prvInsertTimerInActiveList+0x40>
    29e4:	62 17       	cp	r22, r18
    29e6:	73 07       	cpc	r23, r19
    29e8:	68 f4       	brcc	.+26     	; 0x2a04 <prvInsertTimerInActiveList+0x5a>
    29ea:	bf 01       	movw	r22, r30
    29ec:	6e 5f       	subi	r22, 0xFE	; 254
    29ee:	7f 4f       	sbci	r23, 0xFF	; 255
    29f0:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <pxCurrentTimerList>
    29f4:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <pxCurrentTimerList+0x1>
    29f8:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsert>
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	08 95       	ret
    2a00:	81 e0       	ldi	r24, 0x01	; 1
    2a02:	08 95       	ret
    2a04:	81 e0       	ldi	r24, 0x01	; 1
    2a06:	08 95       	ret

00002a08 <prvCheckForValidListAndQueue>:
    2a08:	0f b6       	in	r0, 0x3f	; 63
    2a0a:	f8 94       	cli
    2a0c:	0f 92       	push	r0
    2a0e:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <xTimerQueue>
    2a12:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <xTimerQueue+0x1>
    2a16:	89 2b       	or	r24, r25
    2a18:	e9 f4       	brne	.+58     	; 0x2a54 <prvCheckForValidListAndQueue+0x4c>
    2a1a:	86 e3       	ldi	r24, 0x36	; 54
    2a1c:	92 e0       	ldi	r25, 0x02	; 2
    2a1e:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    2a22:	8d e2       	ldi	r24, 0x2D	; 45
    2a24:	92 e0       	ldi	r25, 0x02	; 2
    2a26:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <vListInitialise>
    2a2a:	86 e3       	ldi	r24, 0x36	; 54
    2a2c:	92 e0       	ldi	r25, 0x02	; 2
    2a2e:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <pxCurrentTimerList+0x1>
    2a32:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <pxCurrentTimerList>
    2a36:	8d e2       	ldi	r24, 0x2D	; 45
    2a38:	92 e0       	ldi	r25, 0x02	; 2
    2a3a:	90 93 2a 02 	sts	0x022A, r25	; 0x80022a <pxOverflowTimerList+0x1>
    2a3e:	80 93 29 02 	sts	0x0229, r24	; 0x800229 <pxOverflowTimerList>
    2a42:	40 e0       	ldi	r20, 0x00	; 0
    2a44:	65 e0       	ldi	r22, 0x05	; 5
    2a46:	8a e0       	ldi	r24, 0x0A	; 10
    2a48:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <xQueueGenericCreate>
    2a4c:	90 93 28 02 	sts	0x0228, r25	; 0x800228 <xTimerQueue+0x1>
    2a50:	80 93 27 02 	sts	0x0227, r24	; 0x800227 <xTimerQueue>
    2a54:	0f 90       	pop	r0
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	08 95       	ret

00002a5a <xTimerCreateTimerTask>:
    2a5a:	ef 92       	push	r14
    2a5c:	ff 92       	push	r15
    2a5e:	0f 93       	push	r16
    2a60:	0e 94 04 15 	call	0x2a08	; 0x2a08 <prvCheckForValidListAndQueue>
    2a64:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <xTimerQueue>
    2a68:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <xTimerQueue+0x1>
    2a6c:	89 2b       	or	r24, r25
    2a6e:	91 f0       	breq	.+36     	; 0x2a94 <xTimerCreateTimerTask+0x3a>
    2a70:	0f 2e       	mov	r0, r31
    2a72:	f5 e2       	ldi	r31, 0x25	; 37
    2a74:	ef 2e       	mov	r14, r31
    2a76:	f2 e0       	ldi	r31, 0x02	; 2
    2a78:	ff 2e       	mov	r15, r31
    2a7a:	f0 2d       	mov	r31, r0
    2a7c:	03 e0       	ldi	r16, 0x03	; 3
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	45 e5       	ldi	r20, 0x55	; 85
    2a84:	50 e0       	ldi	r21, 0x00	; 0
    2a86:	64 e7       	ldi	r22, 0x74	; 116
    2a88:	71 e0       	ldi	r23, 0x01	; 1
    2a8a:	87 e0       	ldi	r24, 0x07	; 7
    2a8c:	96 e1       	ldi	r25, 0x16	; 22
    2a8e:	0e 94 74 10 	call	0x20e8	; 0x20e8 <xTaskCreate>
    2a92:	01 c0       	rjmp	.+2      	; 0x2a96 <xTimerCreateTimerTask+0x3c>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	0f 91       	pop	r16
    2a98:	ff 90       	pop	r15
    2a9a:	ef 90       	pop	r14
    2a9c:	08 95       	ret

00002a9e <xTimerGenericCommand>:
    }
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	00 d0       	rcall	.+0      	; 0x2aa8 <xTimerGenericCommand+0xa>
    2aa8:	00 d0       	rcall	.+0      	; 0x2aaa <xTimerGenericCommand+0xc>
    2aaa:	1f 92       	push	r1
    2aac:	cd b7       	in	r28, 0x3d	; 61
    2aae:	de b7       	in	r29, 0x3e	; 62

    configASSERT( xTimer );

    /* Send a message to the timer service task to perform a particular action
    on a particular timer definition. */
    if( xTimerQueue != NULL )
    2ab0:	e0 91 27 02 	lds	r30, 0x0227	; 0x800227 <xTimerQueue>
    2ab4:	f0 91 28 02 	lds	r31, 0x0228	; 0x800228 <xTimerQueue+0x1>
    2ab8:	30 97       	sbiw	r30, 0x00	; 0
    2aba:	71 f1       	breq	.+92     	; 0x2b18 <xTimerGenericCommand+0x7a>
    2abc:	d9 01       	movw	r26, r18
    {
        /* Send a command to the timer service task to start the xTimer timer. */
        xMessage.xMessageID = xCommandID;
    2abe:	69 83       	std	Y+1, r22	; 0x01
        xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2ac0:	5b 83       	std	Y+3, r21	; 0x03
    2ac2:	4a 83       	std	Y+2, r20	; 0x02
        xMessage.u.xTimerParameters.pxTimer = xTimer;
    2ac4:	9d 83       	std	Y+5, r25	; 0x05
    2ac6:	8c 83       	std	Y+4, r24	; 0x04

        if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2ac8:	66 30       	cpi	r22, 0x06	; 6
    2aca:	ec f4       	brge	.+58     	; 0x2b06 <xTimerGenericCommand+0x68>
        {
            if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2acc:	0e 94 87 14 	call	0x290e	; 0x290e <xTaskGetSchedulerState>
    2ad0:	82 30       	cpi	r24, 0x02	; 2
    2ad2:	61 f4       	brne	.+24     	; 0x2aec <xTimerGenericCommand+0x4e>
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	a8 01       	movw	r20, r16
    2ad8:	be 01       	movw	r22, r28
    2ada:	6f 5f       	subi	r22, 0xFF	; 255
    2adc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ade:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <xTimerQueue>
    2ae2:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <xTimerQueue+0x1>
    2ae6:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <xQueueGenericSend>
    2aea:	17 c0       	rjmp	.+46     	; 0x2b1a <xTimerGenericCommand+0x7c>
            }
            else
            {
                xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	40 e0       	ldi	r20, 0x00	; 0
    2af0:	50 e0       	ldi	r21, 0x00	; 0
    2af2:	be 01       	movw	r22, r28
    2af4:	6f 5f       	subi	r22, 0xFF	; 255
    2af6:	7f 4f       	sbci	r23, 0xFF	; 255
    2af8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <xTimerQueue>
    2afc:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <xTimerQueue+0x1>
    2b00:	0e 94 30 0e 	call	0x1c60	; 0x1c60 <xQueueGenericSend>
    2b04:	0a c0       	rjmp	.+20     	; 0x2b1a <xTimerGenericCommand+0x7c>
            }
        }
        else
        {
            xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	ad 01       	movw	r20, r26
    2b0a:	be 01       	movw	r22, r28
    2b0c:	6f 5f       	subi	r22, 0xFF	; 255
    2b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b10:	cf 01       	movw	r24, r30
    2b12:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <xQueueGenericSendFromISR>
    2b16:	01 c0       	rjmp	.+2      	; 0x2b1a <xTimerGenericCommand+0x7c>
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
BaseType_t xReturn = pdFAIL;
    2b18:	80 e0       	ldi	r24, 0x00	; 0
    {
        mtCOVERAGE_TEST_MARKER();
    }

    return xReturn;
}
    2b1a:	0f 90       	pop	r0
    2b1c:	0f 90       	pop	r0
    2b1e:	0f 90       	pop	r0
    2b20:	0f 90       	pop	r0
    2b22:	0f 90       	pop	r0
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	0f 91       	pop	r16
    2b2c:	08 95       	ret

00002b2e <prvSampleTimeNow>:
    return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
    2b2e:	af 92       	push	r10
    2b30:	bf 92       	push	r11
    2b32:	cf 92       	push	r12
    2b34:	df 92       	push	r13
    2b36:	ef 92       	push	r14
    2b38:	ff 92       	push	r15
    2b3a:	0f 93       	push	r16
    2b3c:	1f 93       	push	r17
    2b3e:	cf 93       	push	r28
    2b40:	df 93       	push	r29
    2b42:	6c 01       	movw	r12, r24
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

    xTimeNow = xTaskGetTickCount();
    2b44:	0e 94 c4 11 	call	0x2388	; 0x2388 <xTaskGetTickCount>
    2b48:	7c 01       	movw	r14, r24

    if( xTimeNow < xLastTime )
    2b4a:	80 91 23 02 	lds	r24, 0x0223	; 0x800223 <xLastTime.2416>
    2b4e:	90 91 24 02 	lds	r25, 0x0224	; 0x800224 <xLastTime.2416+0x1>
    2b52:	e8 16       	cp	r14, r24
    2b54:	f9 06       	cpc	r15, r25
    2b56:	08 f0       	brcs	.+2      	; 0x2b5a <prvSampleTimeNow+0x2c>
    2b58:	48 c0       	rjmp	.+144    	; 0x2bea <prvSampleTimeNow+0xbc>
    2b5a:	30 c0       	rjmp	.+96     	; 0x2bbc <prvSampleTimeNow+0x8e>
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2b5c:	05 80       	ldd	r0, Z+5	; 0x05
    2b5e:	f6 81       	ldd	r31, Z+6	; 0x06
    2b60:	e0 2d       	mov	r30, r0
    2b62:	a0 80       	ld	r10, Z
    2b64:	b1 80       	ldd	r11, Z+1	; 0x01

        /* Remove the timer from the list. */
        pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2b66:	c6 81       	ldd	r28, Z+6	; 0x06
    2b68:	d7 81       	ldd	r29, Z+7	; 0x07
        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2b6a:	8e 01       	movw	r16, r28
    2b6c:	0e 5f       	subi	r16, 0xFE	; 254
    2b6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2b70:	c8 01       	movw	r24, r16
    2b72:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
        traceTIMER_EXPIYellow( pxTimer );

        /* Execute its callback, then send a command to restart the timer if
        it is an auto-reload timer.  It cannot be restarted here as the lists
        have not yet been switched. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2b76:	e8 89       	ldd	r30, Y+16	; 0x10
    2b78:	f9 89       	ldd	r31, Y+17	; 0x11
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	09 95       	icall

        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2b7e:	8a 89       	ldd	r24, Y+18	; 0x12
    2b80:	82 ff       	sbrs	r24, 2
    2b82:	1c c0       	rjmp	.+56     	; 0x2bbc <prvSampleTimeNow+0x8e>
            the timer going into the same timer list then it has already expiYellow
            and the timer should be re-inserted into the current list so it is
            processed again within this loop.  Otherwise a command should be sent
            to restart the timer to ensure it is only inserted into a list after
            the lists have been swapped. */
            xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2b84:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b86:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b88:	8a 0d       	add	r24, r10
    2b8a:	9b 1d       	adc	r25, r11
            if( xReloadTime > xNextExpireTime )
    2b8c:	a8 16       	cp	r10, r24
    2b8e:	b9 06       	cpc	r11, r25
    2b90:	60 f4       	brcc	.+24     	; 0x2baa <prvSampleTimeNow+0x7c>
            {
                listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2b92:	9b 83       	std	Y+3, r25	; 0x03
    2b94:	8a 83       	std	Y+2, r24	; 0x02
                listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2b96:	d9 87       	std	Y+9, r29	; 0x09
    2b98:	c8 87       	std	Y+8, r28	; 0x08
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2b9a:	b8 01       	movw	r22, r16
    2b9c:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <pxCurrentTimerList>
    2ba0:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <pxCurrentTimerList+0x1>
    2ba4:	0e 94 9c 0b 	call	0x1738	; 0x1738 <vListInsert>
    2ba8:	09 c0       	rjmp	.+18     	; 0x2bbc <prvSampleTimeNow+0x8e>
            }
            else
            {
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2baa:	00 e0       	ldi	r16, 0x00	; 0
    2bac:	10 e0       	ldi	r17, 0x00	; 0
    2bae:	20 e0       	ldi	r18, 0x00	; 0
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	a5 01       	movw	r20, r10
    2bb4:	60 e0       	ldi	r22, 0x00	; 0
    2bb6:	ce 01       	movw	r24, r28
    2bb8:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTimerGenericCommand>

    /* The tick count has overflowed.  The timer lists must be switched.
    If there are any timers still referenced from the current timer list
    then they must have expiYellow and should be processed before the lists
    are switched. */
    while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2bbc:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <pxCurrentTimerList>
    2bc0:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <pxCurrentTimerList+0x1>
    2bc4:	80 81       	ld	r24, Z
    2bc6:	81 11       	cpse	r24, r1
    2bc8:	c9 cf       	rjmp	.-110    	; 0x2b5c <prvSampleTimeNow+0x2e>
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxTemp = pxCurrentTimerList;
    pxCurrentTimerList = pxOverflowTimerList;
    2bca:	80 91 29 02 	lds	r24, 0x0229	; 0x800229 <pxOverflowTimerList>
    2bce:	90 91 2a 02 	lds	r25, 0x022A	; 0x80022a <pxOverflowTimerList+0x1>
    2bd2:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <pxCurrentTimerList+0x1>
    2bd6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <pxCurrentTimerList>
    pxOverflowTimerList = pxTemp;
    2bda:	f0 93 2a 02 	sts	0x022A, r31	; 0x80022a <pxOverflowTimerList+0x1>
    2bde:	e0 93 29 02 	sts	0x0229, r30	; 0x800229 <pxOverflowTimerList>
    xTimeNow = xTaskGetTickCount();

    if( xTimeNow < xLastTime )
    {
        prvSwitchTimerLists();
        *pxTimerListsWereSwitched = pdTRUE;
    2be2:	81 e0       	ldi	r24, 0x01	; 1
    2be4:	f6 01       	movw	r30, r12
    2be6:	80 83       	st	Z, r24
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <prvSampleTimeNow+0xc0>
    }
    else
    {
        *pxTimerListsWereSwitched = pdFALSE;
    2bea:	f6 01       	movw	r30, r12
    2bec:	10 82       	st	Z, r1
    }

    xLastTime = xTimeNow;
    2bee:	f0 92 24 02 	sts	0x0224, r15	; 0x800224 <xLastTime.2416+0x1>
    2bf2:	e0 92 23 02 	sts	0x0223, r14	; 0x800223 <xLastTime.2416>

    return xTimeNow;
}
    2bf6:	c7 01       	movw	r24, r14
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
    2c08:	bf 90       	pop	r11
    2c0a:	af 90       	pop	r10
    2c0c:	08 95       	ret

00002c0e <prvTimerTask>:
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
}
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
    2c0e:	cf 93       	push	r28
    2c10:	df 93       	push	r29
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <prvTimerTask+0x6>
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <prvTimerTask+0x8>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <prvTimerTask+0xa>
    2c18:	cd b7       	in	r28, 0x3d	; 61
    2c1a:	de b7       	in	r29, 0x3e	; 62
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c1c:	ce 01       	movw	r24, r28
    2c1e:	01 96       	adiw	r24, 0x01	; 1
    2c20:	4c 01       	movw	r8, r24
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2c22:	44 24       	eor	r4, r4
    2c24:	43 94       	inc	r4
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2c26:	e1 2c       	mov	r14, r1
    2c28:	f1 2c       	mov	r15, r1
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2c2a:	51 2c       	mov	r5, r1
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2c2c:	c8 2e       	mov	r12, r24
    2c2e:	d9 2c       	mov	r13, r9
    the timer with the nearest expiry time will expire.  If there are no
    active timers then just set the next expire time to 0.  That will cause
    this task to unblock when the tick count overflows, at which point the
    timer lists will be switched and the next expiry time can be
    re-assessed.  */
    *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
    2c30:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <pxCurrentTimerList>
    2c34:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <pxCurrentTimerList+0x1>
    2c38:	80 81       	ld	r24, Z
    if( *pxListWasEmpty == pdFALSE )
    2c3a:	88 23       	and	r24, r24
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <prvTimerTask+0x32>
    2c3e:	dc c0       	rjmp	.+440    	; 0x2df8 <prvTimerTask+0x1ea>
    {
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c40:	05 80       	ldd	r0, Z+5	; 0x05
    2c42:	f6 81       	ldd	r31, Z+6	; 0x06
    2c44:	e0 2d       	mov	r30, r0
    2c46:	a0 80       	ld	r10, Z
    2c48:	b1 80       	ldd	r11, Z+1	; 0x01
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2c4a:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2c4e:	c4 01       	movw	r24, r8
    2c50:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <prvSampleTimeNow>
    2c54:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	81 11       	cpse	r24, r1
    2c5a:	4b c0       	rjmp	.+150    	; 0x2cf2 <prvTimerTask+0xe4>
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2c5c:	0a 15       	cp	r16, r10
    2c5e:	1b 05       	cpc	r17, r11
    2c60:	b8 f1       	brcs	.+110    	; 0x2cd0 <prvTimerTask+0xc2>
            {
                ( void ) xTaskResumeAll();
    2c62:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
/*-----------------------------------------------------------*/

static void prvProcessExpiYellowTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stoYellow and retrieved is the same. */
    2c66:	e0 91 2b 02 	lds	r30, 0x022B	; 0x80022b <pxCurrentTimerList>
    2c6a:	f0 91 2c 02 	lds	r31, 0x022C	; 0x80022c <pxCurrentTimerList+0x1>
    2c6e:	05 80       	ldd	r0, Z+5	; 0x05
    2c70:	f6 81       	ldd	r31, Z+6	; 0x06
    2c72:	e0 2d       	mov	r30, r0
    2c74:	66 80       	ldd	r6, Z+6	; 0x06
    2c76:	77 80       	ldd	r7, Z+7	; 0x07

    /* Remove the timer from the list of active timers.  A check has already
    been performed to ensure the list is not empty. */
    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c78:	c3 01       	movw	r24, r6
    2c7a:	02 96       	adiw	r24, 0x02	; 2
    2c7c:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
    traceTIMER_EXPIYellow( pxTimer );

    /* If the timer is an auto-reload timer then calculate the next
    expiry time and re-insert the timer in the list of active timers. */
    if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c80:	d3 01       	movw	r26, r6
    2c82:	52 96       	adiw	r26, 0x12	; 18
    2c84:	8c 91       	ld	r24, X
    2c86:	52 97       	sbiw	r26, 0x12	; 18
    2c88:	82 ff       	sbrs	r24, 2
    2c8a:	17 c0       	rjmp	.+46     	; 0x2cba <prvTimerTask+0xac>
    {
        /* The timer is inserted into a list using a time relative to anything
        other than the current time.  It will therefore be inserted into the
        correct list relative to the time this task thinks it is now. */
        if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
    2c8c:	1c 96       	adiw	r26, 0x0c	; 12
    2c8e:	6d 91       	ld	r22, X+
    2c90:	7c 91       	ld	r23, X
    2c92:	1d 97       	sbiw	r26, 0x0d	; 13
    2c94:	6a 0d       	add	r22, r10
    2c96:	7b 1d       	adc	r23, r11
    2c98:	95 01       	movw	r18, r10
    2c9a:	a8 01       	movw	r20, r16
    2c9c:	c3 01       	movw	r24, r6
    2c9e:	0e 94 d5 14 	call	0x29aa	; 0x29aa <prvInsertTimerInActiveList>
    2ca2:	88 23       	and	r24, r24
    2ca4:	69 f0       	breq	.+26     	; 0x2cc0 <prvTimerTask+0xb2>
        {
            /* The timer expiYellow before it was added to the active timer
            list.  Reload it now.  */
            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2ca6:	0e 2d       	mov	r16, r14
    2ca8:	1f 2d       	mov	r17, r15
    2caa:	2e 2d       	mov	r18, r14
    2cac:	3f 2d       	mov	r19, r15
    2cae:	a5 01       	movw	r20, r10
    2cb0:	65 2d       	mov	r22, r5
    2cb2:	c3 01       	movw	r24, r6
    2cb4:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTimerGenericCommand>
    2cb8:	03 c0       	rjmp	.+6      	; 0x2cc0 <prvTimerTask+0xb2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2cba:	8e 7f       	andi	r24, 0xFE	; 254
    2cbc:	f3 01       	movw	r30, r6
    2cbe:	82 8b       	std	Z+18, r24	; 0x12
        mtCOVERAGE_TEST_MARKER();
    }

    /* Call the timer callback. */
    pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2cc0:	d3 01       	movw	r26, r6
    2cc2:	50 96       	adiw	r26, 0x10	; 16
    2cc4:	ed 91       	ld	r30, X+
    2cc6:	fc 91       	ld	r31, X
    2cc8:	51 97       	sbiw	r26, 0x11	; 17
    2cca:	c3 01       	movw	r24, r6
    2ccc:	09 95       	icall
    2cce:	87 c0       	rjmp	.+270    	; 0x2dde <prvTimerTask+0x1d0>
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
        if( xTimerListsWereSwitched == pdFALSE )
        {
            /* The tick count has not overflowed, has the timer expiYellow? */
            if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
    2cd0:	45 2d       	mov	r20, r5
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
                }

                vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
    2cd2:	b5 01       	movw	r22, r10
    2cd4:	60 1b       	sub	r22, r16
    2cd6:	71 0b       	sbc	r23, r17
    2cd8:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <xTimerQueue>
    2cdc:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <xTimerQueue+0x1>
    2ce0:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <vQueueWaitForMessageRestricted>

                if( xTaskResumeAll() == pdFALSE )
    2ce4:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    2ce8:	81 11       	cpse	r24, r1
    2cea:	79 c0       	rjmp	.+242    	; 0x2dde <prvTimerTask+0x1d0>
                {
                    /* Yield to wait for either a command to arrive, or the
                    block time to expire.  If a command arrived between the
                    critical section being exited and this yield then the yield
                    will not cause the task to block. */
                    portYIELD_WITHIN_API();
    2cec:	0e 94 3d 0c 	call	0x187a	; 0x187a <vPortYield>
    2cf0:	76 c0       	rjmp	.+236    	; 0x2dde <prvTimerTask+0x1d0>
                }
            }
        }
        else
        {
            ( void ) xTaskResumeAll();
    2cf2:	0e 94 8d 12 	call	0x251a	; 0x251a <xTaskResumeAll>
    2cf6:	73 c0       	rjmp	.+230    	; 0x2dde <prvTimerTask+0x1d0>
        }
        #endif /* INCLUDE_xTimerPendFunctionCall */

        /* Commands that are positive are timer commands rather than pended
        function calls. */
        if( xMessage.xMessageID >= ( BaseType_t ) 0 )
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	88 23       	and	r24, r24
    2cfc:	0c f4       	brge	.+2      	; 0x2d00 <prvTimerTask+0xf2>
    2cfe:	6f c0       	rjmp	.+222    	; 0x2dde <prvTimerTask+0x1d0>
        {
            /* The messages uses the xTimerParameters member to work on a
            software timer. */
            pxTimer = xMessage.u.xTimerParameters.pxTimer;
    2d00:	ac 80       	ldd	r10, Y+4	; 0x04
    2d02:	bd 80       	ldd	r11, Y+5	; 0x05

        if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only Yellowundant when NULL is passed into the macro. */
    2d04:	f5 01       	movw	r30, r10
    2d06:	82 85       	ldd	r24, Z+10	; 0x0a
    2d08:	93 85       	ldd	r25, Z+11	; 0x0b
    2d0a:	89 2b       	or	r24, r25
    2d0c:	21 f0       	breq	.+8      	; 0x2d16 <prvTimerTask+0x108>
            {
                /* The timer is in a list, remove it. */
                ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d0e:	c5 01       	movw	r24, r10
    2d10:	02 96       	adiw	r24, 0x02	; 2
    2d12:	0e 94 cd 0b 	call	0x179a	; 0x179a <uxListRemove>
            it must be present in the function call.  prvSampleTimeNow() must be
            called after the message is received from xTimerQueue so there is no
            possibility of a higher priority task adding a message to the message
            queue with a time that is ahead of the timer daemon task (because it
            pre-empted the timer daemon task after the xTimeNow value was set). */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2d16:	ce 01       	movw	r24, r28
    2d18:	06 96       	adiw	r24, 0x06	; 6
    2d1a:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <prvSampleTimeNow>

            switch( xMessage.xMessageID )
    2d1e:	e9 81       	ldd	r30, Y+1	; 0x01
    2d20:	0e 2e       	mov	r0, r30
    2d22:	00 0c       	add	r0, r0
    2d24:	ff 0b       	sbc	r31, r31
    2d26:	ea 30       	cpi	r30, 0x0A	; 10
    2d28:	f1 05       	cpc	r31, r1
    2d2a:	08 f0       	brcs	.+2      	; 0x2d2e <prvTimerTask+0x120>
    2d2c:	58 c0       	rjmp	.+176    	; 0x2dde <prvTimerTask+0x1d0>
    2d2e:	ec 5c       	subi	r30, 0xCC	; 204
    2d30:	ff 4f       	sbci	r31, 0xFF	; 255
    2d32:	0c 94 d9 1e 	jmp	0x3db2	; 0x3db2 <__tablejump2__>
                case tmrCOMMAND_START_FROM_ISR :
                case tmrCOMMAND_RESET :
                case tmrCOMMAND_RESET_FROM_ISR :
                case tmrCOMMAND_START_DONT_TRACE :
                    /* Start or restart a timer. */
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2d36:	d5 01       	movw	r26, r10
    2d38:	52 96       	adiw	r26, 0x12	; 18
    2d3a:	2c 91       	ld	r18, X
    2d3c:	52 97       	sbiw	r26, 0x12	; 18
    2d3e:	21 60       	ori	r18, 0x01	; 1
    2d40:	52 96       	adiw	r26, 0x12	; 18
    2d42:	2c 93       	st	X, r18
    2d44:	52 97       	sbiw	r26, 0x12	; 18
                    if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
    2d46:	2a 81       	ldd	r18, Y+2	; 0x02
    2d48:	3b 81       	ldd	r19, Y+3	; 0x03
    2d4a:	1c 96       	adiw	r26, 0x0c	; 12
    2d4c:	6d 91       	ld	r22, X+
    2d4e:	7c 91       	ld	r23, X
    2d50:	1d 97       	sbiw	r26, 0x0d	; 13
    2d52:	62 0f       	add	r22, r18
    2d54:	73 1f       	adc	r23, r19
    2d56:	ac 01       	movw	r20, r24
    2d58:	c5 01       	movw	r24, r10
    2d5a:	0e 94 d5 14 	call	0x29aa	; 0x29aa <prvInsertTimerInActiveList>
    2d5e:	88 23       	and	r24, r24
    2d60:	f1 f1       	breq	.+124    	; 0x2dde <prvTimerTask+0x1d0>
                    {
                        /* The timer expiYellow before it was added to the active
                        timer list.  Process it now. */
                        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d62:	d5 01       	movw	r26, r10
    2d64:	50 96       	adiw	r26, 0x10	; 16
    2d66:	ed 91       	ld	r30, X+
    2d68:	fc 91       	ld	r31, X
    2d6a:	51 97       	sbiw	r26, 0x11	; 17
    2d6c:	c5 01       	movw	r24, r10
    2d6e:	09 95       	icall
                        traceTIMER_EXPIYellow( pxTimer );

                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d70:	f5 01       	movw	r30, r10
    2d72:	82 89       	ldd	r24, Z+18	; 0x12
    2d74:	82 ff       	sbrs	r24, 2
    2d76:	33 c0       	rjmp	.+102    	; 0x2dde <prvTimerTask+0x1d0>
                        {
                            xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
    2d78:	4a 81       	ldd	r20, Y+2	; 0x02
    2d7a:	5b 81       	ldd	r21, Y+3	; 0x03
    2d7c:	84 85       	ldd	r24, Z+12	; 0x0c
    2d7e:	95 85       	ldd	r25, Z+13	; 0x0d
    2d80:	48 0f       	add	r20, r24
    2d82:	59 1f       	adc	r21, r25
    2d84:	0e 2d       	mov	r16, r14
    2d86:	1f 2d       	mov	r17, r15
    2d88:	2e 2d       	mov	r18, r14
    2d8a:	3f 2d       	mov	r19, r15
    2d8c:	65 2d       	mov	r22, r5
    2d8e:	c5 01       	movw	r24, r10
    2d90:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <xTimerGenericCommand>
    2d94:	24 c0       	rjmp	.+72     	; 0x2dde <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_STOP :
                case tmrCOMMAND_STOP_FROM_ISR :
                    /* The timer has already been removed from the active list. */
                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2d96:	d5 01       	movw	r26, r10
    2d98:	52 96       	adiw	r26, 0x12	; 18
    2d9a:	8c 91       	ld	r24, X
    2d9c:	52 97       	sbiw	r26, 0x12	; 18
    2d9e:	8e 7f       	andi	r24, 0xFE	; 254
    2da0:	52 96       	adiw	r26, 0x12	; 18
    2da2:	8c 93       	st	X, r24
    2da4:	1c c0       	rjmp	.+56     	; 0x2dde <prvTimerTask+0x1d0>
                    break;

                case tmrCOMMAND_CHANGE_PERIOD :
                case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
                    pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
    2da6:	f5 01       	movw	r30, r10
    2da8:	22 89       	ldd	r18, Z+18	; 0x12
    2daa:	21 60       	ori	r18, 0x01	; 1
    2dac:	22 8b       	std	Z+18, r18	; 0x12
                    pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
    2dae:	6a 81       	ldd	r22, Y+2	; 0x02
    2db0:	7b 81       	ldd	r23, Y+3	; 0x03
    2db2:	75 87       	std	Z+13, r23	; 0x0d
    2db4:	64 87       	std	Z+12, r22	; 0x0c
                    be longer or shorter than the old one.  The command time is
                    therefore set to the current time, and as the period cannot
                    be zero the next expiry time can only be in the future,
                    meaning (unlike for the xTimerStart() case above) there is
                    no fail case that needs to be handled here. */
                    ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
    2db6:	68 0f       	add	r22, r24
    2db8:	79 1f       	adc	r23, r25
    2dba:	9c 01       	movw	r18, r24
    2dbc:	ac 01       	movw	r20, r24
    2dbe:	c5 01       	movw	r24, r10
    2dc0:	0e 94 d5 14 	call	0x29aa	; 0x29aa <prvInsertTimerInActiveList>
    2dc4:	0c c0       	rjmp	.+24     	; 0x2dde <prvTimerTask+0x1d0>
                    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                    {
                    /* The timer has already been removed from the active list,
                    just free up the memory if the memory was dynamically
                    allocated. */
                        if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
    2dc6:	d5 01       	movw	r26, r10
    2dc8:	52 96       	adiw	r26, 0x12	; 18
    2dca:	8c 91       	ld	r24, X
    2dcc:	81 fd       	sbrc	r24, 1
    2dce:	04 c0       	rjmp	.+8      	; 0x2dd8 <prvTimerTask+0x1ca>
                        {
                            vPortFree( pxTimer );
    2dd0:	c5 01       	movw	r24, r10
    2dd2:	0e 94 27 0b 	call	0x164e	; 0x164e <vPortFree>
    2dd6:	03 c0       	rjmp	.+6      	; 0x2dde <prvTimerTask+0x1d0>
                        }
                        else
                        {
                            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
    2dd8:	8e 7f       	andi	r24, 0xFE	; 254
    2dda:	f5 01       	movw	r30, r10
    2ddc:	82 8b       	std	Z+18, r24	; 0x12
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

    while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
    2dde:	4e 2d       	mov	r20, r14
    2de0:	5f 2d       	mov	r21, r15
    2de2:	6c 2d       	mov	r22, r12
    2de4:	7d 2d       	mov	r23, r13
    2de6:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <xTimerQueue>
    2dea:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <xTimerQueue+0x1>
    2dee:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <xQueueReceive>
    2df2:	81 11       	cpse	r24, r1
    2df4:	81 cf       	rjmp	.-254    	; 0x2cf8 <prvTimerTask+0xea>
    2df6:	1c cf       	rjmp	.-456    	; 0x2c30 <prvTimerTask+0x22>
static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

    vTaskSuspendAll();
    2df8:	0e 94 be 11 	call	0x237c	; 0x237c <vTaskSuspendAll>
        /* Obtain the time now to make an assessment as to whether the timer
        has expiYellow or not.  If obtaining the time causes the lists to switch
        then don't process this timer as any timers that remained in the list
        when the lists were switched will have been processed within the
        prvSampleTimeNow() function. */
        xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
    2dfc:	c4 01       	movw	r24, r8
    2dfe:	0e 94 97 15 	call	0x2b2e	; 0x2b2e <prvSampleTimeNow>
    2e02:	8c 01       	movw	r16, r24
        if( xTimerListsWereSwitched == pdFALSE )
    2e04:	89 81       	ldd	r24, Y+1	; 0x01
    2e06:	81 11       	cpse	r24, r1
    2e08:	74 cf       	rjmp	.-280    	; 0x2cf2 <prvTimerTask+0xe4>
                case when the current timer list is empty. */
                if( xListWasEmpty != pdFALSE )
                {
                    /* The current timer list is empty - is the overflow list
                    also empty? */
                    xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
    2e0a:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <pxOverflowTimerList>
    2e0e:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <pxOverflowTimerList+0x1>
    2e12:	80 81       	ld	r24, Z
    2e14:	44 2d       	mov	r20, r4
    2e16:	81 11       	cpse	r24, r1
    2e18:	45 2d       	mov	r20, r5
        xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    }
    else
    {
        /* Ensure the task unblocks when the tick count rolls over. */
        xNextExpireTime = ( TickType_t ) 0U;
    2e1a:	ae 2c       	mov	r10, r14
    2e1c:	bf 2c       	mov	r11, r15
    2e1e:	59 cf       	rjmp	.-334    	; 0x2cd2 <prvTimerTask+0xc4>

00002e20 <I2C_Init>:
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2e20:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2e24:	88 e4       	ldi	r24, 0x48	; 72
    2e26:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
    2e2a:	08 95       	ret

00002e2c <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char slave_read_address)			/* I2C repeated start function */
{
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
    2e2c:	94 ea       	ldi	r25, 0xA4	; 164
    2e2e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
    2e32:	ec eb       	ldi	r30, 0xBC	; 188
    2e34:	f0 e0       	ldi	r31, 0x00	; 0
    2e36:	90 81       	ld	r25, Z
    2e38:	99 23       	and	r25, r25
    2e3a:	ec f7       	brge	.-6      	; 0x2e36 <I2C_Repeated_Start+0xa>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2e3c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
    2e40:	98 7f       	andi	r25, 0xF8	; 248
    2e42:	90 31       	cpi	r25, 0x10	; 16
    2e44:	99 f4       	brne	.+38     	; 0x2e6c <I2C_Repeated_Start+0x40>
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
    2e46:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    2e4a:	84 e8       	ldi	r24, 0x84	; 132
    2e4c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    2e50:	ec eb       	ldi	r30, 0xBC	; 188
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	88 23       	and	r24, r24
    2e58:	ec f7       	brge	.-6      	; 0x2e54 <I2C_Repeated_Start+0x28>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2e5a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2e5e:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
    2e60:	80 34       	cpi	r24, 0x40	; 64
    2e62:	31 f0       	breq	.+12     	; 0x2e70 <I2C_Repeated_Start+0x44>
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
    2e64:	80 32       	cpi	r24, 0x20	; 32
    2e66:	31 f0       	breq	.+12     	; 0x2e74 <I2C_Repeated_Start+0x48>
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
    2e68:	83 e0       	ldi	r24, 0x03	; 3
    2e6a:	08 95       	ret
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
    2e6c:	80 e0       	ldi	r24, 0x00	; 0
    2e6e:	08 95       	ret
	TWDR = slave_read_address;								/* If yes then write SLA+R in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
	return 1;												/* If yes then return 1 to indicate ack received */ 
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	08 95       	ret
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
    2e74:	82 e0       	ldi	r24, 0x02	; 2
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
    2e76:	08 95       	ret

00002e78 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
    2e78:	84 e9       	ldi	r24, 0x94	; 148
    2e7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
    2e7e:	ec eb       	ldi	r30, 0xBC	; 188
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	80 81       	ld	r24, Z
    2e84:	84 fd       	sbrc	r24, 4
    2e86:	fd cf       	rjmp	.-6      	; 0x2e82 <I2C_Stop+0xa>
}
    2e88:	08 95       	ret

00002e8a <I2C_Start_Wait>:

void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
    2e8a:	bf 92       	push	r11
    2e8c:	cf 92       	push	r12
    2e8e:	df 92       	push	r13
    2e90:	ef 92       	push	r14
    2e92:	ff 92       	push	r15
    2e94:	0f 93       	push	r16
    2e96:	1f 93       	push	r17
    2e98:	cf 93       	push	r28
    2e9a:	df 93       	push	r29
    2e9c:	b8 2e       	mov	r11, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2e9e:	cc eb       	ldi	r28, 0xBC	; 188
    2ea0:	d0 e0       	ldi	r29, 0x00	; 0
    2ea2:	0f 2e       	mov	r0, r31
    2ea4:	f4 ea       	ldi	r31, 0xA4	; 164
    2ea6:	df 2e       	mov	r13, r31
    2ea8:	f0 2d       	mov	r31, r0
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2eaa:	09 eb       	ldi	r16, 0xB9	; 185
    2eac:	10 e0       	ldi	r17, 0x00	; 0
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2eae:	0f 2e       	mov	r0, r31
    2eb0:	fb eb       	ldi	r31, 0xBB	; 187
    2eb2:	ef 2e       	mov	r14, r31
    2eb4:	f1 2c       	mov	r15, r1
    2eb6:	f0 2d       	mov	r31, r0
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2eb8:	0f 2e       	mov	r0, r31
    2eba:	f4 e8       	ldi	r31, 0x84	; 132
    2ebc:	cf 2e       	mov	r12, r31
    2ebe:	f0 2d       	mov	r31, r0
void I2C_Start_Wait(char slave_write_address)				/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
    2ec0:	d8 82       	st	Y, r13
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
    2ec2:	88 81       	ld	r24, Y
    2ec4:	88 23       	and	r24, r24
    2ec6:	ec f7       	brge	.-6      	; 0x2ec2 <I2C_Start_Wait+0x38>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2ec8:	f8 01       	movw	r30, r16
    2eca:	80 81       	ld	r24, Z
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
    2ecc:	88 7f       	andi	r24, 0xF8	; 248
    2ece:	88 30       	cpi	r24, 0x08	; 8
    2ed0:	b9 f7       	brne	.-18     	; 0x2ec0 <I2C_Start_Wait+0x36>
		continue;											/* If no then continue with start loop again */
		TWDR = slave_write_address;							/* If yes then write SLA+W in TWI data register */
    2ed2:	f7 01       	movw	r30, r14
    2ed4:	b0 82       	st	Z, r11
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
    2ed6:	c8 82       	st	Y, r12
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
    2ed8:	88 81       	ld	r24, Y
    2eda:	88 23       	and	r24, r24
    2edc:	ec f7       	brge	.-6      	; 0x2ed8 <I2C_Start_Wait+0x4e>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
    2ede:	f8 01       	movw	r30, r16
    2ee0:	80 81       	ld	r24, Z
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
    2ee2:	88 7f       	andi	r24, 0xF8	; 248
    2ee4:	88 31       	cpi	r24, 0x18	; 24
    2ee6:	19 f0       	breq	.+6      	; 0x2eee <I2C_Start_Wait+0x64>
		{
			I2C_Stop();										/* If not then generate stop condition */
    2ee8:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <I2C_Stop>
			continue;										/* continue with start loop again */
    2eec:	e9 cf       	rjmp	.-46     	; 0x2ec0 <I2C_Start_Wait+0x36>
		}
		break;												/* If yes then break loop */
	}
}
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	1f 91       	pop	r17
    2ef4:	0f 91       	pop	r16
    2ef6:	ff 90       	pop	r15
    2ef8:	ef 90       	pop	r14
    2efa:	df 90       	pop	r13
    2efc:	cf 90       	pop	r12
    2efe:	bf 90       	pop	r11
    2f00:	08 95       	ret

00002f02 <I2C_Write>:

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
    2f02:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
    2f06:	84 e8       	ldi	r24, 0x84	; 132
    2f08:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
    2f0c:	ec eb       	ldi	r30, 0xBC	; 188
    2f0e:	f0 e0       	ldi	r31, 0x00	; 0
    2f10:	80 81       	ld	r24, Z
    2f12:	88 23       	and	r24, r24
    2f14:	ec f7       	brge	.-6      	; 0x2f10 <I2C_Write+0xe>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
    2f16:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
    2f1a:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
    2f1c:	88 32       	cpi	r24, 0x28	; 40
    2f1e:	21 f0       	breq	.+8      	; 0x2f28 <I2C_Write+0x26>
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
    2f20:	80 33       	cpi	r24, 0x30	; 48
    2f22:	21 f0       	breq	.+8      	; 0x2f2c <I2C_Write+0x2a>
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
    2f24:	82 e0       	ldi	r24, 0x02	; 2
    2f26:	08 95       	ret
	TWDR = data;											/* Copy data in TWI data register */
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
	return 0;												/* If yes then return 0 to indicate ack received */
    2f28:	80 e0       	ldi	r24, 0x00	; 0
    2f2a:	08 95       	ret
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
	return 1;												/* If yes then return 1 to indicate nack received */
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
    2f2e:	08 95       	ret

00002f30 <I2C_Read_Ack>:

char I2C_Read_Ack()										/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
    2f30:	84 ec       	ldi	r24, 0xC4	; 196
    2f32:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    2f36:	ec eb       	ldi	r30, 0xBC	; 188
    2f38:	f0 e0       	ldi	r31, 0x00	; 0
    2f3a:	80 81       	ld	r24, Z
    2f3c:	88 23       	and	r24, r24
    2f3e:	ec f7       	brge	.-6      	; 0x2f3a <I2C_Read_Ack+0xa>
	return TWDR;											/* Return received data */
    2f40:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    2f44:	08 95       	ret

00002f46 <I2C_Read_Nack>:

char I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
    2f46:	84 e8       	ldi	r24, 0x84	; 132
    2f48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
    2f4c:	ec eb       	ldi	r30, 0xBC	; 188
    2f4e:	f0 e0       	ldi	r31, 0x00	; 0
    2f50:	80 81       	ld	r24, Z
    2f52:	88 23       	and	r24, r24
    2f54:	ec f7       	brge	.-6      	; 0x2f50 <I2C_Read_Nack+0xa>
	return TWDR;											/* Return received data */
    2f56:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
}	
    2f5a:	08 95       	ret

00002f5c <UART_init>:

void UART_init(int BAUD_PRESCALER)
{
  
  /*Set baud rate */
  UBRR0H = (unsigned char)(BAUD_PRESCALER>>8);
    2f5c:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  UBRR0L = (unsigned char)BAUD_PRESCALER;
    2f60:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  //Enable receiver and transmitter 
  UCSR0B = (1<<RXEN0)|(1<<TXEN0);
    2f64:	88 e1       	ldi	r24, 0x18	; 24
    2f66:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
  /* Set frame format: 2 stop bits, 8 data bits */
  UCSR0C |= (1<<USBS0); // 2 stop bits
    2f6a:	e2 ec       	ldi	r30, 0xC2	; 194
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	80 81       	ld	r24, Z
    2f70:	88 60       	ori	r24, 0x08	; 8
    2f72:	80 83       	st	Z, r24
  UCSR0C = (1<<UCSZ01) | (1<<UCSZ00); // 8 data bits
    2f74:	86 e0       	ldi	r24, 0x06	; 6
    2f76:	80 83       	st	Z, r24
    2f78:	08 95       	ret

00002f7a <UART_send>:
}

void UART_send(unsigned char data)
{
  // Wait for empty transmit buffer
  while(!(UCSR0A & (1<<UDRE0)));
    2f7a:	e0 ec       	ldi	r30, 0xC0	; 192
    2f7c:	f0 e0       	ldi	r31, 0x00	; 0
    2f7e:	90 81       	ld	r25, Z
    2f80:	95 ff       	sbrs	r25, 5
    2f82:	fd cf       	rjmp	.-6      	; 0x2f7e <UART_send+0x4>
  // Put data into buffer and send data
  UDR0 = data;
    2f84:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    2f88:	08 95       	ret

00002f8a <UART_putstring>:
  
}

void UART_putstring(char* StringPtr)
{
    2f8a:	cf 93       	push	r28
    2f8c:	df 93       	push	r29
    2f8e:	ec 01       	movw	r28, r24
  while(*StringPtr != 0x00)
    2f90:	88 81       	ld	r24, Y
    2f92:	88 23       	and	r24, r24
    2f94:	31 f0       	breq	.+12     	; 0x2fa2 <UART_putstring+0x18>
    2f96:	21 96       	adiw	r28, 0x01	; 1
  {
    UART_send(*StringPtr);
    2f98:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <UART_send>
  
}

void UART_putstring(char* StringPtr)
{
  while(*StringPtr != 0x00)
    2f9c:	89 91       	ld	r24, Y+
    2f9e:	81 11       	cpse	r24, r1
    2fa0:	fb cf       	rjmp	.-10     	; 0x2f98 <UART_putstring+0xe>
  {
    UART_send(*StringPtr);
  StringPtr++;
  }
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	08 95       	ret

00002fa8 <__subsf3>:
    2fa8:	50 58       	subi	r21, 0x80	; 128

00002faa <__addsf3>:
    2faa:	bb 27       	eor	r27, r27
    2fac:	aa 27       	eor	r26, r26
    2fae:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__addsf3x>
    2fb2:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__fp_round>
    2fb6:	0e 94 40 1a 	call	0x3480	; 0x3480 <__fp_pscA>
    2fba:	38 f0       	brcs	.+14     	; 0x2fca <__addsf3+0x20>
    2fbc:	0e 94 47 1a 	call	0x348e	; 0x348e <__fp_pscB>
    2fc0:	20 f0       	brcs	.+8      	; 0x2fca <__addsf3+0x20>
    2fc2:	39 f4       	brne	.+14     	; 0x2fd2 <__addsf3+0x28>
    2fc4:	9f 3f       	cpi	r25, 0xFF	; 255
    2fc6:	19 f4       	brne	.+6      	; 0x2fce <__addsf3+0x24>
    2fc8:	26 f4       	brtc	.+8      	; 0x2fd2 <__addsf3+0x28>
    2fca:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>
    2fce:	0e f4       	brtc	.+2      	; 0x2fd2 <__addsf3+0x28>
    2fd0:	e0 95       	com	r30
    2fd2:	e7 fb       	bst	r30, 7
    2fd4:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>

00002fd8 <__addsf3x>:
    2fd8:	e9 2f       	mov	r30, r25
    2fda:	0e 94 5f 1a 	call	0x34be	; 0x34be <__fp_split3>
    2fde:	58 f3       	brcs	.-42     	; 0x2fb6 <__addsf3+0xc>
    2fe0:	ba 17       	cp	r27, r26
    2fe2:	62 07       	cpc	r22, r18
    2fe4:	73 07       	cpc	r23, r19
    2fe6:	84 07       	cpc	r24, r20
    2fe8:	95 07       	cpc	r25, r21
    2fea:	20 f0       	brcs	.+8      	; 0x2ff4 <__addsf3x+0x1c>
    2fec:	79 f4       	brne	.+30     	; 0x300c <__addsf3x+0x34>
    2fee:	a6 f5       	brtc	.+104    	; 0x3058 <__addsf3x+0x80>
    2ff0:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__fp_zero>
    2ff4:	0e f4       	brtc	.+2      	; 0x2ff8 <__addsf3x+0x20>
    2ff6:	e0 95       	com	r30
    2ff8:	0b 2e       	mov	r0, r27
    2ffa:	ba 2f       	mov	r27, r26
    2ffc:	a0 2d       	mov	r26, r0
    2ffe:	0b 01       	movw	r0, r22
    3000:	b9 01       	movw	r22, r18
    3002:	90 01       	movw	r18, r0
    3004:	0c 01       	movw	r0, r24
    3006:	ca 01       	movw	r24, r20
    3008:	a0 01       	movw	r20, r0
    300a:	11 24       	eor	r1, r1
    300c:	ff 27       	eor	r31, r31
    300e:	59 1b       	sub	r21, r25
    3010:	99 f0       	breq	.+38     	; 0x3038 <__addsf3x+0x60>
    3012:	59 3f       	cpi	r21, 0xF9	; 249
    3014:	50 f4       	brcc	.+20     	; 0x302a <__addsf3x+0x52>
    3016:	50 3e       	cpi	r21, 0xE0	; 224
    3018:	68 f1       	brcs	.+90     	; 0x3074 <__addsf3x+0x9c>
    301a:	1a 16       	cp	r1, r26
    301c:	f0 40       	sbci	r31, 0x00	; 0
    301e:	a2 2f       	mov	r26, r18
    3020:	23 2f       	mov	r18, r19
    3022:	34 2f       	mov	r19, r20
    3024:	44 27       	eor	r20, r20
    3026:	58 5f       	subi	r21, 0xF8	; 248
    3028:	f3 cf       	rjmp	.-26     	; 0x3010 <__addsf3x+0x38>
    302a:	46 95       	lsr	r20
    302c:	37 95       	ror	r19
    302e:	27 95       	ror	r18
    3030:	a7 95       	ror	r26
    3032:	f0 40       	sbci	r31, 0x00	; 0
    3034:	53 95       	inc	r21
    3036:	c9 f7       	brne	.-14     	; 0x302a <__addsf3x+0x52>
    3038:	7e f4       	brtc	.+30     	; 0x3058 <__addsf3x+0x80>
    303a:	1f 16       	cp	r1, r31
    303c:	ba 0b       	sbc	r27, r26
    303e:	62 0b       	sbc	r22, r18
    3040:	73 0b       	sbc	r23, r19
    3042:	84 0b       	sbc	r24, r20
    3044:	ba f0       	brmi	.+46     	; 0x3074 <__addsf3x+0x9c>
    3046:	91 50       	subi	r25, 0x01	; 1
    3048:	a1 f0       	breq	.+40     	; 0x3072 <__addsf3x+0x9a>
    304a:	ff 0f       	add	r31, r31
    304c:	bb 1f       	adc	r27, r27
    304e:	66 1f       	adc	r22, r22
    3050:	77 1f       	adc	r23, r23
    3052:	88 1f       	adc	r24, r24
    3054:	c2 f7       	brpl	.-16     	; 0x3046 <__addsf3x+0x6e>
    3056:	0e c0       	rjmp	.+28     	; 0x3074 <__addsf3x+0x9c>
    3058:	ba 0f       	add	r27, r26
    305a:	62 1f       	adc	r22, r18
    305c:	73 1f       	adc	r23, r19
    305e:	84 1f       	adc	r24, r20
    3060:	48 f4       	brcc	.+18     	; 0x3074 <__addsf3x+0x9c>
    3062:	87 95       	ror	r24
    3064:	77 95       	ror	r23
    3066:	67 95       	ror	r22
    3068:	b7 95       	ror	r27
    306a:	f7 95       	ror	r31
    306c:	9e 3f       	cpi	r25, 0xFE	; 254
    306e:	08 f0       	brcs	.+2      	; 0x3072 <__addsf3x+0x9a>
    3070:	b0 cf       	rjmp	.-160    	; 0x2fd2 <__addsf3+0x28>
    3072:	93 95       	inc	r25
    3074:	88 0f       	add	r24, r24
    3076:	08 f0       	brcs	.+2      	; 0x307a <__addsf3x+0xa2>
    3078:	99 27       	eor	r25, r25
    307a:	ee 0f       	add	r30, r30
    307c:	97 95       	ror	r25
    307e:	87 95       	ror	r24
    3080:	08 95       	ret

00003082 <asin>:
    3082:	9f 93       	push	r25
    3084:	9f 77       	andi	r25, 0x7F	; 127
    3086:	ee e3       	ldi	r30, 0x3E	; 62
    3088:	89 37       	cpi	r24, 0x79	; 121
    308a:	9e 07       	cpc	r25, r30
    308c:	28 f4       	brcc	.+10     	; 0x3098 <asin+0x16>
    308e:	ec e7       	ldi	r30, 0x7C	; 124
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__fp_powsodd>
    3096:	0c c0       	rjmp	.+24     	; 0x30b0 <asin+0x2e>
    3098:	0e 94 b8 19 	call	0x3370	; 0x3370 <__fp_arccos>
    309c:	90 58       	subi	r25, 0x80	; 128
    309e:	a2 ea       	ldi	r26, 0xA2	; 162
    30a0:	2a ed       	ldi	r18, 0xDA	; 218
    30a2:	3f e0       	ldi	r19, 0x0F	; 15
    30a4:	49 ec       	ldi	r20, 0xC9	; 201
    30a6:	5f e3       	ldi	r21, 0x3F	; 63
    30a8:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__addsf3x>
    30ac:	0e 94 4e 1a 	call	0x349c	; 0x349c <__fp_round>
    30b0:	0f 90       	pop	r0
    30b2:	07 fc       	sbrc	r0, 7
    30b4:	90 58       	subi	r25, 0x80	; 128
    30b6:	08 95       	ret
    30b8:	0e 94 40 1a 	call	0x3480	; 0x3480 <__fp_pscA>
    30bc:	60 f0       	brcs	.+24     	; 0x30d6 <asin+0x54>
    30be:	80 e8       	ldi	r24, 0x80	; 128
    30c0:	91 e0       	ldi	r25, 0x01	; 1
    30c2:	09 f4       	brne	.+2      	; 0x30c6 <asin+0x44>
    30c4:	9e ef       	ldi	r25, 0xFE	; 254
    30c6:	0e 94 47 1a 	call	0x348e	; 0x348e <__fp_pscB>
    30ca:	28 f0       	brcs	.+10     	; 0x30d6 <asin+0x54>
    30cc:	40 e8       	ldi	r20, 0x80	; 128
    30ce:	51 e0       	ldi	r21, 0x01	; 1
    30d0:	71 f4       	brne	.+28     	; 0x30ee <atan2+0x10>
    30d2:	5e ef       	ldi	r21, 0xFE	; 254
    30d4:	0c c0       	rjmp	.+24     	; 0x30ee <atan2+0x10>
    30d6:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>
    30da:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__fp_zero>

000030de <atan2>:
    30de:	e9 2f       	mov	r30, r25
    30e0:	e0 78       	andi	r30, 0x80	; 128
    30e2:	0e 94 5f 1a 	call	0x34be	; 0x34be <__fp_split3>
    30e6:	40 f3       	brcs	.-48     	; 0x30b8 <asin+0x36>
    30e8:	09 2e       	mov	r0, r25
    30ea:	05 2a       	or	r0, r21
    30ec:	b1 f3       	breq	.-20     	; 0x30da <asin+0x58>
    30ee:	26 17       	cp	r18, r22
    30f0:	37 07       	cpc	r19, r23
    30f2:	48 07       	cpc	r20, r24
    30f4:	59 07       	cpc	r21, r25
    30f6:	38 f0       	brcs	.+14     	; 0x3106 <atan2+0x28>
    30f8:	0e 2e       	mov	r0, r30
    30fa:	07 f8       	bld	r0, 7
    30fc:	e0 25       	eor	r30, r0
    30fe:	69 f0       	breq	.+26     	; 0x311a <atan2+0x3c>
    3100:	e0 25       	eor	r30, r0
    3102:	e0 64       	ori	r30, 0x40	; 64
    3104:	0a c0       	rjmp	.+20     	; 0x311a <atan2+0x3c>
    3106:	ef 63       	ori	r30, 0x3F	; 63
    3108:	07 f8       	bld	r0, 7
    310a:	00 94       	com	r0
    310c:	07 fa       	bst	r0, 7
    310e:	db 01       	movw	r26, r22
    3110:	b9 01       	movw	r22, r18
    3112:	9d 01       	movw	r18, r26
    3114:	dc 01       	movw	r26, r24
    3116:	ca 01       	movw	r24, r20
    3118:	ad 01       	movw	r20, r26
    311a:	ef 93       	push	r30
    311c:	0e 94 ea 18 	call	0x31d4	; 0x31d4 <__divsf3_pse>
    3120:	0e 94 4e 1a 	call	0x349c	; 0x349c <__fp_round>
    3124:	0e 94 9f 18 	call	0x313e	; 0x313e <atan>
    3128:	5f 91       	pop	r21
    312a:	55 23       	and	r21, r21
    312c:	39 f0       	breq	.+14     	; 0x313c <atan2+0x5e>
    312e:	2b ed       	ldi	r18, 0xDB	; 219
    3130:	3f e0       	ldi	r19, 0x0F	; 15
    3132:	49 e4       	ldi	r20, 0x49	; 73
    3134:	50 fd       	sbrc	r21, 0
    3136:	49 ec       	ldi	r20, 0xC9	; 201
    3138:	0c 94 d5 17 	jmp	0x2faa	; 0x2faa <__addsf3>
    313c:	08 95       	ret

0000313e <atan>:
    313e:	df 93       	push	r29
    3140:	dd 27       	eor	r29, r29
    3142:	b9 2f       	mov	r27, r25
    3144:	bf 77       	andi	r27, 0x7F	; 127
    3146:	40 e8       	ldi	r20, 0x80	; 128
    3148:	5f e3       	ldi	r21, 0x3F	; 63
    314a:	16 16       	cp	r1, r22
    314c:	17 06       	cpc	r1, r23
    314e:	48 07       	cpc	r20, r24
    3150:	5b 07       	cpc	r21, r27
    3152:	18 f4       	brcc	.+6      	; 0x315a <atan+0x1c>
    3154:	d9 2f       	mov	r29, r25
    3156:	0e 94 88 1a 	call	0x3510	; 0x3510 <inverse>
    315a:	9f 93       	push	r25
    315c:	8f 93       	push	r24
    315e:	7f 93       	push	r23
    3160:	6f 93       	push	r22
    3162:	0e 94 43 1b 	call	0x3686	; 0x3686 <square>
    3166:	e0 e9       	ldi	r30, 0x90	; 144
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	0e 94 05 1a 	call	0x340a	; 0x340a <__fp_powser>
    316e:	0e 94 4e 1a 	call	0x349c	; 0x349c <__fp_round>
    3172:	2f 91       	pop	r18
    3174:	3f 91       	pop	r19
    3176:	4f 91       	pop	r20
    3178:	5f 91       	pop	r21
    317a:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__mulsf3x>
    317e:	dd 23       	and	r29, r29
    3180:	51 f0       	breq	.+20     	; 0x3196 <atan+0x58>
    3182:	90 58       	subi	r25, 0x80	; 128
    3184:	a2 ea       	ldi	r26, 0xA2	; 162
    3186:	2a ed       	ldi	r18, 0xDA	; 218
    3188:	3f e0       	ldi	r19, 0x0F	; 15
    318a:	49 ec       	ldi	r20, 0xC9	; 201
    318c:	5f e3       	ldi	r21, 0x3F	; 63
    318e:	d0 78       	andi	r29, 0x80	; 128
    3190:	5d 27       	eor	r21, r29
    3192:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__addsf3x>
    3196:	df 91       	pop	r29
    3198:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__fp_round>

0000319c <__cmpsf2>:
    319c:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <__fp_cmp>
    31a0:	08 f4       	brcc	.+2      	; 0x31a4 <__cmpsf2+0x8>
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	08 95       	ret

000031a6 <__divsf3>:
    31a6:	0e 94 e7 18 	call	0x31ce	; 0x31ce <__divsf3x>
    31aa:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__fp_round>
    31ae:	0e 94 47 1a 	call	0x348e	; 0x348e <__fp_pscB>
    31b2:	58 f0       	brcs	.+22     	; 0x31ca <__divsf3+0x24>
    31b4:	0e 94 40 1a 	call	0x3480	; 0x3480 <__fp_pscA>
    31b8:	40 f0       	brcs	.+16     	; 0x31ca <__divsf3+0x24>
    31ba:	29 f4       	brne	.+10     	; 0x31c6 <__divsf3+0x20>
    31bc:	5f 3f       	cpi	r21, 0xFF	; 255
    31be:	29 f0       	breq	.+10     	; 0x31ca <__divsf3+0x24>
    31c0:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>
    31c4:	51 11       	cpse	r21, r1
    31c6:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__fp_szero>
    31ca:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>

000031ce <__divsf3x>:
    31ce:	0e 94 5f 1a 	call	0x34be	; 0x34be <__fp_split3>
    31d2:	68 f3       	brcs	.-38     	; 0x31ae <__divsf3+0x8>

000031d4 <__divsf3_pse>:
    31d4:	99 23       	and	r25, r25
    31d6:	b1 f3       	breq	.-20     	; 0x31c4 <__divsf3+0x1e>
    31d8:	55 23       	and	r21, r21
    31da:	91 f3       	breq	.-28     	; 0x31c0 <__divsf3+0x1a>
    31dc:	95 1b       	sub	r25, r21
    31de:	55 0b       	sbc	r21, r21
    31e0:	bb 27       	eor	r27, r27
    31e2:	aa 27       	eor	r26, r26
    31e4:	62 17       	cp	r22, r18
    31e6:	73 07       	cpc	r23, r19
    31e8:	84 07       	cpc	r24, r20
    31ea:	38 f0       	brcs	.+14     	; 0x31fa <__divsf3_pse+0x26>
    31ec:	9f 5f       	subi	r25, 0xFF	; 255
    31ee:	5f 4f       	sbci	r21, 0xFF	; 255
    31f0:	22 0f       	add	r18, r18
    31f2:	33 1f       	adc	r19, r19
    31f4:	44 1f       	adc	r20, r20
    31f6:	aa 1f       	adc	r26, r26
    31f8:	a9 f3       	breq	.-22     	; 0x31e4 <__divsf3_pse+0x10>
    31fa:	35 d0       	rcall	.+106    	; 0x3266 <__divsf3_pse+0x92>
    31fc:	0e 2e       	mov	r0, r30
    31fe:	3a f0       	brmi	.+14     	; 0x320e <__divsf3_pse+0x3a>
    3200:	e0 e8       	ldi	r30, 0x80	; 128
    3202:	32 d0       	rcall	.+100    	; 0x3268 <__divsf3_pse+0x94>
    3204:	91 50       	subi	r25, 0x01	; 1
    3206:	50 40       	sbci	r21, 0x00	; 0
    3208:	e6 95       	lsr	r30
    320a:	00 1c       	adc	r0, r0
    320c:	ca f7       	brpl	.-14     	; 0x3200 <__divsf3_pse+0x2c>
    320e:	2b d0       	rcall	.+86     	; 0x3266 <__divsf3_pse+0x92>
    3210:	fe 2f       	mov	r31, r30
    3212:	29 d0       	rcall	.+82     	; 0x3266 <__divsf3_pse+0x92>
    3214:	66 0f       	add	r22, r22
    3216:	77 1f       	adc	r23, r23
    3218:	88 1f       	adc	r24, r24
    321a:	bb 1f       	adc	r27, r27
    321c:	26 17       	cp	r18, r22
    321e:	37 07       	cpc	r19, r23
    3220:	48 07       	cpc	r20, r24
    3222:	ab 07       	cpc	r26, r27
    3224:	b0 e8       	ldi	r27, 0x80	; 128
    3226:	09 f0       	breq	.+2      	; 0x322a <__divsf3_pse+0x56>
    3228:	bb 0b       	sbc	r27, r27
    322a:	80 2d       	mov	r24, r0
    322c:	bf 01       	movw	r22, r30
    322e:	ff 27       	eor	r31, r31
    3230:	93 58       	subi	r25, 0x83	; 131
    3232:	5f 4f       	sbci	r21, 0xFF	; 255
    3234:	3a f0       	brmi	.+14     	; 0x3244 <__divsf3_pse+0x70>
    3236:	9e 3f       	cpi	r25, 0xFE	; 254
    3238:	51 05       	cpc	r21, r1
    323a:	78 f0       	brcs	.+30     	; 0x325a <__divsf3_pse+0x86>
    323c:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>
    3240:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__fp_szero>
    3244:	5f 3f       	cpi	r21, 0xFF	; 255
    3246:	e4 f3       	brlt	.-8      	; 0x3240 <__divsf3_pse+0x6c>
    3248:	98 3e       	cpi	r25, 0xE8	; 232
    324a:	d4 f3       	brlt	.-12     	; 0x3240 <__divsf3_pse+0x6c>
    324c:	86 95       	lsr	r24
    324e:	77 95       	ror	r23
    3250:	67 95       	ror	r22
    3252:	b7 95       	ror	r27
    3254:	f7 95       	ror	r31
    3256:	9f 5f       	subi	r25, 0xFF	; 255
    3258:	c9 f7       	brne	.-14     	; 0x324c <__divsf3_pse+0x78>
    325a:	88 0f       	add	r24, r24
    325c:	91 1d       	adc	r25, r1
    325e:	96 95       	lsr	r25
    3260:	87 95       	ror	r24
    3262:	97 f9       	bld	r25, 7
    3264:	08 95       	ret
    3266:	e1 e0       	ldi	r30, 0x01	; 1
    3268:	66 0f       	add	r22, r22
    326a:	77 1f       	adc	r23, r23
    326c:	88 1f       	adc	r24, r24
    326e:	bb 1f       	adc	r27, r27
    3270:	62 17       	cp	r22, r18
    3272:	73 07       	cpc	r23, r19
    3274:	84 07       	cpc	r24, r20
    3276:	ba 07       	cpc	r27, r26
    3278:	20 f0       	brcs	.+8      	; 0x3282 <__divsf3_pse+0xae>
    327a:	62 1b       	sub	r22, r18
    327c:	73 0b       	sbc	r23, r19
    327e:	84 0b       	sbc	r24, r20
    3280:	ba 0b       	sbc	r27, r26
    3282:	ee 1f       	adc	r30, r30
    3284:	88 f7       	brcc	.-30     	; 0x3268 <__divsf3_pse+0x94>
    3286:	e0 95       	com	r30
    3288:	08 95       	ret

0000328a <__fixsfsi>:
    328a:	0e 94 4c 19 	call	0x3298	; 0x3298 <__fixunssfsi>
    328e:	68 94       	set
    3290:	b1 11       	cpse	r27, r1
    3292:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__fp_szero>
    3296:	08 95       	ret

00003298 <__fixunssfsi>:
    3298:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__fp_splitA>
    329c:	88 f0       	brcs	.+34     	; 0x32c0 <__fixunssfsi+0x28>
    329e:	9f 57       	subi	r25, 0x7F	; 127
    32a0:	98 f0       	brcs	.+38     	; 0x32c8 <__fixunssfsi+0x30>
    32a2:	b9 2f       	mov	r27, r25
    32a4:	99 27       	eor	r25, r25
    32a6:	b7 51       	subi	r27, 0x17	; 23
    32a8:	b0 f0       	brcs	.+44     	; 0x32d6 <__fixunssfsi+0x3e>
    32aa:	e1 f0       	breq	.+56     	; 0x32e4 <__fixunssfsi+0x4c>
    32ac:	66 0f       	add	r22, r22
    32ae:	77 1f       	adc	r23, r23
    32b0:	88 1f       	adc	r24, r24
    32b2:	99 1f       	adc	r25, r25
    32b4:	1a f0       	brmi	.+6      	; 0x32bc <__fixunssfsi+0x24>
    32b6:	ba 95       	dec	r27
    32b8:	c9 f7       	brne	.-14     	; 0x32ac <__fixunssfsi+0x14>
    32ba:	14 c0       	rjmp	.+40     	; 0x32e4 <__fixunssfsi+0x4c>
    32bc:	b1 30       	cpi	r27, 0x01	; 1
    32be:	91 f0       	breq	.+36     	; 0x32e4 <__fixunssfsi+0x4c>
    32c0:	0e 94 81 1a 	call	0x3502	; 0x3502 <__fp_zero>
    32c4:	b1 e0       	ldi	r27, 0x01	; 1
    32c6:	08 95       	ret
    32c8:	0c 94 81 1a 	jmp	0x3502	; 0x3502 <__fp_zero>
    32cc:	67 2f       	mov	r22, r23
    32ce:	78 2f       	mov	r23, r24
    32d0:	88 27       	eor	r24, r24
    32d2:	b8 5f       	subi	r27, 0xF8	; 248
    32d4:	39 f0       	breq	.+14     	; 0x32e4 <__fixunssfsi+0x4c>
    32d6:	b9 3f       	cpi	r27, 0xF9	; 249
    32d8:	cc f3       	brlt	.-14     	; 0x32cc <__fixunssfsi+0x34>
    32da:	86 95       	lsr	r24
    32dc:	77 95       	ror	r23
    32de:	67 95       	ror	r22
    32e0:	b3 95       	inc	r27
    32e2:	d9 f7       	brne	.-10     	; 0x32da <__fixunssfsi+0x42>
    32e4:	3e f4       	brtc	.+14     	; 0x32f4 <__fixunssfsi+0x5c>
    32e6:	90 95       	com	r25
    32e8:	80 95       	com	r24
    32ea:	70 95       	com	r23
    32ec:	61 95       	neg	r22
    32ee:	7f 4f       	sbci	r23, 0xFF	; 255
    32f0:	8f 4f       	sbci	r24, 0xFF	; 255
    32f2:	9f 4f       	sbci	r25, 0xFF	; 255
    32f4:	08 95       	ret

000032f6 <__floatunsisf>:
    32f6:	e8 94       	clt
    32f8:	09 c0       	rjmp	.+18     	; 0x330c <__floatsisf+0x12>

000032fa <__floatsisf>:
    32fa:	97 fb       	bst	r25, 7
    32fc:	3e f4       	brtc	.+14     	; 0x330c <__floatsisf+0x12>
    32fe:	90 95       	com	r25
    3300:	80 95       	com	r24
    3302:	70 95       	com	r23
    3304:	61 95       	neg	r22
    3306:	7f 4f       	sbci	r23, 0xFF	; 255
    3308:	8f 4f       	sbci	r24, 0xFF	; 255
    330a:	9f 4f       	sbci	r25, 0xFF	; 255
    330c:	99 23       	and	r25, r25
    330e:	a9 f0       	breq	.+42     	; 0x333a <__floatsisf+0x40>
    3310:	f9 2f       	mov	r31, r25
    3312:	96 e9       	ldi	r25, 0x96	; 150
    3314:	bb 27       	eor	r27, r27
    3316:	93 95       	inc	r25
    3318:	f6 95       	lsr	r31
    331a:	87 95       	ror	r24
    331c:	77 95       	ror	r23
    331e:	67 95       	ror	r22
    3320:	b7 95       	ror	r27
    3322:	f1 11       	cpse	r31, r1
    3324:	f8 cf       	rjmp	.-16     	; 0x3316 <__floatsisf+0x1c>
    3326:	fa f4       	brpl	.+62     	; 0x3366 <__floatsisf+0x6c>
    3328:	bb 0f       	add	r27, r27
    332a:	11 f4       	brne	.+4      	; 0x3330 <__floatsisf+0x36>
    332c:	60 ff       	sbrs	r22, 0
    332e:	1b c0       	rjmp	.+54     	; 0x3366 <__floatsisf+0x6c>
    3330:	6f 5f       	subi	r22, 0xFF	; 255
    3332:	7f 4f       	sbci	r23, 0xFF	; 255
    3334:	8f 4f       	sbci	r24, 0xFF	; 255
    3336:	9f 4f       	sbci	r25, 0xFF	; 255
    3338:	16 c0       	rjmp	.+44     	; 0x3366 <__floatsisf+0x6c>
    333a:	88 23       	and	r24, r24
    333c:	11 f0       	breq	.+4      	; 0x3342 <__floatsisf+0x48>
    333e:	96 e9       	ldi	r25, 0x96	; 150
    3340:	11 c0       	rjmp	.+34     	; 0x3364 <__floatsisf+0x6a>
    3342:	77 23       	and	r23, r23
    3344:	21 f0       	breq	.+8      	; 0x334e <__floatsisf+0x54>
    3346:	9e e8       	ldi	r25, 0x8E	; 142
    3348:	87 2f       	mov	r24, r23
    334a:	76 2f       	mov	r23, r22
    334c:	05 c0       	rjmp	.+10     	; 0x3358 <__floatsisf+0x5e>
    334e:	66 23       	and	r22, r22
    3350:	71 f0       	breq	.+28     	; 0x336e <__floatsisf+0x74>
    3352:	96 e8       	ldi	r25, 0x86	; 134
    3354:	86 2f       	mov	r24, r22
    3356:	70 e0       	ldi	r23, 0x00	; 0
    3358:	60 e0       	ldi	r22, 0x00	; 0
    335a:	2a f0       	brmi	.+10     	; 0x3366 <__floatsisf+0x6c>
    335c:	9a 95       	dec	r25
    335e:	66 0f       	add	r22, r22
    3360:	77 1f       	adc	r23, r23
    3362:	88 1f       	adc	r24, r24
    3364:	da f7       	brpl	.-10     	; 0x335c <__floatsisf+0x62>
    3366:	88 0f       	add	r24, r24
    3368:	96 95       	lsr	r25
    336a:	87 95       	ror	r24
    336c:	97 f9       	bld	r25, 7
    336e:	08 95       	ret

00003370 <__fp_arccos>:
    3370:	df 93       	push	r29
    3372:	cf 93       	push	r28
    3374:	1f 93       	push	r17
    3376:	0f 93       	push	r16
    3378:	8b 01       	movw	r16, r22
    337a:	ec 01       	movw	r28, r24
    337c:	ed eb       	ldi	r30, 0xBD	; 189
    337e:	f0 e0       	ldi	r31, 0x00	; 0
    3380:	0e 94 05 1a 	call	0x340a	; 0x340a <__fp_powser>
    3384:	0e 94 4e 1a 	call	0x349c	; 0x349c <__fp_round>
    3388:	98 01       	movw	r18, r16
    338a:	ae 01       	movw	r20, r28
    338c:	8b 01       	movw	r16, r22
    338e:	ec 01       	movw	r28, r24
    3390:	60 e0       	ldi	r22, 0x00	; 0
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	80 e8       	ldi	r24, 0x80	; 128
    3396:	9f e3       	ldi	r25, 0x3F	; 63
    3398:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <__subsf3>
    339c:	0e 94 03 1b 	call	0x3606	; 0x3606 <sqrt>
    33a0:	98 01       	movw	r18, r16
    33a2:	ae 01       	movw	r20, r28
    33a4:	0f 91       	pop	r16
    33a6:	1f 91       	pop	r17
    33a8:	cf 91       	pop	r28
    33aa:	df 91       	pop	r29
    33ac:	0c 94 a3 1a 	jmp	0x3546	; 0x3546 <__mulsf3x>

000033b0 <__fp_cmp>:
    33b0:	99 0f       	add	r25, r25
    33b2:	00 08       	sbc	r0, r0
    33b4:	55 0f       	add	r21, r21
    33b6:	aa 0b       	sbc	r26, r26
    33b8:	e0 e8       	ldi	r30, 0x80	; 128
    33ba:	fe ef       	ldi	r31, 0xFE	; 254
    33bc:	16 16       	cp	r1, r22
    33be:	17 06       	cpc	r1, r23
    33c0:	e8 07       	cpc	r30, r24
    33c2:	f9 07       	cpc	r31, r25
    33c4:	c0 f0       	brcs	.+48     	; 0x33f6 <__fp_cmp+0x46>
    33c6:	12 16       	cp	r1, r18
    33c8:	13 06       	cpc	r1, r19
    33ca:	e4 07       	cpc	r30, r20
    33cc:	f5 07       	cpc	r31, r21
    33ce:	98 f0       	brcs	.+38     	; 0x33f6 <__fp_cmp+0x46>
    33d0:	62 1b       	sub	r22, r18
    33d2:	73 0b       	sbc	r23, r19
    33d4:	84 0b       	sbc	r24, r20
    33d6:	95 0b       	sbc	r25, r21
    33d8:	39 f4       	brne	.+14     	; 0x33e8 <__fp_cmp+0x38>
    33da:	0a 26       	eor	r0, r26
    33dc:	61 f0       	breq	.+24     	; 0x33f6 <__fp_cmp+0x46>
    33de:	23 2b       	or	r18, r19
    33e0:	24 2b       	or	r18, r20
    33e2:	25 2b       	or	r18, r21
    33e4:	21 f4       	brne	.+8      	; 0x33ee <__fp_cmp+0x3e>
    33e6:	08 95       	ret
    33e8:	0a 26       	eor	r0, r26
    33ea:	09 f4       	brne	.+2      	; 0x33ee <__fp_cmp+0x3e>
    33ec:	a1 40       	sbci	r26, 0x01	; 1
    33ee:	a6 95       	lsr	r26
    33f0:	8f ef       	ldi	r24, 0xFF	; 255
    33f2:	81 1d       	adc	r24, r1
    33f4:	81 1d       	adc	r24, r1
    33f6:	08 95       	ret

000033f8 <__fp_inf>:
    33f8:	97 f9       	bld	r25, 7
    33fa:	9f 67       	ori	r25, 0x7F	; 127
    33fc:	80 e8       	ldi	r24, 0x80	; 128
    33fe:	70 e0       	ldi	r23, 0x00	; 0
    3400:	60 e0       	ldi	r22, 0x00	; 0
    3402:	08 95       	ret

00003404 <__fp_nan>:
    3404:	9f ef       	ldi	r25, 0xFF	; 255
    3406:	80 ec       	ldi	r24, 0xC0	; 192
    3408:	08 95       	ret

0000340a <__fp_powser>:
    340a:	df 93       	push	r29
    340c:	cf 93       	push	r28
    340e:	1f 93       	push	r17
    3410:	0f 93       	push	r16
    3412:	ff 92       	push	r15
    3414:	ef 92       	push	r14
    3416:	df 92       	push	r13
    3418:	7b 01       	movw	r14, r22
    341a:	8c 01       	movw	r16, r24
    341c:	68 94       	set
    341e:	06 c0       	rjmp	.+12     	; 0x342c <__fp_powser+0x22>
    3420:	da 2e       	mov	r13, r26
    3422:	ef 01       	movw	r28, r30
    3424:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__mulsf3x>
    3428:	fe 01       	movw	r30, r28
    342a:	e8 94       	clt
    342c:	a5 91       	lpm	r26, Z+
    342e:	25 91       	lpm	r18, Z+
    3430:	35 91       	lpm	r19, Z+
    3432:	45 91       	lpm	r20, Z+
    3434:	55 91       	lpm	r21, Z+
    3436:	a6 f3       	brts	.-24     	; 0x3420 <__fp_powser+0x16>
    3438:	ef 01       	movw	r28, r30
    343a:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <__addsf3x>
    343e:	fe 01       	movw	r30, r28
    3440:	97 01       	movw	r18, r14
    3442:	a8 01       	movw	r20, r16
    3444:	da 94       	dec	r13
    3446:	69 f7       	brne	.-38     	; 0x3422 <__fp_powser+0x18>
    3448:	df 90       	pop	r13
    344a:	ef 90       	pop	r14
    344c:	ff 90       	pop	r15
    344e:	0f 91       	pop	r16
    3450:	1f 91       	pop	r17
    3452:	cf 91       	pop	r28
    3454:	df 91       	pop	r29
    3456:	08 95       	ret

00003458 <__fp_powsodd>:
    3458:	9f 93       	push	r25
    345a:	8f 93       	push	r24
    345c:	7f 93       	push	r23
    345e:	6f 93       	push	r22
    3460:	ff 93       	push	r31
    3462:	ef 93       	push	r30
    3464:	9b 01       	movw	r18, r22
    3466:	ac 01       	movw	r20, r24
    3468:	0e 94 90 1a 	call	0x3520	; 0x3520 <__mulsf3>
    346c:	ef 91       	pop	r30
    346e:	ff 91       	pop	r31
    3470:	0e 94 05 1a 	call	0x340a	; 0x340a <__fp_powser>
    3474:	2f 91       	pop	r18
    3476:	3f 91       	pop	r19
    3478:	4f 91       	pop	r20
    347a:	5f 91       	pop	r21
    347c:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__mulsf3>

00003480 <__fp_pscA>:
    3480:	00 24       	eor	r0, r0
    3482:	0a 94       	dec	r0
    3484:	16 16       	cp	r1, r22
    3486:	17 06       	cpc	r1, r23
    3488:	18 06       	cpc	r1, r24
    348a:	09 06       	cpc	r0, r25
    348c:	08 95       	ret

0000348e <__fp_pscB>:
    348e:	00 24       	eor	r0, r0
    3490:	0a 94       	dec	r0
    3492:	12 16       	cp	r1, r18
    3494:	13 06       	cpc	r1, r19
    3496:	14 06       	cpc	r1, r20
    3498:	05 06       	cpc	r0, r21
    349a:	08 95       	ret

0000349c <__fp_round>:
    349c:	09 2e       	mov	r0, r25
    349e:	03 94       	inc	r0
    34a0:	00 0c       	add	r0, r0
    34a2:	11 f4       	brne	.+4      	; 0x34a8 <__fp_round+0xc>
    34a4:	88 23       	and	r24, r24
    34a6:	52 f0       	brmi	.+20     	; 0x34bc <__fp_round+0x20>
    34a8:	bb 0f       	add	r27, r27
    34aa:	40 f4       	brcc	.+16     	; 0x34bc <__fp_round+0x20>
    34ac:	bf 2b       	or	r27, r31
    34ae:	11 f4       	brne	.+4      	; 0x34b4 <__fp_round+0x18>
    34b0:	60 ff       	sbrs	r22, 0
    34b2:	04 c0       	rjmp	.+8      	; 0x34bc <__fp_round+0x20>
    34b4:	6f 5f       	subi	r22, 0xFF	; 255
    34b6:	7f 4f       	sbci	r23, 0xFF	; 255
    34b8:	8f 4f       	sbci	r24, 0xFF	; 255
    34ba:	9f 4f       	sbci	r25, 0xFF	; 255
    34bc:	08 95       	ret

000034be <__fp_split3>:
    34be:	57 fd       	sbrc	r21, 7
    34c0:	90 58       	subi	r25, 0x80	; 128
    34c2:	44 0f       	add	r20, r20
    34c4:	55 1f       	adc	r21, r21
    34c6:	59 f0       	breq	.+22     	; 0x34de <__fp_splitA+0x10>
    34c8:	5f 3f       	cpi	r21, 0xFF	; 255
    34ca:	71 f0       	breq	.+28     	; 0x34e8 <__fp_splitA+0x1a>
    34cc:	47 95       	ror	r20

000034ce <__fp_splitA>:
    34ce:	88 0f       	add	r24, r24
    34d0:	97 fb       	bst	r25, 7
    34d2:	99 1f       	adc	r25, r25
    34d4:	61 f0       	breq	.+24     	; 0x34ee <__fp_splitA+0x20>
    34d6:	9f 3f       	cpi	r25, 0xFF	; 255
    34d8:	79 f0       	breq	.+30     	; 0x34f8 <__fp_splitA+0x2a>
    34da:	87 95       	ror	r24
    34dc:	08 95       	ret
    34de:	12 16       	cp	r1, r18
    34e0:	13 06       	cpc	r1, r19
    34e2:	14 06       	cpc	r1, r20
    34e4:	55 1f       	adc	r21, r21
    34e6:	f2 cf       	rjmp	.-28     	; 0x34cc <__fp_split3+0xe>
    34e8:	46 95       	lsr	r20
    34ea:	f1 df       	rcall	.-30     	; 0x34ce <__fp_splitA>
    34ec:	08 c0       	rjmp	.+16     	; 0x34fe <__fp_splitA+0x30>
    34ee:	16 16       	cp	r1, r22
    34f0:	17 06       	cpc	r1, r23
    34f2:	18 06       	cpc	r1, r24
    34f4:	99 1f       	adc	r25, r25
    34f6:	f1 cf       	rjmp	.-30     	; 0x34da <__fp_splitA+0xc>
    34f8:	86 95       	lsr	r24
    34fa:	71 05       	cpc	r23, r1
    34fc:	61 05       	cpc	r22, r1
    34fe:	08 94       	sec
    3500:	08 95       	ret

00003502 <__fp_zero>:
    3502:	e8 94       	clt

00003504 <__fp_szero>:
    3504:	bb 27       	eor	r27, r27
    3506:	66 27       	eor	r22, r22
    3508:	77 27       	eor	r23, r23
    350a:	cb 01       	movw	r24, r22
    350c:	97 f9       	bld	r25, 7
    350e:	08 95       	ret

00003510 <inverse>:
    3510:	9b 01       	movw	r18, r22
    3512:	ac 01       	movw	r20, r24
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	70 e0       	ldi	r23, 0x00	; 0
    3518:	80 e8       	ldi	r24, 0x80	; 128
    351a:	9f e3       	ldi	r25, 0x3F	; 63
    351c:	0c 94 d3 18 	jmp	0x31a6	; 0x31a6 <__divsf3>

00003520 <__mulsf3>:
    3520:	0e 94 a3 1a 	call	0x3546	; 0x3546 <__mulsf3x>
    3524:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__fp_round>
    3528:	0e 94 40 1a 	call	0x3480	; 0x3480 <__fp_pscA>
    352c:	38 f0       	brcs	.+14     	; 0x353c <__mulsf3+0x1c>
    352e:	0e 94 47 1a 	call	0x348e	; 0x348e <__fp_pscB>
    3532:	20 f0       	brcs	.+8      	; 0x353c <__mulsf3+0x1c>
    3534:	95 23       	and	r25, r21
    3536:	11 f0       	breq	.+4      	; 0x353c <__mulsf3+0x1c>
    3538:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>
    353c:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>
    3540:	11 24       	eor	r1, r1
    3542:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__fp_szero>

00003546 <__mulsf3x>:
    3546:	0e 94 5f 1a 	call	0x34be	; 0x34be <__fp_split3>
    354a:	70 f3       	brcs	.-36     	; 0x3528 <__mulsf3+0x8>

0000354c <__mulsf3_pse>:
    354c:	95 9f       	mul	r25, r21
    354e:	c1 f3       	breq	.-16     	; 0x3540 <__mulsf3+0x20>
    3550:	95 0f       	add	r25, r21
    3552:	50 e0       	ldi	r21, 0x00	; 0
    3554:	55 1f       	adc	r21, r21
    3556:	62 9f       	mul	r22, r18
    3558:	f0 01       	movw	r30, r0
    355a:	72 9f       	mul	r23, r18
    355c:	bb 27       	eor	r27, r27
    355e:	f0 0d       	add	r31, r0
    3560:	b1 1d       	adc	r27, r1
    3562:	63 9f       	mul	r22, r19
    3564:	aa 27       	eor	r26, r26
    3566:	f0 0d       	add	r31, r0
    3568:	b1 1d       	adc	r27, r1
    356a:	aa 1f       	adc	r26, r26
    356c:	64 9f       	mul	r22, r20
    356e:	66 27       	eor	r22, r22
    3570:	b0 0d       	add	r27, r0
    3572:	a1 1d       	adc	r26, r1
    3574:	66 1f       	adc	r22, r22
    3576:	82 9f       	mul	r24, r18
    3578:	22 27       	eor	r18, r18
    357a:	b0 0d       	add	r27, r0
    357c:	a1 1d       	adc	r26, r1
    357e:	62 1f       	adc	r22, r18
    3580:	73 9f       	mul	r23, r19
    3582:	b0 0d       	add	r27, r0
    3584:	a1 1d       	adc	r26, r1
    3586:	62 1f       	adc	r22, r18
    3588:	83 9f       	mul	r24, r19
    358a:	a0 0d       	add	r26, r0
    358c:	61 1d       	adc	r22, r1
    358e:	22 1f       	adc	r18, r18
    3590:	74 9f       	mul	r23, r20
    3592:	33 27       	eor	r19, r19
    3594:	a0 0d       	add	r26, r0
    3596:	61 1d       	adc	r22, r1
    3598:	23 1f       	adc	r18, r19
    359a:	84 9f       	mul	r24, r20
    359c:	60 0d       	add	r22, r0
    359e:	21 1d       	adc	r18, r1
    35a0:	82 2f       	mov	r24, r18
    35a2:	76 2f       	mov	r23, r22
    35a4:	6a 2f       	mov	r22, r26
    35a6:	11 24       	eor	r1, r1
    35a8:	9f 57       	subi	r25, 0x7F	; 127
    35aa:	50 40       	sbci	r21, 0x00	; 0
    35ac:	9a f0       	brmi	.+38     	; 0x35d4 <__mulsf3_pse+0x88>
    35ae:	f1 f0       	breq	.+60     	; 0x35ec <__mulsf3_pse+0xa0>
    35b0:	88 23       	and	r24, r24
    35b2:	4a f0       	brmi	.+18     	; 0x35c6 <__mulsf3_pse+0x7a>
    35b4:	ee 0f       	add	r30, r30
    35b6:	ff 1f       	adc	r31, r31
    35b8:	bb 1f       	adc	r27, r27
    35ba:	66 1f       	adc	r22, r22
    35bc:	77 1f       	adc	r23, r23
    35be:	88 1f       	adc	r24, r24
    35c0:	91 50       	subi	r25, 0x01	; 1
    35c2:	50 40       	sbci	r21, 0x00	; 0
    35c4:	a9 f7       	brne	.-22     	; 0x35b0 <__mulsf3_pse+0x64>
    35c6:	9e 3f       	cpi	r25, 0xFE	; 254
    35c8:	51 05       	cpc	r21, r1
    35ca:	80 f0       	brcs	.+32     	; 0x35ec <__mulsf3_pse+0xa0>
    35cc:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__fp_inf>
    35d0:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <__fp_szero>
    35d4:	5f 3f       	cpi	r21, 0xFF	; 255
    35d6:	e4 f3       	brlt	.-8      	; 0x35d0 <__mulsf3_pse+0x84>
    35d8:	98 3e       	cpi	r25, 0xE8	; 232
    35da:	d4 f3       	brlt	.-12     	; 0x35d0 <__mulsf3_pse+0x84>
    35dc:	86 95       	lsr	r24
    35de:	77 95       	ror	r23
    35e0:	67 95       	ror	r22
    35e2:	b7 95       	ror	r27
    35e4:	f7 95       	ror	r31
    35e6:	e7 95       	ror	r30
    35e8:	9f 5f       	subi	r25, 0xFF	; 255
    35ea:	c1 f7       	brne	.-16     	; 0x35dc <__mulsf3_pse+0x90>
    35ec:	fe 2b       	or	r31, r30
    35ee:	88 0f       	add	r24, r24
    35f0:	91 1d       	adc	r25, r1
    35f2:	96 95       	lsr	r25
    35f4:	87 95       	ror	r24
    35f6:	97 f9       	bld	r25, 7
    35f8:	08 95       	ret
    35fa:	19 f4       	brne	.+6      	; 0x3602 <__mulsf3_pse+0xb6>
    35fc:	16 f4       	brtc	.+4      	; 0x3602 <__mulsf3_pse+0xb6>
    35fe:	0c 94 02 1a 	jmp	0x3404	; 0x3404 <__fp_nan>
    3602:	0c 94 47 1b 	jmp	0x368e	; 0x368e <__fp_mpack>

00003606 <sqrt>:
    3606:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__fp_splitA>
    360a:	b8 f3       	brcs	.-18     	; 0x35fa <__mulsf3_pse+0xae>
    360c:	99 23       	and	r25, r25
    360e:	c9 f3       	breq	.-14     	; 0x3602 <__mulsf3_pse+0xb6>
    3610:	b6 f3       	brts	.-20     	; 0x35fe <__mulsf3_pse+0xb2>
    3612:	9f 57       	subi	r25, 0x7F	; 127
    3614:	55 0b       	sbc	r21, r21
    3616:	87 ff       	sbrs	r24, 7
    3618:	0e 94 55 1b 	call	0x36aa	; 0x36aa <__fp_norm2>
    361c:	00 24       	eor	r0, r0
    361e:	a0 e6       	ldi	r26, 0x60	; 96
    3620:	40 ea       	ldi	r20, 0xA0	; 160
    3622:	90 01       	movw	r18, r0
    3624:	80 58       	subi	r24, 0x80	; 128
    3626:	56 95       	lsr	r21
    3628:	97 95       	ror	r25
    362a:	28 f4       	brcc	.+10     	; 0x3636 <sqrt+0x30>
    362c:	80 5c       	subi	r24, 0xC0	; 192
    362e:	66 0f       	add	r22, r22
    3630:	77 1f       	adc	r23, r23
    3632:	88 1f       	adc	r24, r24
    3634:	20 f0       	brcs	.+8      	; 0x363e <sqrt+0x38>
    3636:	26 17       	cp	r18, r22
    3638:	37 07       	cpc	r19, r23
    363a:	48 07       	cpc	r20, r24
    363c:	30 f4       	brcc	.+12     	; 0x364a <sqrt+0x44>
    363e:	62 1b       	sub	r22, r18
    3640:	73 0b       	sbc	r23, r19
    3642:	84 0b       	sbc	r24, r20
    3644:	20 29       	or	r18, r0
    3646:	31 29       	or	r19, r1
    3648:	4a 2b       	or	r20, r26
    364a:	a6 95       	lsr	r26
    364c:	17 94       	ror	r1
    364e:	07 94       	ror	r0
    3650:	20 25       	eor	r18, r0
    3652:	31 25       	eor	r19, r1
    3654:	4a 27       	eor	r20, r26
    3656:	58 f7       	brcc	.-42     	; 0x362e <sqrt+0x28>
    3658:	66 0f       	add	r22, r22
    365a:	77 1f       	adc	r23, r23
    365c:	88 1f       	adc	r24, r24
    365e:	20 f0       	brcs	.+8      	; 0x3668 <sqrt+0x62>
    3660:	26 17       	cp	r18, r22
    3662:	37 07       	cpc	r19, r23
    3664:	48 07       	cpc	r20, r24
    3666:	30 f4       	brcc	.+12     	; 0x3674 <sqrt+0x6e>
    3668:	62 0b       	sbc	r22, r18
    366a:	73 0b       	sbc	r23, r19
    366c:	84 0b       	sbc	r24, r20
    366e:	20 0d       	add	r18, r0
    3670:	31 1d       	adc	r19, r1
    3672:	41 1d       	adc	r20, r1
    3674:	a0 95       	com	r26
    3676:	81 f7       	brne	.-32     	; 0x3658 <sqrt+0x52>
    3678:	b9 01       	movw	r22, r18
    367a:	84 2f       	mov	r24, r20
    367c:	91 58       	subi	r25, 0x81	; 129
    367e:	88 0f       	add	r24, r24
    3680:	96 95       	lsr	r25
    3682:	87 95       	ror	r24
    3684:	08 95       	ret

00003686 <square>:
    3686:	9b 01       	movw	r18, r22
    3688:	ac 01       	movw	r20, r24
    368a:	0c 94 90 1a 	jmp	0x3520	; 0x3520 <__mulsf3>

0000368e <__fp_mpack>:
    368e:	9f 3f       	cpi	r25, 0xFF	; 255
    3690:	31 f0       	breq	.+12     	; 0x369e <__fp_mpack_finite+0xc>

00003692 <__fp_mpack_finite>:
    3692:	91 50       	subi	r25, 0x01	; 1
    3694:	20 f4       	brcc	.+8      	; 0x369e <__fp_mpack_finite+0xc>
    3696:	87 95       	ror	r24
    3698:	77 95       	ror	r23
    369a:	67 95       	ror	r22
    369c:	b7 95       	ror	r27
    369e:	88 0f       	add	r24, r24
    36a0:	91 1d       	adc	r25, r1
    36a2:	96 95       	lsr	r25
    36a4:	87 95       	ror	r24
    36a6:	97 f9       	bld	r25, 7
    36a8:	08 95       	ret

000036aa <__fp_norm2>:
    36aa:	91 50       	subi	r25, 0x01	; 1
    36ac:	50 40       	sbci	r21, 0x00	; 0
    36ae:	66 0f       	add	r22, r22
    36b0:	77 1f       	adc	r23, r23
    36b2:	88 1f       	adc	r24, r24
    36b4:	d2 f7       	brpl	.-12     	; 0x36aa <__fp_norm2>
    36b6:	08 95       	ret

000036b8 <vfprintf>:
    36b8:	a0 e1       	ldi	r26, 0x10	; 16
    36ba:	b0 e0       	ldi	r27, 0x00	; 0
    36bc:	e2 e6       	ldi	r30, 0x62	; 98
    36be:	fb e1       	ldi	r31, 0x1B	; 27
    36c0:	0c 94 df 1e 	jmp	0x3dbe	; 0x3dbe <__prologue_saves__>
    36c4:	7c 01       	movw	r14, r24
    36c6:	1b 01       	movw	r2, r22
    36c8:	6a 01       	movw	r12, r20
    36ca:	fc 01       	movw	r30, r24
    36cc:	17 82       	std	Z+7, r1	; 0x07
    36ce:	16 82       	std	Z+6, r1	; 0x06
    36d0:	83 81       	ldd	r24, Z+3	; 0x03
    36d2:	81 ff       	sbrs	r24, 1
    36d4:	44 c3       	rjmp	.+1672   	; 0x3d5e <vfprintf+0x6a6>
    36d6:	9e 01       	movw	r18, r28
    36d8:	2f 5f       	subi	r18, 0xFF	; 255
    36da:	3f 4f       	sbci	r19, 0xFF	; 255
    36dc:	39 01       	movw	r6, r18
    36de:	f7 01       	movw	r30, r14
    36e0:	93 81       	ldd	r25, Z+3	; 0x03
    36e2:	f1 01       	movw	r30, r2
    36e4:	93 fd       	sbrc	r25, 3
    36e6:	85 91       	lpm	r24, Z+
    36e8:	93 ff       	sbrs	r25, 3
    36ea:	81 91       	ld	r24, Z+
    36ec:	1f 01       	movw	r2, r30
    36ee:	88 23       	and	r24, r24
    36f0:	09 f4       	brne	.+2      	; 0x36f4 <vfprintf+0x3c>
    36f2:	31 c3       	rjmp	.+1634   	; 0x3d56 <vfprintf+0x69e>
    36f4:	85 32       	cpi	r24, 0x25	; 37
    36f6:	39 f4       	brne	.+14     	; 0x3706 <vfprintf+0x4e>
    36f8:	93 fd       	sbrc	r25, 3
    36fa:	85 91       	lpm	r24, Z+
    36fc:	93 ff       	sbrs	r25, 3
    36fe:	81 91       	ld	r24, Z+
    3700:	1f 01       	movw	r2, r30
    3702:	85 32       	cpi	r24, 0x25	; 37
    3704:	39 f4       	brne	.+14     	; 0x3714 <vfprintf+0x5c>
    3706:	b7 01       	movw	r22, r14
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    370e:	56 01       	movw	r10, r12
    3710:	65 01       	movw	r12, r10
    3712:	e5 cf       	rjmp	.-54     	; 0x36de <vfprintf+0x26>
    3714:	10 e0       	ldi	r17, 0x00	; 0
    3716:	51 2c       	mov	r5, r1
    3718:	91 2c       	mov	r9, r1
    371a:	ff e1       	ldi	r31, 0x1F	; 31
    371c:	f9 15       	cp	r31, r9
    371e:	d8 f0       	brcs	.+54     	; 0x3756 <vfprintf+0x9e>
    3720:	8b 32       	cpi	r24, 0x2B	; 43
    3722:	79 f0       	breq	.+30     	; 0x3742 <vfprintf+0x8a>
    3724:	38 f4       	brcc	.+14     	; 0x3734 <vfprintf+0x7c>
    3726:	80 32       	cpi	r24, 0x20	; 32
    3728:	79 f0       	breq	.+30     	; 0x3748 <vfprintf+0x90>
    372a:	83 32       	cpi	r24, 0x23	; 35
    372c:	a1 f4       	brne	.+40     	; 0x3756 <vfprintf+0x9e>
    372e:	f9 2d       	mov	r31, r9
    3730:	f0 61       	ori	r31, 0x10	; 16
    3732:	2e c0       	rjmp	.+92     	; 0x3790 <vfprintf+0xd8>
    3734:	8d 32       	cpi	r24, 0x2D	; 45
    3736:	61 f0       	breq	.+24     	; 0x3750 <vfprintf+0x98>
    3738:	80 33       	cpi	r24, 0x30	; 48
    373a:	69 f4       	brne	.+26     	; 0x3756 <vfprintf+0x9e>
    373c:	29 2d       	mov	r18, r9
    373e:	21 60       	ori	r18, 0x01	; 1
    3740:	2d c0       	rjmp	.+90     	; 0x379c <vfprintf+0xe4>
    3742:	39 2d       	mov	r19, r9
    3744:	32 60       	ori	r19, 0x02	; 2
    3746:	93 2e       	mov	r9, r19
    3748:	89 2d       	mov	r24, r9
    374a:	84 60       	ori	r24, 0x04	; 4
    374c:	98 2e       	mov	r9, r24
    374e:	2a c0       	rjmp	.+84     	; 0x37a4 <vfprintf+0xec>
    3750:	e9 2d       	mov	r30, r9
    3752:	e8 60       	ori	r30, 0x08	; 8
    3754:	15 c0       	rjmp	.+42     	; 0x3780 <vfprintf+0xc8>
    3756:	97 fc       	sbrc	r9, 7
    3758:	2d c0       	rjmp	.+90     	; 0x37b4 <vfprintf+0xfc>
    375a:	20 ed       	ldi	r18, 0xD0	; 208
    375c:	28 0f       	add	r18, r24
    375e:	2a 30       	cpi	r18, 0x0A	; 10
    3760:	88 f4       	brcc	.+34     	; 0x3784 <vfprintf+0xcc>
    3762:	96 fe       	sbrs	r9, 6
    3764:	06 c0       	rjmp	.+12     	; 0x3772 <vfprintf+0xba>
    3766:	3a e0       	ldi	r19, 0x0A	; 10
    3768:	13 9f       	mul	r17, r19
    376a:	20 0d       	add	r18, r0
    376c:	11 24       	eor	r1, r1
    376e:	12 2f       	mov	r17, r18
    3770:	19 c0       	rjmp	.+50     	; 0x37a4 <vfprintf+0xec>
    3772:	8a e0       	ldi	r24, 0x0A	; 10
    3774:	58 9e       	mul	r5, r24
    3776:	20 0d       	add	r18, r0
    3778:	11 24       	eor	r1, r1
    377a:	52 2e       	mov	r5, r18
    377c:	e9 2d       	mov	r30, r9
    377e:	e0 62       	ori	r30, 0x20	; 32
    3780:	9e 2e       	mov	r9, r30
    3782:	10 c0       	rjmp	.+32     	; 0x37a4 <vfprintf+0xec>
    3784:	8e 32       	cpi	r24, 0x2E	; 46
    3786:	31 f4       	brne	.+12     	; 0x3794 <vfprintf+0xdc>
    3788:	96 fc       	sbrc	r9, 6
    378a:	e5 c2       	rjmp	.+1482   	; 0x3d56 <vfprintf+0x69e>
    378c:	f9 2d       	mov	r31, r9
    378e:	f0 64       	ori	r31, 0x40	; 64
    3790:	9f 2e       	mov	r9, r31
    3792:	08 c0       	rjmp	.+16     	; 0x37a4 <vfprintf+0xec>
    3794:	8c 36       	cpi	r24, 0x6C	; 108
    3796:	21 f4       	brne	.+8      	; 0x37a0 <vfprintf+0xe8>
    3798:	29 2d       	mov	r18, r9
    379a:	20 68       	ori	r18, 0x80	; 128
    379c:	92 2e       	mov	r9, r18
    379e:	02 c0       	rjmp	.+4      	; 0x37a4 <vfprintf+0xec>
    37a0:	88 36       	cpi	r24, 0x68	; 104
    37a2:	41 f4       	brne	.+16     	; 0x37b4 <vfprintf+0xfc>
    37a4:	f1 01       	movw	r30, r2
    37a6:	93 fd       	sbrc	r25, 3
    37a8:	85 91       	lpm	r24, Z+
    37aa:	93 ff       	sbrs	r25, 3
    37ac:	81 91       	ld	r24, Z+
    37ae:	1f 01       	movw	r2, r30
    37b0:	81 11       	cpse	r24, r1
    37b2:	b3 cf       	rjmp	.-154    	; 0x371a <vfprintf+0x62>
    37b4:	9b eb       	ldi	r25, 0xBB	; 187
    37b6:	98 0f       	add	r25, r24
    37b8:	93 30       	cpi	r25, 0x03	; 3
    37ba:	20 f4       	brcc	.+8      	; 0x37c4 <vfprintf+0x10c>
    37bc:	99 2d       	mov	r25, r9
    37be:	90 61       	ori	r25, 0x10	; 16
    37c0:	80 5e       	subi	r24, 0xE0	; 224
    37c2:	07 c0       	rjmp	.+14     	; 0x37d2 <vfprintf+0x11a>
    37c4:	9b e9       	ldi	r25, 0x9B	; 155
    37c6:	98 0f       	add	r25, r24
    37c8:	93 30       	cpi	r25, 0x03	; 3
    37ca:	08 f0       	brcs	.+2      	; 0x37ce <vfprintf+0x116>
    37cc:	66 c1       	rjmp	.+716    	; 0x3a9a <vfprintf+0x3e2>
    37ce:	99 2d       	mov	r25, r9
    37d0:	9f 7e       	andi	r25, 0xEF	; 239
    37d2:	96 ff       	sbrs	r25, 6
    37d4:	16 e0       	ldi	r17, 0x06	; 6
    37d6:	9f 73       	andi	r25, 0x3F	; 63
    37d8:	99 2e       	mov	r9, r25
    37da:	85 36       	cpi	r24, 0x65	; 101
    37dc:	19 f4       	brne	.+6      	; 0x37e4 <vfprintf+0x12c>
    37de:	90 64       	ori	r25, 0x40	; 64
    37e0:	99 2e       	mov	r9, r25
    37e2:	08 c0       	rjmp	.+16     	; 0x37f4 <vfprintf+0x13c>
    37e4:	86 36       	cpi	r24, 0x66	; 102
    37e6:	21 f4       	brne	.+8      	; 0x37f0 <vfprintf+0x138>
    37e8:	39 2f       	mov	r19, r25
    37ea:	30 68       	ori	r19, 0x80	; 128
    37ec:	93 2e       	mov	r9, r19
    37ee:	02 c0       	rjmp	.+4      	; 0x37f4 <vfprintf+0x13c>
    37f0:	11 11       	cpse	r17, r1
    37f2:	11 50       	subi	r17, 0x01	; 1
    37f4:	97 fe       	sbrs	r9, 7
    37f6:	07 c0       	rjmp	.+14     	; 0x3806 <vfprintf+0x14e>
    37f8:	1c 33       	cpi	r17, 0x3C	; 60
    37fa:	50 f4       	brcc	.+20     	; 0x3810 <vfprintf+0x158>
    37fc:	44 24       	eor	r4, r4
    37fe:	43 94       	inc	r4
    3800:	41 0e       	add	r4, r17
    3802:	27 e0       	ldi	r18, 0x07	; 7
    3804:	0b c0       	rjmp	.+22     	; 0x381c <vfprintf+0x164>
    3806:	18 30       	cpi	r17, 0x08	; 8
    3808:	38 f0       	brcs	.+14     	; 0x3818 <vfprintf+0x160>
    380a:	27 e0       	ldi	r18, 0x07	; 7
    380c:	17 e0       	ldi	r17, 0x07	; 7
    380e:	05 c0       	rjmp	.+10     	; 0x381a <vfprintf+0x162>
    3810:	27 e0       	ldi	r18, 0x07	; 7
    3812:	9c e3       	ldi	r25, 0x3C	; 60
    3814:	49 2e       	mov	r4, r25
    3816:	02 c0       	rjmp	.+4      	; 0x381c <vfprintf+0x164>
    3818:	21 2f       	mov	r18, r17
    381a:	41 2c       	mov	r4, r1
    381c:	56 01       	movw	r10, r12
    381e:	84 e0       	ldi	r24, 0x04	; 4
    3820:	a8 0e       	add	r10, r24
    3822:	b1 1c       	adc	r11, r1
    3824:	f6 01       	movw	r30, r12
    3826:	60 81       	ld	r22, Z
    3828:	71 81       	ldd	r23, Z+1	; 0x01
    382a:	82 81       	ldd	r24, Z+2	; 0x02
    382c:	93 81       	ldd	r25, Z+3	; 0x03
    382e:	04 2d       	mov	r16, r4
    3830:	a3 01       	movw	r20, r6
    3832:	0e 94 37 20 	call	0x406e	; 0x406e <__ftoa_engine>
    3836:	6c 01       	movw	r12, r24
    3838:	f9 81       	ldd	r31, Y+1	; 0x01
    383a:	fc 87       	std	Y+12, r31	; 0x0c
    383c:	f0 ff       	sbrs	r31, 0
    383e:	02 c0       	rjmp	.+4      	; 0x3844 <vfprintf+0x18c>
    3840:	f3 ff       	sbrs	r31, 3
    3842:	06 c0       	rjmp	.+12     	; 0x3850 <vfprintf+0x198>
    3844:	91 fc       	sbrc	r9, 1
    3846:	06 c0       	rjmp	.+12     	; 0x3854 <vfprintf+0x19c>
    3848:	92 fe       	sbrs	r9, 2
    384a:	06 c0       	rjmp	.+12     	; 0x3858 <vfprintf+0x1a0>
    384c:	00 e2       	ldi	r16, 0x20	; 32
    384e:	05 c0       	rjmp	.+10     	; 0x385a <vfprintf+0x1a2>
    3850:	0d e2       	ldi	r16, 0x2D	; 45
    3852:	03 c0       	rjmp	.+6      	; 0x385a <vfprintf+0x1a2>
    3854:	0b e2       	ldi	r16, 0x2B	; 43
    3856:	01 c0       	rjmp	.+2      	; 0x385a <vfprintf+0x1a2>
    3858:	00 e0       	ldi	r16, 0x00	; 0
    385a:	8c 85       	ldd	r24, Y+12	; 0x0c
    385c:	8c 70       	andi	r24, 0x0C	; 12
    385e:	19 f0       	breq	.+6      	; 0x3866 <vfprintf+0x1ae>
    3860:	01 11       	cpse	r16, r1
    3862:	5a c2       	rjmp	.+1204   	; 0x3d18 <vfprintf+0x660>
    3864:	9b c2       	rjmp	.+1334   	; 0x3d9c <vfprintf+0x6e4>
    3866:	97 fe       	sbrs	r9, 7
    3868:	10 c0       	rjmp	.+32     	; 0x388a <vfprintf+0x1d2>
    386a:	4c 0c       	add	r4, r12
    386c:	fc 85       	ldd	r31, Y+12	; 0x0c
    386e:	f4 ff       	sbrs	r31, 4
    3870:	04 c0       	rjmp	.+8      	; 0x387a <vfprintf+0x1c2>
    3872:	8a 81       	ldd	r24, Y+2	; 0x02
    3874:	81 33       	cpi	r24, 0x31	; 49
    3876:	09 f4       	brne	.+2      	; 0x387a <vfprintf+0x1c2>
    3878:	4a 94       	dec	r4
    387a:	14 14       	cp	r1, r4
    387c:	74 f5       	brge	.+92     	; 0x38da <vfprintf+0x222>
    387e:	28 e0       	ldi	r18, 0x08	; 8
    3880:	24 15       	cp	r18, r4
    3882:	78 f5       	brcc	.+94     	; 0x38e2 <vfprintf+0x22a>
    3884:	88 e0       	ldi	r24, 0x08	; 8
    3886:	48 2e       	mov	r4, r24
    3888:	2c c0       	rjmp	.+88     	; 0x38e2 <vfprintf+0x22a>
    388a:	96 fc       	sbrc	r9, 6
    388c:	2a c0       	rjmp	.+84     	; 0x38e2 <vfprintf+0x22a>
    388e:	81 2f       	mov	r24, r17
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	8c 15       	cp	r24, r12
    3894:	9d 05       	cpc	r25, r13
    3896:	9c f0       	brlt	.+38     	; 0x38be <vfprintf+0x206>
    3898:	3c ef       	ldi	r19, 0xFC	; 252
    389a:	c3 16       	cp	r12, r19
    389c:	3f ef       	ldi	r19, 0xFF	; 255
    389e:	d3 06       	cpc	r13, r19
    38a0:	74 f0       	brlt	.+28     	; 0x38be <vfprintf+0x206>
    38a2:	89 2d       	mov	r24, r9
    38a4:	80 68       	ori	r24, 0x80	; 128
    38a6:	98 2e       	mov	r9, r24
    38a8:	0a c0       	rjmp	.+20     	; 0x38be <vfprintf+0x206>
    38aa:	e2 e0       	ldi	r30, 0x02	; 2
    38ac:	f0 e0       	ldi	r31, 0x00	; 0
    38ae:	ec 0f       	add	r30, r28
    38b0:	fd 1f       	adc	r31, r29
    38b2:	e1 0f       	add	r30, r17
    38b4:	f1 1d       	adc	r31, r1
    38b6:	80 81       	ld	r24, Z
    38b8:	80 33       	cpi	r24, 0x30	; 48
    38ba:	19 f4       	brne	.+6      	; 0x38c2 <vfprintf+0x20a>
    38bc:	11 50       	subi	r17, 0x01	; 1
    38be:	11 11       	cpse	r17, r1
    38c0:	f4 cf       	rjmp	.-24     	; 0x38aa <vfprintf+0x1f2>
    38c2:	97 fe       	sbrs	r9, 7
    38c4:	0e c0       	rjmp	.+28     	; 0x38e2 <vfprintf+0x22a>
    38c6:	44 24       	eor	r4, r4
    38c8:	43 94       	inc	r4
    38ca:	41 0e       	add	r4, r17
    38cc:	81 2f       	mov	r24, r17
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	c8 16       	cp	r12, r24
    38d2:	d9 06       	cpc	r13, r25
    38d4:	2c f4       	brge	.+10     	; 0x38e0 <vfprintf+0x228>
    38d6:	1c 19       	sub	r17, r12
    38d8:	04 c0       	rjmp	.+8      	; 0x38e2 <vfprintf+0x22a>
    38da:	44 24       	eor	r4, r4
    38dc:	43 94       	inc	r4
    38de:	01 c0       	rjmp	.+2      	; 0x38e2 <vfprintf+0x22a>
    38e0:	10 e0       	ldi	r17, 0x00	; 0
    38e2:	97 fe       	sbrs	r9, 7
    38e4:	06 c0       	rjmp	.+12     	; 0x38f2 <vfprintf+0x23a>
    38e6:	1c 14       	cp	r1, r12
    38e8:	1d 04       	cpc	r1, r13
    38ea:	34 f4       	brge	.+12     	; 0x38f8 <vfprintf+0x240>
    38ec:	c6 01       	movw	r24, r12
    38ee:	01 96       	adiw	r24, 0x01	; 1
    38f0:	05 c0       	rjmp	.+10     	; 0x38fc <vfprintf+0x244>
    38f2:	85 e0       	ldi	r24, 0x05	; 5
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	02 c0       	rjmp	.+4      	; 0x38fc <vfprintf+0x244>
    38f8:	81 e0       	ldi	r24, 0x01	; 1
    38fa:	90 e0       	ldi	r25, 0x00	; 0
    38fc:	01 11       	cpse	r16, r1
    38fe:	01 96       	adiw	r24, 0x01	; 1
    3900:	11 23       	and	r17, r17
    3902:	31 f0       	breq	.+12     	; 0x3910 <vfprintf+0x258>
    3904:	21 2f       	mov	r18, r17
    3906:	30 e0       	ldi	r19, 0x00	; 0
    3908:	2f 5f       	subi	r18, 0xFF	; 255
    390a:	3f 4f       	sbci	r19, 0xFF	; 255
    390c:	82 0f       	add	r24, r18
    390e:	93 1f       	adc	r25, r19
    3910:	25 2d       	mov	r18, r5
    3912:	30 e0       	ldi	r19, 0x00	; 0
    3914:	82 17       	cp	r24, r18
    3916:	93 07       	cpc	r25, r19
    3918:	14 f4       	brge	.+4      	; 0x391e <vfprintf+0x266>
    391a:	58 1a       	sub	r5, r24
    391c:	01 c0       	rjmp	.+2      	; 0x3920 <vfprintf+0x268>
    391e:	51 2c       	mov	r5, r1
    3920:	89 2d       	mov	r24, r9
    3922:	89 70       	andi	r24, 0x09	; 9
    3924:	49 f4       	brne	.+18     	; 0x3938 <vfprintf+0x280>
    3926:	55 20       	and	r5, r5
    3928:	39 f0       	breq	.+14     	; 0x3938 <vfprintf+0x280>
    392a:	b7 01       	movw	r22, r14
    392c:	80 e2       	ldi	r24, 0x20	; 32
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3934:	5a 94       	dec	r5
    3936:	f7 cf       	rjmp	.-18     	; 0x3926 <vfprintf+0x26e>
    3938:	00 23       	and	r16, r16
    393a:	29 f0       	breq	.+10     	; 0x3946 <vfprintf+0x28e>
    393c:	b7 01       	movw	r22, r14
    393e:	80 2f       	mov	r24, r16
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3946:	93 fc       	sbrc	r9, 3
    3948:	09 c0       	rjmp	.+18     	; 0x395c <vfprintf+0x2a4>
    394a:	55 20       	and	r5, r5
    394c:	39 f0       	breq	.+14     	; 0x395c <vfprintf+0x2a4>
    394e:	b7 01       	movw	r22, r14
    3950:	80 e3       	ldi	r24, 0x30	; 48
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3958:	5a 94       	dec	r5
    395a:	f7 cf       	rjmp	.-18     	; 0x394a <vfprintf+0x292>
    395c:	97 fe       	sbrs	r9, 7
    395e:	4c c0       	rjmp	.+152    	; 0x39f8 <vfprintf+0x340>
    3960:	46 01       	movw	r8, r12
    3962:	d7 fe       	sbrs	r13, 7
    3964:	02 c0       	rjmp	.+4      	; 0x396a <vfprintf+0x2b2>
    3966:	81 2c       	mov	r8, r1
    3968:	91 2c       	mov	r9, r1
    396a:	c6 01       	movw	r24, r12
    396c:	88 19       	sub	r24, r8
    396e:	99 09       	sbc	r25, r9
    3970:	f3 01       	movw	r30, r6
    3972:	e8 0f       	add	r30, r24
    3974:	f9 1f       	adc	r31, r25
    3976:	fe 87       	std	Y+14, r31	; 0x0e
    3978:	ed 87       	std	Y+13, r30	; 0x0d
    397a:	96 01       	movw	r18, r12
    397c:	24 19       	sub	r18, r4
    397e:	31 09       	sbc	r19, r1
    3980:	38 8b       	std	Y+16, r19	; 0x10
    3982:	2f 87       	std	Y+15, r18	; 0x0f
    3984:	01 2f       	mov	r16, r17
    3986:	10 e0       	ldi	r17, 0x00	; 0
    3988:	11 95       	neg	r17
    398a:	01 95       	neg	r16
    398c:	11 09       	sbc	r17, r1
    398e:	3f ef       	ldi	r19, 0xFF	; 255
    3990:	83 16       	cp	r8, r19
    3992:	93 06       	cpc	r9, r19
    3994:	29 f4       	brne	.+10     	; 0x39a0 <vfprintf+0x2e8>
    3996:	b7 01       	movw	r22, r14
    3998:	8e e2       	ldi	r24, 0x2E	; 46
    399a:	90 e0       	ldi	r25, 0x00	; 0
    399c:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    39a0:	c8 14       	cp	r12, r8
    39a2:	d9 04       	cpc	r13, r9
    39a4:	4c f0       	brlt	.+18     	; 0x39b8 <vfprintf+0x300>
    39a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    39a8:	98 89       	ldd	r25, Y+16	; 0x10
    39aa:	88 15       	cp	r24, r8
    39ac:	99 05       	cpc	r25, r9
    39ae:	24 f4       	brge	.+8      	; 0x39b8 <vfprintf+0x300>
    39b0:	ed 85       	ldd	r30, Y+13	; 0x0d
    39b2:	fe 85       	ldd	r31, Y+14	; 0x0e
    39b4:	81 81       	ldd	r24, Z+1	; 0x01
    39b6:	01 c0       	rjmp	.+2      	; 0x39ba <vfprintf+0x302>
    39b8:	80 e3       	ldi	r24, 0x30	; 48
    39ba:	f1 e0       	ldi	r31, 0x01	; 1
    39bc:	8f 1a       	sub	r8, r31
    39be:	91 08       	sbc	r9, r1
    39c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    39c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    39c4:	2f 5f       	subi	r18, 0xFF	; 255
    39c6:	3f 4f       	sbci	r19, 0xFF	; 255
    39c8:	3e 87       	std	Y+14, r19	; 0x0e
    39ca:	2d 87       	std	Y+13, r18	; 0x0d
    39cc:	80 16       	cp	r8, r16
    39ce:	91 06       	cpc	r9, r17
    39d0:	2c f0       	brlt	.+10     	; 0x39dc <vfprintf+0x324>
    39d2:	b7 01       	movw	r22, r14
    39d4:	90 e0       	ldi	r25, 0x00	; 0
    39d6:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    39da:	d9 cf       	rjmp	.-78     	; 0x398e <vfprintf+0x2d6>
    39dc:	c8 14       	cp	r12, r8
    39de:	d9 04       	cpc	r13, r9
    39e0:	41 f4       	brne	.+16     	; 0x39f2 <vfprintf+0x33a>
    39e2:	9a 81       	ldd	r25, Y+2	; 0x02
    39e4:	96 33       	cpi	r25, 0x36	; 54
    39e6:	20 f4       	brcc	.+8      	; 0x39f0 <vfprintf+0x338>
    39e8:	95 33       	cpi	r25, 0x35	; 53
    39ea:	19 f4       	brne	.+6      	; 0x39f2 <vfprintf+0x33a>
    39ec:	3c 85       	ldd	r19, Y+12	; 0x0c
    39ee:	34 ff       	sbrs	r19, 4
    39f0:	81 e3       	ldi	r24, 0x31	; 49
    39f2:	b7 01       	movw	r22, r14
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	4e c0       	rjmp	.+156    	; 0x3a94 <vfprintf+0x3dc>
    39f8:	8a 81       	ldd	r24, Y+2	; 0x02
    39fa:	81 33       	cpi	r24, 0x31	; 49
    39fc:	19 f0       	breq	.+6      	; 0x3a04 <vfprintf+0x34c>
    39fe:	9c 85       	ldd	r25, Y+12	; 0x0c
    3a00:	9f 7e       	andi	r25, 0xEF	; 239
    3a02:	9c 87       	std	Y+12, r25	; 0x0c
    3a04:	b7 01       	movw	r22, r14
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3a0c:	11 11       	cpse	r17, r1
    3a0e:	05 c0       	rjmp	.+10     	; 0x3a1a <vfprintf+0x362>
    3a10:	94 fc       	sbrc	r9, 4
    3a12:	18 c0       	rjmp	.+48     	; 0x3a44 <vfprintf+0x38c>
    3a14:	85 e6       	ldi	r24, 0x65	; 101
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	17 c0       	rjmp	.+46     	; 0x3a48 <vfprintf+0x390>
    3a1a:	b7 01       	movw	r22, r14
    3a1c:	8e e2       	ldi	r24, 0x2E	; 46
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3a24:	1e 5f       	subi	r17, 0xFE	; 254
    3a26:	82 e0       	ldi	r24, 0x02	; 2
    3a28:	01 e0       	ldi	r16, 0x01	; 1
    3a2a:	08 0f       	add	r16, r24
    3a2c:	f3 01       	movw	r30, r6
    3a2e:	e8 0f       	add	r30, r24
    3a30:	f1 1d       	adc	r31, r1
    3a32:	80 81       	ld	r24, Z
    3a34:	b7 01       	movw	r22, r14
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3a3c:	80 2f       	mov	r24, r16
    3a3e:	01 13       	cpse	r16, r17
    3a40:	f3 cf       	rjmp	.-26     	; 0x3a28 <vfprintf+0x370>
    3a42:	e6 cf       	rjmp	.-52     	; 0x3a10 <vfprintf+0x358>
    3a44:	85 e4       	ldi	r24, 0x45	; 69
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	b7 01       	movw	r22, r14
    3a4a:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3a4e:	d7 fc       	sbrc	r13, 7
    3a50:	06 c0       	rjmp	.+12     	; 0x3a5e <vfprintf+0x3a6>
    3a52:	c1 14       	cp	r12, r1
    3a54:	d1 04       	cpc	r13, r1
    3a56:	41 f4       	brne	.+16     	; 0x3a68 <vfprintf+0x3b0>
    3a58:	ec 85       	ldd	r30, Y+12	; 0x0c
    3a5a:	e4 ff       	sbrs	r30, 4
    3a5c:	05 c0       	rjmp	.+10     	; 0x3a68 <vfprintf+0x3b0>
    3a5e:	d1 94       	neg	r13
    3a60:	c1 94       	neg	r12
    3a62:	d1 08       	sbc	r13, r1
    3a64:	8d e2       	ldi	r24, 0x2D	; 45
    3a66:	01 c0       	rjmp	.+2      	; 0x3a6a <vfprintf+0x3b2>
    3a68:	8b e2       	ldi	r24, 0x2B	; 43
    3a6a:	b7 01       	movw	r22, r14
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3a72:	80 e3       	ldi	r24, 0x30	; 48
    3a74:	2a e0       	ldi	r18, 0x0A	; 10
    3a76:	c2 16       	cp	r12, r18
    3a78:	d1 04       	cpc	r13, r1
    3a7a:	2c f0       	brlt	.+10     	; 0x3a86 <vfprintf+0x3ce>
    3a7c:	8f 5f       	subi	r24, 0xFF	; 255
    3a7e:	fa e0       	ldi	r31, 0x0A	; 10
    3a80:	cf 1a       	sub	r12, r31
    3a82:	d1 08       	sbc	r13, r1
    3a84:	f7 cf       	rjmp	.-18     	; 0x3a74 <vfprintf+0x3bc>
    3a86:	b7 01       	movw	r22, r14
    3a88:	90 e0       	ldi	r25, 0x00	; 0
    3a8a:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3a8e:	b7 01       	movw	r22, r14
    3a90:	c6 01       	movw	r24, r12
    3a92:	c0 96       	adiw	r24, 0x30	; 48
    3a94:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3a98:	54 c1       	rjmp	.+680    	; 0x3d42 <vfprintf+0x68a>
    3a9a:	83 36       	cpi	r24, 0x63	; 99
    3a9c:	31 f0       	breq	.+12     	; 0x3aaa <vfprintf+0x3f2>
    3a9e:	83 37       	cpi	r24, 0x73	; 115
    3aa0:	79 f0       	breq	.+30     	; 0x3ac0 <vfprintf+0x408>
    3aa2:	83 35       	cpi	r24, 0x53	; 83
    3aa4:	09 f0       	breq	.+2      	; 0x3aa8 <vfprintf+0x3f0>
    3aa6:	56 c0       	rjmp	.+172    	; 0x3b54 <vfprintf+0x49c>
    3aa8:	20 c0       	rjmp	.+64     	; 0x3aea <vfprintf+0x432>
    3aaa:	56 01       	movw	r10, r12
    3aac:	32 e0       	ldi	r19, 0x02	; 2
    3aae:	a3 0e       	add	r10, r19
    3ab0:	b1 1c       	adc	r11, r1
    3ab2:	f6 01       	movw	r30, r12
    3ab4:	80 81       	ld	r24, Z
    3ab6:	89 83       	std	Y+1, r24	; 0x01
    3ab8:	01 e0       	ldi	r16, 0x01	; 1
    3aba:	10 e0       	ldi	r17, 0x00	; 0
    3abc:	63 01       	movw	r12, r6
    3abe:	12 c0       	rjmp	.+36     	; 0x3ae4 <vfprintf+0x42c>
    3ac0:	56 01       	movw	r10, r12
    3ac2:	f2 e0       	ldi	r31, 0x02	; 2
    3ac4:	af 0e       	add	r10, r31
    3ac6:	b1 1c       	adc	r11, r1
    3ac8:	f6 01       	movw	r30, r12
    3aca:	c0 80       	ld	r12, Z
    3acc:	d1 80       	ldd	r13, Z+1	; 0x01
    3ace:	96 fe       	sbrs	r9, 6
    3ad0:	03 c0       	rjmp	.+6      	; 0x3ad8 <vfprintf+0x420>
    3ad2:	61 2f       	mov	r22, r17
    3ad4:	70 e0       	ldi	r23, 0x00	; 0
    3ad6:	02 c0       	rjmp	.+4      	; 0x3adc <vfprintf+0x424>
    3ad8:	6f ef       	ldi	r22, 0xFF	; 255
    3ada:	7f ef       	ldi	r23, 0xFF	; 255
    3adc:	c6 01       	movw	r24, r12
    3ade:	0e 94 2a 21 	call	0x4254	; 0x4254 <strnlen>
    3ae2:	8c 01       	movw	r16, r24
    3ae4:	f9 2d       	mov	r31, r9
    3ae6:	ff 77       	andi	r31, 0x7F	; 127
    3ae8:	14 c0       	rjmp	.+40     	; 0x3b12 <vfprintf+0x45a>
    3aea:	56 01       	movw	r10, r12
    3aec:	22 e0       	ldi	r18, 0x02	; 2
    3aee:	a2 0e       	add	r10, r18
    3af0:	b1 1c       	adc	r11, r1
    3af2:	f6 01       	movw	r30, r12
    3af4:	c0 80       	ld	r12, Z
    3af6:	d1 80       	ldd	r13, Z+1	; 0x01
    3af8:	96 fe       	sbrs	r9, 6
    3afa:	03 c0       	rjmp	.+6      	; 0x3b02 <vfprintf+0x44a>
    3afc:	61 2f       	mov	r22, r17
    3afe:	70 e0       	ldi	r23, 0x00	; 0
    3b00:	02 c0       	rjmp	.+4      	; 0x3b06 <vfprintf+0x44e>
    3b02:	6f ef       	ldi	r22, 0xFF	; 255
    3b04:	7f ef       	ldi	r23, 0xFF	; 255
    3b06:	c6 01       	movw	r24, r12
    3b08:	0e 94 0f 21 	call	0x421e	; 0x421e <strnlen_P>
    3b0c:	8c 01       	movw	r16, r24
    3b0e:	f9 2d       	mov	r31, r9
    3b10:	f0 68       	ori	r31, 0x80	; 128
    3b12:	9f 2e       	mov	r9, r31
    3b14:	f3 fd       	sbrc	r31, 3
    3b16:	1a c0       	rjmp	.+52     	; 0x3b4c <vfprintf+0x494>
    3b18:	85 2d       	mov	r24, r5
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	08 17       	cp	r16, r24
    3b1e:	19 07       	cpc	r17, r25
    3b20:	a8 f4       	brcc	.+42     	; 0x3b4c <vfprintf+0x494>
    3b22:	b7 01       	movw	r22, r14
    3b24:	80 e2       	ldi	r24, 0x20	; 32
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3b2c:	5a 94       	dec	r5
    3b2e:	f4 cf       	rjmp	.-24     	; 0x3b18 <vfprintf+0x460>
    3b30:	f6 01       	movw	r30, r12
    3b32:	97 fc       	sbrc	r9, 7
    3b34:	85 91       	lpm	r24, Z+
    3b36:	97 fe       	sbrs	r9, 7
    3b38:	81 91       	ld	r24, Z+
    3b3a:	6f 01       	movw	r12, r30
    3b3c:	b7 01       	movw	r22, r14
    3b3e:	90 e0       	ldi	r25, 0x00	; 0
    3b40:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3b44:	51 10       	cpse	r5, r1
    3b46:	5a 94       	dec	r5
    3b48:	01 50       	subi	r16, 0x01	; 1
    3b4a:	11 09       	sbc	r17, r1
    3b4c:	01 15       	cp	r16, r1
    3b4e:	11 05       	cpc	r17, r1
    3b50:	79 f7       	brne	.-34     	; 0x3b30 <vfprintf+0x478>
    3b52:	f7 c0       	rjmp	.+494    	; 0x3d42 <vfprintf+0x68a>
    3b54:	84 36       	cpi	r24, 0x64	; 100
    3b56:	11 f0       	breq	.+4      	; 0x3b5c <vfprintf+0x4a4>
    3b58:	89 36       	cpi	r24, 0x69	; 105
    3b5a:	61 f5       	brne	.+88     	; 0x3bb4 <vfprintf+0x4fc>
    3b5c:	56 01       	movw	r10, r12
    3b5e:	97 fe       	sbrs	r9, 7
    3b60:	09 c0       	rjmp	.+18     	; 0x3b74 <vfprintf+0x4bc>
    3b62:	24 e0       	ldi	r18, 0x04	; 4
    3b64:	a2 0e       	add	r10, r18
    3b66:	b1 1c       	adc	r11, r1
    3b68:	f6 01       	movw	r30, r12
    3b6a:	60 81       	ld	r22, Z
    3b6c:	71 81       	ldd	r23, Z+1	; 0x01
    3b6e:	82 81       	ldd	r24, Z+2	; 0x02
    3b70:	93 81       	ldd	r25, Z+3	; 0x03
    3b72:	0a c0       	rjmp	.+20     	; 0x3b88 <vfprintf+0x4d0>
    3b74:	f2 e0       	ldi	r31, 0x02	; 2
    3b76:	af 0e       	add	r10, r31
    3b78:	b1 1c       	adc	r11, r1
    3b7a:	f6 01       	movw	r30, r12
    3b7c:	60 81       	ld	r22, Z
    3b7e:	71 81       	ldd	r23, Z+1	; 0x01
    3b80:	07 2e       	mov	r0, r23
    3b82:	00 0c       	add	r0, r0
    3b84:	88 0b       	sbc	r24, r24
    3b86:	99 0b       	sbc	r25, r25
    3b88:	f9 2d       	mov	r31, r9
    3b8a:	ff 76       	andi	r31, 0x6F	; 111
    3b8c:	9f 2e       	mov	r9, r31
    3b8e:	97 ff       	sbrs	r25, 7
    3b90:	09 c0       	rjmp	.+18     	; 0x3ba4 <vfprintf+0x4ec>
    3b92:	90 95       	com	r25
    3b94:	80 95       	com	r24
    3b96:	70 95       	com	r23
    3b98:	61 95       	neg	r22
    3b9a:	7f 4f       	sbci	r23, 0xFF	; 255
    3b9c:	8f 4f       	sbci	r24, 0xFF	; 255
    3b9e:	9f 4f       	sbci	r25, 0xFF	; 255
    3ba0:	f0 68       	ori	r31, 0x80	; 128
    3ba2:	9f 2e       	mov	r9, r31
    3ba4:	2a e0       	ldi	r18, 0x0A	; 10
    3ba6:	30 e0       	ldi	r19, 0x00	; 0
    3ba8:	a3 01       	movw	r20, r6
    3baa:	0e 94 93 21 	call	0x4326	; 0x4326 <__ultoa_invert>
    3bae:	c8 2e       	mov	r12, r24
    3bb0:	c6 18       	sub	r12, r6
    3bb2:	3f c0       	rjmp	.+126    	; 0x3c32 <vfprintf+0x57a>
    3bb4:	09 2d       	mov	r16, r9
    3bb6:	85 37       	cpi	r24, 0x75	; 117
    3bb8:	21 f4       	brne	.+8      	; 0x3bc2 <vfprintf+0x50a>
    3bba:	0f 7e       	andi	r16, 0xEF	; 239
    3bbc:	2a e0       	ldi	r18, 0x0A	; 10
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	1d c0       	rjmp	.+58     	; 0x3bfc <vfprintf+0x544>
    3bc2:	09 7f       	andi	r16, 0xF9	; 249
    3bc4:	8f 36       	cpi	r24, 0x6F	; 111
    3bc6:	91 f0       	breq	.+36     	; 0x3bec <vfprintf+0x534>
    3bc8:	18 f4       	brcc	.+6      	; 0x3bd0 <vfprintf+0x518>
    3bca:	88 35       	cpi	r24, 0x58	; 88
    3bcc:	59 f0       	breq	.+22     	; 0x3be4 <vfprintf+0x52c>
    3bce:	c3 c0       	rjmp	.+390    	; 0x3d56 <vfprintf+0x69e>
    3bd0:	80 37       	cpi	r24, 0x70	; 112
    3bd2:	19 f0       	breq	.+6      	; 0x3bda <vfprintf+0x522>
    3bd4:	88 37       	cpi	r24, 0x78	; 120
    3bd6:	11 f0       	breq	.+4      	; 0x3bdc <vfprintf+0x524>
    3bd8:	be c0       	rjmp	.+380    	; 0x3d56 <vfprintf+0x69e>
    3bda:	00 61       	ori	r16, 0x10	; 16
    3bdc:	04 ff       	sbrs	r16, 4
    3bde:	09 c0       	rjmp	.+18     	; 0x3bf2 <vfprintf+0x53a>
    3be0:	04 60       	ori	r16, 0x04	; 4
    3be2:	07 c0       	rjmp	.+14     	; 0x3bf2 <vfprintf+0x53a>
    3be4:	94 fe       	sbrs	r9, 4
    3be6:	08 c0       	rjmp	.+16     	; 0x3bf8 <vfprintf+0x540>
    3be8:	06 60       	ori	r16, 0x06	; 6
    3bea:	06 c0       	rjmp	.+12     	; 0x3bf8 <vfprintf+0x540>
    3bec:	28 e0       	ldi	r18, 0x08	; 8
    3bee:	30 e0       	ldi	r19, 0x00	; 0
    3bf0:	05 c0       	rjmp	.+10     	; 0x3bfc <vfprintf+0x544>
    3bf2:	20 e1       	ldi	r18, 0x10	; 16
    3bf4:	30 e0       	ldi	r19, 0x00	; 0
    3bf6:	02 c0       	rjmp	.+4      	; 0x3bfc <vfprintf+0x544>
    3bf8:	20 e1       	ldi	r18, 0x10	; 16
    3bfa:	32 e0       	ldi	r19, 0x02	; 2
    3bfc:	56 01       	movw	r10, r12
    3bfe:	07 ff       	sbrs	r16, 7
    3c00:	09 c0       	rjmp	.+18     	; 0x3c14 <vfprintf+0x55c>
    3c02:	84 e0       	ldi	r24, 0x04	; 4
    3c04:	a8 0e       	add	r10, r24
    3c06:	b1 1c       	adc	r11, r1
    3c08:	f6 01       	movw	r30, r12
    3c0a:	60 81       	ld	r22, Z
    3c0c:	71 81       	ldd	r23, Z+1	; 0x01
    3c0e:	82 81       	ldd	r24, Z+2	; 0x02
    3c10:	93 81       	ldd	r25, Z+3	; 0x03
    3c12:	08 c0       	rjmp	.+16     	; 0x3c24 <vfprintf+0x56c>
    3c14:	f2 e0       	ldi	r31, 0x02	; 2
    3c16:	af 0e       	add	r10, r31
    3c18:	b1 1c       	adc	r11, r1
    3c1a:	f6 01       	movw	r30, r12
    3c1c:	60 81       	ld	r22, Z
    3c1e:	71 81       	ldd	r23, Z+1	; 0x01
    3c20:	80 e0       	ldi	r24, 0x00	; 0
    3c22:	90 e0       	ldi	r25, 0x00	; 0
    3c24:	a3 01       	movw	r20, r6
    3c26:	0e 94 93 21 	call	0x4326	; 0x4326 <__ultoa_invert>
    3c2a:	c8 2e       	mov	r12, r24
    3c2c:	c6 18       	sub	r12, r6
    3c2e:	0f 77       	andi	r16, 0x7F	; 127
    3c30:	90 2e       	mov	r9, r16
    3c32:	96 fe       	sbrs	r9, 6
    3c34:	0b c0       	rjmp	.+22     	; 0x3c4c <vfprintf+0x594>
    3c36:	09 2d       	mov	r16, r9
    3c38:	0e 7f       	andi	r16, 0xFE	; 254
    3c3a:	c1 16       	cp	r12, r17
    3c3c:	50 f4       	brcc	.+20     	; 0x3c52 <vfprintf+0x59a>
    3c3e:	94 fe       	sbrs	r9, 4
    3c40:	0a c0       	rjmp	.+20     	; 0x3c56 <vfprintf+0x59e>
    3c42:	92 fc       	sbrc	r9, 2
    3c44:	08 c0       	rjmp	.+16     	; 0x3c56 <vfprintf+0x59e>
    3c46:	09 2d       	mov	r16, r9
    3c48:	0e 7e       	andi	r16, 0xEE	; 238
    3c4a:	05 c0       	rjmp	.+10     	; 0x3c56 <vfprintf+0x59e>
    3c4c:	dc 2c       	mov	r13, r12
    3c4e:	09 2d       	mov	r16, r9
    3c50:	03 c0       	rjmp	.+6      	; 0x3c58 <vfprintf+0x5a0>
    3c52:	dc 2c       	mov	r13, r12
    3c54:	01 c0       	rjmp	.+2      	; 0x3c58 <vfprintf+0x5a0>
    3c56:	d1 2e       	mov	r13, r17
    3c58:	04 ff       	sbrs	r16, 4
    3c5a:	0d c0       	rjmp	.+26     	; 0x3c76 <vfprintf+0x5be>
    3c5c:	fe 01       	movw	r30, r28
    3c5e:	ec 0d       	add	r30, r12
    3c60:	f1 1d       	adc	r31, r1
    3c62:	80 81       	ld	r24, Z
    3c64:	80 33       	cpi	r24, 0x30	; 48
    3c66:	11 f4       	brne	.+4      	; 0x3c6c <vfprintf+0x5b4>
    3c68:	09 7e       	andi	r16, 0xE9	; 233
    3c6a:	09 c0       	rjmp	.+18     	; 0x3c7e <vfprintf+0x5c6>
    3c6c:	02 ff       	sbrs	r16, 2
    3c6e:	06 c0       	rjmp	.+12     	; 0x3c7c <vfprintf+0x5c4>
    3c70:	d3 94       	inc	r13
    3c72:	d3 94       	inc	r13
    3c74:	04 c0       	rjmp	.+8      	; 0x3c7e <vfprintf+0x5c6>
    3c76:	80 2f       	mov	r24, r16
    3c78:	86 78       	andi	r24, 0x86	; 134
    3c7a:	09 f0       	breq	.+2      	; 0x3c7e <vfprintf+0x5c6>
    3c7c:	d3 94       	inc	r13
    3c7e:	03 fd       	sbrc	r16, 3
    3c80:	11 c0       	rjmp	.+34     	; 0x3ca4 <vfprintf+0x5ec>
    3c82:	00 ff       	sbrs	r16, 0
    3c84:	06 c0       	rjmp	.+12     	; 0x3c92 <vfprintf+0x5da>
    3c86:	1c 2d       	mov	r17, r12
    3c88:	d5 14       	cp	r13, r5
    3c8a:	80 f4       	brcc	.+32     	; 0x3cac <vfprintf+0x5f4>
    3c8c:	15 0d       	add	r17, r5
    3c8e:	1d 19       	sub	r17, r13
    3c90:	0d c0       	rjmp	.+26     	; 0x3cac <vfprintf+0x5f4>
    3c92:	d5 14       	cp	r13, r5
    3c94:	58 f4       	brcc	.+22     	; 0x3cac <vfprintf+0x5f4>
    3c96:	b7 01       	movw	r22, r14
    3c98:	80 e2       	ldi	r24, 0x20	; 32
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3ca0:	d3 94       	inc	r13
    3ca2:	f7 cf       	rjmp	.-18     	; 0x3c92 <vfprintf+0x5da>
    3ca4:	d5 14       	cp	r13, r5
    3ca6:	10 f4       	brcc	.+4      	; 0x3cac <vfprintf+0x5f4>
    3ca8:	5d 18       	sub	r5, r13
    3caa:	01 c0       	rjmp	.+2      	; 0x3cae <vfprintf+0x5f6>
    3cac:	51 2c       	mov	r5, r1
    3cae:	04 ff       	sbrs	r16, 4
    3cb0:	10 c0       	rjmp	.+32     	; 0x3cd2 <vfprintf+0x61a>
    3cb2:	b7 01       	movw	r22, r14
    3cb4:	80 e3       	ldi	r24, 0x30	; 48
    3cb6:	90 e0       	ldi	r25, 0x00	; 0
    3cb8:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3cbc:	02 ff       	sbrs	r16, 2
    3cbe:	17 c0       	rjmp	.+46     	; 0x3cee <vfprintf+0x636>
    3cc0:	01 fd       	sbrc	r16, 1
    3cc2:	03 c0       	rjmp	.+6      	; 0x3cca <vfprintf+0x612>
    3cc4:	88 e7       	ldi	r24, 0x78	; 120
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	02 c0       	rjmp	.+4      	; 0x3cce <vfprintf+0x616>
    3cca:	88 e5       	ldi	r24, 0x58	; 88
    3ccc:	90 e0       	ldi	r25, 0x00	; 0
    3cce:	b7 01       	movw	r22, r14
    3cd0:	0c c0       	rjmp	.+24     	; 0x3cea <vfprintf+0x632>
    3cd2:	80 2f       	mov	r24, r16
    3cd4:	86 78       	andi	r24, 0x86	; 134
    3cd6:	59 f0       	breq	.+22     	; 0x3cee <vfprintf+0x636>
    3cd8:	01 ff       	sbrs	r16, 1
    3cda:	02 c0       	rjmp	.+4      	; 0x3ce0 <vfprintf+0x628>
    3cdc:	8b e2       	ldi	r24, 0x2B	; 43
    3cde:	01 c0       	rjmp	.+2      	; 0x3ce2 <vfprintf+0x62a>
    3ce0:	80 e2       	ldi	r24, 0x20	; 32
    3ce2:	07 fd       	sbrc	r16, 7
    3ce4:	8d e2       	ldi	r24, 0x2D	; 45
    3ce6:	b7 01       	movw	r22, r14
    3ce8:	90 e0       	ldi	r25, 0x00	; 0
    3cea:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3cee:	c1 16       	cp	r12, r17
    3cf0:	38 f4       	brcc	.+14     	; 0x3d00 <vfprintf+0x648>
    3cf2:	b7 01       	movw	r22, r14
    3cf4:	80 e3       	ldi	r24, 0x30	; 48
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3cfc:	11 50       	subi	r17, 0x01	; 1
    3cfe:	f7 cf       	rjmp	.-18     	; 0x3cee <vfprintf+0x636>
    3d00:	ca 94       	dec	r12
    3d02:	f3 01       	movw	r30, r6
    3d04:	ec 0d       	add	r30, r12
    3d06:	f1 1d       	adc	r31, r1
    3d08:	80 81       	ld	r24, Z
    3d0a:	b7 01       	movw	r22, r14
    3d0c:	90 e0       	ldi	r25, 0x00	; 0
    3d0e:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3d12:	c1 10       	cpse	r12, r1
    3d14:	f5 cf       	rjmp	.-22     	; 0x3d00 <vfprintf+0x648>
    3d16:	15 c0       	rjmp	.+42     	; 0x3d42 <vfprintf+0x68a>
    3d18:	f4 e0       	ldi	r31, 0x04	; 4
    3d1a:	f5 15       	cp	r31, r5
    3d1c:	60 f5       	brcc	.+88     	; 0x3d76 <vfprintf+0x6be>
    3d1e:	84 e0       	ldi	r24, 0x04	; 4
    3d20:	58 1a       	sub	r5, r24
    3d22:	93 fe       	sbrs	r9, 3
    3d24:	1f c0       	rjmp	.+62     	; 0x3d64 <vfprintf+0x6ac>
    3d26:	01 11       	cpse	r16, r1
    3d28:	27 c0       	rjmp	.+78     	; 0x3d78 <vfprintf+0x6c0>
    3d2a:	2c 85       	ldd	r18, Y+12	; 0x0c
    3d2c:	23 ff       	sbrs	r18, 3
    3d2e:	2a c0       	rjmp	.+84     	; 0x3d84 <vfprintf+0x6cc>
    3d30:	06 ee       	ldi	r16, 0xE6	; 230
    3d32:	10 e0       	ldi	r17, 0x00	; 0
    3d34:	39 2d       	mov	r19, r9
    3d36:	30 71       	andi	r19, 0x10	; 16
    3d38:	93 2e       	mov	r9, r19
    3d3a:	f8 01       	movw	r30, r16
    3d3c:	84 91       	lpm	r24, Z
    3d3e:	81 11       	cpse	r24, r1
    3d40:	24 c0       	rjmp	.+72     	; 0x3d8a <vfprintf+0x6d2>
    3d42:	55 20       	and	r5, r5
    3d44:	09 f4       	brne	.+2      	; 0x3d48 <vfprintf+0x690>
    3d46:	e4 cc       	rjmp	.-1592   	; 0x3710 <vfprintf+0x58>
    3d48:	b7 01       	movw	r22, r14
    3d4a:	80 e2       	ldi	r24, 0x20	; 32
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3d52:	5a 94       	dec	r5
    3d54:	f6 cf       	rjmp	.-20     	; 0x3d42 <vfprintf+0x68a>
    3d56:	f7 01       	movw	r30, r14
    3d58:	86 81       	ldd	r24, Z+6	; 0x06
    3d5a:	97 81       	ldd	r25, Z+7	; 0x07
    3d5c:	26 c0       	rjmp	.+76     	; 0x3daa <vfprintf+0x6f2>
    3d5e:	8f ef       	ldi	r24, 0xFF	; 255
    3d60:	9f ef       	ldi	r25, 0xFF	; 255
    3d62:	23 c0       	rjmp	.+70     	; 0x3daa <vfprintf+0x6f2>
    3d64:	b7 01       	movw	r22, r14
    3d66:	80 e2       	ldi	r24, 0x20	; 32
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    3d6a:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3d6e:	5a 94       	dec	r5
    3d70:	51 10       	cpse	r5, r1
    3d72:	f8 cf       	rjmp	.-16     	; 0x3d64 <vfprintf+0x6ac>
    3d74:	d8 cf       	rjmp	.-80     	; 0x3d26 <vfprintf+0x66e>
    3d76:	51 2c       	mov	r5, r1
    3d78:	b7 01       	movw	r22, r14
    3d7a:	80 2f       	mov	r24, r16
    3d7c:	90 e0       	ldi	r25, 0x00	; 0
    3d7e:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3d82:	d3 cf       	rjmp	.-90     	; 0x3d2a <vfprintf+0x672>
    3d84:	0a ee       	ldi	r16, 0xEA	; 234
    3d86:	10 e0       	ldi	r17, 0x00	; 0
    3d88:	d5 cf       	rjmp	.-86     	; 0x3d34 <vfprintf+0x67c>
    3d8a:	91 10       	cpse	r9, r1
    3d8c:	80 52       	subi	r24, 0x20	; 32
    3d8e:	b7 01       	movw	r22, r14
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	0e 94 35 21 	call	0x426a	; 0x426a <fputc>
    3d96:	0f 5f       	subi	r16, 0xFF	; 255
    3d98:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9a:	cf cf       	rjmp	.-98     	; 0x3d3a <vfprintf+0x682>
    3d9c:	23 e0       	ldi	r18, 0x03	; 3
    3d9e:	25 15       	cp	r18, r5
    3da0:	10 f4       	brcc	.+4      	; 0x3da6 <vfprintf+0x6ee>
    3da2:	83 e0       	ldi	r24, 0x03	; 3
    3da4:	bd cf       	rjmp	.-134    	; 0x3d20 <vfprintf+0x668>
    3da6:	51 2c       	mov	r5, r1
    3da8:	c0 cf       	rjmp	.-128    	; 0x3d2a <vfprintf+0x672>
    3daa:	60 96       	adiw	r28, 0x10	; 16
    3dac:	e2 e1       	ldi	r30, 0x12	; 18
    3dae:	0c 94 fb 1e 	jmp	0x3df6	; 0x3df6 <__epilogue_restores__>

00003db2 <__tablejump2__>:
    3db2:	ee 0f       	add	r30, r30
    3db4:	ff 1f       	adc	r31, r31
    3db6:	05 90       	lpm	r0, Z+
    3db8:	f4 91       	lpm	r31, Z
    3dba:	e0 2d       	mov	r30, r0
    3dbc:	09 94       	ijmp

00003dbe <__prologue_saves__>:
    3dbe:	2f 92       	push	r2
    3dc0:	3f 92       	push	r3
    3dc2:	4f 92       	push	r4
    3dc4:	5f 92       	push	r5
    3dc6:	6f 92       	push	r6
    3dc8:	7f 92       	push	r7
    3dca:	8f 92       	push	r8
    3dcc:	9f 92       	push	r9
    3dce:	af 92       	push	r10
    3dd0:	bf 92       	push	r11
    3dd2:	cf 92       	push	r12
    3dd4:	df 92       	push	r13
    3dd6:	ef 92       	push	r14
    3dd8:	ff 92       	push	r15
    3dda:	0f 93       	push	r16
    3ddc:	1f 93       	push	r17
    3dde:	cf 93       	push	r28
    3de0:	df 93       	push	r29
    3de2:	cd b7       	in	r28, 0x3d	; 61
    3de4:	de b7       	in	r29, 0x3e	; 62
    3de6:	ca 1b       	sub	r28, r26
    3de8:	db 0b       	sbc	r29, r27
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	09 94       	ijmp

00003df6 <__epilogue_restores__>:
    3df6:	2a 88       	ldd	r2, Y+18	; 0x12
    3df8:	39 88       	ldd	r3, Y+17	; 0x11
    3dfa:	48 88       	ldd	r4, Y+16	; 0x10
    3dfc:	5f 84       	ldd	r5, Y+15	; 0x0f
    3dfe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3e00:	7d 84       	ldd	r7, Y+13	; 0x0d
    3e02:	8c 84       	ldd	r8, Y+12	; 0x0c
    3e04:	9b 84       	ldd	r9, Y+11	; 0x0b
    3e06:	aa 84       	ldd	r10, Y+10	; 0x0a
    3e08:	b9 84       	ldd	r11, Y+9	; 0x09
    3e0a:	c8 84       	ldd	r12, Y+8	; 0x08
    3e0c:	df 80       	ldd	r13, Y+7	; 0x07
    3e0e:	ee 80       	ldd	r14, Y+6	; 0x06
    3e10:	fd 80       	ldd	r15, Y+5	; 0x05
    3e12:	0c 81       	ldd	r16, Y+4	; 0x04
    3e14:	1b 81       	ldd	r17, Y+3	; 0x03
    3e16:	aa 81       	ldd	r26, Y+2	; 0x02
    3e18:	b9 81       	ldd	r27, Y+1	; 0x01
    3e1a:	ce 0f       	add	r28, r30
    3e1c:	d1 1d       	adc	r29, r1
    3e1e:	0f b6       	in	r0, 0x3f	; 63
    3e20:	f8 94       	cli
    3e22:	de bf       	out	0x3e, r29	; 62
    3e24:	0f be       	out	0x3f, r0	; 63
    3e26:	cd bf       	out	0x3d, r28	; 61
    3e28:	ed 01       	movw	r28, r26
    3e2a:	08 95       	ret

00003e2c <malloc>:
    3e2c:	0f 93       	push	r16
    3e2e:	1f 93       	push	r17
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	82 30       	cpi	r24, 0x02	; 2
    3e36:	91 05       	cpc	r25, r1
    3e38:	10 f4       	brcc	.+4      	; 0x3e3e <malloc+0x12>
    3e3a:	82 e0       	ldi	r24, 0x02	; 2
    3e3c:	90 e0       	ldi	r25, 0x00	; 0
    3e3e:	e0 91 77 02 	lds	r30, 0x0277	; 0x800277 <__flp>
    3e42:	f0 91 78 02 	lds	r31, 0x0278	; 0x800278 <__flp+0x1>
    3e46:	20 e0       	ldi	r18, 0x00	; 0
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	a0 e0       	ldi	r26, 0x00	; 0
    3e4c:	b0 e0       	ldi	r27, 0x00	; 0
    3e4e:	30 97       	sbiw	r30, 0x00	; 0
    3e50:	19 f1       	breq	.+70     	; 0x3e98 <malloc+0x6c>
    3e52:	40 81       	ld	r20, Z
    3e54:	51 81       	ldd	r21, Z+1	; 0x01
    3e56:	02 81       	ldd	r16, Z+2	; 0x02
    3e58:	13 81       	ldd	r17, Z+3	; 0x03
    3e5a:	48 17       	cp	r20, r24
    3e5c:	59 07       	cpc	r21, r25
    3e5e:	c8 f0       	brcs	.+50     	; 0x3e92 <malloc+0x66>
    3e60:	84 17       	cp	r24, r20
    3e62:	95 07       	cpc	r25, r21
    3e64:	69 f4       	brne	.+26     	; 0x3e80 <malloc+0x54>
    3e66:	10 97       	sbiw	r26, 0x00	; 0
    3e68:	31 f0       	breq	.+12     	; 0x3e76 <malloc+0x4a>
    3e6a:	12 96       	adiw	r26, 0x02	; 2
    3e6c:	0c 93       	st	X, r16
    3e6e:	12 97       	sbiw	r26, 0x02	; 2
    3e70:	13 96       	adiw	r26, 0x03	; 3
    3e72:	1c 93       	st	X, r17
    3e74:	27 c0       	rjmp	.+78     	; 0x3ec4 <malloc+0x98>
    3e76:	00 93 77 02 	sts	0x0277, r16	; 0x800277 <__flp>
    3e7a:	10 93 78 02 	sts	0x0278, r17	; 0x800278 <__flp+0x1>
    3e7e:	22 c0       	rjmp	.+68     	; 0x3ec4 <malloc+0x98>
    3e80:	21 15       	cp	r18, r1
    3e82:	31 05       	cpc	r19, r1
    3e84:	19 f0       	breq	.+6      	; 0x3e8c <malloc+0x60>
    3e86:	42 17       	cp	r20, r18
    3e88:	53 07       	cpc	r21, r19
    3e8a:	18 f4       	brcc	.+6      	; 0x3e92 <malloc+0x66>
    3e8c:	9a 01       	movw	r18, r20
    3e8e:	bd 01       	movw	r22, r26
    3e90:	ef 01       	movw	r28, r30
    3e92:	df 01       	movw	r26, r30
    3e94:	f8 01       	movw	r30, r16
    3e96:	db cf       	rjmp	.-74     	; 0x3e4e <malloc+0x22>
    3e98:	21 15       	cp	r18, r1
    3e9a:	31 05       	cpc	r19, r1
    3e9c:	f9 f0       	breq	.+62     	; 0x3edc <malloc+0xb0>
    3e9e:	28 1b       	sub	r18, r24
    3ea0:	39 0b       	sbc	r19, r25
    3ea2:	24 30       	cpi	r18, 0x04	; 4
    3ea4:	31 05       	cpc	r19, r1
    3ea6:	80 f4       	brcc	.+32     	; 0x3ec8 <malloc+0x9c>
    3ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    3eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    3eac:	61 15       	cp	r22, r1
    3eae:	71 05       	cpc	r23, r1
    3eb0:	21 f0       	breq	.+8      	; 0x3eba <malloc+0x8e>
    3eb2:	fb 01       	movw	r30, r22
    3eb4:	93 83       	std	Z+3, r25	; 0x03
    3eb6:	82 83       	std	Z+2, r24	; 0x02
    3eb8:	04 c0       	rjmp	.+8      	; 0x3ec2 <malloc+0x96>
    3eba:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <__flp+0x1>
    3ebe:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <__flp>
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	32 96       	adiw	r30, 0x02	; 2
    3ec6:	44 c0       	rjmp	.+136    	; 0x3f50 <malloc+0x124>
    3ec8:	fe 01       	movw	r30, r28
    3eca:	e2 0f       	add	r30, r18
    3ecc:	f3 1f       	adc	r31, r19
    3ece:	81 93       	st	Z+, r24
    3ed0:	91 93       	st	Z+, r25
    3ed2:	22 50       	subi	r18, 0x02	; 2
    3ed4:	31 09       	sbc	r19, r1
    3ed6:	39 83       	std	Y+1, r19	; 0x01
    3ed8:	28 83       	st	Y, r18
    3eda:	3a c0       	rjmp	.+116    	; 0x3f50 <malloc+0x124>
    3edc:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <__brkval>
    3ee0:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <__brkval+0x1>
    3ee4:	23 2b       	or	r18, r19
    3ee6:	41 f4       	brne	.+16     	; 0x3ef8 <malloc+0xcc>
    3ee8:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3eec:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3ef0:	30 93 76 02 	sts	0x0276, r19	; 0x800276 <__brkval+0x1>
    3ef4:	20 93 75 02 	sts	0x0275, r18	; 0x800275 <__brkval>
    3ef8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3efc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3f00:	21 15       	cp	r18, r1
    3f02:	31 05       	cpc	r19, r1
    3f04:	41 f4       	brne	.+16     	; 0x3f16 <malloc+0xea>
    3f06:	2d b7       	in	r18, 0x3d	; 61
    3f08:	3e b7       	in	r19, 0x3e	; 62
    3f0a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3f0e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3f12:	24 1b       	sub	r18, r20
    3f14:	35 0b       	sbc	r19, r21
    3f16:	e0 91 75 02 	lds	r30, 0x0275	; 0x800275 <__brkval>
    3f1a:	f0 91 76 02 	lds	r31, 0x0276	; 0x800276 <__brkval+0x1>
    3f1e:	e2 17       	cp	r30, r18
    3f20:	f3 07       	cpc	r31, r19
    3f22:	a0 f4       	brcc	.+40     	; 0x3f4c <malloc+0x120>
    3f24:	2e 1b       	sub	r18, r30
    3f26:	3f 0b       	sbc	r19, r31
    3f28:	28 17       	cp	r18, r24
    3f2a:	39 07       	cpc	r19, r25
    3f2c:	78 f0       	brcs	.+30     	; 0x3f4c <malloc+0x120>
    3f2e:	ac 01       	movw	r20, r24
    3f30:	4e 5f       	subi	r20, 0xFE	; 254
    3f32:	5f 4f       	sbci	r21, 0xFF	; 255
    3f34:	24 17       	cp	r18, r20
    3f36:	35 07       	cpc	r19, r21
    3f38:	48 f0       	brcs	.+18     	; 0x3f4c <malloc+0x120>
    3f3a:	4e 0f       	add	r20, r30
    3f3c:	5f 1f       	adc	r21, r31
    3f3e:	50 93 76 02 	sts	0x0276, r21	; 0x800276 <__brkval+0x1>
    3f42:	40 93 75 02 	sts	0x0275, r20	; 0x800275 <__brkval>
    3f46:	81 93       	st	Z+, r24
    3f48:	91 93       	st	Z+, r25
    3f4a:	02 c0       	rjmp	.+4      	; 0x3f50 <malloc+0x124>
    3f4c:	e0 e0       	ldi	r30, 0x00	; 0
    3f4e:	f0 e0       	ldi	r31, 0x00	; 0
    3f50:	cf 01       	movw	r24, r30
    3f52:	df 91       	pop	r29
    3f54:	cf 91       	pop	r28
    3f56:	1f 91       	pop	r17
    3f58:	0f 91       	pop	r16
    3f5a:	08 95       	ret

00003f5c <free>:
    3f5c:	cf 93       	push	r28
    3f5e:	df 93       	push	r29
    3f60:	00 97       	sbiw	r24, 0x00	; 0
    3f62:	09 f4       	brne	.+2      	; 0x3f66 <free+0xa>
    3f64:	81 c0       	rjmp	.+258    	; 0x4068 <free+0x10c>
    3f66:	fc 01       	movw	r30, r24
    3f68:	32 97       	sbiw	r30, 0x02	; 2
    3f6a:	13 82       	std	Z+3, r1	; 0x03
    3f6c:	12 82       	std	Z+2, r1	; 0x02
    3f6e:	a0 91 77 02 	lds	r26, 0x0277	; 0x800277 <__flp>
    3f72:	b0 91 78 02 	lds	r27, 0x0278	; 0x800278 <__flp+0x1>
    3f76:	10 97       	sbiw	r26, 0x00	; 0
    3f78:	81 f4       	brne	.+32     	; 0x3f9a <free+0x3e>
    3f7a:	20 81       	ld	r18, Z
    3f7c:	31 81       	ldd	r19, Z+1	; 0x01
    3f7e:	82 0f       	add	r24, r18
    3f80:	93 1f       	adc	r25, r19
    3f82:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <__brkval>
    3f86:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <__brkval+0x1>
    3f8a:	28 17       	cp	r18, r24
    3f8c:	39 07       	cpc	r19, r25
    3f8e:	51 f5       	brne	.+84     	; 0x3fe4 <free+0x88>
    3f90:	f0 93 76 02 	sts	0x0276, r31	; 0x800276 <__brkval+0x1>
    3f94:	e0 93 75 02 	sts	0x0275, r30	; 0x800275 <__brkval>
    3f98:	67 c0       	rjmp	.+206    	; 0x4068 <free+0x10c>
    3f9a:	ed 01       	movw	r28, r26
    3f9c:	20 e0       	ldi	r18, 0x00	; 0
    3f9e:	30 e0       	ldi	r19, 0x00	; 0
    3fa0:	ce 17       	cp	r28, r30
    3fa2:	df 07       	cpc	r29, r31
    3fa4:	40 f4       	brcc	.+16     	; 0x3fb6 <free+0x5a>
    3fa6:	4a 81       	ldd	r20, Y+2	; 0x02
    3fa8:	5b 81       	ldd	r21, Y+3	; 0x03
    3faa:	9e 01       	movw	r18, r28
    3fac:	41 15       	cp	r20, r1
    3fae:	51 05       	cpc	r21, r1
    3fb0:	f1 f0       	breq	.+60     	; 0x3fee <free+0x92>
    3fb2:	ea 01       	movw	r28, r20
    3fb4:	f5 cf       	rjmp	.-22     	; 0x3fa0 <free+0x44>
    3fb6:	d3 83       	std	Z+3, r29	; 0x03
    3fb8:	c2 83       	std	Z+2, r28	; 0x02
    3fba:	40 81       	ld	r20, Z
    3fbc:	51 81       	ldd	r21, Z+1	; 0x01
    3fbe:	84 0f       	add	r24, r20
    3fc0:	95 1f       	adc	r25, r21
    3fc2:	c8 17       	cp	r28, r24
    3fc4:	d9 07       	cpc	r29, r25
    3fc6:	59 f4       	brne	.+22     	; 0x3fde <free+0x82>
    3fc8:	88 81       	ld	r24, Y
    3fca:	99 81       	ldd	r25, Y+1	; 0x01
    3fcc:	84 0f       	add	r24, r20
    3fce:	95 1f       	adc	r25, r21
    3fd0:	02 96       	adiw	r24, 0x02	; 2
    3fd2:	91 83       	std	Z+1, r25	; 0x01
    3fd4:	80 83       	st	Z, r24
    3fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    3fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    3fda:	93 83       	std	Z+3, r25	; 0x03
    3fdc:	82 83       	std	Z+2, r24	; 0x02
    3fde:	21 15       	cp	r18, r1
    3fe0:	31 05       	cpc	r19, r1
    3fe2:	29 f4       	brne	.+10     	; 0x3fee <free+0x92>
    3fe4:	f0 93 78 02 	sts	0x0278, r31	; 0x800278 <__flp+0x1>
    3fe8:	e0 93 77 02 	sts	0x0277, r30	; 0x800277 <__flp>
    3fec:	3d c0       	rjmp	.+122    	; 0x4068 <free+0x10c>
    3fee:	e9 01       	movw	r28, r18
    3ff0:	fb 83       	std	Y+3, r31	; 0x03
    3ff2:	ea 83       	std	Y+2, r30	; 0x02
    3ff4:	49 91       	ld	r20, Y+
    3ff6:	59 91       	ld	r21, Y+
    3ff8:	c4 0f       	add	r28, r20
    3ffa:	d5 1f       	adc	r29, r21
    3ffc:	ec 17       	cp	r30, r28
    3ffe:	fd 07       	cpc	r31, r29
    4000:	61 f4       	brne	.+24     	; 0x401a <free+0xbe>
    4002:	80 81       	ld	r24, Z
    4004:	91 81       	ldd	r25, Z+1	; 0x01
    4006:	84 0f       	add	r24, r20
    4008:	95 1f       	adc	r25, r21
    400a:	02 96       	adiw	r24, 0x02	; 2
    400c:	e9 01       	movw	r28, r18
    400e:	99 83       	std	Y+1, r25	; 0x01
    4010:	88 83       	st	Y, r24
    4012:	82 81       	ldd	r24, Z+2	; 0x02
    4014:	93 81       	ldd	r25, Z+3	; 0x03
    4016:	9b 83       	std	Y+3, r25	; 0x03
    4018:	8a 83       	std	Y+2, r24	; 0x02
    401a:	e0 e0       	ldi	r30, 0x00	; 0
    401c:	f0 e0       	ldi	r31, 0x00	; 0
    401e:	12 96       	adiw	r26, 0x02	; 2
    4020:	8d 91       	ld	r24, X+
    4022:	9c 91       	ld	r25, X
    4024:	13 97       	sbiw	r26, 0x03	; 3
    4026:	00 97       	sbiw	r24, 0x00	; 0
    4028:	19 f0       	breq	.+6      	; 0x4030 <free+0xd4>
    402a:	fd 01       	movw	r30, r26
    402c:	dc 01       	movw	r26, r24
    402e:	f7 cf       	rjmp	.-18     	; 0x401e <free+0xc2>
    4030:	8d 91       	ld	r24, X+
    4032:	9c 91       	ld	r25, X
    4034:	11 97       	sbiw	r26, 0x01	; 1
    4036:	9d 01       	movw	r18, r26
    4038:	2e 5f       	subi	r18, 0xFE	; 254
    403a:	3f 4f       	sbci	r19, 0xFF	; 255
    403c:	82 0f       	add	r24, r18
    403e:	93 1f       	adc	r25, r19
    4040:	20 91 75 02 	lds	r18, 0x0275	; 0x800275 <__brkval>
    4044:	30 91 76 02 	lds	r19, 0x0276	; 0x800276 <__brkval+0x1>
    4048:	28 17       	cp	r18, r24
    404a:	39 07       	cpc	r19, r25
    404c:	69 f4       	brne	.+26     	; 0x4068 <free+0x10c>
    404e:	30 97       	sbiw	r30, 0x00	; 0
    4050:	29 f4       	brne	.+10     	; 0x405c <free+0x100>
    4052:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <__flp+0x1>
    4056:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <__flp>
    405a:	02 c0       	rjmp	.+4      	; 0x4060 <free+0x104>
    405c:	13 82       	std	Z+3, r1	; 0x03
    405e:	12 82       	std	Z+2, r1	; 0x02
    4060:	b0 93 76 02 	sts	0x0276, r27	; 0x800276 <__brkval+0x1>
    4064:	a0 93 75 02 	sts	0x0275, r26	; 0x800275 <__brkval>
    4068:	df 91       	pop	r29
    406a:	cf 91       	pop	r28
    406c:	08 95       	ret

0000406e <__ftoa_engine>:
    406e:	28 30       	cpi	r18, 0x08	; 8
    4070:	08 f0       	brcs	.+2      	; 0x4074 <__ftoa_engine+0x6>
    4072:	27 e0       	ldi	r18, 0x07	; 7
    4074:	33 27       	eor	r19, r19
    4076:	da 01       	movw	r26, r20
    4078:	99 0f       	add	r25, r25
    407a:	31 1d       	adc	r19, r1
    407c:	87 fd       	sbrc	r24, 7
    407e:	91 60       	ori	r25, 0x01	; 1
    4080:	00 96       	adiw	r24, 0x00	; 0
    4082:	61 05       	cpc	r22, r1
    4084:	71 05       	cpc	r23, r1
    4086:	39 f4       	brne	.+14     	; 0x4096 <__ftoa_engine+0x28>
    4088:	32 60       	ori	r19, 0x02	; 2
    408a:	2e 5f       	subi	r18, 0xFE	; 254
    408c:	3d 93       	st	X+, r19
    408e:	30 e3       	ldi	r19, 0x30	; 48
    4090:	2a 95       	dec	r18
    4092:	e1 f7       	brne	.-8      	; 0x408c <__ftoa_engine+0x1e>
    4094:	08 95       	ret
    4096:	9f 3f       	cpi	r25, 0xFF	; 255
    4098:	30 f0       	brcs	.+12     	; 0x40a6 <__ftoa_engine+0x38>
    409a:	80 38       	cpi	r24, 0x80	; 128
    409c:	71 05       	cpc	r23, r1
    409e:	61 05       	cpc	r22, r1
    40a0:	09 f0       	breq	.+2      	; 0x40a4 <__ftoa_engine+0x36>
    40a2:	3c 5f       	subi	r19, 0xFC	; 252
    40a4:	3c 5f       	subi	r19, 0xFC	; 252
    40a6:	3d 93       	st	X+, r19
    40a8:	91 30       	cpi	r25, 0x01	; 1
    40aa:	08 f0       	brcs	.+2      	; 0x40ae <__ftoa_engine+0x40>
    40ac:	80 68       	ori	r24, 0x80	; 128
    40ae:	91 1d       	adc	r25, r1
    40b0:	df 93       	push	r29
    40b2:	cf 93       	push	r28
    40b4:	1f 93       	push	r17
    40b6:	0f 93       	push	r16
    40b8:	ff 92       	push	r15
    40ba:	ef 92       	push	r14
    40bc:	19 2f       	mov	r17, r25
    40be:	98 7f       	andi	r25, 0xF8	; 248
    40c0:	96 95       	lsr	r25
    40c2:	e9 2f       	mov	r30, r25
    40c4:	96 95       	lsr	r25
    40c6:	96 95       	lsr	r25
    40c8:	e9 0f       	add	r30, r25
    40ca:	ff 27       	eor	r31, r31
    40cc:	e8 5b       	subi	r30, 0xB8	; 184
    40ce:	fe 4f       	sbci	r31, 0xFE	; 254
    40d0:	99 27       	eor	r25, r25
    40d2:	33 27       	eor	r19, r19
    40d4:	ee 24       	eor	r14, r14
    40d6:	ff 24       	eor	r15, r15
    40d8:	a7 01       	movw	r20, r14
    40da:	e7 01       	movw	r28, r14
    40dc:	05 90       	lpm	r0, Z+
    40de:	08 94       	sec
    40e0:	07 94       	ror	r0
    40e2:	28 f4       	brcc	.+10     	; 0x40ee <__ftoa_engine+0x80>
    40e4:	36 0f       	add	r19, r22
    40e6:	e7 1e       	adc	r14, r23
    40e8:	f8 1e       	adc	r15, r24
    40ea:	49 1f       	adc	r20, r25
    40ec:	51 1d       	adc	r21, r1
    40ee:	66 0f       	add	r22, r22
    40f0:	77 1f       	adc	r23, r23
    40f2:	88 1f       	adc	r24, r24
    40f4:	99 1f       	adc	r25, r25
    40f6:	06 94       	lsr	r0
    40f8:	a1 f7       	brne	.-24     	; 0x40e2 <__ftoa_engine+0x74>
    40fa:	05 90       	lpm	r0, Z+
    40fc:	07 94       	ror	r0
    40fe:	28 f4       	brcc	.+10     	; 0x410a <__ftoa_engine+0x9c>
    4100:	e7 0e       	add	r14, r23
    4102:	f8 1e       	adc	r15, r24
    4104:	49 1f       	adc	r20, r25
    4106:	56 1f       	adc	r21, r22
    4108:	c1 1d       	adc	r28, r1
    410a:	77 0f       	add	r23, r23
    410c:	88 1f       	adc	r24, r24
    410e:	99 1f       	adc	r25, r25
    4110:	66 1f       	adc	r22, r22
    4112:	06 94       	lsr	r0
    4114:	a1 f7       	brne	.-24     	; 0x40fe <__ftoa_engine+0x90>
    4116:	05 90       	lpm	r0, Z+
    4118:	07 94       	ror	r0
    411a:	28 f4       	brcc	.+10     	; 0x4126 <__ftoa_engine+0xb8>
    411c:	f8 0e       	add	r15, r24
    411e:	49 1f       	adc	r20, r25
    4120:	56 1f       	adc	r21, r22
    4122:	c7 1f       	adc	r28, r23
    4124:	d1 1d       	adc	r29, r1
    4126:	88 0f       	add	r24, r24
    4128:	99 1f       	adc	r25, r25
    412a:	66 1f       	adc	r22, r22
    412c:	77 1f       	adc	r23, r23
    412e:	06 94       	lsr	r0
    4130:	a1 f7       	brne	.-24     	; 0x411a <__ftoa_engine+0xac>
    4132:	05 90       	lpm	r0, Z+
    4134:	07 94       	ror	r0
    4136:	20 f4       	brcc	.+8      	; 0x4140 <__ftoa_engine+0xd2>
    4138:	49 0f       	add	r20, r25
    413a:	56 1f       	adc	r21, r22
    413c:	c7 1f       	adc	r28, r23
    413e:	d8 1f       	adc	r29, r24
    4140:	99 0f       	add	r25, r25
    4142:	66 1f       	adc	r22, r22
    4144:	77 1f       	adc	r23, r23
    4146:	88 1f       	adc	r24, r24
    4148:	06 94       	lsr	r0
    414a:	a9 f7       	brne	.-22     	; 0x4136 <__ftoa_engine+0xc8>
    414c:	84 91       	lpm	r24, Z
    414e:	10 95       	com	r17
    4150:	17 70       	andi	r17, 0x07	; 7
    4152:	41 f0       	breq	.+16     	; 0x4164 <__ftoa_engine+0xf6>
    4154:	d6 95       	lsr	r29
    4156:	c7 95       	ror	r28
    4158:	57 95       	ror	r21
    415a:	47 95       	ror	r20
    415c:	f7 94       	ror	r15
    415e:	e7 94       	ror	r14
    4160:	1a 95       	dec	r17
    4162:	c1 f7       	brne	.-16     	; 0x4154 <__ftoa_engine+0xe6>
    4164:	ee ee       	ldi	r30, 0xEE	; 238
    4166:	f0 e0       	ldi	r31, 0x00	; 0
    4168:	68 94       	set
    416a:	15 90       	lpm	r1, Z+
    416c:	15 91       	lpm	r17, Z+
    416e:	35 91       	lpm	r19, Z+
    4170:	65 91       	lpm	r22, Z+
    4172:	95 91       	lpm	r25, Z+
    4174:	05 90       	lpm	r0, Z+
    4176:	7f e2       	ldi	r23, 0x2F	; 47
    4178:	73 95       	inc	r23
    417a:	e1 18       	sub	r14, r1
    417c:	f1 0a       	sbc	r15, r17
    417e:	43 0b       	sbc	r20, r19
    4180:	56 0b       	sbc	r21, r22
    4182:	c9 0b       	sbc	r28, r25
    4184:	d0 09       	sbc	r29, r0
    4186:	c0 f7       	brcc	.-16     	; 0x4178 <__ftoa_engine+0x10a>
    4188:	e1 0c       	add	r14, r1
    418a:	f1 1e       	adc	r15, r17
    418c:	43 1f       	adc	r20, r19
    418e:	56 1f       	adc	r21, r22
    4190:	c9 1f       	adc	r28, r25
    4192:	d0 1d       	adc	r29, r0
    4194:	7e f4       	brtc	.+30     	; 0x41b4 <__ftoa_engine+0x146>
    4196:	70 33       	cpi	r23, 0x30	; 48
    4198:	11 f4       	brne	.+4      	; 0x419e <__ftoa_engine+0x130>
    419a:	8a 95       	dec	r24
    419c:	e6 cf       	rjmp	.-52     	; 0x416a <__ftoa_engine+0xfc>
    419e:	e8 94       	clt
    41a0:	01 50       	subi	r16, 0x01	; 1
    41a2:	30 f0       	brcs	.+12     	; 0x41b0 <__ftoa_engine+0x142>
    41a4:	08 0f       	add	r16, r24
    41a6:	0a f4       	brpl	.+2      	; 0x41aa <__ftoa_engine+0x13c>
    41a8:	00 27       	eor	r16, r16
    41aa:	02 17       	cp	r16, r18
    41ac:	08 f4       	brcc	.+2      	; 0x41b0 <__ftoa_engine+0x142>
    41ae:	20 2f       	mov	r18, r16
    41b0:	23 95       	inc	r18
    41b2:	02 2f       	mov	r16, r18
    41b4:	7a 33       	cpi	r23, 0x3A	; 58
    41b6:	28 f0       	brcs	.+10     	; 0x41c2 <__ftoa_engine+0x154>
    41b8:	79 e3       	ldi	r23, 0x39	; 57
    41ba:	7d 93       	st	X+, r23
    41bc:	2a 95       	dec	r18
    41be:	e9 f7       	brne	.-6      	; 0x41ba <__ftoa_engine+0x14c>
    41c0:	10 c0       	rjmp	.+32     	; 0x41e2 <__ftoa_engine+0x174>
    41c2:	7d 93       	st	X+, r23
    41c4:	2a 95       	dec	r18
    41c6:	89 f6       	brne	.-94     	; 0x416a <__ftoa_engine+0xfc>
    41c8:	06 94       	lsr	r0
    41ca:	97 95       	ror	r25
    41cc:	67 95       	ror	r22
    41ce:	37 95       	ror	r19
    41d0:	17 95       	ror	r17
    41d2:	17 94       	ror	r1
    41d4:	e1 18       	sub	r14, r1
    41d6:	f1 0a       	sbc	r15, r17
    41d8:	43 0b       	sbc	r20, r19
    41da:	56 0b       	sbc	r21, r22
    41dc:	c9 0b       	sbc	r28, r25
    41de:	d0 09       	sbc	r29, r0
    41e0:	98 f0       	brcs	.+38     	; 0x4208 <__ftoa_engine+0x19a>
    41e2:	23 95       	inc	r18
    41e4:	7e 91       	ld	r23, -X
    41e6:	73 95       	inc	r23
    41e8:	7a 33       	cpi	r23, 0x3A	; 58
    41ea:	08 f0       	brcs	.+2      	; 0x41ee <__ftoa_engine+0x180>
    41ec:	70 e3       	ldi	r23, 0x30	; 48
    41ee:	7c 93       	st	X, r23
    41f0:	20 13       	cpse	r18, r16
    41f2:	b8 f7       	brcc	.-18     	; 0x41e2 <__ftoa_engine+0x174>
    41f4:	7e 91       	ld	r23, -X
    41f6:	70 61       	ori	r23, 0x10	; 16
    41f8:	7d 93       	st	X+, r23
    41fa:	30 f0       	brcs	.+12     	; 0x4208 <__ftoa_engine+0x19a>
    41fc:	83 95       	inc	r24
    41fe:	71 e3       	ldi	r23, 0x31	; 49
    4200:	7d 93       	st	X+, r23
    4202:	70 e3       	ldi	r23, 0x30	; 48
    4204:	2a 95       	dec	r18
    4206:	e1 f7       	brne	.-8      	; 0x4200 <__ftoa_engine+0x192>
    4208:	11 24       	eor	r1, r1
    420a:	ef 90       	pop	r14
    420c:	ff 90       	pop	r15
    420e:	0f 91       	pop	r16
    4210:	1f 91       	pop	r17
    4212:	cf 91       	pop	r28
    4214:	df 91       	pop	r29
    4216:	99 27       	eor	r25, r25
    4218:	87 fd       	sbrc	r24, 7
    421a:	90 95       	com	r25
    421c:	08 95       	ret

0000421e <strnlen_P>:
    421e:	fc 01       	movw	r30, r24
    4220:	05 90       	lpm	r0, Z+
    4222:	61 50       	subi	r22, 0x01	; 1
    4224:	70 40       	sbci	r23, 0x00	; 0
    4226:	01 10       	cpse	r0, r1
    4228:	d8 f7       	brcc	.-10     	; 0x4220 <strnlen_P+0x2>
    422a:	80 95       	com	r24
    422c:	90 95       	com	r25
    422e:	8e 0f       	add	r24, r30
    4230:	9f 1f       	adc	r25, r31
    4232:	08 95       	ret

00004234 <memcpy>:
    4234:	fb 01       	movw	r30, r22
    4236:	dc 01       	movw	r26, r24
    4238:	02 c0       	rjmp	.+4      	; 0x423e <memcpy+0xa>
    423a:	01 90       	ld	r0, Z+
    423c:	0d 92       	st	X+, r0
    423e:	41 50       	subi	r20, 0x01	; 1
    4240:	50 40       	sbci	r21, 0x00	; 0
    4242:	d8 f7       	brcc	.-10     	; 0x423a <memcpy+0x6>
    4244:	08 95       	ret

00004246 <memset>:
    4246:	dc 01       	movw	r26, r24
    4248:	01 c0       	rjmp	.+2      	; 0x424c <memset+0x6>
    424a:	6d 93       	st	X+, r22
    424c:	41 50       	subi	r20, 0x01	; 1
    424e:	50 40       	sbci	r21, 0x00	; 0
    4250:	e0 f7       	brcc	.-8      	; 0x424a <memset+0x4>
    4252:	08 95       	ret

00004254 <strnlen>:
    4254:	fc 01       	movw	r30, r24
    4256:	61 50       	subi	r22, 0x01	; 1
    4258:	70 40       	sbci	r23, 0x00	; 0
    425a:	01 90       	ld	r0, Z+
    425c:	01 10       	cpse	r0, r1
    425e:	d8 f7       	brcc	.-10     	; 0x4256 <strnlen+0x2>
    4260:	80 95       	com	r24
    4262:	90 95       	com	r25
    4264:	8e 0f       	add	r24, r30
    4266:	9f 1f       	adc	r25, r31
    4268:	08 95       	ret

0000426a <fputc>:
    426a:	0f 93       	push	r16
    426c:	1f 93       	push	r17
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	fb 01       	movw	r30, r22
    4274:	23 81       	ldd	r18, Z+3	; 0x03
    4276:	21 fd       	sbrc	r18, 1
    4278:	03 c0       	rjmp	.+6      	; 0x4280 <fputc+0x16>
    427a:	8f ef       	ldi	r24, 0xFF	; 255
    427c:	9f ef       	ldi	r25, 0xFF	; 255
    427e:	2c c0       	rjmp	.+88     	; 0x42d8 <fputc+0x6e>
    4280:	22 ff       	sbrs	r18, 2
    4282:	16 c0       	rjmp	.+44     	; 0x42b0 <fputc+0x46>
    4284:	46 81       	ldd	r20, Z+6	; 0x06
    4286:	57 81       	ldd	r21, Z+7	; 0x07
    4288:	24 81       	ldd	r18, Z+4	; 0x04
    428a:	35 81       	ldd	r19, Z+5	; 0x05
    428c:	42 17       	cp	r20, r18
    428e:	53 07       	cpc	r21, r19
    4290:	44 f4       	brge	.+16     	; 0x42a2 <fputc+0x38>
    4292:	a0 81       	ld	r26, Z
    4294:	b1 81       	ldd	r27, Z+1	; 0x01
    4296:	9d 01       	movw	r18, r26
    4298:	2f 5f       	subi	r18, 0xFF	; 255
    429a:	3f 4f       	sbci	r19, 0xFF	; 255
    429c:	31 83       	std	Z+1, r19	; 0x01
    429e:	20 83       	st	Z, r18
    42a0:	8c 93       	st	X, r24
    42a2:	26 81       	ldd	r18, Z+6	; 0x06
    42a4:	37 81       	ldd	r19, Z+7	; 0x07
    42a6:	2f 5f       	subi	r18, 0xFF	; 255
    42a8:	3f 4f       	sbci	r19, 0xFF	; 255
    42aa:	37 83       	std	Z+7, r19	; 0x07
    42ac:	26 83       	std	Z+6, r18	; 0x06
    42ae:	14 c0       	rjmp	.+40     	; 0x42d8 <fputc+0x6e>
    42b0:	8b 01       	movw	r16, r22
    42b2:	ec 01       	movw	r28, r24
    42b4:	fb 01       	movw	r30, r22
    42b6:	00 84       	ldd	r0, Z+8	; 0x08
    42b8:	f1 85       	ldd	r31, Z+9	; 0x09
    42ba:	e0 2d       	mov	r30, r0
    42bc:	09 95       	icall
    42be:	89 2b       	or	r24, r25
    42c0:	e1 f6       	brne	.-72     	; 0x427a <fputc+0x10>
    42c2:	d8 01       	movw	r26, r16
    42c4:	16 96       	adiw	r26, 0x06	; 6
    42c6:	8d 91       	ld	r24, X+
    42c8:	9c 91       	ld	r25, X
    42ca:	17 97       	sbiw	r26, 0x07	; 7
    42cc:	01 96       	adiw	r24, 0x01	; 1
    42ce:	17 96       	adiw	r26, 0x07	; 7
    42d0:	9c 93       	st	X, r25
    42d2:	8e 93       	st	-X, r24
    42d4:	16 97       	sbiw	r26, 0x06	; 6
    42d6:	ce 01       	movw	r24, r28
    42d8:	df 91       	pop	r29
    42da:	cf 91       	pop	r28
    42dc:	1f 91       	pop	r17
    42de:	0f 91       	pop	r16
    42e0:	08 95       	ret

000042e2 <sprintf>:
    42e2:	ae e0       	ldi	r26, 0x0E	; 14
    42e4:	b0 e0       	ldi	r27, 0x00	; 0
    42e6:	e7 e7       	ldi	r30, 0x77	; 119
    42e8:	f1 e2       	ldi	r31, 0x21	; 33
    42ea:	0c 94 ed 1e 	jmp	0x3dda	; 0x3dda <__prologue_saves__+0x1c>
    42ee:	0d 89       	ldd	r16, Y+21	; 0x15
    42f0:	1e 89       	ldd	r17, Y+22	; 0x16
    42f2:	86 e0       	ldi	r24, 0x06	; 6
    42f4:	8c 83       	std	Y+4, r24	; 0x04
    42f6:	1a 83       	std	Y+2, r17	; 0x02
    42f8:	09 83       	std	Y+1, r16	; 0x01
    42fa:	8f ef       	ldi	r24, 0xFF	; 255
    42fc:	9f e7       	ldi	r25, 0x7F	; 127
    42fe:	9e 83       	std	Y+6, r25	; 0x06
    4300:	8d 83       	std	Y+5, r24	; 0x05
    4302:	ae 01       	movw	r20, r28
    4304:	47 5e       	subi	r20, 0xE7	; 231
    4306:	5f 4f       	sbci	r21, 0xFF	; 255
    4308:	6f 89       	ldd	r22, Y+23	; 0x17
    430a:	78 8d       	ldd	r23, Y+24	; 0x18
    430c:	ce 01       	movw	r24, r28
    430e:	01 96       	adiw	r24, 0x01	; 1
    4310:	0e 94 5c 1b 	call	0x36b8	; 0x36b8 <vfprintf>
    4314:	ef 81       	ldd	r30, Y+7	; 0x07
    4316:	f8 85       	ldd	r31, Y+8	; 0x08
    4318:	e0 0f       	add	r30, r16
    431a:	f1 1f       	adc	r31, r17
    431c:	10 82       	st	Z, r1
    431e:	2e 96       	adiw	r28, 0x0e	; 14
    4320:	e4 e0       	ldi	r30, 0x04	; 4
    4322:	0c 94 09 1f 	jmp	0x3e12	; 0x3e12 <__epilogue_restores__+0x1c>

00004326 <__ultoa_invert>:
    4326:	fa 01       	movw	r30, r20
    4328:	aa 27       	eor	r26, r26
    432a:	28 30       	cpi	r18, 0x08	; 8
    432c:	51 f1       	breq	.+84     	; 0x4382 <__ultoa_invert+0x5c>
    432e:	20 31       	cpi	r18, 0x10	; 16
    4330:	81 f1       	breq	.+96     	; 0x4392 <__ultoa_invert+0x6c>
    4332:	e8 94       	clt
    4334:	6f 93       	push	r22
    4336:	6e 7f       	andi	r22, 0xFE	; 254
    4338:	6e 5f       	subi	r22, 0xFE	; 254
    433a:	7f 4f       	sbci	r23, 0xFF	; 255
    433c:	8f 4f       	sbci	r24, 0xFF	; 255
    433e:	9f 4f       	sbci	r25, 0xFF	; 255
    4340:	af 4f       	sbci	r26, 0xFF	; 255
    4342:	b1 e0       	ldi	r27, 0x01	; 1
    4344:	3e d0       	rcall	.+124    	; 0x43c2 <__ultoa_invert+0x9c>
    4346:	b4 e0       	ldi	r27, 0x04	; 4
    4348:	3c d0       	rcall	.+120    	; 0x43c2 <__ultoa_invert+0x9c>
    434a:	67 0f       	add	r22, r23
    434c:	78 1f       	adc	r23, r24
    434e:	89 1f       	adc	r24, r25
    4350:	9a 1f       	adc	r25, r26
    4352:	a1 1d       	adc	r26, r1
    4354:	68 0f       	add	r22, r24
    4356:	79 1f       	adc	r23, r25
    4358:	8a 1f       	adc	r24, r26
    435a:	91 1d       	adc	r25, r1
    435c:	a1 1d       	adc	r26, r1
    435e:	6a 0f       	add	r22, r26
    4360:	71 1d       	adc	r23, r1
    4362:	81 1d       	adc	r24, r1
    4364:	91 1d       	adc	r25, r1
    4366:	a1 1d       	adc	r26, r1
    4368:	20 d0       	rcall	.+64     	; 0x43aa <__ultoa_invert+0x84>
    436a:	09 f4       	brne	.+2      	; 0x436e <__ultoa_invert+0x48>
    436c:	68 94       	set
    436e:	3f 91       	pop	r19
    4370:	2a e0       	ldi	r18, 0x0A	; 10
    4372:	26 9f       	mul	r18, r22
    4374:	11 24       	eor	r1, r1
    4376:	30 19       	sub	r19, r0
    4378:	30 5d       	subi	r19, 0xD0	; 208
    437a:	31 93       	st	Z+, r19
    437c:	de f6       	brtc	.-74     	; 0x4334 <__ultoa_invert+0xe>
    437e:	cf 01       	movw	r24, r30
    4380:	08 95       	ret
    4382:	46 2f       	mov	r20, r22
    4384:	47 70       	andi	r20, 0x07	; 7
    4386:	40 5d       	subi	r20, 0xD0	; 208
    4388:	41 93       	st	Z+, r20
    438a:	b3 e0       	ldi	r27, 0x03	; 3
    438c:	0f d0       	rcall	.+30     	; 0x43ac <__ultoa_invert+0x86>
    438e:	c9 f7       	brne	.-14     	; 0x4382 <__ultoa_invert+0x5c>
    4390:	f6 cf       	rjmp	.-20     	; 0x437e <__ultoa_invert+0x58>
    4392:	46 2f       	mov	r20, r22
    4394:	4f 70       	andi	r20, 0x0F	; 15
    4396:	40 5d       	subi	r20, 0xD0	; 208
    4398:	4a 33       	cpi	r20, 0x3A	; 58
    439a:	18 f0       	brcs	.+6      	; 0x43a2 <__ultoa_invert+0x7c>
    439c:	49 5d       	subi	r20, 0xD9	; 217
    439e:	31 fd       	sbrc	r19, 1
    43a0:	40 52       	subi	r20, 0x20	; 32
    43a2:	41 93       	st	Z+, r20
    43a4:	02 d0       	rcall	.+4      	; 0x43aa <__ultoa_invert+0x84>
    43a6:	a9 f7       	brne	.-22     	; 0x4392 <__ultoa_invert+0x6c>
    43a8:	ea cf       	rjmp	.-44     	; 0x437e <__ultoa_invert+0x58>
    43aa:	b4 e0       	ldi	r27, 0x04	; 4
    43ac:	a6 95       	lsr	r26
    43ae:	97 95       	ror	r25
    43b0:	87 95       	ror	r24
    43b2:	77 95       	ror	r23
    43b4:	67 95       	ror	r22
    43b6:	ba 95       	dec	r27
    43b8:	c9 f7       	brne	.-14     	; 0x43ac <__ultoa_invert+0x86>
    43ba:	00 97       	sbiw	r24, 0x00	; 0
    43bc:	61 05       	cpc	r22, r1
    43be:	71 05       	cpc	r23, r1
    43c0:	08 95       	ret
    43c2:	9b 01       	movw	r18, r22
    43c4:	ac 01       	movw	r20, r24
    43c6:	0a 2e       	mov	r0, r26
    43c8:	06 94       	lsr	r0
    43ca:	57 95       	ror	r21
    43cc:	47 95       	ror	r20
    43ce:	37 95       	ror	r19
    43d0:	27 95       	ror	r18
    43d2:	ba 95       	dec	r27
    43d4:	c9 f7       	brne	.-14     	; 0x43c8 <__ultoa_invert+0xa2>
    43d6:	62 0f       	add	r22, r18
    43d8:	73 1f       	adc	r23, r19
    43da:	84 1f       	adc	r24, r20
    43dc:	95 1f       	adc	r25, r21
    43de:	a0 1d       	adc	r26, r0
    43e0:	08 95       	ret

000043e2 <_exit>:
    43e2:	f8 94       	cli

000043e4 <__stop_program>:
    43e4:	ff cf       	rjmp	.-2      	; 0x43e4 <__stop_program>
